/*! c4p.client 2014-04-30 22:00 */
function rhex(num) {
    for (str = "", j = 0; 3 >= j; j++) str += hex_chr.charAt(num >> 8 * j + 4 & 15) + hex_chr.charAt(num >> 8 * j & 15);
    return str;
}

function str2blks_MD5(str) {
    for (nblk = (str.length + 8 >> 6) + 1, blks = new Array(16 * nblk), i = 0; 16 * nblk > i; i++) blks[i] = 0;
    for (i = 0; i < str.length; i++) blks[i >> 2] |= str.charCodeAt(i) << i % 4 * 8;
    return blks[i >> 2] |= 128 << i % 4 * 8, blks[16 * nblk - 2] = 8 * str.length, blks;
}

function add(x, y) {
    var lsw = (65535 & x) + (65535 & y), msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return msw << 16 | 65535 & lsw;
}

function rol(num, cnt) {
    return num << cnt | num >>> 32 - cnt;
}

function cmn(q, a, b, x, s, t) {
    return add(rol(add(add(a, q), add(x, t)), s), b);
}

function ff(a, b, c, d, x, s, t) {
    return cmn(b & c | ~b & d, a, b, x, s, t);
}

function gg(a, b, c, d, x, s, t) {
    return cmn(b & d | c & ~d, a, b, x, s, t);
}

function hh(a, b, c, d, x, s, t) {
    return cmn(b ^ c ^ d, a, b, x, s, t);
}

function ii(a, b, c, d, x, s, t) {
    return cmn(c ^ (b | ~d), a, b, x, s, t);
}

function calcMD5(str) {
    for (x = str2blks_MD5(str), a = 1732584193, b = -271733879, c = -1732584194, d = 271733878, 
    i = 0; i < x.length; i += 16) olda = a, oldb = b, oldc = c, oldd = d, a = ff(a, b, c, d, x[i + 0], 7, -680876936), 
    d = ff(d, a, b, c, x[i + 1], 12, -389564586), c = ff(c, d, a, b, x[i + 2], 17, 606105819), 
    b = ff(b, c, d, a, x[i + 3], 22, -1044525330), a = ff(a, b, c, d, x[i + 4], 7, -176418897), 
    d = ff(d, a, b, c, x[i + 5], 12, 1200080426), c = ff(c, d, a, b, x[i + 6], 17, -1473231341), 
    b = ff(b, c, d, a, x[i + 7], 22, -45705983), a = ff(a, b, c, d, x[i + 8], 7, 1770035416), 
    d = ff(d, a, b, c, x[i + 9], 12, -1958414417), c = ff(c, d, a, b, x[i + 10], 17, -42063), 
    b = ff(b, c, d, a, x[i + 11], 22, -1990404162), a = ff(a, b, c, d, x[i + 12], 7, 1804603682), 
    d = ff(d, a, b, c, x[i + 13], 12, -40341101), c = ff(c, d, a, b, x[i + 14], 17, -1502002290), 
    b = ff(b, c, d, a, x[i + 15], 22, 1236535329), a = gg(a, b, c, d, x[i + 1], 5, -165796510), 
    d = gg(d, a, b, c, x[i + 6], 9, -1069501632), c = gg(c, d, a, b, x[i + 11], 14, 643717713), 
    b = gg(b, c, d, a, x[i + 0], 20, -373897302), a = gg(a, b, c, d, x[i + 5], 5, -701558691), 
    d = gg(d, a, b, c, x[i + 10], 9, 38016083), c = gg(c, d, a, b, x[i + 15], 14, -660478335), 
    b = gg(b, c, d, a, x[i + 4], 20, -405537848), a = gg(a, b, c, d, x[i + 9], 5, 568446438), 
    d = gg(d, a, b, c, x[i + 14], 9, -1019803690), c = gg(c, d, a, b, x[i + 3], 14, -187363961), 
    b = gg(b, c, d, a, x[i + 8], 20, 1163531501), a = gg(a, b, c, d, x[i + 13], 5, -1444681467), 
    d = gg(d, a, b, c, x[i + 2], 9, -51403784), c = gg(c, d, a, b, x[i + 7], 14, 1735328473), 
    b = gg(b, c, d, a, x[i + 12], 20, -1926607734), a = hh(a, b, c, d, x[i + 5], 4, -378558), 
    d = hh(d, a, b, c, x[i + 8], 11, -2022574463), c = hh(c, d, a, b, x[i + 11], 16, 1839030562), 
    b = hh(b, c, d, a, x[i + 14], 23, -35309556), a = hh(a, b, c, d, x[i + 1], 4, -1530992060), 
    d = hh(d, a, b, c, x[i + 4], 11, 1272893353), c = hh(c, d, a, b, x[i + 7], 16, -155497632), 
    b = hh(b, c, d, a, x[i + 10], 23, -1094730640), a = hh(a, b, c, d, x[i + 13], 4, 681279174), 
    d = hh(d, a, b, c, x[i + 0], 11, -358537222), c = hh(c, d, a, b, x[i + 3], 16, -722521979), 
    b = hh(b, c, d, a, x[i + 6], 23, 76029189), a = hh(a, b, c, d, x[i + 9], 4, -640364487), 
    d = hh(d, a, b, c, x[i + 12], 11, -421815835), c = hh(c, d, a, b, x[i + 15], 16, 530742520), 
    b = hh(b, c, d, a, x[i + 2], 23, -995338651), a = ii(a, b, c, d, x[i + 0], 6, -198630844), 
    d = ii(d, a, b, c, x[i + 7], 10, 1126891415), c = ii(c, d, a, b, x[i + 14], 15, -1416354905), 
    b = ii(b, c, d, a, x[i + 5], 21, -57434055), a = ii(a, b, c, d, x[i + 12], 6, 1700485571), 
    d = ii(d, a, b, c, x[i + 3], 10, -1894986606), c = ii(c, d, a, b, x[i + 10], 15, -1051523), 
    b = ii(b, c, d, a, x[i + 1], 21, -2054922799), a = ii(a, b, c, d, x[i + 8], 6, 1873313359), 
    d = ii(d, a, b, c, x[i + 15], 10, -30611744), c = ii(c, d, a, b, x[i + 6], 15, -1560198380), 
    b = ii(b, c, d, a, x[i + 13], 21, 1309151649), a = ii(a, b, c, d, x[i + 4], 6, -145523070), 
    d = ii(d, a, b, c, x[i + 11], 10, -1120210379), c = ii(c, d, a, b, x[i + 2], 15, 718787259), 
    b = ii(b, c, d, a, x[i + 9], 21, -343485551), a = add(a, olda), b = add(b, oldb), 
    c = add(c, oldc), d = add(d, oldd);
    return rhex(a) + rhex(b) + rhex(c) + rhex(d);
}

function openChildBrowser(url, extension, onLocationChange, onClose) {
    a4p.InternalLog.log("openChildBrowser", url + " extension:" + extension);
    var closeChildBrowserAfterLocationChange = !1;
    if (!window.device) {
        a4p.InternalLog.log("openChildBrowser", "window.open");
        var initialLocation, initialUrl, new_window = window.open(url, "_blank", "menubar=no,scrollbars=yes,resizable=1,height=400,width=600");
        a4p.isDefinedAndNotNull(new_window.location) && (initialLocation = new_window.location.href), 
        a4p.isDefinedAndNotNull(new_window.document) && (initialUrl = new_window.document.URL), 
        a4p.InternalLog.log("openChildBrowser", "initialLocation=" + initialLocation + " initialUrl=" + initialUrl);
        var locationChanged = !1, new_window_tracker = function() {
            if (a4p.isDefinedAndNotNull(new_window.location) && "string" == typeof new_window.location.href || a4p.isDefinedAndNotNull(new_window.document) && "string" == typeof new_window.document.URL, 
            locationChanged) {
                if (a4p.isDefinedAndNotNull(new_window.location) && "string" == typeof new_window.location.href && new_window.location.href.indexOf("about:blank") >= 0) return a4p.InternalLog.log("openChildBrowser", "onLocationChange"), 
                onLocationChange && onLocationChange(), closeChildBrowserAfterLocationChange = !0, 
                void new_window.close();
                if (a4p.isDefinedAndNotNull(new_window.document) && "string" == typeof new_window.document.URL && new_window.document.URL.indexOf("about:blank") >= 0) return a4p.InternalLog.log("openChildBrowser", "onUrlChange"), 
                onLocationChange && onLocationChange(), closeChildBrowserAfterLocationChange = !0, 
                void new_window.close();
            } else {
                if (a4p.isDefinedAndNotNull(new_window.location) && "string" == typeof new_window.location.href && initialLocation != new_window.location.href) return a4p.InternalLog.log("openChildBrowser", "new location=" + new_window.location.href), 
                locationChanged = !0, void setTimeout(new_window_tracker, 100);
                if (a4p.isDefinedAndNotNull(new_window.document) && "string" == typeof new_window.document.URL && initialUrl != new_window.document.URL) return a4p.InternalLog.log("openChildBrowser", "new url=" + new_window.document.URL), 
                locationChanged = !0, void setTimeout(new_window_tracker, 100);
            }
            return new_window.closed ? (a4p.InternalLog.log("openChildBrowser", "onClose"), 
            void (closeChildBrowserAfterLocationChange || onClose && onClose())) : void setTimeout(new_window_tracker, 100);
        };
        return void setTimeout(new_window_tracker, 100);
    }
    if (window.device) {
        a4p.InternalLog.log("openChildBrowser", "cordova : window.open");
        var ref = window.open(url, "_blank", "location=yes");
        ref.addEventListener("loadstart", function(e) {
            a4p.InternalLog.log("openChildBrowser", "loadstart " + e.url);
        }), ref.addEventListener("loadstop", function(e) {
            a4p.InternalLog.log("openChildBrowser", "loadstop " + e.url), "string" == typeof e.url && e.url.indexOf("about:blank") >= 0 && (closeChildBrowserAfterLocationChange = !0, 
            onLocationChange && onLocationChange(), ref.close());
        }), ref.addEventListener("loaderror", function(e) {
            a4p.InternalLog.log("openChildBrowser", "loaderror " + e.url);
        }), ref.addEventListener("exit", function(e) {
            a4p.InternalLog.log("openChildBrowser", "exit " + e.url), closeChildBrowserAfterLocationChange || onClose && onClose();
        });
    }
}

function closeWindow() {
    window.close();
}

function isArray(obj) {
    return obj instanceof Array ? !0 : "object" != typeof obj ? !1 : a4p.isUndefined(obj) || null === obj ? !1 : "[object Array]" === Object.prototype.toString.call(obj) ? !0 : !1;
}

function updateImage(source, img) {
    return source.src = img && "/." != img ? img : "./img/broken.png", source.onerror = "", 
    !0;
}

function ImgError() {
    return setTimeout("updateImage(source,img)", 1e4), !1;
}

function getErrorObject() {
    try {
        throw Error("");
    } catch (err) {
        return err;
    }
}

function a4pExportJson(input, maxDepth) {
    var key, type, str = "{\n", first = !0;
    for (key in input) input.hasOwnProperty(key) && ("Contact" == key || "Attendee" == key || "Account" == key || "Opportunity" == key || "Event" == key || "Document" == key) && (type = key, 
    first ? first = !1 : str += ",\n", str += '	"' + key + '":[\n', "object" == typeof input[key] && maxDepth > 0 && (str += a4pExportJsonObject("		", input[key], maxDepth - 1, type)), 
    str += "	]");
    return str += "\n}\n";
}

function a4pExportJsonObject(offset, input, maxDepth, type) {
    var key, str = "", first = !0;
    for (key in input) input.hasOwnProperty(key) && (first ? first = !1 : str += ",\n", 
    "object" == typeof input[key] ? maxDepth > 0 && (str += 2 == maxDepth ? offset + "{\n" : offset + '"' + key + '":{', 
    str += a4pExportJsonObject(offset + "	", input[key], maxDepth - 1, type), str += 2 == maxDepth ? offset + "}" : "}") : ("string" == typeof input[key] && (input[key] = input[key].replace(/\r/gi, " ").replace(/\n/gi, " ")), 
    str += 0 == maxDepth ? '"' + key + '":"' + input[key] + '"' : offset + '"' + key + '":"' + input[key] + '"'));
    return 1 == maxDepth && "Document" == type && (str += ",\n" + offset + '"url":"img/samples/docs/' + input.name + '"'), 
    0 != maxDepth && (str += "\n"), str;
}

function logEvent(e) {
    var online, status, type, message, bCon = checkConnection();
    online = bCon ? "yes" : "no", status = cacheStatusValues[cache.status], type = e.type, 
    message = "CACHE online: " + online, message += ", event: " + type, message += ", status: " + status, 
    "error" == type && bCon && (message += " (prolly a syntax error in manifest)"), 
    a4p.InternalLog.log(message);
}

function checkCache() {
    cache && (cacheStatusValues[0] = "uncached", cacheStatusValues[1] = "idle", cacheStatusValues[2] = "checking", 
    cacheStatusValues[3] = "downloading", cacheStatusValues[4] = "updateready", cacheStatusValues[5] = "obsolete", 
    cache.addEventListener("cached", logEvent, !1), cache.addEventListener("checking", logEvent, !1), 
    cache.addEventListener("downloading", logEvent, !1), cache.addEventListener("error", logEvent, !1), 
    cache.addEventListener("noupdate", logEvent, !1), cache.addEventListener("obsolete", logEvent, !1), 
    cache.addEventListener("progress", logEvent, !1), cache.addEventListener("updateready", logEvent, !1));
}

function checkConnection() {
    var bCon = !1;
    if (a4p.InternalLog.log("checkConnection", "launched"), navigator.connection && navigator.connection.type) {
        var networkState = navigator.connection.type, states = {};
        states[Connection.UNKNOWN] = "Unknown connection", states[Connection.ETHERNET] = "Ethernet connection", 
        states[Connection.WIFI] = "WiFi connection", states[Connection.CELL_2G] = "Cell 2G connection", 
        states[Connection.CELL_3G] = "Cell 3G connection", states[Connection.CELL_4G] = "Cell 4G connection", 
        states[Connection.CELL] = "Cell generic connection", states[Connection.NONE] = "No network connection", 
        a4p.InternalLog.log("checkConnection", "Cordova Connection type: " + states[networkState]), 
        bCon = networkState != Connection.NONE;
    } else a4p.BrowserCapabilities && a4p.BrowserCapabilities.online ? bCon = !0 : a4p.BrowserCapabilities || (bCon = navigator.onLine), 
    a4p.InternalLog.log("checkConnection", "without Cordova but online ? " + bCon);
    return bCon;
}

function getUrlVars(ihref) {
    var href = ihref;
    (a4p.isUndefined(href) || !href) && (href = window.location.href), a4p.InternalLog.log("getUrlVars", "href:" + href);
    for (var hash, vars = [], hashes = href.slice(href.indexOf("#") + 1).split("&"), i = 0; i < hashes.length; i++) hash = hashes[i].split("="), 
    vars.push(hash[0]), vars[hash[0]] = hash[1];
    return vars;
}

function SHA256(s) {
    function safe_add(x, y) {
        var lsw = (65535 & x) + (65535 & y), msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return msw << 16 | 65535 & lsw;
    }
    function S(X, n) {
        return X >>> n | X << 32 - n;
    }
    function R(X, n) {
        return X >>> n;
    }
    function Ch(x, y, z) {
        return x & y ^ ~x & z;
    }
    function Maj(x, y, z) {
        return x & y ^ x & z ^ y & z;
    }
    function Sigma0256(x) {
        return S(x, 2) ^ S(x, 13) ^ S(x, 22);
    }
    function Sigma1256(x) {
        return S(x, 6) ^ S(x, 11) ^ S(x, 25);
    }
    function Gamma0256(x) {
        return S(x, 7) ^ S(x, 18) ^ R(x, 3);
    }
    function Gamma1256(x) {
        return S(x, 17) ^ S(x, 19) ^ R(x, 10);
    }
    function core_sha256(m, l) {
        var a, b, c, d, e, f, g, h, i, j, T1, T2, K = new Array(1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298), HASH = new Array(1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225), W = new Array(64);
        m[l >> 5] |= 128 << 24 - l % 32, m[(l + 64 >> 9 << 4) + 15] = l;
        for (var i = 0; i < m.length; i += 16) {
            a = HASH[0], b = HASH[1], c = HASH[2], d = HASH[3], e = HASH[4], f = HASH[5], g = HASH[6], 
            h = HASH[7];
            for (var j = 0; 64 > j; j++) W[j] = 16 > j ? m[j + i] : safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]), 
            T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]), 
            T2 = safe_add(Sigma0256(a), Maj(a, b, c)), h = g, g = f, f = e, e = safe_add(d, T1), 
            d = c, c = b, b = a, a = safe_add(T1, T2);
            HASH[0] = safe_add(a, HASH[0]), HASH[1] = safe_add(b, HASH[1]), HASH[2] = safe_add(c, HASH[2]), 
            HASH[3] = safe_add(d, HASH[3]), HASH[4] = safe_add(e, HASH[4]), HASH[5] = safe_add(f, HASH[5]), 
            HASH[6] = safe_add(g, HASH[6]), HASH[7] = safe_add(h, HASH[7]);
        }
        return HASH;
    }
    function str2binb(str) {
        for (var bin = Array(), mask = (1 << chrsz) - 1, i = 0; i < str.length * chrsz; i += chrsz) bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << 24 - i % 32;
        return bin;
    }
    function Utf8Encode(string) {
        if (0 === string.length) return string;
        string = string.replace(/\r\n/g, "\n");
        for (var utftext = "", n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);
            128 > c ? utftext += String.fromCharCode(c) : c > 127 && 2048 > c ? (utftext += String.fromCharCode(192 | c >> 6), 
            utftext += String.fromCharCode(128 | 63 & c)) : (utftext += String.fromCharCode(224 | c >> 12), 
            utftext += String.fromCharCode(128 | 63 & c >> 6), utftext += String.fromCharCode(128 | 63 & c));
        }
        return utftext;
    }
    function binb2hex(binarray) {
        for (var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef", str = "", i = 0; i < 4 * binarray.length; i++) str += hex_tab.charAt(15 & binarray[i >> 2] >> 8 * (3 - i % 4) + 4) + hex_tab.charAt(15 & binarray[i >> 2] >> 8 * (3 - i % 4));
        return str;
    }
    if (0 === s.length) return "";
    var chrsz = 8, hexcase = 0;
    return s = Utf8Encode(s), binb2hex(core_sha256(str2binb(s), s.length * chrsz));
}

function successHandler(data) {
    a4p.InternalLog.log("Analytics", "initialization success : " + data);
}

function errorHandler(data) {
    a4p.InternalLog.log("Analytics", "initialization pb : " + data);
}

function removeObjectFromList(list, dbid) {
    return removeSubKeyFromList(list, "id", "dbid", dbid);
}

function replaceObjectFromList(list, dbid, object) {
    return replaceSubKeyFromList(list, "id", "dbid", dbid, object);
}

function addObjectToList(list, object) {
    return addSubKeyToList(list, "id", "dbid", object);
}

function getObjectFromList(list, dbid) {
    return getSubKeyFromList(list, "id", "dbid", dbid);
}

function removeLinkFromList(list, dbid) {
    return removeKeyFromList(list, "dbid", dbid);
}

function replaceLinkFromList(list, dbid, object) {
    return replaceKeyFromList(list, "dbid", dbid, object);
}

function addLinkToList(list, object) {
    return addKeyToList(list, "dbid", object);
}

function getLinkFromList(list, dbid) {
    return getKeyFromList(list, "dbid", dbid);
}

function removeIdFromList(list, id) {
    return removeKeyFromList(list, "id", id);
}

function replaceIdFromList(list, id, object) {
    return replaceKeyFromList(list, "id", id, object);
}

function addIdToList(list, object) {
    return addKeyToList(list, "id", object);
}

function getIdFromList(list, id) {
    return getKeyFromList(list, "id", id);
}

function removeKeyFromList(list, key, value) {
    for (var i = list.length - 1; i >= 0; i--) if (list[i][key] == value) return list.splice(i, 1);
    return !1;
}

function replaceKeyFromList(list, key, value, object) {
    for (var i = list.length - 1; i >= 0; i--) if (list[i][key] == value) return list.splice(i, 1, object);
    return !1;
}

function addKeyToList(list, key, object) {
    for (var i = list.length - 1; i >= 0; i--) if (list[i][key] == object[key]) return !1;
    return list.push(object), !0;
}

function getKeyFromList(list, key, value) {
    for (var i = list.length - 1; i >= 0; i--) if (list[i][key] == value) return list[i];
    return !1;
}

function removeSubKeyFromList(list, sub, key, value) {
    for (var i = list.length - 1; i >= 0; i--) if (a4p.isDefined(list[i][sub]) && list[i][sub][key] == value) return list.splice(i, 1);
    return !1;
}

function replaceSubKeyFromList(list, sub, key, value, object) {
    for (var i = list.length - 1; i >= 0; i--) if (a4p.isDefined(list[i][sub]) && list[i][sub][key] == value) return list.splice(i, 1, object);
    return !1;
}

function addSubKeyToList(list, sub, key, object) {
    for (var i = list.length - 1; i >= 0; i--) if (a4p.isDefined(list[i][sub]) && list[i][sub][key] == object[sub][key]) return !1;
    return list.push(object), !0;
}

function getSubKeyFromList(list, sub, key, value) {
    for (var i = list.length - 1; i >= 0; i--) if (a4p.isDefined(list[i][sub]) && list[i][sub][key] == value) return list[i];
    return !1;
}

function removeValueFromList(list, value) {
    for (var i = list.length - 1; i >= 0; i--) if (list[i] == value) return list.splice(i, 1);
    return !1;
}

function replaceValueFromList(list, oldValue, newValue) {
    for (var i = list.length - 1; i >= 0; i--) if (list[i] == oldValue) return list.splice(i, 1, newValue);
    return !1;
}

function addValueToList(list, value) {
    for (var i = list.length - 1; i >= 0; i--) if (list[i] == value) return !1;
    return list.push(value), !0;
}

function isValueInList(list, value) {
    for (var i = list.length - 1; i >= 0; i--) if (list[i] == value) return !0;
    return !1;
}

function Bridge() {}

function normalizedPath(dirPath, fileName, fileExtension) {
    var filePath = dirPath;
    return filePath = "/" == filePath.charAt(filePath.length - 1) ? "/" == fileName.charAt(0) ? filePath.substring(0, filePath.length - 1) + fileName + "." + fileExtension : filePath + fileName + "." + fileExtension : "/" == fileName.charAt(0) ? filePath + fileName + "." + fileExtension : filePath + "/" + fileName + "." + fileExtension;
}

function sanitizeFilename(name, addTimeStamp) {
    a4p.InternalLog.log("a4p.file", "sanitizeFilename " + name);
    var filename = name.replace(/[^a-z0-9]/gi, "_").toLowerCase();
    if (1 == addTimeStamp) {
        var timestamp = a4pDateCompactFormat(new Date());
        filename = filename + "_" + timestamp;
    }
    return a4p.InternalLog.log("a4p.file", "sanitizeFilename end : " + filename), filename;
}

function transferErrorMessage(fileTransferError) {
    var msg = "";
    switch (fileTransferError.code) {
      case FileTransferError.FILE_NOT_FOUND_ERR:
        msg = "File not found";
        break;

      case FileTransferError.CONNECTION_ERR:
        msg = "Connection error";
        break;

      case FileTransferError.INVALID_URL_ERR:
        msg = "Invalid URL error";
        break;

      default:
        msg = "Unknown FileTransferError code (code= " + fileTransferError.code + ", type=" + typeof fileTransferError + ")";
    }
    return msg;
}

function showFileInFS(fileRelPath, fileName, fileExtension) {
    a4p.InternalLog.log("showFileInFS", fileRelPath + "  Name:" + fileName + "  Extension:" + fileExtension);
    try {
        var localPath = gFileSystem.root.fullPath;
        "Android" === device.platform && 0 === localPath.indexOf("file://") && (localPath = localPath.substring(7));
        var fullPath = localPath + fileRelPath + fileName;
        a4p.InternalLog.log("showFileInFS", "get file : " + fullPath), openChildBrowser(fullPath, fileExtension);
    } catch (e) {
        fileErrorHandler(e);
    }
}

function getFileSystem(success, arg1, arg2, arg3) {
    if (gFileSystem) return a4p.InternalLog.log("getFileSystem", "allready did : launch"), 
    success(arg1, arg2, arg3);
    if (window.requestFileSystem) try {
        a4p.InternalLog.log("getFileSystem", "window.requestFileSystem"), window.requestFileSystem(LocalFileSystem.PERSISTENT, 10485760, function(fs) {
            return a4p.InternalLog.log("getFileSystem", "get FileSystem"), gFileSystem = fs, 
            success(arg1, arg2, arg3);
        }, fileErrorHandler);
    } catch (e) {
        fileErrorHandler(e);
    } else a4p.InternalLog.log("getFileSystem", "Impossible to use file, No FileSystem !");
}

function a4pDumpData(input, maxDepth) {
    var str = "";
    return "object" == typeof input ? input instanceof Array ? maxDepth > 0 ? (str += "[\n", 
    str += a4pDumpArray("  ", input, maxDepth - 1), str += "]\n") : str += "[Array]\n" : maxDepth > 0 ? (str += "{\n", 
    str += a4pDumpObject("  ", input, maxDepth - 1), str += "}\n") : str += "[" + typeof input + "]\n" : str += input + "\n", 
    str;
}

function a4pDumpArray(offset, input, maxDepth) {
    for (var str = "", key = 0, nb = input.length; nb > key; key++) "object" == typeof input[key] ? input[key] instanceof Array ? maxDepth > 0 ? (str += offset + key + " : [\n", 
    str += a4pDumpArray(offset + "  ", input[key], maxDepth - 1), str += offset + "]\n") : str += offset + key + " : [Array]\n" : maxDepth > 0 ? (str += offset + key + " : {\n", 
    str += a4pDumpObject(offset + "  ", input[key], maxDepth - 1), str += offset + "}\n") : str += offset + key + " : [" + typeof input[key] + "]\n" : str += offset + key + " : " + input[key] + "\n";
    return str;
}

function a4pDumpObject(offset, input, maxDepth) {
    var key, str = "";
    for (key in input) input.hasOwnProperty(key) && ("object" == typeof input[key] ? input[key] instanceof Array ? maxDepth > 0 ? (str += offset + key + " : [\n", 
    str += a4pDumpArray(offset + "  ", input[key], maxDepth - 1), str += offset + "]\n") : str += offset + key + " : [Array]\n" : maxDepth > 0 ? (str += offset + key + " : {\n", 
    str += a4pDumpObject(offset + "  ", input[key], maxDepth - 1), str += offset + "}\n") : str += offset + key + " : [" + typeof input[key] + "]\n" : str += offset + key + " : " + input[key] + "\n");
    return str;
}

function a4pTimestampFormat(timestamp) {
    var date = new Date(timestamp);
    return a4pPadNumber(date.getFullYear(), 4) + "-" + a4pPadNumber(date.getMonth() + 1, 2) + "-" + a4pPadNumber(date.getDate(), 2) + " " + a4pPadNumber(date.getHours(), 2) + ":" + a4pPadNumber(date.getMinutes(), 2) + ":" + a4pPadNumber(date.getSeconds(), 2);
}

function a4pDateFormat(date) {
    return date ? a4pPadNumber(date.getFullYear(), 4) + "-" + a4pPadNumber(date.getMonth() + 1, 2) + "-" + a4pPadNumber(date.getDate(), 2) + " " + a4pPadNumber(date.getHours(), 2) + ":" + a4pPadNumber(date.getMinutes(), 2) + ":" + a4pPadNumber(date.getSeconds(), 2) : "";
}

function a4pDateCompactFormat(date) {
    return date ? a4pPadNumber(date.getFullYear(), 2) + a4pPadNumber(date.getMonth() + 1, 2) + a4pPadNumber(date.getDate(), 2) + "_" + a4pPadNumber(date.getHours(), 2) + a4pPadNumber(date.getMinutes(), 2) + a4pPadNumber(date.getSeconds(), 2) : "";
}

function a4pTimestampParse(date) {
    var newDate = a4pDateParse(date);
    return newDate !== !1 ? newDate.getTime() : 0;
}

function a4pDateParse(date) {
    if (!date || "string" != typeof date || "" == date) return !1;
    var yearS = parseInt(date.substr(0, 4), 10) || 0, monthS = parseInt(date.substr(5, 2), 10) || 0, dayS = parseInt(date.substr(8, 2), 10) || 0, hourS = parseInt(date.substr(11, 2), 10) || 0, minuteS = parseInt(date.substr(14, 2), 10) || 0, secS = parseInt(date.substr(17, 2), 10) || 0, newDate = new Date(yearS, monthS - 1, dayS, hourS, minuteS, secS, 0);
    return newDate.getFullYear() !== yearS || newDate.getMonth() !== monthS - 1 || newDate.getDate() !== dayS ? !1 : newDate;
}

function a4pDateFormatObject(object) {
    var yearS = "1970", monthS = "01", dayS = "01", hourS = "00", minuteS = "00", secondS = "00";
    if ("[object Date]" === Object.prototype.toString.call(object)) isNaN(object.getTime()) || (yearS = "" + object.getFullYear(), 
    monthS = "" + (object.getMonth() + 1), dayS = "" + object.getDate(), hourS = "" + object.getHours(), 
    minuteS = "" + object.getMinutes(), secondS = "" + object.getSeconds()); else if ("string" == typeof object) {
        var dateReg = new RegExp("([0-9][0-9][0-9][0-9])-([0-9]\\d)-([0-9]\\d)+", "g"), dateParts = object.split(dateReg);
        yearS = dateParts[1] || "0", monthS = dateParts[2] || "0", dayS = dateParts[3] || "0";
        var timeReg = new RegExp("([01]\\d|2[0-9]):([0-5]\\d):([0-5]\\d)"), timeParts = object.match(timeReg);
        null != timeParts ? (hourS = timeParts[1] || "00", minuteS = timeParts[2] || "00", 
        secondS = timeParts[3] || "00") : (hourS = "00", minuteS = "00", secondS = "00");
    }
    for (;yearS.length < 4; ) yearS = "0" + yearS;
    for (;monthS.length < 2; ) monthS = "0" + monthS;
    for (;dayS.length < 2; ) dayS = "0" + dayS;
    for (;hourS.length < 2; ) hourS = "0" + hourS;
    for (;minuteS.length < 2; ) minuteS = "0" + minuteS;
    for (;secondS.length < 2; ) secondS = "0" + secondS;
    var newDate = yearS + "-" + monthS + "-" + dayS + " " + hourS + ":" + minuteS + ":" + secondS;
    return newDate;
}

function a4pDateExtractDate(dateString) {
    for (var dateReg = new RegExp("([0-9][0-9][0-9][0-9])-([0-9]\\d)-([0-9]\\d)+", "g"), dateParts = dateString.split(dateReg), yearS = dateParts[1] || "0", monthS = dateParts[2] || "0", dayS = dateParts[3] || "0"; yearS.length < 4; ) yearS = "0" + yearS;
    for (;monthS.length < 2; ) monthS = "0" + monthS;
    for (;dayS.length < 2; ) dayS = "0" + dayS;
    return "" + yearS + "-" + monthS + "-" + dayS;
}

function a4pDateExtractTime(dateString) {
    var timeReg = new RegExp("([01]\\d|2[0-9]):([0-5]\\d):([0-5]\\d)"), timeParts = dateString.match(timeReg), hourS = "00", minuteS = "00", secondS = "00";
    for (null != timeParts ? (hourS = timeParts[1] || "00", minuteS = timeParts[2] || "00", 
    secondS = timeParts[3] || "00") : (hourS = "00", minuteS = "00", secondS = "00"); hourS.length < 2; ) hourS = "0" + hourS;
    for (;minuteS.length < 2; ) minuteS = "0" + minuteS;
    for (;secondS.length < 2; ) secondS = "0" + secondS;
    return "" + hourS + ":" + minuteS + ":" + secondS;
}

function a4pPadNumber(num, digits, trim) {
    var neg = "";
    for (0 > num && (neg = "-", num = -num), num = "" + num; num.length < digits; ) num = "0" + num;
    return trim && num.length > digits && (num = num.substr(num.length - digits)), neg + num;
}

function strCompare(str1, str2) {
    for (var lg1 = str1.length, lg2 = str2.length, nb = lg2 > lg1 ? lg1 : lg2, i = 0; nb > i; i++) {
        var c1 = str1.charCodeAt(i), c2 = str2.charCodeAt(i);
        if (c2 > c1) return -1;
        if (c1 > c2) return 1;
    }
    return lg2 > lg1 ? -1 : lg1 > lg2 ? 1 : 0;
}

function a4pFormat(input) {
    if (a4p.isUndefined(input) || !input) return a4p.ErrorLog.log("a4pFormat", "invalid string " + input), 
    "";
    for (var formatted = input, max = arguments.length, i = 1; max > i; i++) {
        var regexp = new RegExp("\\{" + (i - 1) + "\\}", "gi");
        formatted = formatted.replace(regexp, arguments[i]);
    }
    return formatted;
}

function a4pFirstDayOfMonth(year, month) {
    return new Date(year, month - 1, 1, 0, 0, 0, 0);
}

function a4pLastDayOfMonth(year, month) {
    return new Date(year, month, 0, 0, 0, 0, 0);
}

function a4pDayOfSameWeek(date, dayOfWeek) {
    return new Date(date.getFullYear(), date.getMonth(), date.getDate() + dayOfWeek - (date.getDay() || 7), 0, 0, 0, 0);
}

function a4pWeek(date) {
    var thursday = a4pDayOfSameWeek(date, 4), fourthJanuary = new Date(thursday.getFullYear(), 0, 4, 0, 0, 0, 0), thursdayOfWeek1 = a4pDayOfSameWeek(fourthJanuary, 4), nbDays = Math.round((thursday.getTime() - thursdayOfWeek1.getTime()) / 864e5);
    return 1 + Math.floor(nbDays / 7);
}

function noty(options) {
    return jQuery.noty(options);
}

function getEmbedScriptPath(e) {
    for (var t = document.getElementsByTagName("script"), n = "", r = "", i = 0; i < t.length; i++) t[i].src.match(e) && (n = t[i].src);
    return "" != n && (r = "/"), n.split("?")[0].split("/").slice(0, -1).join("/") + r;
}

function createStoryJS(e, t) {
    function g() {
        LoadLib.js(h.js, y);
    }
    function y() {
        l.js = !0, "en" != h.lang ? LazyLoad.js(c.locale, b) : l.language = !0, x();
    }
    function b() {
        l.language = !0, x();
    }
    function w() {
        l.css = !0, x();
    }
    function E() {
        l.font.css = !0, x();
    }
    function S() {
        l.font.js = !0, x();
    }
    function x() {
        l.checks > 40 || (l.checks++, l.js && l.css && l.font.css && l.font.js && l.language ? l.finished || (l.finished = !0, 
        N()) : l.timeout = setTimeout("onloaded_check_again();", 250));
    }
    function T() {
        var e = "storyjs-embed";
        r = document.createElement("div"), i = document.getElementById("" != h.embed_id ? h.embed_id : "timeline-embed"), 
        i.appendChild(r), r.setAttribute("id", h.id), h.width.toString().match("%") ? i.style.width = h.width.split("%")[0] + "%" : (h.width = h.width - 2, 
        i.style.width = h.width + "px"), h.height.toString().match("%") ? (i.style.height = h.height, 
        e += " full-embed", i.style.height = h.height.split("%")[0] + "%") : h.width.toString().match("%") ? (e += " full-embed", 
        h.height = h.height - 16, i.style.height = h.height + "px") : (e += " sized-embed", 
        h.height = h.height - 16, i.style.height = h.height + "px"), i.setAttribute("class", e), 
        i.setAttribute("className", e), r.style.position = "relative";
    }
    function N() {
        VMM.debug = h.debug, n = new VMM.Timeline(h.id), n.init(h), o && VMM.bindEvent(global, onHeadline, "HEADLINE");
    }
    var n, r, i, s, o = !1, u = "2.17", a = "1.7.1", f = "", l = {
        timeout: "",
        checks: 0,
        finished: !1,
        js: !1,
        css: !1,
        jquery: !1,
        has_jquery: !1,
        language: !1,
        font: {
            css: !1,
            js: !1
        }
    }, c = {
        base: embed_path,
        css: embed_path + "css/",
        js: embed_path + "js/",
        locale: embed_path + "js/locale/",
        jquery: "http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js",
        font: {
            google: !1,
            css: embed_path + "css/themes/font/",
            js: "http://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js"
        }
    }, h = {
        version: u,
        debug: !1,
        type: "timeline",
        id: "storyjs",
        embed_id: "timeline-embed",
        embed: !0,
        width: "100%",
        height: "100%",
        source: "https://docs.google.com/spreadsheet/pub?key=0Agl_Dv6iEbDadFYzRjJPUGktY0NkWXFUWkVIZDNGRHc&output=html",
        lang: "en",
        font: "default",
        css: c.css + "timeline.css?" + u,
        js: "",
        api_keys: {
            google: "",
            flickr: "",
            twitter: ""
        },
        gmap_key: ""
    }, p = [ {
        name: "Merriweather-NewsCycle",
        google: [ "News+Cycle:400,700:latin", "Merriweather:400,700,900:latin" ]
    }, {
        name: "NewsCycle-Merriweather",
        google: [ "News+Cycle:400,700:latin", "Merriweather:300,400,700:latin" ]
    }, {
        name: "PoiretOne-Molengo",
        google: [ "Poiret+One::latin", "Molengo::latin" ]
    }, {
        name: "Arvo-PTSans",
        google: [ "Arvo:400,700,400italic:latin", "PT+Sans:400,700,400italic:latin" ]
    }, {
        name: "PTSerif-PTSans",
        google: [ "PT+Sans:400,700,400italic:latin", "PT+Serif:400,700,400italic:latin" ]
    }, {
        name: "PT",
        google: [ "PT+Sans+Narrow:400,700:latin", "PT+Sans:400,700,400italic:latin", "PT+Serif:400,700,400italic:latin" ]
    }, {
        name: "DroidSerif-DroidSans",
        google: [ "Droid+Sans:400,700:latin", "Droid+Serif:400,700,400italic:latin" ]
    }, {
        name: "Lekton-Molengo",
        google: [ "Lekton:400,700,400italic:latin", "Molengo::latin" ]
    }, {
        name: "NixieOne-Ledger",
        google: [ "Nixie+One::latin", "Ledger::latin" ]
    }, {
        name: "AbrilFatface-Average",
        google: [ "Average::latin", "Abril+Fatface::latin" ]
    }, {
        name: "PlayfairDisplay-Muli",
        google: [ "Playfair+Display:400,400italic:latin", "Muli:300,400,300italic,400italic:latin" ]
    }, {
        name: "Rancho-Gudea",
        google: [ "Rancho::latin", "Gudea:400,700,400italic:latin" ]
    }, {
        name: "Bevan-PotanoSans",
        google: [ "Bevan::latin", "Pontano+Sans::latin" ]
    }, {
        name: "BreeSerif-OpenSans",
        google: [ "Bree+Serif::latin", "Open+Sans:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800:latin" ]
    }, {
        name: "SansitaOne-Kameron",
        google: [ "Sansita+One::latin", "Kameron:400,700:latin" ]
    }, {
        name: "Lora-Istok",
        google: [ "Lora:400,700,400italic,700italic:latin", "Istok+Web:400,700,400italic,700italic:latin" ]
    }, {
        name: "Pacifico-Arimo",
        google: [ "Pacifico::latin", "Arimo:400,700,400italic,700italic:latin" ]
    } ];
    if ("object" == typeof e) for (s in e) Object.prototype.hasOwnProperty.call(e, s) && (h[s] = e[s]);
    if ("undefined" != typeof t && (h.source = t), "object" == typeof url_config && (o = !0, 
    h.source.match("docs.google.com") || h.source.match("json") || h.source.match("storify") || (h.source = "https://docs.google.com/spreadsheet/pub?key=" + h.source + "&output=html")), 
    h.js.match("locale") && (h.lang = h.js.split("locale/")[1].replace(".js", ""), h.js = c.js + "timeline-min.js?" + u), 
    h.js.match("/") || (h.css = c.css + h.type + ".css?" + u, h.js = c.js + h.type, 
    h.js += h.debug ? ".js?" + u : "-min.js?" + u, h.id = "storyjs-" + h.type), c.locale = h.lang.match("/") ? h.lang : c.locale + h.lang + ".js?" + u, 
    T(), LoadLib.css(h.css, w), "default" == h.font) l.font.js = !0, l.font.css = !0; else {
        var d;
        h.font.match("/") ? (d = h.font.split(".css")[0].split("/"), c.font.name = d[d.length - 1], 
        c.font.css = h.font) : (c.font.name = h.font, c.font.css = c.font.css + h.font + ".css?" + u), 
        LoadLib.css(c.font.css, E);
        for (var v = 0; v < p.length; v++) c.font.name == p[v].name && (c.font.google = !0, 
        WebFontConfig = {
            google: {
                families: p[v].google
            }
        });
        c.font.google ? LoadLib.js(c.font.js, S) : l.font.js = !0;
    }
    try {
        if (l.has_jquery = jQuery, l.has_jquery = !0, l.has_jquery) {
            var f = parseFloat(jQuery.fn.jquery);
            l.jquery = f < parseFloat(a) ? !1 : !0;
        }
    } catch (m) {
        l.jquery = !1;
    }
    l.jquery ? g() : LoadLib.js(c.jquery, g), this.onloaded_check_again = function() {
        x();
    };
}

function a4pInitCacheErrorCounterClear() {
    a4p.appCacheErrorFlag = !1, a4p.appCacheErrorCounter = 0, window.localStorage.setItem("AppCacheErrorCounter", a4p.appCacheErrorCounter);
}

function a4pInitCacheErrorCounterIncr() {
    a4p.appCacheErrorFlag = !0, a4p.appCacheErrorCounter++, window.localStorage.setItem("AppCacheErrorCounter", a4p.appCacheErrorCounter);
}

function a4pInitCacheReloadCounterClear() {
    a4p.appCacheReloadCounter = 0, window.localStorage.setItem("AppCacheReloadCounter", a4p.appCacheReloadCounter);
}

function a4pInitCacheReloadCounterIncr() {
    a4p.appCacheReloadCounter++, window.localStorage.setItem("AppCacheReloadCounter", a4p.appCacheReloadCounter);
}

function a4pInitCache() {
    a4p.initCache || (a4p.initCacheTimer && (clearTimeout(a4p.initCacheTimer), a4p.initCacheTimer = null), 
    a4p.initCache = !0, a4pInitCacheErrorCounterClear(), a4pInitCacheReloadCounterClear());
}

function traceCacheEvents() {
    function logEvent(e) {
        var online, status, type, message, appCache = window.applicationCache;
        online = navigator.onLine ? "yes" : "no", status = cacheStatusValues[appCache.status], 
        type = e.type, message = "Cache event : online: " + online, message += ", event: " + type, 
        message += ", status: " + status, "error" == type && navigator.onLine && (message += " There was an unknown error, check your Cache Manifest."), 
        a4p.InternalLog.log("appcache", message);
    }
    var cacheStatusValues = [];
    cacheStatusValues[0] = "uncached", cacheStatusValues[1] = "idle", cacheStatusValues[2] = "checking", 
    cacheStatusValues[3] = "downloading", cacheStatusValues[4] = "updateready", cacheStatusValues[5] = "obsolete", 
    appCache.addEventListener("cached", logEvent, !1), appCache.addEventListener("checking", logEvent, !1), 
    appCache.addEventListener("downloading", logEvent, !1), appCache.addEventListener("error", logEvent, !1), 
    appCache.addEventListener("noupdate", logEvent, !1), appCache.addEventListener("obsolete", logEvent, !1), 
    appCache.addEventListener("progress", logEvent, !1), appCache.addEventListener("updateready", logEvent, !1);
}

function ctrlAction($scope, $q, $modal, srvData, srvNav, srvFacet, srvConfig, srvLocale) {
    function createSameCompanyFilter(companyId) {
        return function(object) {
            return object.account_id.dbid == companyId;
        };
    }
    function createSameManagerFilter(managerId) {
        return function(object) {
            return object.manager_id.dbid == managerId;
        };
    }
    $scope.currentObject = null, $scope.actionList = [], $scope.actionMap = {}, $scope.methodList = [ "toggleFavorite", "viewDocument", "setItemAndGoTimeline", "setItemAndGoCalendar", "setItemAndGoMeeting", "shareDocumentByChatter", "addDocuments", "addContacts", "createNewEmail", "sendICal", "createNewPicture", "createNewNote", "createNewReport", "editItem", "dupMeeting" ], 
    $scope.dataListener = srvData.addListenerOnUpdate(function(callbackId, action, type, id) {
        "set" == action && id == $scope.currentObject.id.dbid ? a4p.safeApply($scope, function() {
            $scope.update();
        }) : "remove" == action && id == $scope.currentObject.id.dbid ? a4p.safeApply($scope, function() {
            $scope.clear();
        }) : "clear" == action && a4p.safeApply($scope, function() {
            $scope.clear();
        });
    }), $scope.navListener = null, $scope.$on("$destroy", function() {
        $scope.navListener && srvNav.cancelListener($scope.navListener), srvData.cancelListener($scope.dataListener);
    }), $scope.clear = function() {}, $scope.watchSrvNav = function() {
        $scope.navListener && srvNav.cancelListener($scope.navListener), $scope.navListener = srvNav.addListenerOnUpdate(function(callbackId, action) {
            "goto" == action && (srvNav.item ? a4p.safeApply($scope, function() {
                $scope.init(srvNav.item);
            }) : a4p.safeApply($scope, function() {
                $scope.clear();
            }));
        }), srvNav.item && $scope.init(srvNav.item);
    }, $scope.watchObject = function(object) {
        $scope.navListener && (srvNav.cancelListener($scope.navListener), $scope.navListener = null), 
        $scope.init(object);
    }, $scope.init = function(object) {
        $scope.currentObject = object, $scope.actionList = [], $scope.actionMap = {};
        for (var i = 0, nb = $scope.methodList.length; nb > i; i++) {
            {
                var methodName = $scope.methodList[i];
                srvData.a4p_methods[methodName];
            }
            if (srvData.isMethodPossibleForObject(methodName, object)) {
                var icon = srvData.getMethodIcon(methodName, object), disabled = srvData.isMethodDisabledForObject(methodName, object);
                $scope.actionList.push({
                    id: methodName,
                    icon: icon,
                    disabled: disabled
                }), $scope.actionMap[methodName] = {
                    id: methodName,
                    icon: icon,
                    disabled: disabled
                };
            }
        }
    }, $scope.update = function() {
        for (var object = $scope.currentObject, actionIdx = 0, i = 0, nb = $scope.methodList.length; nb > i; i++) {
            var methodName = $scope.methodList[i], methodDesc = srvData.a4p_methods[methodName];
            if (methodDesc.objectTypes[object.a4p_type]) {
                var currentMethod = $scope.actionList[actionIdx], icon = methodDesc.icon;
                a4p.isDefined(methodDesc.iconeToggle) && $scope[methodDesc.iconeToggle.when]($scope.currentObject) && (icon = methodDesc.iconeToggle.icon);
                var disabled = !1;
                if (methodDesc.mustBeOwner && !srvData.isObjectOwnedByUser(object)) disabled = !0; else if (a4p.isDefined(methodDesc.mustHaveFavorite) && !srvData.favoritesObject) disabled = !0; else if (a4p.isDefined(methodDesc.mustHaveBetaOption) && !srvConfig.c4pConfig[methodDesc.mustHaveBetaOption]) disabled = !0; else if (a4p.isDefined(methodDesc.mustBeCreated) && (object.c4p_synchro.creating || object.c4p_synchro.reading)) disabled = !0; else if (a4p.isDefinedAndNotNull(methodDesc.possibleCrms)) {
                    for (var enabled = !1, j = 0, max = methodDesc.possibleCrms.length; max > j; j++) {
                        var crm = methodDesc.possibleCrms[j];
                        if (isValueInList(srvConfig.getActiveCrms(), crm)) {
                            enabled = !0;
                            break;
                        }
                    }
                    enabled || (disabled = !0);
                }
                currentMethod.icon = icon, currentMethod.disabled = disabled, $scope.actionMap[methodName].icon = icon, 
                $scope.actionMap[methodName].disabled = disabled, actionIdx++;
            }
        }
    }, $scope.doAction = function(methodName) {
        var deferred = $q.defer(), promise = $scope[methodName]($scope.currentObject);
        return a4p.isDefined(promise) && promise.then(function(obj) {
            deferred.resolve(obj);
        }, function(diag) {
            deferred.reject(diag);
        }), deferred.promise;
    }, $scope.doActionObj = function(methodName, obj) {
        var deferred = $q.defer(), promise = $scope[methodName](obj);
        return a4p.isDefined(promise) && promise.then(function(obj) {
            deferred.resolve(obj);
        }, function(diag) {
            deferred.reject(diag);
        }), deferred.promise;
    }, $scope.isTaggedFavorite = function(object) {
        return srvData.isTaggedFavorite(object);
    }, $scope.toggleFavorite = function(object) {
        srvData.toggleFavorite(object) && $scope.update();
    }, $scope.setItemAndGoTimeline = function(object) {
        openDialog({
            backdrop: !1,
            windowClass: "modal c4p-modal-full c4p-dialog",
            controller: "ctrlTimeline",
            templateUrl: "partials/dialog/timeline.html",
            resolve: {
                srvData: function() {
                    return srvData;
                },
                srvLocale: function() {
                    return srvLocale;
                },
                srvConfig: function() {
                    return srvConfig;
                },
                objectItem: function() {
                    return object;
                }
            }
        }, function() {});
    }, $scope.setItemAndGoCalendar = function(object) {
        object && srvNav.goto($scope.pageNavigation, $scope.slideNavigationCalendar, object), 
        $scope.gotoSlide($scope.pageNavigation, $scope.slideNavigationCalendar);
    }, $scope.shareDocumentByChatter = function(object) {
        var parentObject = srvData.getObject(object.parent_id.dbid);
        $scope.shareByChatter(object, parentObject).then(function() {}, function() {});
    }, $scope.shareDocumentByEmail = function(object) {
        var parentObject = srvData.getObject(object.parent_id.dbid);
        $scope.shareByEmail(object, parentObject).then(function() {}, function() {});
    }, $scope.addDocuments = function(parentObject) {
        var attachments = srvData.getTypedDirectLinks(parentObject, "child", "Document"), attachees = srvData.getTypedRemoteLinks(parentObject, "attachee", "Document"), dialogOptions = {
            backdrop: !1,
            windowClass: "modal c4p-modal-left c4p-modal-search c4p-dialog"
        }, resolve = {
            srvData: function() {
                return srvData;
            },
            srvConfig: function() {
                return srvConfig;
            },
            srvLocale: function() {
                return srvLocale;
            },
            type: function() {
                return "Document";
            },
            initFilter: function() {
                return function(object) {
                    for (var i = 0; i < attachments.length; i++) if (attachments[i].id.dbid == object.id.dbid) return !1;
                    for (var j = 0; j < attachees.length; j++) if (attachees[j].id.dbid == object.id.dbid) return !1;
                    return !0;
                };
            },
            initSelector: function() {
                return function() {
                    return !1;
                };
            },
            multiple: function() {
                return !0;
            },
            createFct: function() {
                return null;
            }
        };
        srvConfig.c4pConfig.exposeFacetDialog ? (dialogOptions.controller = "ctrlFacetSelectedDialog", 
        dialogOptions.templateUrl = "partials/dialog/dialogFacetSelected.html", resolve.srvFacet = function() {
            return srvFacet;
        }, resolve.addedOrganizers = function() {
            return [];
        }) : (dialogOptions.controller = "ctrlSelectObjectsDialog", dialogOptions.templateUrl = "partials/dialog/dialogSelectObjects.html", 
        resolve.suggestedMenus = function() {
            return [];
        }), dialogOptions.resolve = resolve, $scope.openDialogFct(dialogOptions, function(result) {
            a4p.isDefined(result) && a4p.safeApply($scope, function() {
                for (var d = 0; d < result.length; d++) srvData.newAndSaveAttachment("Attachee", result[d], parentObject);
            });
        });
    }, $scope.addContacts = function(parentObject) {
        var contacts = srvData.getTypedRemoteLinks(parentObject, "attendee", "Contact"), menus = [], addedOrganizers = [];
        if (a4p.isDefined(parentObject.what_id.dbid)) {
            var whatObject = $scope.srvData.getObject(parentObject.what_id.dbid);
            "Opportunity" == whatObject.a4p_type && a4p.isDefined(whatObject.account_id.dbid) ? (menus.push({
                icon: "chevron-right",
                name: "sameCompany",
                filterFct: createSameCompanyFilter(whatObject.account_id.dbid)
            }), addedOrganizers.push(srvFacet.createSameCompanyOrganizer(whatObject.account_id.dbid))) : "Account" == whatObject.a4p_type && (menus.push({
                icon: "chevron-right",
                name: "sameCompany",
                filterFct: createSameCompanyFilter(whatObject.id.dbid)
            }), addedOrganizers.push(srvFacet.createSameCompanyOrganizer(whatObject.id.dbid)));
        }
        if (a4p.isDefined(parentObject.owner_id) && a4p.isDefined(parentObject.owner_id.dbid)) {
            var ownerObject = $scope.srvData.getObject(parentObject.owner_id.dbid);
            if (a4p.isDefined(ownerObject.manager_id.dbid)) {
                var managerObject = $scope.srvData.getObject(ownerObject.manager_id.dbid);
                menus.push({
                    icon: "chevron-right",
                    name: "sameManager",
                    filterFct: createSameManagerFilter(managerObject.id.dbid)
                }), addedOrganizers.push(srvFacet.createSameManagerOrganizer(managerObject.id.dbid));
            }
            menus.push({
                icon: "chevron-right",
                name: "sameTeam",
                filterFct: createSameManagerFilter(ownerObject.id.dbid)
            }), addedOrganizers.push(srvFacet.createSameTeamOrganizer(ownerObject.id.dbid));
        }
        var dialogOptions = {
            backdrop: !1,
            windowClass: "modal c4p-modal-left c4p-modal-search c4p-dialog"
        }, resolve = {
            srvData: function() {
                return srvData;
            },
            srvConfig: function() {
                return srvConfig;
            },
            srvLocale: function() {
                return srvLocale;
            },
            type: function() {
                return "Contact";
            },
            initFilter: function() {
                return function(object) {
                    if (a4p.isDefined(parentObject.owner_id) && parentObject.owner_id.dbid == object.id.dbid) return !1;
                    for (var i = 0; i < contacts.length; i++) if (contacts[i].id.dbid == object.id.dbid) return !1;
                    return !0;
                };
            },
            initSelector: function() {
                return function() {
                    return !1;
                };
            },
            multiple: function() {
                return !0;
            },
            createFct: function() {
                return function() {
                    var newObject = $scope.srvData.createObject("Contact", {});
                    return promiseDialog({
                        backdrop: !1,
                        windowClass: "modal c4p-modal-full c4p-dialog",
                        controller: "ctrlEditDialogObject",
                        templateUrl: "partials/dialog/edit_object.html",
                        resolve: {
                            srvData: function() {
                                return srvData;
                            },
                            srvLocale: function() {
                                return srvLocale;
                            },
                            srvConfig: function() {
                                return srvConfig;
                            },
                            objectItem: function() {
                                return newObject;
                            },
                            removeFct: function() {
                                return function(obj) {
                                    srvData.removeAndSaveObject(obj);
                                };
                            },
                            startSpinner: function() {
                                return $scope.startSpinner;
                            },
                            stopSpinner: function() {
                                return $scope.stopSpinner;
                            },
                            openDialogFct: function() {
                                return $scope.openDialog;
                            }
                        }
                    });
                };
            }
        };
        srvConfig.c4pConfig.exposeFacetDialog ? (dialogOptions.controller = "ctrlFacetSelectedDialog", 
        dialogOptions.templateUrl = "partials/dialog/dialogFacetSelected.html", resolve.srvFacet = function() {
            return srvFacet;
        }, resolve.addedOrganizers = function() {
            return addedOrganizers;
        }) : (dialogOptions.controller = "ctrlSelectObjectsDialog", dialogOptions.templateUrl = "partials/dialog/dialogSelectObjects.html", 
        resolve.suggestedMenus = function() {
            return menus;
        }), dialogOptions.resolve = resolve, $scope.openDialogFct(dialogOptions, function(result) {
            a4p.isDefined(result) && a4p.safeApply($scope, function() {
                for (var c = 0; c < result.length; c++) srvData.newAndSaveAttachment("Attendee", result[c], parentObject);
            });
        });
    }, $scope.createNewEmail = function(parentObject) {
        var postTitle = "Email about " + parentObject.a4p_type + " " + srvConfig.getItemName(parentObject), idsContact = [], idsDocument = [], attendees = srvData.getTypedDirectLinks(parentObject, "attendee", "Attendee"), attachments = srvData.getTypedDirectLinks(parentObject, "child", "Document"), email = {
            emailType: "normal",
            subject: postTitle,
            body: "",
            contacts: idsContact,
            documents: idsDocument,
            emailsInput: []
        };
        $scope.openDialog({
            windowClass: "modal c4p-modal-full c4p-modal-mail c4p-dialog",
            controller: "ctrlEditDialogEmail",
            templateUrl: "partials/dialog/dialogEmail.html",
            resolve: {
                srvLocale: function() {
                    return srvLocale;
                },
                srvData: function() {
                    return srvData;
                },
                srvConfig: function() {
                    return srvConfig;
                },
                srvFacet: function() {
                    return srvFacet;
                },
                title: function() {
                    return srvLocale.translations.htmlTitleDialogEmail;
                },
                attendees: function() {
                    return attendees;
                },
                attachments: function() {
                    return attachments;
                },
                email: function() {
                    return email;
                },
                emailId: function() {
                    return null;
                },
                editable: function() {
                    return !0;
                },
                modeEdit: function() {
                    return !0;
                },
                openDialogFct: function() {
                    return $scope.openDialog;
                }
            }
        }, function(result) {
            a4p.isDefined(result) && a4p.safeApply($scope, function() {
                $scope.addEmailToParent(null, !1, result, parentObject);
            });
        });
    }, $scope.sendICal = function(parentObject) {
        var event = parentObject, idsContact = [], attendees = srvData.getTypedDirectLinks(parentObject, "attendee", "Attendee"), organizer = srvData.userObject, startDate = a4pDateParse(event.date_start).getTime(), endDate = a4pDateParse(event.date_end).getTime(), ical = {
            title: event.name,
            description: event.description,
            emailsInput: [],
            contacts: idsContact,
            startDate: startDate,
            endDate: endDate,
            organizer: organizer.first_name + " " + organizer.last_name,
            location: event.location
        };
        $scope.openDialogFct({
            windowClass: "modal c4p-modal-full c4p-modal-mail c4p-dialog",
            controller: "ctrlDialogICal",
            templateUrl: "partials/dialog/dialogICal.html",
            resolve: {
                srvLocale: function() {
                    return srvLocale;
                },
                srvData: function() {
                    return srvData;
                },
                srvConfig: function() {
                    return srvConfig;
                },
                srvFacet: function() {
                    return srvFacet;
                },
                ical: function() {
                    return ical;
                },
                attendees: function() {
                    return attendees;
                }
            }
        }, function(result) {
            a4p.isDefined(result) && a4p.safeApply($scope, function() {
                srvData.sendICal(result);
            });
        });
    }, $scope.createNewPicture = function(parentObject) {
        var deferred = $q.defer();
        return $scope.takePicture(parentObject).then(function(document) {
            deferred.resolve(document);
        }, function(diag) {
            deferred.reject(diag);
        }), deferred.promise;
    }, $scope.createNewNote = function(parentObject) {
        $scope.takeNote(parentObject).then(function() {}, function() {});
    }, $scope.createNewReport = function(parentObject) {
        $scope.takeReport(parentObject).then(function() {}, function() {});
    }, $scope.editItem = function(object) {
        a4p.isDefined(object) && ("Note" == object.a4p_type || "Report" == object.a4p_type ? $scope.viewNote(object, !0) : "Document" == object.a4p_type && object.email ? $scope.viewEmail(object) : a4p.safeApply($scope, function() {
            $scope.editObjectDialog(object, function(result) {
                a4p.isDefined(result) && a4p.safeApply($scope, function() {
                    srvData.setAndSaveObject(result);
                });
            });
        }));
    }, $scope.dupMeeting = function(object) {
        var oneDayMs = 864e5, startDate = new Date(a4pDateParse(object.date_start).getTime() + oneDayMs), endDate = new Date(a4pDateParse(object.date_end).getTime() + oneDayMs), meeting = {
            a4p_type: "Event",
            name: object.name,
            location: object.location,
            date_start: a4pDateFormat(startDate),
            date_end: a4pDateFormat(endDate),
            description: object.description,
            status: object.status,
            type: object.type,
            displayed_url: object.displayed_url
        };
        meeting = srvData.createObject("Event", meeting), $scope.openDialogFct({
            windowClass: "modal c4p-modal-left c4p-modal-search c4p-dialog",
            controller: "ctrlDupMeeting",
            templateUrl: "partials/dialog/dialogDupMeeting.html",
            resolve: {
                srvLocale: function() {
                    return srvLocale;
                },
                srvData: function() {
                    return srvData;
                },
                mEvent: function() {
                    return meeting;
                },
                mEventSrc: function() {
                    return object;
                }
            }
        }, function(result) {
            a4p.isDefined(result) && a4p.safeApply($scope, function() {
                if (srvData.addObject(meeting), result.dupWhat && a4p.isDefined(object.what_id.dbid)) {
                    var whatObject = srvData.getObject(object.what_id.dbid);
                    a4p.isDefined(whatObject) && srvData.linkToItem("Event", "affecter", [ meeting ], whatObject);
                }
                if (result.dupAssignedContact && a4p.isDefined(object.assigned_contact_id.dbid)) {
                    var assignedObject = srvData.getObject(object.assigned_contact_id.dbid);
                    a4p.isDefined(assignedObject) && srvData.linkToItem("Event", "leader", [ meeting ], assignedObject);
                }
                if (result.dupAttachment) {
                    for (var attachments = srvData.getTypedDirectLinks(object, "child", "Document"), attachmentIdx = 0, attachmentNb = attachments.length; attachmentNb > attachmentIdx; attachmentIdx++) srvData.newAndSaveAttachment("Attachee", attachments[attachmentIdx], meeting);
                    for (var attachees = srvData.getTypedRemoteLinks(object, "attachee", "Document"), attacheeIdx = 0, attacheeNb = attachees.length; attacheeNb > attacheeIdx; attacheeIdx++) srvData.newAndSaveAttachment("Attachee", attachees[attacheeIdx], meeting);
                }
                if (result.dupAttendee) for (var attendees = srvData.getTypedRemoteLinks(object, "attendee", "Contact"), attendeeIdx = 0, attendeeNb = attendees.length; attendeeNb > attendeeIdx; attendeeIdx++) srvData.newAndSaveAttachment("Attendee", attendees[attendeeIdx], meeting);
                srvData.addObjectToSave(meeting.a4p_type, meeting.id.dbid);
            });
        });
    };
}

function ctrlAside($scope, $location, $anchorScroll, srvFacet, srvLocale, srvData, srvAnalytics, srvNav) {
    $scope.srvFacet = srvFacet, $scope.srvLocale = srvLocale, $scope.srvNav = srvNav, 
    $scope.asideRootMenuUp = !0, $scope.asideActiveSearch = !1, $scope.asideCategoryName = null, 
    $scope.asideInputs = {
        itemSearchQuery: ""
    }, $scope.toggleSearch = function() {
        $scope.asideActiveSearch = !$scope.asideActiveSearch;
    }, $scope.tabClear = function() {
        var firstFacet = srvFacet.getFirstFacet();
        if (null != firstFacet && "top20" != firstFacet.key && "mine" != firstFacet.key && "favorites" != firstFacet.key) for (;srvFacet.filterFacets.length > 1; ) srvFacet.removeLastFacet(); else srvFacet.clear();
        $scope.removeGlobalSearch(), $scope.asideActiveSearch = !1;
    }, $scope.tabTop = function() {
        if (srvFacet.isFacetActivable("top20")) srvFacet.addFacet("top20"), srvFacet.setFacet(""); else {
            var firstFacet = srvFacet.getFirstFacet();
            if (null != firstFacet && "top20" != firstFacet.key && "mine" != firstFacet.key && "favorites" != firstFacet.key) for (;srvFacet.filterFacets.length > 1; ) srvFacet.removeLastFacet(); else srvFacet.clear();
            srvFacet.addFacet("top20");
        }
        $scope.asideActiveSearch = !1;
    }, $scope.tabMine = function() {
        if (srvFacet.isFacetActivable("mine")) srvFacet.addFacet("mine"), srvFacet.setFacet(""); else {
            var firstFacet = srvFacet.getFirstFacet();
            if (null != firstFacet && "top20" != firstFacet.key && "mine" != firstFacet.key && "favorites" != firstFacet.key) for (;srvFacet.filterFacets.length > 1; ) srvFacet.removeLastFacet(); else srvFacet.clear();
            srvFacet.addFacet("mine");
        }
        $scope.asideActiveSearch = !1;
    }, $scope.tabFavorites = function() {
        if (srvFacet.isFacetActivable("favorites")) srvFacet.addFacet("favorites"), srvFacet.setFacet(""); else {
            var firstFacet = srvFacet.getFirstFacet();
            if (null != firstFacet && "top20" != firstFacet.key && "mine" != firstFacet.key && "favorites" != firstFacet.key) for (;srvFacet.filterFacets.length > 1; ) srvFacet.removeLastFacet(); else srvFacet.clear();
            srvFacet.addFacet("favorites");
        }
        $scope.asideActiveSearch = !1;
    }, $scope.addClear = function() {
        var name = srvFacet.getFirstFacetValue();
        srvFacet.clear(), srvFacet.addFacet("objects", srvLocale.translations.htmlTitleType[name], name);
    }, $scope.addTop = function() {
        srvFacet.addFacet("top20"), srvFacet.setFacet("");
    }, $scope.addMine = function() {
        srvFacet.addFacet("mine"), srvFacet.setFacet("");
    }, $scope.addFavorites = function() {
        srvFacet.addFacet("favorites"), srvFacet.setFacet("");
    }, $scope.selectItem = function(item, closeAside) {
        a4p.InternalLog.log("ctrlAside", "selectItem"), $scope.asideScrollToItem(item), 
        $scope.setItemAndGoDetail(item, closeAside);
    }, $scope.selectItemAndCloseAside = function(item) {
        $scope.setItemAndGoDetail(item, !0);
    }, $scope.removeGlobalSearch = function() {
        $scope.asideInputs.itemSearchQuery = "", srvFacet.setFilterQuery($scope.asideInputs.itemSearchQuery);
    }, $scope.objectCreatable = function(type) {
        return "Note" == type ? a4p.isDefinedAndNotNull(srvData.userObject) : "Report" == type ? a4p.isDefinedAndNotNull(srvData.userObject) : "Document" == type ? a4p.isDefinedAndNotNull(srvData.userObject) : c4p.Model.a4p_types[type] && c4p.Model.a4p_types[type].isAutonomousType;
    }, $scope.addItemDialog = function(type) {
        a4p.safeApply($scope, function() {
            if ("Document" == type) $scope.takePicture(srvData.userObject).then(function(document) {
                $scope.selectItemAndCloseAside(document);
            }, function() {}); else if ("Note" == type) $scope.takeNote(srvData.userObject).then(function(document) {
                $scope.selectItemAndCloseAside(document);
            }, function() {}); else if ("Report" == type) $scope.takeReport(srvData.userObject).then(function(document) {
                $scope.selectItemAndCloseAside(document);
            }, function() {}); else {
                var itemToCreate = srvData.createObject(type, {});
                $scope.editObjectDialog(itemToCreate, function(result) {
                    a4p.isDefined(result) && a4p.safeApply($scope, function() {
                        if (srvData.addObject(result), "Note" == type) {
                            var parentObject = srvData.userObject;
                            srvData.linkToItem(type, "parent", [ result ], parentObject);
                        } else if ("Report" == type) {
                            var parentObject = srvData.userObject;
                            srvData.linkToItem(type, "parent", [ result ], parentObject);
                        }
                        srvData.addObjectToSave(result.a4p_type, result.id.dbid), srvAnalytics.add("Once", "Aside - add " + result.a4p_type), 
                        $scope.asideScrollToItem(result), $scope.updateScroller && $scope.updateScroller();
                    });
                });
            }
        });
    }, $scope.bShowAsideGroupSuggestion = !0, $scope.showAsideGroupSuggestion = function(b) {
        $scope.bShowAsideGroupSuggestion = 1 == b;
    }, $scope.showAsideGroup = function(group, value) {
        group.show = value, $scope.relatedScrollToGroup(group);
    }, $scope.isDocumentGroup = function(groupType) {
        return "Document" == groupType;
    }, $scope.showGallery = function() {
        $scope.openDialog({
            backdrop: !1,
            windowClass: "modal c4p-modal-full c4p-modal-image",
            controller: "ctrlShowImage",
            templateUrl: "partials/dialog/dialogShowImage.html",
            resolve: {
                imageData: function() {
                    return srvNav.imageRelatedList;
                }
            }
        }, function() {});
    }, $scope.asideScrollToItem = function(item) {
        var sid = "aside_" + item.id.dbid;
        a4p.InternalLog.log("ctrlAside", "asideScrollToItem to " + sid), $location.hash(sid), 
        $anchorScroll();
    }, $scope.relatedScrollToGroup = function(group) {
        var sid = "related_" + group.name;
        a4p.InternalLog.log("ctrlAside", "relatedScrollToGroup to " + sid), $location.hash(sid), 
        $anchorScroll();
    }, $scope.activeItem = "", $scope.setAsideSearchMenu = function(name) {
        name && (a4p.InternalLog.log("setAsideSearchMenu " + name), a4p.safeApply($scope, function() {
            $scope.asideInputs = {
                itemSearchQuery: ""
            }, $scope.asideRootMenuUp = !1, $scope.setNavAside(!0), $scope.activeItem = $scope.slideNavigationType[name], 
            $scope.asideCategoryName = name, $scope.$broadcast("changeAsideSearchCategory", name);
        }));
    }, $scope.setAsideCalendar = function() {
        $scope.asideRootMenuUp = !0, $scope.gotoSlideWithSearchReset($scope.pageNavigation, $scope.slideNavigationCalendar), 
        $scope.activeItem = $scope.slideNavigationCalendar;
    }, $scope.setAsideFavoriteSearchMenu = function() {
        $scope.asideRootMenuUp = !1, $scope.setNavAside(!0), srvFacet.clear(), $scope.tabFavorites(), 
        $scope.activeItem = $scope.slideNavigationFavorite;
    }, $scope.setAsideRootMenu = function() {
        $scope.asideRootMenuUp = !0, $scope.setNavAside(!0), srvFacet.clear();
    };
}

function ctrlAsideItem($scope, srvLocale, srvData, srvNav, srvLink, srvConfig) {
    $scope.srvNav = srvNav, $scope.proxy = null, $scope.dragElementX = 70, $scope.dragElementY = 60, 
    $scope.proxyover = !1, $scope.closeAsidePage = !1, $scope.companyName = "", $scope.init = function(item, closeAsidePage) {
        if ($scope.item = item, $scope.itemIcon = c4p.Model.getItemIcon(item), $scope.itemName = srvConfig.getItemName(item), 
        $scope.closeAsidePage = closeAsidePage || !1, $scope.companyName = "", $scope.item && $scope.item.account_id) {
            var account = srvData.getObject($scope.item.account_id.dbid);
            account && ($scope.companyName = account.company_name);
        }
    }, $scope.selectItem = function(firstSingleTap) {
        return firstSingleTap ? void a4p.safeApply($scope, function() {}) : (a4p.InternalLog.log("ctrlDragObject - selectItem"), 
        void ($scope.responsiveIsOnePageFormat() ? $scope.selectItemAndCloseAside() : a4p.safeApply($scope, function() {
            $scope.setItemAndGoDetail($scope.item), $scope.closeAsidePage && $scope.setNavAside ? $scope.setNavAside(!1) : $scope.updateScroller && $scope.updateScroller();
        })));
    };
}

function ctrlAsideSearch($scope, $timeout, srvFacet, srvLocale) {
    $scope.asideSearchSpinner = !0, $scope.afterAsideSpinnerShow = function() {
        a4p.InternalLog.log("ctrlAsideSearch", "afterAsideSpinnerShow"), $timeout(function() {
            $scope.computeList();
        }, 200);
    }, $scope.afterAsideSpinnerHide = function() {
        a4p.InternalLog.log("ctrlAsideSearch", "afterAsideSpinnerHide");
    }, $scope.computeList = function() {
        a4p.InternalLog.log("ctrlAsideSearch", "computeList : " + $scope.asideCategoryName), 
        srvFacet.clear(), $scope.asideCategoryName && (srvFacet.addFacet("objects", srvLocale.translations.htmlTitleType[$scope.asideCategoryName], $scope.asideCategoryName), 
        $scope.asideSearchSpinner = !1);
    }, $scope.$on("changeAsideSearchCategory", function(event, categoryName) {
        a4p.InternalLog.log("ctrlAsideSearch", "changeAsideSearchCategory : " + categoryName), 
        $scope.asideCategoryName = categoryName, $scope.asideSearchSpinner = !0;
    });
}

function ctrlCalendar($scope, $timeout, version, srvAnalytics, srvLocale, srvTime, srvConfig) {
    function computeCalendarMonthSize(scope) {
        var h = scope.responsivePageHeight() - 200, hCell = (scope.responsivePageWidth() - 100, 
        h / 6), minCell = hCell;
        scope.calendarMonthHeight = 6 * minCell, scope.calendarMonthCellHeight = minCell, 
        scope.calendarMonthWidth = 7 * minCell, scope.calendarMonthCellWidth = minCell;
    }
    function createGroup(date) {
        return {
            date: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0),
            day: date.getDate(),
            year: date.getFullYear(),
            month: date.getMonth(),
            events: [],
            eventsPosition: [],
            eventsAllDay: [],
            eventsAllDayPosition: []
        };
    }
    function buildEventGroupsByDay() {
        var eventsSorted = $scope.srvData.currentItems.Event.slice(0);
        eventsSorted.sort(function(a, b) {
            return a[$scope.filterCriteriaEvent] <= b[$scope.filterCriteriaEvent] ? -1 : 1;
        }), $scope.calendarEventsGroupsByDay = [];
        var eventNb = eventsSorted.length;
        if (!(0 >= eventNb)) for (var initEvent = eventsSorted[0], initEventStartDate = a4pDateParse(initEvent.date_start), groupStartDate = new Date(initEventStartDate.getFullYear(), initEventStartDate.getMonth(), initEventStartDate.getDate(), 0, 0, 0, 0), groupEndDate = new Date(groupStartDate.getFullYear(), groupStartDate.getMonth(), groupStartDate.getDate(), 23, 59, 59, 0), firstEventIdx = 0; eventNb > firstEventIdx; ) {
            var firstEvent = eventsSorted[firstEventIdx], firstEventEndDate = a4pDateParse(firstEvent.date_end);
            if (firstEventEndDate.getTime() < groupStartDate.getTime()) firstEventIdx++; else {
                var firstEventStartDate = a4pDateParse(firstEvent.date_start);
                firstEventStartDate.getTime() >= groupEndDate.getTime() && (groupStartDate = new Date(firstEventStartDate.getFullYear(), firstEventStartDate.getMonth(), firstEventStartDate.getDate(), 0, 0, 0, 0), 
                groupEndDate = new Date(groupStartDate.getFullYear(), groupStartDate.getMonth(), groupStartDate.getDate() + 1, 0, 0, 0, 0));
                for (var group = createGroup(groupStartDate), nextEventIdx = firstEventIdx, nextEvent = firstEvent, nextEventStartDate = firstEventStartDate, nextEventEndDate = firstEventEndDate; eventNb > nextEventIdx && nextEventStartDate.getTime() < groupEndDate.getTime(); ) {
                    if (groupStartDate.getTime() <= nextEventEndDate.getTime()) {
                        var posPercent = 0, lengthPercent = 100;
                        nextEventStartDate.getTime() <= groupStartDate.getTime() ? lengthPercent = a4pTranslateDatesToPxSize(groupStartDate, nextEventEndDate, 100) : (posPercent = a4pTranslateDateToPx(nextEventStartDate, 100), 
                        lengthPercent = nextEventEndDate.getTime() >= groupEndDate.getTime() ? a4pTranslateDatesToPxSize(nextEventStartDate, groupEndDate, 100) : a4pTranslateDatesToPxSize(nextEventStartDate, nextEventEndDate, 100)), 
                        nextEventStartDate.getTime() < groupStartDate.getTime() || groupEndDate.getTime() <= nextEventEndDate.getTime() || nextEventStartDate.getTime() == groupStartDate.getTime() && groupEndDate.getTime() - 1e3 <= nextEventEndDate.getTime() ? (group.eventsAllDay.push(nextEvent), 
                        group.eventsAllDayPosition.push({
                            posPercent: posPercent,
                            lengthPercent: lengthPercent,
                            posWithLastPercent: 0,
                            event: nextEvent
                        })) : (group.events.push(nextEvent), group.eventsPosition.push({
                            posPercent: posPercent,
                            lengthPercent: lengthPercent,
                            posWithLastPercent: 0,
                            event: nextEvent
                        }));
                    }
                    nextEventIdx++, eventNb > nextEventIdx && (nextEvent = eventsSorted[nextEventIdx], 
                    nextEventStartDate = a4pDateParse(nextEvent.date_start), nextEventEndDate = a4pDateParse(nextEvent.date_end));
                }
                (group.events.length > 0 || group.eventsAllDay.length > 0) && $scope.calendarEventsGroupsByDay.push(group), 
                groupStartDate = new Date(groupStartDate.getFullYear(), groupStartDate.getMonth(), groupStartDate.getDate() + 1, 0, 0, 0, 0), 
                groupEndDate = new Date(groupStartDate.getFullYear(), groupStartDate.getMonth(), groupStartDate.getDate() + 1, 0, 0, 0, 0);
            }
        }
    }
    function buildEventsGroupsByDaySinceToday() {
        $scope.calendarEventsGroupsByDaySinceToday = [];
        for (var nb = $scope.calendarEventsGroupsByDay.length, i = 0; nb > i; i++) {
            var group = $scope.calendarEventsGroupsByDay[i];
            if (group.date.getTime() >= $scope.calendarNow.getTime()) {
                $scope.calendarEventsGroupsByDaySinceToday = $scope.calendarEventsGroupsByDay.slice(i);
                break;
            }
        }
    }
    function computeCasualDay() {
        var day = $scope.calendarSelected.getDay() - 1;
        0 > day && (day = 6);
        var dayQualif = "", checkToday = new Date($scope.calendarSelected.getFullYear(), $scope.calendarSelected.getMonth(), $scope.calendarSelected.getDate(), 0, 0, 0, 0), checkYesterday = new Date($scope.calendarSelected.getFullYear(), $scope.calendarSelected.getMonth(), $scope.calendarSelected.getDate() + 1, 0, 0, 0, 0), checkTomorrow = new Date($scope.calendarSelected.getFullYear(), $scope.calendarSelected.getMonth(), $scope.calendarSelected.getDate() - 1, 0, 0, 0, 0);
        checkToday.getTime() == $scope.calendarNow.getTime() ? dayQualif = srvLocale.translations.htmlTextToday + ", " : checkYesterday.getTime() == $scope.calendarNow.getTime() ? dayQualif = srvLocale.translations.htmlTextYesterday + ", " : checkTomorrow.getTime() == $scope.calendarNow.getTime() && (dayQualif = srvLocale.translations.htmlTextTomorrow + ", "), 
        $scope.calendarDayCasualName = dayQualif + $scope.calendarMonthWeeks[0].days[day].name;
    }
    function onCalendarNowChange() {
        buildEventsGroupsByDaySinceToday(), computeCasualDay();
    }
    function getGroupForSelectedDay() {
        for (var len = $scope.calendarEventsGroupsByDay.length, i = 0; len > i; i++) {
            var currentDay = $scope.calendarEventsGroupsByDay[i];
            if (!(currentDay.year < $scope.calendarSelected.getFullYear())) {
                if (currentDay.year > $scope.calendarSelected.getFullYear()) break;
                if (!(currentDay.month < $scope.calendarSelected.getMonth())) {
                    if (currentDay.month > $scope.calendarSelected.getMonth()) break;
                    if (!(currentDay.day < $scope.calendarSelected.getDate())) {
                        if (currentDay.day > $scope.calendarSelected.getDate()) break;
                        return currentDay;
                    }
                }
            }
        }
        return createGroup($scope.calendarSelected);
    }
    function getMonthWeeks(month, year) {
        for (var monthWeeks = [], localeWeekDays = [ {
            idx: 0,
            name: srvLocale.translations.htmlTextMonday,
            shortName: srvLocale.translations.htmlTextShortMonday
        }, {
            idx: 1,
            name: srvLocale.translations.htmlTextTuesday,
            shortName: srvLocale.translations.htmlTextShortTuesday
        }, {
            idx: 2,
            name: srvLocale.translations.htmlTextWednesday,
            shortName: srvLocale.translations.htmlTextShortWednesday
        }, {
            idx: 3,
            name: srvLocale.translations.htmlTextThursday,
            shortName: srvLocale.translations.htmlTextShortThursday
        }, {
            idx: 4,
            name: srvLocale.translations.htmlTextFriday,
            shortName: srvLocale.translations.htmlTextShortFriday
        }, {
            idx: 5,
            name: srvLocale.translations.htmlTextSaturday,
            shortName: srvLocale.translations.htmlTextShortSaturday
        }, {
            idx: 6,
            name: srvLocale.translations.htmlTextSunday,
            shortName: srvLocale.translations.htmlTextShortSunday
        } ], firstDayMonth = a4pFirstDayOfMonth(year, month + 1), firstDayMonthWeek = a4pDayOfSameWeek(firstDayMonth, 1), lastDayMonth = a4pLastDayOfMonth(year, month + 1), nbGroups = $scope.calendarEventsGroupsByDay.length, currentDay = new Date(firstDayMonthWeek.getFullYear(), firstDayMonthWeek.getMonth(), firstDayMonthWeek.getDate(), 0, 0, 0, 0), groupIdx = 0, currentGroup = null; nbGroups > groupIdx; groupIdx++) {
            var initGroup = $scope.calendarEventsGroupsByDay[groupIdx];
            if (!(initGroup.year < currentDay.getFullYear())) {
                if (initGroup.year > currentDay.getFullYear()) break;
                if (!(initGroup.month < currentDay.getMonth())) {
                    if (initGroup.month > currentDay.getMonth()) break;
                    if (!(initGroup.day < currentDay.getDate())) {
                        if (initGroup.day > currentDay.getDate()) break;
                        currentGroup = initGroup;
                        break;
                    }
                }
            }
        }
        for (null == currentGroup && (currentGroup = createGroup(currentDay)); lastDayMonth >= currentDay; ) {
            for (var week = {
                id: a4pWeek(currentDay),
                days: []
            }, dayId = 0; 7 > dayId; dayId++) {
                var day = {
                    day: dayId,
                    date: new Date(currentDay.getFullYear(), currentDay.getMonth(), currentDay.getDate(), 0, 0, 0, 0),
                    name: localeWeekDays[dayId].name,
                    shortName: localeWeekDays[dayId].shortName,
                    isWeekend: !!(dayId >= 5),
                    group: currentGroup
                };
                for (week.days.push(day), currentDay.setDate(currentDay.getDate() + 1), currentGroup = null; nbGroups > groupIdx; groupIdx++) {
                    var testGroup = $scope.calendarEventsGroupsByDay[groupIdx];
                    if (!(testGroup.year < currentDay.getFullYear())) {
                        if (testGroup.year > currentDay.getFullYear()) break;
                        if (!(testGroup.month < currentDay.getMonth())) {
                            if (testGroup.month > currentDay.getMonth()) break;
                            if (!(testGroup.day < currentDay.getDate())) {
                                if (testGroup.day > currentDay.getDate()) break;
                                currentGroup = testGroup;
                                break;
                            }
                        }
                    }
                }
                null == currentGroup && (currentGroup = createGroup(currentDay));
            }
            monthWeeks.push(week);
        }
        return monthWeeks;
    }
    function onSelChange() {
        ($scope.calendarYear != $scope.calendarSelected.getFullYear() || $scope.calendarMonth != $scope.calendarSelected.getMonth()) && ($scope.calendarYear = $scope.calendarSelected.getFullYear(), 
        $scope.calendarMonth = $scope.calendarSelected.getMonth(), $scope.calendarMonthWeeks = getMonthWeeks($scope.calendarMonth, $scope.calendarYear), 
        $scope.calendarMonthName = $scope.calendarMonths[$scope.calendarMonth].name, $scope.calendarMonthShortName = $scope.calendarMonths[$scope.calendarMonth].shortName, 
        $scope.calendarMonthFullName = $scope.calendarMonthName + " " + $scope.calendarYear), 
        $scope.calendarDayFullName = $scope.calendarSelected.getDate() + " " + $scope.calendarMonthName + " " + $scope.calendarYear, 
        computeCasualDay();
        var previous = new Date($scope.calendarSelected.getFullYear(), $scope.calendarSelected.getMonth() - 1, 1, 0, 0, 0, 0);
        $scope.calendarPreviousMonthName = $scope.calendarMonths[previous.getMonth()].name, 
        $scope.calendarPreviousYear = $scope.calendarSelected.getFullYear() - 1;
        var next = new Date($scope.calendarSelected.getFullYear(), $scope.calendarSelected.getMonth() + 1, 1, 0, 0, 0, 0);
        $scope.calendarNextMonthName = $scope.calendarMonths[next.getMonth()].name, $scope.calendarNextYear = $scope.calendarSelected.getFullYear() + 1, 
        $scope.calendarSelectedDay = getGroupForSelectedDay(), $scope.stopSpinner(), srvAnalytics.add("Once", "Calendar");
    }
    function onEventChange() {
        buildEventGroupsByDay(), buildEventsGroupsByDaySinceToday(), $scope.calendarYear = $scope.calendarSelected.getFullYear(), 
        $scope.calendarMonth = $scope.calendarSelected.getMonth(), $scope.calendarMonthWeeks = getMonthWeeks($scope.calendarMonth, $scope.calendarYear), 
        $scope.calendarMonthName = $scope.calendarMonths[$scope.calendarMonth].name, $scope.calendarMonthShortName = $scope.calendarMonths[$scope.calendarMonth].shortName, 
        $scope.calendarMonthFullName = $scope.calendarMonthName + " " + $scope.calendarYear, 
        $scope.calendarDayFullName = $scope.calendarSelected.getDate() + " " + $scope.calendarMonthName + " " + $scope.calendarYear, 
        computeCasualDay();
        var previous = new Date($scope.calendarSelected.getFullYear(), $scope.calendarSelected.getMonth() - 1, 1, 0, 0, 0, 0);
        $scope.calendarPreviousMonthName = $scope.calendarMonths[previous.getMonth()].name, 
        $scope.calendarPreviousYear = $scope.calendarSelected.getFullYear() - 1;
        var next = new Date($scope.calendarSelected.getFullYear(), $scope.calendarSelected.getMonth() + 1, 1, 0, 0, 0, 0);
        $scope.calendarNextMonthName = $scope.calendarMonths[next.getMonth()].name, $scope.calendarNextYear = $scope.calendarSelected.getFullYear() + 1, 
        $scope.calendarSelectedDay = getGroupForSelectedDay();
    }
    $scope.calendarNow = new Date(srvTime.year, srvTime.month - 1, srvTime.day, 0, 0, 0, 0), 
    $scope.ctrlCalendarInitialized = !1, $scope.ctrlCalendarCanevasInitialized = !1, 
    $scope.calendarSelected = new Date(), $scope.calendarSelectedDay = null, $scope.calendarYear = 0, 
    $scope.calendarMonth = 0, $scope.calendarMonthName = "", $scope.calendarMonthShortName = "", 
    $scope.calendarMonthFullName = "", $scope.calendarDayFullName = "", $scope.calendarDayCasualName = "", 
    $scope.calendarPreviousMonthName = "", $scope.calendarPreviousYear = 0, $scope.calendarNextMonthName = "", 
    $scope.calendarNextYear = 0, $scope.calendarMonths = [], $scope.calendarMonthWeeks = [], 
    $scope.calendarHoursDay = [], $scope.calendarEventsGroupsByDay = [], $scope.calendarMonthWidth = 400, 
    $scope.calendarMonthHeight = 400, $scope.calendarMonthCellHWidth = 30, $scope.calendarMonthCellHeight = 30, 
    $scope.initCalendarCtrl = function() {
        if ($scope.ctrlCalendarCanevasInitialized = !1, !$scope.ctrlCalendarInitialized) {
            $scope.configStateEdit = !1, $scope.configStateAdd = !0, $scope.setNavTitle(srvLocale.translations.htmlTitleCalendar), 
            $scope.calendarViews = [ {
                id: "dayView",
                icon: "clock-o"
            }, {
                id: "monthView",
                icon: "calendar"
            }, {
                id: "listView",
                icon: "list"
            } ], $scope.filterAscEvent = !1, $scope.filterCriteriaEvent = "date_start", $scope.filterAscEventGroup = !1, 
            $scope.filterCriteriaEventGroup = "date", $scope.calendarHoursDay = $scope.srvLocale.getHoursDay(), 
            $scope.calendarMonths = $scope.srvLocale.getMonths();
            var back = $scope.srvNav.lastInHistoryWithType("Event");
            if (null != back) {
                var selEvent = $scope.srvData.getObject(back.id);
                $scope.calendarSelected = a4pDateParse(selEvent.date_start);
            } else $scope.calendarSelected = new Date();
            srvTime.addListenerOnDay(function() {
                $scope.calendarNow = new Date(srvTime.year, srvTime.month - 1, srvTime.day, 0, 0, 0, 0), 
                onCalendarNowChange();
            });
        }
        computeCalendarMonthSize($scope), $scope.ctrlCalendarCanevasInitialized = !0, onEventChange(), 
        $scope.ctrlCalendarInitialized = !0;
    }, $scope.checkViewActive = function(id) {
        return $scope.calendarView == id;
    }, $scope.checkViewNp1Active = function(id) {
        return $scope.calendarView != id;
    }, $scope.onEventClick = function(event) {
        $scope.setItemAndGoDetail(event, !0);
    }, $scope.setSelectedDate = function(date) {
        date && "undefined" != date && ($scope.calendarSelected.getFullYear() != date.getFullYear() || $scope.calendarSelected.getMonth() != date.getMonth() || $scope.calendarSelected.getDate() != date.getDate()) && ($scope.calendarSelected = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0), 
        onSelChange());
    }, $scope.onDayClick = function(date) {
        $scope.setSelectedDate(date), $scope.openDialog({
            backdrop: !0,
            windowClass: "modal c4p-modal-large c4p-dialog",
            controller: "ctrlDialogCalendarDay",
            templateUrl: "partials/dialog/dialogCalendarDay.html",
            resolve: {
                srvLocale: function() {
                    return $scope.srvLocale;
                },
                calendarDayCasualName: function() {
                    return $scope.calendarDayCasualName;
                },
                calendarDayFullName: function() {
                    return $scope.calendarDayFullName;
                },
                calendarSelectedDay: function() {
                    return $scope.calendarSelectedDay;
                }
            }
        }, function(item) {
            item && $scope.onEventClick(item);
        });
    }, $scope.gotoPreviousMonth = function() {
        $scope.calendarSelected.setMonth($scope.calendarSelected.getMonth() - 1), $scope.calendarLoadingSpinner = !0;
    }, $scope.gotoNextMonth = function() {
        $scope.calendarSelected.setMonth($scope.calendarSelected.getMonth() + 1), $scope.calendarLoadingSpinner = !0;
    }, $scope.gotoNow = function() {
        $scope.calendarSelected = new Date($scope.calendarNow.getFullYear(), $scope.calendarNow.getMonth(), $scope.calendarNow.getDate(), 0, 0, 0, 0), 
        $scope.calendarLoadingSpinner = !0;
    }, $scope.gotoPreviousDay = function() {
        $scope.calendarSelected.setDate($scope.calendarSelected.getDate() - 1), $scope.calendarLoadingSpinner = !0;
    }, $scope.gotoNextDay = function() {
        $scope.calendarSelected.setDate($scope.calendarSelected.getDate() + 1), $scope.calendarLoadingSpinner = !0;
    }, $scope.gotoNextYear = function() {
        $scope.calendarSelected.setFullYear($scope.calendarSelected.getFullYear() + 1), 
        $scope.calendarLoadingSpinner = !0;
    }, $scope.gotoPreviousYear = function() {
        $scope.calendarSelected.setFullYear($scope.calendarSelected.getFullYear() - 1), 
        $scope.calendarLoadingSpinner = !0;
    }, $scope.translateDateDayToString = function(date) {
        var val = $scope.srvLocale.formatDate(date, "shortDate");
        return val;
    }, $scope.translateDateDayToFullString = function(date) {
        var val = $scope.srvLocale.formatDate(date, "fullDate");
        return val;
    }, $scope.translateDateToTimeString = function(date) {
        var val = srvLocale.formatDate(date, "shortTime");
        return val;
    }, $scope._formatStringDateToDay = function(string) {
        var date = a4pDateParse(string), val = $scope.srvLocale.formatDate(date, "shortDate");
        return val;
    }, $scope._formatStringDateToTime = function(string) {
        var date = a4pDateParse(string), val = $scope.srvLocale.formatDate(date, "shortTime");
        return val;
    }, $scope.getEventTime = function(dateStr) {
        var time = "";
        if (!dateStr) return time;
        var date = a4pDateParse(dateStr);
        return time = $scope.translateDateToTimeString(date);
    }, $scope.isMultiDayEventWithTimeToShow = function(event, date, isBegin) {
        var b = !1, evtStartDate = a4pDateParse(event.date_start), evtEndDate = a4pDateParse(event.date_end), dateBegin = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0), dateEnd = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59, 0);
        return isBegin && evtStartDate > dateBegin ? b = !0 : !isBegin && dateEnd > evtEndDate && (b = !0), 
        b;
    }, $scope.addItemDialog = function(type, hour) {
        var now = new Date(), hourBegin = now.getHours() + 1, hourEnd = now.getHours() + 2;
        hour && (hourBegin = hour, hourEnd = hour + 1);
        var selectedDayAsDate = $scope.calendarSelected, selectedDayAsDateStart = new Date(selectedDayAsDate.getFullYear(), selectedDayAsDate.getMonth(), selectedDayAsDate.getDate(), hourBegin, 0, 0, 0), selectedDayAsDateEnd = new Date(selectedDayAsDate.getFullYear(), selectedDayAsDate.getMonth(), selectedDayAsDate.getDate(), hourEnd, 0, 0, 0), newEvent = $scope.srvData.createObject("Event", {
            name: srvLocale.translations.htmlTextDefaultEventName,
            date_start: a4pDateFormat(selectedDayAsDateStart),
            date_end: a4pDateFormat(selectedDayAsDateEnd)
        });
        $scope.openDialog({
            backdrop: !1,
            windowClass: "modal c4p-modal-large c4p-dialog",
            controller: "ctrlEditDialogObject",
            templateUrl: "partials/dialog/edit_object.html",
            resolve: {
                srvData: function() {
                    return $scope.srvData;
                },
                srvLocale: function() {
                    return $scope.srvLocale;
                },
                srvConfig: function() {
                    return srvConfig;
                },
                objectItem: function() {
                    return newEvent;
                },
                removeFct: function() {
                    return function(obj) {
                        $scope.srvData.removeAndSaveObject(obj), $scope.gotoBack(0);
                    };
                },
                startSpinner: function() {
                    return $scope.startSpinner;
                },
                stopSpinner: function() {
                    return $scope.stopSpinner;
                },
                openDialogFct: function() {
                    return $scope.openDialog;
                }
            }
        }, function(result) {
            a4p.isDefined(result) && a4p.safeApply($scope, function() {
                $scope.addEvent(result);
            });
        });
    }, $scope.addEvent = function(event) {
        !a4p.isUndefined(event) && event && ($scope.srvData.addAndSaveObject(event), onEventChange(), 
        a4p.InternalLog.log("ctrlCalendar - openDialogEditEvent", "Created event.id.dbid:" + event.id.dbid), 
        $scope.onEventClick(event), srvAnalytics.add("Once", "Calendar - add Event"));
    }, $scope.removeEvent = function(event) {
        a4p.InternalLog.log("ctrlCalendar - removeEvent", event.name);
        var array = [ event.name ];
        $scope.openDialogConfirm(srvLocale.translations.htmlTextConfirmDelete, array, function(confirm) {
            confirm && a4p.safeApply($scope, function() {
                for (var attendees = $scope.srvData.getRemoteLinks(event, "attendee"), i = 0; i < attendees.length; i++) $scope.srvData.delAndSaveAttachment("Attendee", attendees[i], event);
                for (var attachees = $scope.srvData.getRemoteLinks(event, "attachee"), i = 0; i < attachees.length; i++) $scope.srvData.delAndSaveAttachment("Attachee", attachees[i], event);
                for (var children = $scope.srvData.getRemoteLinks(event, "child"), i = 0; i < children.length; i++) $scope.srvData.removeAndSaveObject(children[i]);
                $scope.srvData.removeAndSaveObject(event), onEventChange();
            });
        });
    }, $scope.selectHour = function(event, hour) {
        hour.selected = !0;
    }, $scope.cancelHour = function(event, hour) {
        hour.selected = !1;
    }, $scope.newEventAtHour = function(event, hour) {
        hour.selected = !1, $scope.addItemDialog(null, hour.hour);
    }, $scope.calendarLoadingSpinner = !0, $scope.afterCalendarSpinnerShow = function() {
        $timeout(function() {
            $scope.computeCalendar();
        }, 400);
    }, $scope.afterCalendarSpinnerHide = function() {}, $scope.computeCalendar = function() {
        a4p.InternalLog.log("ctrlCalendar", "computeCalendar "), $scope.initCalendarCtrl(), 
        $scope.calendarLoadingSpinner = !1;
    }, $scope.$on("mindMapUpdated", function() {
        $scope.calendarLoadingSpinner = !0;
    }), $scope.$on("mindMapLoaded", function() {
        $scope.calendarLoadingSpinner = !0;
    }), $scope.$on("responsiveWindowSizeChanged", function() {
        $scope.calendarLoadingSpinner = !0;
    });
}

function ctrlConfig($scope, srvConfig, srvLog, srvLocale, srvSecurity, srvDataTransfer, $modal, srvAnalytics) {
    $scope.srvConfig = srvConfig, $scope.configLogin = {
        email: srvSecurity.getA4pLogin(),
        password: ""
    }, $scope.configEmail = srvSecurity.getA4pLogin(), $scope.configPassword = "", $scope.warningEmail = !1, 
    $scope.warningPassword = !1, $scope.secureMode = srvSecurity.isSecured(), $scope.sizeCss = srvConfig.getSizeCss(), 
    $scope.themeCss = srvConfig.getThemeCss(), $scope.themes = [ {
        key: "c4p-default",
        href: "l4p/css/c4p-theme-bootstrap.css"
    }, {
        key: "c4p-amelia",
        href: "l4p/css/c4p-theme-amelia.css"
    }, {
        key: "c4p-cosmo",
        href: "l4p/css/c4p-theme-cosmo.css"
    }, {
        key: "c4p-apps4pro",
        href: "l4p/css/c4p-theme-apps4pro.css"
    } ], $scope.setEmail = function(email) {
        srvSecurity.setA4pLogin(email), $scope.configEmail = srvSecurity.getA4pLogin();
    }, $scope.setPassword = function(password) {
        srvSecurity.setA4pPassword(password), $scope.configPassword = password;
    }, $scope.verifyEmail = function() {
        return $scope.warningEmail = a4p.isUndefined($scope.configEmail) || "" == $scope.configEmail, 
        $scope.warningEmail;
    }, $scope.verifyPassword = function() {
        return $scope.warningPassword = a4p.isUndefined($scope.configPassword) || "" == $scope.configPassword, 
        $scope.warningPassword;
    }, $scope.getObjectTypes = function() {
        return c4p.Model.objectTypes;
    }, $scope.getHtmlFieldTitle = function(objectType, key) {
        return c4p.Model.a4p_types[objectType].editObjectFields[key].title;
    }, $scope.getDisplayNameList = function(objectType) {
        return c4p.Model.a4p_types[objectType].displayNameList;
    }, $scope.getCurrentNameComposition = function(objectType) {
        return c4p.Model.a4p_types[objectType].displayNameList[srvConfig.getNameComposition(objectType)];
    }, $scope.getNameComposition = function(objectType) {
        srvConfig.getNameComposition(objectType);
    }, $scope.setNameComposition = function(objectType, idx) {
        srvConfig.setNameComposition(objectType, idx);
    }, $scope.setBetaMode = function(isBetaMode) {
        srvConfig.setBetaMode(isBetaMode);
    }, $scope.setBetaCfgPrm = function(prmKey, flag) {
        srvConfig.setBetaCfgPrm(prmKey, flag);
    }, $scope.checkBetaCfgPrm = function(prmKey) {
        srvConfig.setBetaCfgPrm(prmKey, srvConfig.c4pConfig[prmKey]);
    }, $scope.setSecureMode = function(isSecureMode) {
        a4p.InternalLog.log("ctrlConfig", "SecureMode : " + isSecureMode), isSecureMode = 1 == isSecureMode || "true" == isSecureMode, 
        isSecureMode != srvSecurity.isSecured() && (isSecureMode ? $scope.openDialogInitPinCode(function(pinCode) {
            a4p.isDefined(pinCode) && a4p.safeApply($scope, function() {
                srvSecurity.register(pinCode), srvSecurity.setSecured(!0), $scope.secureMode = srvSecurity.isSecured();
            });
        }) : (srvSecurity.setSecured(!1), $scope.secureMode = srvSecurity.isSecured()));
    }, $scope.modifyPinCode = function() {
        $scope.openDialogModifyPinCode(function(pinCode) {
            a4p.safeApply($scope, function() {
                srvSecurity.register(pinCode);
            });
        });
    }, $scope.dialogActiveCrm = function() {
        $scope.openDialog({
            backdrop: !0,
            windowClass: "modal c4p-modal-left c4p-modal-search c4p-dialog",
            controller: "ctrlSelectCrmsDialog",
            templateUrl: "partials/dialog/dialogSelectCrms.html",
            resolve: {
                srvLocale: function() {
                    return srvLocale;
                },
                possibleCrms: function() {
                    return srvConfig.possibleCrms;
                },
                activeCrms: function() {
                    return srvConfig.activeCrms;
                },
                multiple: function() {
                    return !0;
                }
            }
        }, function(result) {
            a4p.isDefined(result) && a4p.safeApply($scope, function() {
                srvConfig.setActiveCrms(result), $scope.downloadClient();
            });
        });
    }, $scope.c4pConnection = function() {
        return $scope.configEmail = $scope.configLogin.email, $scope.configPassword = $scope.configLogin.password, 
        "demo@apps4pro.com" == $scope.configEmail.toLowerCase() && "demo" == $scope.configPassword.toLowerCase() ? (a4p.InternalLog.log("ctrlConfig", "Entering demo mode"), 
        $scope.setDemo(!0), void srvAnalytics.add("Once", "Login - demo")) : (a4p.InternalLog.log("ctrlConfig", "c4pConnection"), 
        $scope.setEmail($scope.configEmail), $scope.setPassword($scope.configPassword), 
        $scope.setRememberPassword($scope.rememberPassword), void ($scope.verifyEmail() || $scope.verifyPassword() || (srvAnalytics.add("Once", "Login"), 
        $scope.gotoSlide($scope.pageGuider, $scope.slideGuiderValidation), $scope.setDemo(!1))));
    }, $scope.createAccount = function() {
        if ($scope.configEmail = $scope.configLogin.email, $scope.setEmail($scope.configEmail), 
        $scope.setPassword(""), a4p.InternalLog.log("ctrlConfig", "createAccount " + $scope.configEmail), 
        !$scope.verifyEmail()) {
            a4p.InternalLog.log("ctrlConfig", "createAccount.. " + $scope.configEmail);
            var fctOnHttpSuccess = function(response) {
                a4p.safeApply($scope, function() {
                    var requestTitle = "Create account";
                    if (a4p.isUndefined(response.data)) srvLog.logWarning(srvConfig.c4pConfig.exposeCreateAccount, "Received no data", requestTitle), 
                    $scope.setMessageGuider("htmlMsgSynchronizationServerPb"), $scope.setA4pSpinnerState("doneWithPb"), 
                    $scope.setSlideToTransferInGuider($scope.slideGuiderCreateAccount); else {
                        var errorCode = response.data.error, responseOk = response.data.responseOK, responseLog = response.data.responseLog;
                        a4p.isUndefined(responseLog) && (responseLog = response.data.log), a4p.isDefined(errorCode) && "" != errorCode ? (a4p.isUndefined(srvLocale.translations[errorCode]) ? srvLog.logWarning(srvConfig.c4pConfig.exposeCreateAccount, "Received error code " + errorCode, requestTitle + " : " + (responseLog || a4pDumpData(responseData, 1))) : srvLog.logWarning(srvConfig.c4pConfig.exposeCreateAccount, srvLocale.translations[errorCode], requestTitle + " : " + responseLog), 
                        $scope.setMessageGuider(errorCode), $scope.setA4pSpinnerState("doneWithPb"), $scope.setSlideToTransferInGuider($scope.slideGuiderCreateAccount)) : a4p.isUndefined(responseOk) || !responseOk ? (srvLog.logWarning(srvConfig.c4pConfig.exposeCreateAccount, "Received no OK", requestTitle + " : " + (responseLog || a4pDumpData(response.data, 1))), 
                        $scope.setMessageGuider("htmlMsgSynchronizationServerPb"), $scope.setA4pSpinnerState("doneWithPb"), 
                        $scope.setSlideToTransferInGuider($scope.slideGuiderCreateAccount)) : (srvLog.logSuccess(srvConfig.c4pConfig.exposeCreateAccount, "Account created", requestTitle + " : " + responseLog), 
                        srvAnalytics.add("Once", "Register"), $scope.setMessageGuider("htmlFormGuiderTextSuccessCreateAccount"), 
                        $scope.setA4pSpinnerState("done"), $scope.setSlideToTransferInGuider($scope.slideGuiderConnection));
                    }
                    $scope.gotoSlide($scope.pageGuider, $scope.slideGuiderValidationReceiveRes);
                });
            }, fctOnHttpError = function() {
                a4p.safeApply($scope, function() {
                    $scope.setMessageGuider("htmlMsgSynchronizationClientPb"), $scope.setA4pSpinnerState("doneWithPb"), 
                    $scope.setSlideToTransferInGuider($scope.slideGuiderCreateAccount), $scope.gotoSlide($scope.pageGuider, $scope.slideGuiderValidationReceiveRes);
                });
            }, params = {
                login: $scope.configEmail,
                language: srvLocale.getLanguage()
            };
            srvDataTransfer.sendData(srvConfig.c4pUrlCreateAccount, params, null, 6e4).then(fctOnHttpSuccess, fctOnHttpError), 
            $scope.setA4pSpinnerState("run"), $scope.gotoSlide($scope.pageGuider, $scope.slideGuiderValidation);
        }
    }, $scope.requestPassword = function() {
        if ($scope.configEmail = $scope.configLogin.email, $scope.setEmail($scope.configEmail), 
        $scope.setPassword(""), !$scope.verifyEmail()) {
            var fctOnHttpSuccess = function(response) {
                a4p.safeApply($scope, function() {
                    var requestTitle = "Forget password";
                    if (a4p.isUndefined(response.data)) srvLog.logWarning(srvConfig.c4pConfig.exposeRequestPassword, "Received no data", requestTitle), 
                    $scope.setMessageGuider("htmlMsgSynchronizationServerPb"), $scope.setA4pSpinnerState("doneWithPb"), 
                    $scope.setSlideToTransferInGuider($scope.slideGuiderRequestPassword); else {
                        var errorCode = response.data.error, responseOk = response.data.responseOK, responseLog = response.data.responseLog;
                        a4p.isUndefined(responseLog) && (responseLog = response.data.log), a4p.isDefined(errorCode) && "" != errorCode ? (a4p.isUndefined(srvLocale.translations[errorCode]) ? srvLog.logWarning(srvConfig.c4pConfig.exposeRequestPassword, "Received error code " + errorCode, requestTitle + " : " + (responseLog || a4pDumpData(responseData, 1))) : srvLog.logWarning(srvConfig.c4pConfig.exposeRequestPassword, srvLocale.translations[errorCode], requestTitle + " : " + responseLog), 
                        $scope.setMessageGuider(errorCode), $scope.setA4pSpinnerState("doneWithPb"), $scope.setSlideToTransferInGuider($scope.slideGuiderRequestPassword)) : a4p.isUndefined(responseOk) || !responseOk ? (srvLog.logWarning(srvConfig.c4pConfig.exposeRequestPassword, "Received no OK", requestTitle + " : " + (responseLog || a4pDumpData(response.data, 1))), 
                        $scope.setMessageGuider("htmlMsgSynchronizationServerPb"), $scope.setA4pSpinnerState("doneWithPb"), 
                        $scope.setSlideToTransferInGuider($scope.slideGuiderRequestPassword)) : (srvLog.logSuccess(srvConfig.c4pConfig.exposeRequestPassword, "Password has been regenerated", requestTitle + " : " + responseLog), 
                        $scope.setMessageGuider("htmlFormGuiderTextSuccessRequestPassword"), $scope.setA4pSpinnerState("done"), 
                        $scope.setSlideToTransferInGuider($scope.slideGuiderConnection));
                    }
                    $scope.gotoSlide($scope.pageGuider, $scope.slideGuiderValidationReceiveRes);
                });
            }, fctOnHttpError = function(response) {
                a4p.safeApply($scope, function() {
                    srvLog.logWarning(srvConfig.c4pConfig.exposeRequestPassword, "Password regeneration has failed", response.data), 
                    $scope.setMessageGuider("htmlMsgSynchronizationClientPb"), $scope.setA4pSpinnerState("doneWithPb"), 
                    $scope.setSlideToTransferInGuider($scope.slideGuiderRequestPassword), $scope.gotoSlide($scope.pageGuider, $scope.slideGuiderValidationReceiveRes);
                });
            }, params = {
                login: $scope.configEmail,
                language: srvLocale.getLanguage()
            };
            srvDataTransfer.sendData(srvConfig.c4pUrlForget, params, null, 3e4).then(fctOnHttpSuccess, fctOnHttpError), 
            $scope.setA4pSpinnerState("run"), $scope.gotoSlide($scope.pageGuider, $scope.slideGuiderValidation);
        }
    }, $scope.sendErrorReport = function() {
        $scope.openDialog({
            windowClass: "modal c4p-modal-full c4p-dialog",
            controller: "ctrlEditDialogErrorReport",
            templateUrl: "partials/dialog/dialogErrorReport.html",
            resolve: {
                srvLocale: function() {
                    return srvLocale;
                }
            }
        }, function(result) {
            if (a4p.isDefined(result)) {
                var fctOnHttpSuccess = function(response) {
                    if (a4p.isUndefined(response.data)) alert("Your error report has failed : we have received no data from our server."); else {
                        var errorCode = response.data.error, responseOk = response.data.responseOK, responseLog = response.data.responseLog;
                        a4p.isUndefined(responseLog) && (responseLog = response.data.log), alert(a4p.isDefined(errorCode) && "" != errorCode ? a4p.isUndefined(srvLocale.translations[errorCode]) ? "Your error report has failed : " + (responseLog || a4pDumpData(response.data, 1)) : "Your error report has failed : " + srvLocale.translations[errorCode] : a4p.isUndefined(responseOk) || !responseOk ? "Your error report has failed  : " + (responseLog || a4pDumpData(response.data, 1)) : "Your error report has been sent");
                    }
                }, fctOnHttpError = function(response) {
                    alert("Your error report has failed : " + response.data);
                }, params = {
                    feedback: result.feedback.message,
                    logs: srvLog.getInternalLog(),
                    errors: srvLog.getErrorLog(),
                    c4pToken: srvSecurity.getHttpRequestToken()
                };
                srvDataTransfer.sendData(srvConfig.c4pUrlErrorReport, params, null, 6e4).then(fctOnHttpSuccess, fctOnHttpError);
            }
        });
    }, $scope.guiderScrollPage = function(event, ctrl, eventName) {
        a4p.InternalLog.log("ctrlConfig", "guiderScrollPage " + event.side + eventName), 
        ctrl.next();
    }, $scope.initConfigCtrl = function() {
        ("guider" == $scope.page || "config" == $scope.slide) && ($scope.setNavTitle($scope.srvLocale.translations.htmlTitleConfig), 
        $scope.secureMode = srvSecurity.isSecured(), $scope.warningEmail = !1, $scope.warningPassword = !1, 
        $scope.configEmail = srvSecurity.getA4pLogin(), $scope.configPassword = "", $scope.configLogin.email = $scope.configEmail);
    }, $scope.setThemeCss = function(themeCss) {
        a4p.InternalLog.log("ctrlConfig", "setThemeCss : " + themeCss);
        for (var i = 0, nb = $scope.themes.length; nb > i; i++) if ($scope.themes[i].key == themeCss) {
            srvConfig.setThemeCss(themeCss), $("#c4p-css").attr({
                href: $scope.themes[i].href
            });
            break;
        }
    }, $scope.getPossibleSizeCss = function() {
        var values = [ "140%", "110%", "100%", "90%", "75%" ];
        return addValueToList(values, this.sizeCss), values;
    }, $scope.setSizeCss = function(sizeCss) {
        srvConfig.setSizeCss(sizeCss);
    }, $scope.sendFeedback = function() {
        $scope.openDialogSendFeedbackReport("CRM Pad user feedback");
    }, $scope.openHelpDialog = function() {
        $scope.openDialogMessage(srvLocale.translations.htmlTextNeedHelpDetail);
    }, $scope.switchUser = function() {
        var array = [];
        $scope.openDialogConfirm(srvLocale.translations.htmlTextConfirmSwitchUser, array, function(confirm) {
            confirm && $scope.gotoLogin();
        });
    }, $scope.$on("changeItemCategory", function() {
        $scope.warningEmail = !1, $scope.warningPassword = !1, $scope.configEmail = srvSecurity.getA4pLogin(), 
        $scope.configPassword = "";
    }), $scope.initConfigCtrl();
}

function ctrlDetail($scope, $timeout, $modal, version, srvData, srvFacet, srvLocale, srvLink, srvNav, srvConfig) {
    function createSameCompanyFilter(companyId) {
        return function(object) {
            return object.account_id.dbid == companyId;
        };
    }
    function createSameManagerFilter(managerId) {
        return function(object) {
            return object.manager_id.dbid == managerId;
        };
    }
    $scope.itemDetailDBId = void 0, $scope.auditCreator = "", $scope.auditCreatedDate = "", 
    $scope.auditModifier = "", $scope.auditModifiedDate = "", $scope.itemRelationCount = 0, 
    $scope.configStateEdit = !0, $scope.configStateAdd = !0, $scope.linkStateAdd = !1, 
    $scope.dataListener = srvData.addListenerOnUpdate(function(callbackId, action) {
        srvNav.item && "clear" == action && a4p.safeApply($scope, function() {
            $scope.clear();
        });
    }), $scope.navListener = srvNav.addListenerOnUpdate(function(callbackId, action) {
        "clear" == action ? a4p.safeApply($scope, function() {
            $scope.clear();
        }) : "goto" == action && (srvNav.item ? a4p.safeApply($scope, function() {
            $scope.detailLoadingSpinner = !0;
        }) : a4p.safeApply($scope, function() {
            $scope.clear();
        }));
    }), $scope.$on("$destroy", function() {
        srvNav.cancelListener($scope.navListener), srvData.cancelListener($scope.dataListener);
    }), $scope.clear = function() {
        $scope.itemDetailDBId = void 0, $scope.auditCreator = "", $scope.auditCreatedDate = "", 
        $scope.auditModifier = "", $scope.auditModifiedDate = "", $scope.configStateEdit = !0, 
        $scope.configStateAdd = !0, $scope.linkStateAdd = !1;
    }, $scope.objectTypes = function() {
        return c4p.Model.objectTypes;
    }, $scope.objectTypeIcon = function(objectType) {
        return c4p.Model.getTypeIcon(objectType);
    }, $scope.objectTypeColor = function(objectType) {
        return c4p.Model.getTypeColor(objectType);
    }, $scope.toggleLinkStateAdd = function() {
        $scope.linkStateAdd = !$scope.linkStateAdd;
    }, $scope.getPossibleLinkActionList = function(fromType, toType) {
        return a4p.isDefined(c4p.Model.linkActionMap[fromType]) && a4p.isDefined(c4p.Model.linkActionMap[fromType][toType]) ? c4p.Model.linkActionMap[fromType][toType] : [];
    }, $scope.isPossibleLinkAction = function(fromType, toType) {
        return a4p.isDefined(c4p.Model.linkActionMap[fromType]) && a4p.isDefined(c4p.Model.linkActionMap[fromType][toType]) ? c4p.Model.linkActionMap[fromType][toType].length > 0 : !1;
    }, $scope.ctrlDetail = function() {
        a4p.InternalLog.log("ctrlDetail", "new"), $scope.setNavTitle("");
    }, $scope._initDetail = function() {
        a4p.InternalLog.log("ctrlDetail - initDetail", "" + version), $scope.srvNav.item && ($scope.itemDetailDBId = $scope.srvNav.item.id.dbid, 
        a4p.InternalLog.log("ctrlDetail - initDetail", "" + $scope.srvNav.item.id.dbid), 
        $scope._refreshData(), "Document" == $scope.srvNav.item.a4p_type && ($scope.configStateAdd = !1));
    }, $scope._formatStringDateToDay = function(string) {
        var date = a4pDateParse(string), val = $scope.srvLocale.formatDate(date, "shortDate");
        return val;
    }, $scope._formatStringDateToTime = function(string) {
        var date = a4pDateParse(string), val = $scope.srvLocale.formatDate(date, "shortTime");
        return val;
    }, $scope._refreshData = function() {
        $scope.setNavTitle($scope.getItemTitle($scope.srvNav.item.a4p_type)), $scope.getDetailCompanyName(), 
        a4p.isDefined($scope.srvNav.item.created_by_id) && a4p.isDefined($scope.srvNav.item.created_by_id.dbid) && $scope.srvNav.item.created_date ? ($scope.auditCreator = $scope.getItemNameById($scope.srvNav.item.created_by_id.dbid), 
        $scope.auditCreatedDate = $scope._formatStringDateToDay($scope.srvNav.item.created_date)) : ($scope.auditCreator = "", 
        $scope.auditCreatedDate = ""), a4p.isDefined($scope.srvNav.item.last_modified_by_id) && a4p.isDefined($scope.srvNav.item.last_modified_by_id.dbid) && $scope.srvNav.item.last_modified_date ? ($scope.auditModifier = $scope.getItemNameById($scope.srvNav.item.last_modified_by_id.dbid), 
        $scope.auditModifiedDate = $scope._formatStringDateToDay($scope.srvNav.item.last_modified_date)) : ($scope.auditModifier = "", 
        $scope.auditModifiedDate = ""), ("Event" == $scope.srvNav.item.a4p_type || "Task" == $scope.srvNav.item.a4p_type) && a4p.isDefined($scope.srvNav.item.assigned_contact_id) && a4p.isDefined($scope.srvNav.item.assigned_contact_id.dbid) ? ($scope.leader = $scope.getItemNameById($scope.srvNav.item.assigned_contact_id.dbid), 
        $scope.leaderType = "", "" != $scope.leader && ($scope.leaderType = $scope.leader.a4p_type)) : ($scope.leader = "", 
        $scope.leaderType = "");
        var linked = $scope.srvData.getLinkedObjects($scope.srvNav.item);
        $scope.itemRelationCount = linked && "undefined" != typeof linked ? linked.length : 0;
    }, $scope.getHtmlLinkName = function(linkname) {
        var name = $scope.getItemNameById($scope.srvNav.item.id.dbid);
        return a4pFormat($scope.srvLocale.translations.htmlLinkName[linkname], name);
    }, $scope.getHtmlLinkHowto = function() {
        var name = $scope.getItemNameById($scope.srvNav.item.id.dbid);
        return a4pFormat(srvLocale.translations.htmlViewNlinkItemTextNoRelation, name);
    }, $scope.selectItem = function(item, closeAside) {
        item && (a4p.InternalLog.log("ctrlDetail", "selectItem", "" + item.a4p_type + item.id.dbid), 
        $scope.setItemAndGoDetail(item, closeAside === !0));
    }, $scope.getDetailCompanyName = function() {
        if ($scope.companyName = "", !$scope.srvNav.item || !$scope.srvNav.item.account_id) return $scope.companyName;
        for (var j = 0; j < $scope.srvData.currentItems.Account.length; j++) {
            var account = $scope.srvData.currentItems.Account[j];
            if (account.id.dbid == $scope.srvNav.item.account_id.dbid) {
                $scope.companyName = account.company_name;
                break;
            }
        }
        return $scope.companyName;
    }, $scope.addItemDialog = function(type) {
        if ($scope.srvNav.item) {
            var type = $scope.srvNav.item.a4p_type, object = $scope.srvNav.item;
            if (a4p.isDefined(object)) {
                var itemToCreate = $scope.srvData.createObject(type, {});
                a4p.safeApply($scope, function() {
                    $scope.editObjectDialog(itemToCreate, function(result) {
                        a4p.isDefined(result) && a4p.safeApply($scope, function() {
                            $scope.srvData.addAndSaveObject(result), srvLink.linkObjectsToItem(type, "", [ result ], object), 
                            "Event" == type ? $scope.setItemAndGoMeeting(result) : $scope.setItemAndGoDetail(result);
                        });
                    });
                });
            }
        }
    }, $scope.createAndLinkDialog = function(item, fromLink, toType) {
        if (!item) return void ($scope.linkStateAdd = !1);
        var newObject = $scope.srvData.createObject(toType, {});
        $scope.openDialog({
            backdrop: !1,
            windowClass: "modal c4p-modal-full c4p-dialog",
            controller: "ctrlEditDialogObject",
            templateUrl: "partials/dialog/edit_object.html",
            resolve: {
                srvData: function() {
                    return $scope.srvData;
                },
                srvLocale: function() {
                    return $scope.srvLocale;
                },
                srvConfig: function() {
                    return $scope.srvConfig;
                },
                objectItem: function() {
                    return newObject;
                },
                removeFct: function() {
                    return function(obj) {
                        $scope.srvData.removeAndSaveObject(obj);
                    };
                },
                startSpinner: function() {
                    return $scope.startSpinner;
                },
                stopSpinner: function() {
                    return $scope.stopSpinner;
                },
                openDialogFct: function() {
                    return $scope.openDialog;
                }
            }
        }, function(result) {
            a4p.isDefined(result) ? a4p.safeApply($scope, function() {
                srvData.addAndSaveObject(result), srvLink.linkItemToObjects(fromLink, item, toType, [ result ]), 
                $scope.linkStateAdd = !1;
            }) : a4p.safeApply($scope, function() {
                $scope.linkStateAdd = !1;
            });
        });
    }, $scope.linkAddDialog = function(item, fromLink, toType) {
        if (!item) return void ($scope.linkStateAdd = !1);
        var multipleChoice = !0, menus = [], addedOrganizers = [];
        if ("Event" == toType && "attended" == fromLink) ; else if ("Event" == toType && "parent" == fromLink) ; else if ("Event" == toType && "attached" == fromLink) ; else if ("Contact" == toType && "attendee" == fromLink) {
            if (a4p.isDefined(item.what_id.dbid)) {
                var whatObject = $scope.srvData.getObject(item.what_id.dbid);
                "Opportunity" == whatObject.a4p_type && a4p.isDefined(whatObject.account_id.dbid) ? (menus.push({
                    icon: "chevron-right",
                    name: "sameCompany",
                    filterFct: createSameCompanyFilter(whatObject.account_id.dbid)
                }), addedOrganizers.push(srvFacet.createSameCompanyOrganizer(whatObject.account_id.dbid))) : "Account" == whatObject.a4p_type && (menus.push({
                    icon: "chevron-right",
                    name: "sameCompany",
                    filterFct: createSameCompanyFilter(whatObject.id.dbid)
                }), addedOrganizers.push(srvFacet.createSameCompanyOrganizer(whatObject.id.dbid)));
            }
            if (a4p.isDefined(item.owner_id) && a4p.isDefined(item.owner_id.dbid)) {
                var ownerObject = $scope.srvData.getObject(item.owner_id.dbid);
                if (a4p.isDefined(ownerObject.manager_id.dbid)) {
                    var managerObject = $scope.srvData.getObject(ownerObject.manager_id.dbid);
                    menus.push({
                        icon: "chevron-right",
                        name: "sameManager",
                        filterFct: createSameManagerFilter(managerObject.id.dbid)
                    }), addedOrganizers.push(srvFacet.createSameManagerOrganizer(managerObject.id.dbid));
                }
                menus.push({
                    icon: "chevron-right",
                    name: "sameTeam",
                    filterFct: createSameManagerFilter(ownerObject.id.dbid)
                }), addedOrganizers.push(srvFacet.createSameTeamOrganizer(ownerObject.id.dbid));
            }
        } else if ("Document" == toType && "attachee" == fromLink) ; else if ("Document" == toType && "child" == fromLink) ; else {
            for (var done = !1, fromFieldIdx = 0; fromFieldIdx < c4p.Model.a4p_types[item.a4p_type].linkFields.length; fromFieldIdx++) {
                var linkModel = c4p.Model.a4p_types[item.a4p_type].linkFields[fromFieldIdx], fromField = linkModel.key, isArrayField = a4p.isDefined(c4p.Model.objectArrays[item.a4p_type][fromField]);
                if (isArrayField) {
                    if (linkModel.one == fromLink) {
                        for (var toTypeIdx = 0; toTypeIdx < linkModel.types.length; toTypeIdx++) if (linkModel.types[toTypeIdx] == toType) {
                            multipleChoice = !0, done = !0;
                            break;
                        }
                        if (done) break;
                    }
                } else if (linkModel.one == fromLink) {
                    for (var toTypeIdx = 0; toTypeIdx < linkModel.types.length; toTypeIdx++) if (linkModel.types[toTypeIdx] == toType) {
                        multipleChoice = !1, done = !0;
                        break;
                    }
                    if (done) break;
                }
            }
            if (!done) for (var fromFieldIdx = 0; fromFieldIdx < c4p.Model.a4p_types[toType].linkFields.length; fromFieldIdx++) {
                var linkModel = c4p.Model.a4p_types[toType].linkFields[fromFieldIdx], fromField = linkModel.key, isArrayField = a4p.isDefined(c4p.Model.objectArrays[toType][fromField]);
                if (isArrayField) {
                    if (linkModel.many == fromLink) {
                        for (var toTypeIdx = 0; toTypeIdx < linkModel.types.length; toTypeIdx++) if (linkModel.types[toTypeIdx] == item.a4p_type) {
                            multipleChoice = !0, done = !0;
                            break;
                        }
                        if (done) break;
                    }
                } else if (linkModel.many == fromLink) {
                    for (var toTypeIdx = 0; toTypeIdx < linkModel.types.length; toTypeIdx++) if (linkModel.types[toTypeIdx] == item.a4p_type) {
                        multipleChoice = !0, done = !0;
                        break;
                    }
                    if (done) break;
                }
            }
            if (!done) return;
        }
        var dialogOptions = {
            backdrop: !0,
            windowClass: "modal c4p-modal-left c4p-modal-search c4p-dialog"
        }, resolve = {
            srvData: function() {
                return srvData;
            },
            srvConfig: function() {
                return srvConfig;
            },
            srvLocale: function() {
                return srvLocale;
            },
            type: function() {
                return toType;
            },
            initFilter: function() {
                return function(object) {
                    return object.id.dbid == item.id.dbid ? !1 : srvData.isObjectOwnedByUser(object) && srvData.isObjectOwnedByUser(item) ? !srvLink.hasNamedLinkTo(item.a4p_type, fromLink, item, object) : !1;
                };
            },
            initSelector: function() {
                return function() {
                    return !1;
                };
            },
            multiple: function() {
                return multipleChoice;
            },
            createFct: function() {
                return function() {
                    var newObject = srvData.createObject(toType, {});
                    return promiseDialog({
                        backdrop: !1,
                        windowClass: "modal c4p-modal-full c4p-dialog",
                        controller: "ctrlEditDialogObject",
                        templateUrl: "partials/dialog/edit_object.html",
                        resolve: {
                            srvData: function() {
                                return srvData;
                            },
                            srvLocale: function() {
                                return srvLocale;
                            },
                            srvConfig: function() {
                                return srvConfig;
                            },
                            objectItem: function() {
                                return newObject;
                            },
                            removeFct: function() {
                                return function(obj) {
                                    srvData.removeAndSaveObject(obj);
                                };
                            },
                            startSpinner: function() {
                                return $scope.startSpinner;
                            },
                            stopSpinner: function() {
                                return $scope.stopSpinner;
                            },
                            openDialogFct: function() {
                                return $scope.openDialog;
                            }
                        }
                    });
                };
            }
        };
        srvConfig.c4pConfig.exposeFacetDialog ? (dialogOptions.controller = "ctrlFacetSelectedDialog", 
        dialogOptions.templateUrl = "partials/dialog/dialogFacetSelected.html", resolve.srvFacet = function() {
            return srvFacet;
        }, resolve.addedOrganizers = function() {
            return addedOrganizers;
        }) : (dialogOptions.controller = "ctrlSelectObjectsDialog", dialogOptions.templateUrl = "partials/dialog/dialogSelectObjects.html", 
        resolve.suggestedMenus = function() {
            return menus;
        }), dialogOptions.resolve = resolve, $scope.openDialog(dialogOptions, function(result) {
            a4p.isDefined(result) ? a4p.safeApply($scope, function() {
                srvLink.linkItemToObjects(fromLink, item, toType, result), $scope.linkStateAdd = !1;
            }) : a4p.safeApply($scope, function() {
                $scope.linkStateAdd = !1;
            });
        });
    }, $scope.unlinkDialog = function(linkName, linkItem) {
        if (srvNav.item) {
            var itemName = $scope.getItemNameById($scope.srvNav.item.id.dbid), linkItemName = $scope.getItemNameById(linkItem.id.dbid), relationUnlinkText = a4pFormat(srvLocale.translations.htmlTextConfirmDeleteLink, itemName, linkItemName), array = [ relationUnlinkText ];
            $scope.openDialogConfirm(srvLocale.translations.htmlTextConfirmRemoveLink, array, function(confirm) {
                confirm && a4p.safeApply($scope, function() {
                    srvLink.unlinkObjectsFromItem(srvNav.item.a4p_type, linkName, [ srvNav.item ], linkItem);
                });
            });
        }
    }, $scope.detailLoadingSpinner = !0, $scope.afterDetailSpinnerShow = function() {
        console.log("Fully shown"), $timeout(function() {
            $scope.computeDetail();
        }, 800);
    }, $scope.afterDetailSpinnerHide = function() {}, $scope.computeDetail = function() {
        a4p.InternalLog.log("ctrlDetail", "computeDetail "), $scope._initDetail(), a4p.safeApply($scope, function() {
            $scope.detailLoadingSpinner = !1;
        });
    }, $scope.$on("setItemDetail", function(event, item) {
        a4p.InternalLog.log("ctrlDetail - Broadcast setItemDetail", "" + item.id.dbid), 
        $scope.itemDetailDBId != item.id.dbid && ($scope.detailLoadingSpinner = !0);
    }), $scope.$on("mindMapUpdated", function() {
        $scope.detailLoadingSpinner = !0;
    }), $scope.$on("mindMapLoaded", function() {
        $scope.detailLoadingSpinner = !0;
    }), $scope.ctrlDetail(), $scope.google = !1, "undefined" != typeof google && ($scope.google = !0, 
    google.maps.visualRefresh = !0), angular.extend($scope, {
        position: {
            coords: {
                latitude: 45,
                longitude: -73
            }
        },
        centerProperty: {
            latitude: 45,
            longitude: -73
        },
        zoomProperty: 4,
        markersProperty: [ {
            latitude: 45,
            longitude: -74
        } ],
        clickedLatitudeProperty: null,
        clickedLongitudeProperty: null,
        eventsProperty: {
            click: function(mapModel, eventName, originalEventArgs) {
                console.log("user defined event on map directive with scope", this), console.log("user defined event: " + eventName, mapModel, originalEventArgs);
            }
        }
    }), $scope.findGMLocation = function() {
        function success(position) {
            var mapcanvas = document.createElement("div");
            mapcanvas.id = "mapcontainer", mapcanvas.style.height = "400px", mapcanvas.style.width = "600px", 
            document.querySelector("article").appendChild(mapcanvas);
            {
                var coords = new google.maps.LatLng(position.coords.latitude, position.coords.longitude), options = {
                    zoom: 15,
                    center: coords,
                    mapTypeControl: !1,
                    navigationControlOptions: {
                        style: google.maps.NavigationControlStyle.SMALL
                    },
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                }, map = new google.maps.Map(document.getElementById("mapcontainer"), options);
                new google.maps.Marker({
                    position: coords,
                    map: map,
                    title: "You are here!"
                });
            }
        }
        navigator.geolocation ? navigator.geolocation.getCurrentPosition(success) : error("Geo Location is not supported");
    };
}

function ctrlDetailLink($scope, srvData, srvLocale, srvNav) {
    $scope.item = null, $scope.linkName = "", $scope.init = function(obj) {
        $scope.item = obj, $scope.linkName = srvLocale.translations.htmlTitle[obj.a4p_type], 
        srvNav.item && "Contact" == obj.a4p_type && ("Contact" == srvNav.item.a4p_type ? srvNav.item.manager_id.dbid == obj.id.dbid ? $scope.linkName = srvLocale.translations.htmlTextManager : obj.manager_id.dbid == srvNav.item.id.dbid && ($scope.linkName = srvLocale.translations.htmlTextTeam) : "Event" == srvNav.item.a4p_type && srvData.getAttachment("Attendee", obj, srvNav.item) && ($scope.linkName = srvLocale.translations.htmlTextAttendee));
    };
}

function ctrlDetailedObject($scope, $sce, srvLocale, srvData, srvNav, srvLink, srvConfig, srvAnalytics) {
    $scope.srvLocale = srvLocale, $scope.linkedItems = {}, $scope.init = function(item) {
        $scope.item = item, $scope.itemIcon = c4p.Model.getItemIcon(item), $scope.itemColor = c4p.Model.getItemColor(item), 
        $scope.itemName = srvConfig.getItemName(item), $scope.isFile = !!c4p.Model.files[item.a4p_type], 
        $scope.isVideo = $scope.isVideoFormatSupported(), $scope.linkedItems = {}, $scope.cards = [], 
        $scope.allDayEvent = !1, $scope.manyDayEvent = !1;
        var objDesc = c4p.Model.a4p_types[$scope.item.a4p_type], editDesc = objDesc.editObjectFields, cards = objDesc.displayDetailedObjectCards;
        if ($scope.item.date_start && $scope.item.date_end) {
            var startDate = srvLocale.formatDate($scope.item.date_start, "shortDate"), endDate = srvLocale.formatDate($scope.item.date_end, "shortDate");
            startDate != endDate ? ($scope.manyDayEvent = !0, $scope.allDayEvent = !0) : $scope.item.duration_hours > 23 && ($scope.allDayEvent = !0);
        }
        if (a4p.isDefined(editDesc) && a4p.isDefined(cards)) for (var cardIdx = 0, cardNb = cards.length; cardNb > cardIdx; cardIdx++) {
            var cardDesc = cards[cardIdx], cardShow = !1, card = {
                type: cardDesc.type,
                brSeparated: cardDesc.brSeparated,
                groups: []
            }, groups = cardDesc.groups;
            if (a4p.isDefined(groups)) for (var groupIdx = 0, groupNb = groups.length; groupNb > groupIdx; groupIdx++) {
                for (var groupDesc = groups[groupIdx], groupShow = !!groupDesc.icon && groupDesc.icon.length > 0 || !!groupDesc.name || !!groupDesc.synchro, group = {
                    synchro: !!groupDesc.synchro,
                    icon: groupDesc.icon ? groupDesc.icon : "",
                    name: !!groupDesc.name,
                    title: groupDesc.title ? srvLocale.translations[groupDesc.title] : "",
                    size: groupDesc.size,
                    fields: []
                }, fieldIdx = 0, fieldNb = groupDesc.fields.length; fieldNb > fieldIdx; fieldIdx++) {
                    var fieldType = "", value = "", fieldTitle = "", fieldDesc = groupDesc.fields[fieldIdx], fieldKey = fieldDesc.key, fieldValue = $scope.item[fieldKey], isLink = objDesc.linkDescs[fieldKey], isArray = a4p.isDefined(c4p.Model.objectArrays[$scope.item.a4p_type][fieldKey]);
                    if (isLink) {
                        fieldTitle = srvLocale.translations.htmlShortLinkName[objDesc.linkDescs[fieldKey].one], 
                        fieldType = "";
                        var targetItem;
                        if (isArray) {
                            value = [];
                            for (var valueIdx = 0, valueNb = fieldValue.length; valueNb > valueIdx; valueIdx++) targetItem = srvData.getObject(fieldValue[valueIdx].dbid), 
                            targetItem && ($scope.linkedItems[targetItem.id.dbid] = targetItem, value.push(srvConfig.getItemName(targetItem)));
                        } else targetItem = srvData.getObject(fieldValue.dbid), targetItem && ($scope.linkedItems[targetItem.id.dbid] = targetItem, 
                        value = srvConfig.getItemName(targetItem));
                    } else if (a4p.isDefined(editDesc[fieldKey])) (a4p.isDefined(editDesc[fieldKey].type) || a4p.isDefined(fieldDesc.type)) && (fieldType = fieldDesc.type ? fieldDesc.type : editDesc[fieldKey].type), 
                    a4p.isDefined(editDesc[fieldKey].title) && (fieldTitle = srvLocale.translations[editDesc[fieldKey].title]), 
                    "duration" == fieldType ? $scope.allDayEvent ? (fieldType = "datetime", value = fieldValue) : (fieldType = "", 
                    value = $scope.item.duration_hours + ":" + a4pPadNumber($scope.item.duration_minutes, 2)) : "samedayTIME" == fieldType ? $scope.manyDayEvent ? (fieldType = "dateTIME", 
                    value = fieldValue) : (fieldType = "TIME", value = fieldValue) : value = fieldValue; else if (a4p.isDefined(fieldValue)) value = fieldValue; else {
                        fieldTitle = srvLocale.translations.htmlShortLinkName[fieldKey], fieldType = "", 
                        isArray = !0, value = [], fieldValue = srvData.getRemoteLinks($scope.item, fieldKey);
                        for (var valueIdx = 0, valueNb = fieldValue.length; valueNb > valueIdx; valueIdx++) targetItem = fieldValue[valueIdx], 
                        targetItem && ($scope.linkedItems[targetItem.id.dbid] = targetItem, value.push(srvConfig.getItemName(targetItem)));
                    }
                    var field = {
                        key: fieldKey,
                        title: fieldDesc.title ? fieldTitle : "",
                        type: fieldType,
                        isArray: isArray,
                        value: value,
                        prefix: fieldDesc.prefix ? srvLocale.translations[fieldDesc.prefix] : "",
                        suffix: fieldDesc.suffix ? srvLocale.translations[fieldDesc.suffix] : "",
                        size: fieldDesc.size,
                        separator: fieldDesc.separator || ""
                    };
                    value && (groupShow = !0, group.fields.push(field));
                }
                groupShow ? (cardShow = !0, card.groups.push(group)) : group.title && card.groups.push(group);
            }
            cardShow && $scope.cards.push(card);
        }
        a4p.isTrueOrNonEmpty(item.a4p_type) && srvAnalytics.add("Once", "View " + item.a4p_type);
    }, $scope.clear = function() {
        $scope.item = null, $scope.itemIcon = "", $scope.itemName = "", $scope.isFile = !1, 
        $scope.isVideo = !1, $scope.allDayEvent = !1, $scope.manyDayEvent = !1, $scope.cards = [], 
        $scope.linkedItems = {};
    }, $scope.isVideoFormatSupported = function() {
        if ($scope.isFile && c4p.Model.isVideo($scope.item.extension)) if (a4p.BrowserCapabilities.isIDevice) {
            if ("mp4" == $scope.item.extension) return !0;
        } else if ("mp4" == $scope.item.extension || "ogv" == $scope.item.extension || "webm" == $scope.item.extension) return !0;
        return !1;
    }, $scope.renderHtmlText = function(text) {
        var html = text.replace(new RegExp("\r?\n", "g"), "<br />");
        return html = $sce.trustAsHtml(html);
    }, $scope.dataListener = srvData.addListenerOnUpdate(function(callbackId, action, type, id) {
        if ("clear" == action) a4p.safeApply($scope, function() {
            $scope.clear();
        }); else if ("remove" == action) $scope.item && $scope.item.id.dbid == id ? a4p.safeApply($scope, function() {
            $scope.clear();
        }) : $scope.linkedItems[id] && a4p.safeApply($scope, function() {
            $scope.init(srvNav.item);
        }); else if ("set" == action) {
            var object = srvData.getObject(id);
            $scope.item && ($scope.item.id.dbid == id || $scope.linkedItems[id] || object && srvData.hasAnyLinkTo($scope.item, object)) && a4p.safeApply($scope, function() {
                $scope.init(srvNav.item);
            });
        } else if ("add" == action) {
            var object = srvData.getObject(id);
            $scope.item && object && srvData.hasAnyLinkTo($scope.item, object) && a4p.safeApply($scope, function() {
                $scope.init(srvNav.item);
            });
        }
    }), $scope.navListener = srvNav.addListenerOnUpdate(function(callbackId, action) {
        "clear" == action ? a4p.safeApply($scope, function() {
            $scope.clear();
        }) : "goto" == action && (srvNav.item ? a4p.safeApply($scope, function() {
            $scope.init(srvNav.item);
        }) : a4p.safeApply($scope, function() {
            $scope.clear();
        }));
    }), $scope.$on("$destroy", function() {
        srvNav.cancelListener($scope.navListener), srvData.cancelListener($scope.dataListener);
    }), srvNav.item ? $scope.init(srvNav.item) : $scope.clear();
}

function ctrlDragObject($scope, $modal, $timeout, srvLocale, srvData, srvNav, srvLink, srvConfig) {
    function setCursorToMove(scope, event, element) {
        scope.dragProxy = document.createElement("div"), $scope.dragProxyOver ? scope.dragProxy.setAttribute("class", "popover top in c4p-popover-drop") : scope.dragProxy.setAttribute("class", "popover top in c4p-popover-drag"), 
        scope.dragProxy.setAttribute("style", "display: block; top:" + (event.clientY - $scope.dragElementY) + "px; left:" + (event.clientX - $scope.dragElementX) + "px; ");
        var popArrow = document.createElement("div");
        popArrow.setAttribute("class", "arrow");
        var popContent = document.createElement("div");
        if (popContent.setAttribute("class", "popover-content"), element && "undefined" != typeof element && element[0].children[0]) {
            var el = element[0].children[0].cloneNode(!0), canvasOld = element[0].getElementsByTagName("canvas")[0];
            if (canvasOld) {
                var newCanvas = el.getElementsByTagName("canvas")[0], context = newCanvas.getContext("2d");
                context.drawImage(canvasOld, 0, 0);
            }
            popContent.appendChild(el);
        } else popContent.innerHTML += "<div class='popover-content'>", popContent.innerHTML += "<c4p-thumb width='30' height='30' ", 
        popContent.innerHTML += "  text='" + $scope.dragItemName + "' indic=2 ", popContent.innerHTML += "    icon='glyphicon-" + $scope.dragItemIcon + " color='red' ", 
        popContent.innerHTML += "    url='" + $scope.dragItem.thumb_url + "'> ", popContent.innerHTML += "</c4p-thumb>", 
        popContent.innerHTML += "</div>";
        scope.dragProxy.appendChild(popArrow), scope.dragProxy.appendChild(popContent), 
        document.getElementsByTagName("body")[0].appendChild(scope.dragProxy);
    }
    function moveCursor(scope, event) {
        scope.dragIsActive = !0, scope.dragProxy.setAttribute("style", "display: block; top:" + (event.clientY - $scope.dragElementY) + "px; left:" + (event.clientX - $scope.dragElementX) + "px; ");
    }
    function cancelMoveCursor(scope) {
        scope.dragProxy && scope.dragProxy.parentNode && scope.dragProxy.parentNode.removeChild(scope.dragProxy), 
        scope.dragProxy = null, scope.dragIsActive = !1;
    }
    $scope.dragProxy = null, $scope.dragElementX = 70, $scope.dragElementY = 60, $scope.dragProxyOver = !1, 
    $scope.dragIsActive = !1, $scope.dragCloseAsidePage = !1, $scope.dragItem = {}, 
    $scope.dragItemIcon = "", $scope.dragItemName = "", $scope.init = function(item, dragCloseAsidePage) {
        $scope.dragItem = item, $scope.dragItemIcon = c4p.Model.getItemIcon(item), $scope.dragItemName = srvConfig.getItemName(item), 
        $scope.dragCloseAsidePage = dragCloseAsidePage || !1;
    }, $scope.holdStart = function(event, element) {
        $scope.dragProxy || (srvNav.holdStartItem($scope.dragItem), setCursorToMove($scope, event, element));
    }, $scope.holdStop = function() {
        srvNav.holdStopItem(), $scope.dragProxy && setTimeout(function() {
            $scope.dragIsActive || cancelMoveCursor($scope);
        }, 1e3);
    }, $scope.dragOverEnter = function() {
        $scope.dragProxyOver = !0;
    }, $scope.dragOverLeave = function() {
        $scope.dragProxyOver = !1;
    }, $scope.dragStart = function(event, element) {
        event.dataTransfer = $scope.dragItem, $scope.dragProxy || setCursorToMove($scope, event, element);
    }, $scope.dragMove = function(event) {
        $scope.dragProxy && moveCursor($scope, event);
    }, $scope.dragEnd = function() {
        $scope.dragProxy && cancelMoveCursor($scope), $scope.dragIsActive = !1;
    }, $scope.dragCancel = function() {
        $scope.dragProxy && cancelMoveCursor($scope), $scope.dragIsActive = !1;
    };
}

function ctrlInlinedObject($scope, srvData, srvConfig, srvLocale) {
    $scope.init = function(item) {
        item && ($scope.inlinedItem = item, $scope.inlinedItemIcon = $scope.getObjectIcon(item), 
        $scope.inlinedItemColor = $scope.getObjectColor(item), $scope.inlinedItemName = $scope.getObjectName(item), 
        $scope.inlinedItemSecondName = "", $scope.inlinedItem.a4p_type && "Event" == $scope.inlinedItem.a4p_type ? ($scope.inlinedItem.name && ($scope.inlinedItemName = $scope.inlinedItem.name), 
        $scope.inlinedItem.date_start && ($scope.inlinedItemSecondName = srvLocale.formatDate($scope.inlinedItem.date_start, "shortDate"))) : !$scope.inlinedItem.a4p_type || "Note" != $scope.inlinedItem.a4p_type && "Document" != $scope.inlinedItem.a4p_type || $scope.inlinedItem.created_date && ($scope.inlinedItemSecondName = srvLocale.formatDate($scope.inlinedItem.created_date, "shortDate")));
    };
}

function ctrlLinkActions($scope, $timeout, srvData, srvNav, srvLink, srvConfig, srvLog) {
    $scope.dndActive = !1, $scope.fromLink = "", $scope.fromItem = null, $scope.dropOver = !1, 
    $scope.dropOverEnter = function() {
        $scope.dndActive && !$scope.dropOver && a4p.safeApply($scope, function() {
            $scope.dropOver = !0;
        });
    }, $scope.dropOverLeave = function() {
        $scope.dndActive && $scope.dropOver && a4p.safeApply($scope, function() {
            $scope.dropOver = !1;
        });
    }, $scope.dndStart = function(event) {
        if ($scope.dndActive = !1, $scope.fromLink = "", $scope.fromItem = null, srvData.isObjectOwnedByUser(srvNav.item) && event.dataTransfer) {
            if (event.dataTransfer.id.dbid == srvNav.item.id.dbid) return;
            a4p.safeApply($scope, function() {
                if (a4p.isDefined(c4p.Model.linkActionMap[event.dataTransfer.a4p_type]) && a4p.isDefined(c4p.Model.linkActionMap[event.dataTransfer.a4p_type][srvNav.item.a4p_type])) for (var list = c4p.Model.linkActionMap[event.dataTransfer.a4p_type][srvNav.item.a4p_type], i = 0, nb = list.length; nb > i; i++) {
                    var fromLink = list[i], trashAction = srvLink.hasNamedLinkTo(event.dataTransfer.a4p_type, fromLink, event.dataTransfer, srvNav.item);
                    if (!trashAction) {
                        $scope.dndActive = !0, $scope.fromLink = fromLink, $scope.fromItem = event.dataTransfer, 
                        srvNav.holdStartItem($scope.fromItem);
                        break;
                    }
                }
            });
        }
    }, $scope.dndEnd = function() {
        $scope.dndActive && $scope.onCancel();
    }, $scope.dndCancel = function() {
        $scope.dndActive && $scope.onCancel();
    }, $scope.dropStart = function() {}, $scope.dropEnd = function() {
        var fromName = $scope.getItemNameById($scope.fromItem.id.dbid), toName = $scope.getItemNameById(srvNav.item.id.dbid), linkName = $scope.fromLink;
        if ($scope.dndActive) {
            $scope.dndActive = !1;
            var linkDoneMsg = "Link done beetween " + fromName + " and " + toName + " as " + linkName, linkNotyMsg = "Link created";
            srvLog.logSuccess(!0, linkDoneMsg, linkNotyMsg), $timeout(function() {
                srvLink.linkObjectsToItem($scope.fromItem.a4p_type, $scope.fromLink, [ $scope.fromItem ], srvNav.item);
            }, 200);
        } else {
            var linkDoneMsg = "Link impossible or already done beetween " + fromName + " and " + toName + " as " + linkName, linkNotyMsg = "Link canceled";
            srvLog.logWarning(!0, linkDoneMsg, linkNotyMsg);
        }
    }, $scope.dropCancel = function() {
        $scope.dndActive && $scope.onCancel();
    }, $scope.onCancel = function() {
        a4p.safeApply($scope, function() {
            $scope.dndActive = !1, $scope.fromLink = "", $scope.fromItem = null, srvNav.holdStopItem();
        });
    };
}

function ctrlMeeting($scope, $modal, srvData, srvConfig, srvNav, srvLocale, srvAnalytics) {
    $scope.srvData = srvData, $scope.srvNav = srvNav, $scope.srvConfig = srvConfig, 
    $scope.scrollXCoord = 0, $scope.meetingSidePanelWidth = 0, $scope.hasScroller = !1, 
    $scope.onePageFormat = !0, $scope.pageHeight = 320, $scope.pageWidth = 240, $scope.showMenu = !0, 
    $scope.updateScrollerTimer = null, $scope.meetingSensePanel = null, $scope.setMeetingSensePanel = function(sense) {
        $scope.meetingSensePanel = sense;
    }, $scope.plans = [], $scope.viewerDocList = [], $scope.selectedMeetingPlan = null, 
    $scope.currentMeetingItem = null, $scope.editorType = "Document", $scope.modeEdit = !1, 
    $scope.meetingView = "meetingSplitView", $scope.itemNameEditable = !1, $scope.isPresentationOn = !1, 
    $scope.sidePanel = "partials/meeting/meeting_plan.html", $scope.mainPanel = "partials/meeting/meeting_plan_viewer.html", 
    $scope.actionItems = {
        plan: {
            icon: "globe",
            side: "partials/meeting/meeting_plan.html",
            main: "partials/meeting/meeting_plan_viewer.html"
        },
        others: {
            icon: "link",
            side: "partials/meeting/meeting_linked_object.html",
            main: "partials/meeting/meeting_object_viewer.html"
        },
        select: {
            icon: "link",
            side: "partials/meeting/meeting_linked_object.html",
            main: "partials/meeting/meeting_plan_viewer.html"
        }
    }, $scope.selectedActionItem = "plan", $scope.actionItem = $scope.actionItems[$scope.selectedActionItem], 
    $scope.updateScroller = a4p.throttle(function() {
        var relative = !1, timeMs = 500, x = 0, y = 0;
        x = $scope.scrollXCoord, console.log("meetingSensePanel scrollTo " + x), $scope.meetingSensePanel && $scope.meetingSensePanel.scroll && $scope.meetingSensePanel.scroll.scrollTo(x, y, timeMs, relative);
    }, 200), $scope.$on("$destroy", function() {
        $scope.savePlans();
    }), $scope.beforeWindowSizeChanged = function() {
        $scope.windowSizeChanged(), $scope.hasScroller && (null != $scope.updateScrollerTimer && window.clearTimeout($scope.updateScrollerTimer), 
        $scope.updateScrollerTimer = window.setTimeout(function() {
            a4p.safeApply($scope, function() {
                $scope.updateScroller();
            });
        }, 200));
    }, $scope.initMeetingElements = function() {
        srvAnalytics.add("Once", "Meeting Show");
        var attendee = srvData.getTypedDirectLinks($scope.srvNav.item, "child", "Attendee");
        attendee && srvAnalytics.add("Uses", "Meeting Show - N", attendee.length), $scope.plans = srvData.getTypedDirectLinks($scope.srvNav.item, "child", "Plan"), 
        $scope.plans = $scope.plans.sort(function(planA, planB) {
            return planA.pos - planB.pos;
        });
        for (var i = 0; i < $scope.plans.length; i++) $scope.plans[i].pos = i;
        if (0 == $scope.plans.length) {
            var note = {
                a4p_type: "Note",
                title: srvLocale.translations.htmlFormTitle,
                description: srvLocale.translations.htmlFormDescription
            }, object = $scope.addNewNote(note);
            $scope.addMeetingElement(object);
        }
    }, $scope.savePlans = function(plans) {
        a4p.isUndefinedOrNull(plans) && (plans = $scope.plans);
        for (var i = 0; i < plans.length; i++) {
            plans[i].pos = i, srvData.setAndSaveObject(plans[i]);
            for (var plannees = srvData.getTypedDirectLinks(plans[i], "plannee", "Plannee"), j = 0; j < plannees.length; j++) srvData.setAndSaveObject(plannees[j]);
            var subPlans = srvData.getTypedDirectLinks(plans[i], "child", "Plan");
            subPlans = subPlans.sort(function(planA, planB) {
                return planA.pos - planB.pos;
            }), $scope.savePlans(subPlans);
        }
    }, $scope.windowSizeChanged = function() {
        $scope.onePageFormat = a4p.Resize.resizePortrait, $scope.pageHeight = a4p.Resize.resizeHeight, 
        $scope.pageWidth = a4p.Resize.resizeWidth, $scope.hasScroller = $scope.onePageFormat;
    }, $scope.setModeEdit = function(mode) {
        var oldMode = $scope.modeEdit;
        $scope.modeEdit = mode, oldMode && 0 == mode && $scope.srvData.setAndSaveObject($scope.srvNav.item);
    }, $scope.setMeetingView = function(newView) {
        $scope.meetingView = newView;
    }, $scope.quitMeetingView = function() {
        $scope.srvSecurity.isSecured() && $scope.modeLock ? $scope.openDialogLocked(function() {
            a4p.safeApply($scope, function() {
                $scope.savePlans(), $scope.setItemAndGoDetail($scope.srvNav.item);
            });
        }) : ($scope.savePlans(), $scope.setItemAndGoDetail($scope.srvNav.item));
    }, $scope.getContentPanelWidth = function() {
        return $scope.hasScroller ? $scope.pageWidth : .6 * $scope.pageWidth;
    }, $scope.getSidePanelWidth = function() {
        return $scope.hasScroller ? $scope.pageWidth : .4 * $scope.pageWidth;
    }, $scope.onMeetingScrollMove = function() {}, $scope.onMeetingScrollEnd = function() {}, 
    $scope.onMeetingAfterScrollEnd = function() {
        $scope.hasScroller && $scope.meetingSensePanel && $scope.meetingSensePanel.scroll && ($scope.meetingSensePanel.scroll.x > -100 ? ($scope.scrollXCoord = 0, 
        a4p.safeApply($scope, function() {
            $scope.updateScroller();
        })) : $scope.meetingSensePanel.scroll.x < 100 - $scope.pageWidth ? ($scope.scrollXCoord = -$scope.pageWidth, 
        a4p.safeApply($scope, function() {
            $scope.updateScroller();
        })) : $scope.scrollXCoord = $scope.meetingSensePanel.scroll.x);
    }, $scope.tapOnLinkedObject = function(item, firstSingleTap) {
        return firstSingleTap ? void a4p.safeApply($scope, function() {}) : void a4p.safeApply($scope, function() {
            $scope.setActionItem("others", "side"), $scope.showDocument(item);
        });
    }, $scope.setActionItem = function(type, part) {
        $scope.selectedActionItem = type, $scope.actionItem = $scope.actionItems[$scope.selectedActionItem], 
        $scope.responsiveIsOnePageFormat() ? $scope.sidePanel = "side" == part ? $scope.actionItem.side : $scope.actionItem.main : ($scope.sidePanel = $scope.actionItem.side, 
        $scope.mainPanel = $scope.actionItem.main);
    }, $scope.editMeetingTitle = function() {
        $scope.itemNameEditable = !0;
    }, $scope.saveItemName = function(value) {
        "" != value ? ($scope.itemNameEditable = !1, $scope.srvNav.item.name = value, $scope.srvData.setAndSaveObject($scope.srvNav.item)) : $scope.itemNameEditable = !1;
    }, $scope.hideMenuMeeting = function() {
        $scope.showMenu = !1;
    }, $scope.addMeetingElement = function(object) {
        var plan = srvData.createObject("Plan", {
            parent_id: $scope.srvNav.item.id,
            title: srvLocale.translations.htmlMeetingNoTitle
        });
        plan.pos = $scope.plans.length, srvData.addObject(plan), $scope.plans.push(plan), 
        a4p.isDefinedAndNotNull(object) && (plan.title = srvConfig.getItemName(object), 
        srvData.newAttachment("Plannee", object, plan));
    }, $scope.insertAfterMeetingElement = function(object) {
        var plan = srvData.createObject("Plan", {
            parent_id: $scope.srvNav.item.id,
            title: srvLocale.translations.htmlMeetingNoTitle
        });
        if (0 == $scope.plans.length || null == $scope.selectedMeetingPlan) plan.pos = $scope.plans.length, 
        srvData.addObject(plan), $scope.plans.push(plan); else {
            plan.pos = $scope.selectedMeetingPlan.pos + 1, srvData.addObject(plan), $scope.plans.splice(plan.pos, 0, plan);
            for (var i = plan.pos + 1; i < $scope.plans.length; i++) $scope.plans[i].pos = i;
        }
        a4p.isDefinedAndNotNull(object) && (plan.title = srvConfig.getItemName(object), 
        srvData.newAttachment("Plannee", object, plan));
    }, $scope.moveMeetingElement = function(plans, old_index, new_index) {
        if (old_index >= 0 && old_index < plans.length) {
            var plan = plans.splice(old_index, 1)[0];
            new_index >= 0 && new_index < plans.length ? plans.splice(new_index, 0, plan) : plans.push(plan);
            for (var i = 0; i < plans.length; i++) plans[i].pos = i;
        }
    }, $scope.removeMeetingElement = function(plans, index) {
        if (index >= 0 && index < plans.length) {
            var plan = plans.splice(index, 1)[0];
            srvData.removeAndSaveObject(plan);
            for (var i = index; i < plans.length; i++) plans[i].pos = i;
        }
    }, $scope.moveUpMeetingElement = function(index) {
        0 >= index || $scope.moveMeetingElement($scope.plans, index, index - 1);
    }, $scope.moveDownMeetingElement = function(index) {
        index >= $scope.plans.length - 1 || $scope.moveMeetingElement($scope.plans, index, index + 1);
    }, $scope.setDragMeetingElementIdx = function(val) {
        $scope.dragMeetingElementIdx = val;
    }, $scope.meetingTakePictureObj = function() {
        $scope.doAction("createNewPicture").then(function(obj) {
            a4p.safeApply($scope, function() {
                a4p.isDefinedAndNotNull(obj) && ($scope.selectedMeetingPlan.title = srvConfig.getItemName(obj), 
                srvData.newAttachment("Plannee", obj, $scope.selectedMeetingPlan));
            });
        }), $scope.updateMeetingObj($scope.selectedMeetingPlan);
    }, $scope.meetingTakePicture = function() {
        $scope.doAction("createNewPicture");
    }, $scope.setMeetingObject = function(meetingObj) {
        if ($scope.selectedMeetingPlan = meetingObj, a4p.isDefinedAndNotNull(meetingObj)) {
            var plannees = srvData.getTypedDirectLinks(meetingObj, "plannee", "Plannee");
            $scope.currentMeetingItem = plannees.length > 0 ? srvData.getObject(plannees[0].object_id.dbid) : null;
        } else $scope.currentMeetingItem = null;
    }, $scope.togglePresentation = function() {
        $scope.isPresentationOn = !$scope.isPresentationOn, $scope.isPresentationOn && $scope.setViewerDocList();
    }, $scope.getMeetingViewMode = function() {
        return $scope.isPresentationOn ? "presentation" : null != $scope.selectedMeetingPlan ? "editor" : null;
    }, $scope.setViewerDocList = function() {
        var i;
        for ($scope.viewerDocList = [], i = 0; i < $scope.plans.length; i++) {
            var plannees = srvData.getTypedDirectLinks($scope.plans[i], "plannee", "Plannee");
            for (j = 0; j < plannees.length; j++) $scope.viewerDocList.push(srvData.getObject(plannees[j].object_id.dbid));
        }
        $scope.setDocumentList($scope.viewerDocList);
    }, $scope.updateMeetingObj = function(newMeetingObject) {
        null != $scope.selectedMeetingPlan && a4p.safeApply($scope, function() {
            $scope.setMeetingObject(null);
        }), a4p.safeApply($scope, function() {
            $scope.setMeetingObject(newMeetingObject);
        });
    }, $scope.windowSizeChanged(), $scope.initMeetingElements(), $scope.setObjectLinkNav = function() {
        null == $scope.selectedMeetingPlan ? $scope.setActionItem("others", "side") : $scope.setActionItem("select", "side");
    };
}

function ctrlMeetingElementDrag($scope, $modal, srvLocale, srvData, srvNav) {
    function setCursorToMove(scope, event) {
        scope.proxy = document.createElement("img"), $scope.proxyover ? scope.proxy.setAttribute("src", "img/dropPointer64.png") : scope.proxy.setAttribute("src", "img/dragPointer64.png"), 
        scope.proxy.setAttribute("style", "position: fixed; top:" + (event.clientY - $scope.dragElementY) + "px; left:" + (event.clientX - $scope.dragElementX) + "px; transform:scale(" + event.scale + ") rotate(" + 180 * event.rotate / Math.PI + "deg); -ms-transform:scale(" + event.scale + ") rotate(" + 180 * event.rotate / Math.PI + "deg); -moz-transform:scale(" + event.scale + ") rotate(" + 180 * event.rotate / Math.PI + "deg); -webkit-transform:scale(" + event.scale + ") rotate(" + 180 * event.rotate / Math.PI + "deg); -o-transform:scale(" + event.scale + ") rotate(" + 180 * event.rotate / Math.PI + "deg);"), 
        document.getElementsByTagName("body")[0].appendChild(scope.proxy);
    }
    function moveCursor(scope, event) {
        $scope.proxyover ? scope.proxy.setAttribute("src", "img/dropPointer64.png") : scope.proxy.setAttribute("src", "img/dragPointer64.png"), 
        scope.proxy.setAttribute("style", "position: fixed; top:" + (event.clientY - $scope.dragElementY) + "px; left:" + (event.clientX - $scope.dragElementX) + "px; transform:scale(" + event.scale + ") rotate(" + 180 * event.rotate / Math.PI + "deg); -ms-transform:scale(" + event.scale + ") rotate(" + 180 * event.rotate / Math.PI + "deg); -moz-transform:scale(" + event.scale + ") rotate(" + 180 * event.rotate / Math.PI + "deg); -webkit-transform:scale(" + event.scale + ") rotate(" + 180 * event.rotate / Math.PI + "deg); -o-transform:scale(" + event.scale + ") rotate(" + 180 * event.rotate / Math.PI + "deg);");
    }
    function cancelMoveCursor(scope) {
        scope.proxy.parentNode.removeChild(scope.proxy), scope.proxy = null;
    }
    $scope.srvNav = srvNav, $scope.proxy = null, $scope.dragElementX = 32, $scope.dragElementY = 32, 
    $scope.proxyover = !1, $scope.meetingElem = null, $scope.meetingThumb = null, $scope.initMeetingElemDrag = function(meetingElem) {
        if ($scope.meetingElem = meetingElem, $scope.meetingThumb = null, a4p.isDefinedAndNotNull(meetingElem)) {
            var plannees = srvData.getTypedDirectLinks(meetingElem, "plannee", "Plannee");
            for (j = 0; j < plannees.length; j++) {
                var obj = srvData.getObject(plannees[0].object_id.dbid);
                if (a4p.isDefinedAndNotNull(obj)) {
                    var thumb = obj.thumb_url;
                    if (a4p.isDefinedAndNotNull(thumb)) {
                        $scope.meetingThumb = thumb;
                        break;
                    }
                }
            }
        }
    }, $scope.dragOverEnter = function() {
        $scope.proxyover = !0;
    }, $scope.dragOverLeave = function() {
        $scope.proxyover = !1;
    }, $scope.dragStart = function(event, index) {
        $scope.setDragMeetingElementIdx(index), event.dataTransfer = $scope.meetingElem, 
        a4p.safeApply($scope, function() {
            $scope.proxy || setCursorToMove($scope, event);
        });
    }, $scope.dragMove = function(event) {
        $scope.proxy && moveCursor($scope, event);
    }, $scope.dragEnd = function() {
        $scope.proxy && a4p.safeApply($scope, function() {
            cancelMoveCursor($scope);
        });
    }, $scope.dragCancel = function() {
        $scope.proxy && a4p.safeApply($scope, function() {
            cancelMoveCursor($scope);
        });
    };
}

function ctrlMeetingElementDrop($scope) {
    $scope.dndActive = !1, $scope.dropOver = !1, $scope.dragObject = null, $scope.dndStart = function(event) {
        event.dataTransfer && a4p.safeApply($scope, function() {
            $scope.dndActive = !0, $scope.dragObject = event.dataTransfer;
        });
    }, $scope.dndEnd = function() {
        $scope.dndActive && a4p.safeApply($scope, function() {
            $scope.dndActive = !1, $scope.dragObject = null;
        });
    }, $scope.dndCancel = function() {
        $scope.dndActive && a4p.safeApply($scope, function() {
            $scope.dndActive = !1, $scope.dragObject = null;
        });
    }, $scope.dropOverEnter = function() {
        $scope.dndActive && !$scope.dropOver && a4p.safeApply($scope, function() {
            $scope.dropOver = !0;
        });
    }, $scope.dropOverLeave = function() {
        $scope.dndActive && $scope.dropOver && a4p.safeApply($scope, function() {
            $scope.dropOver = !1;
        });
    }, $scope.dropEnd = function(event, index) {
        $scope.moveMeetingElement($scope.plans, $scope.dragMeetingElementIdx, index);
    };
}

function ctrlMeetingObjLinkDrop($scope, srvData, srvConfig) {
    $scope.dndActive = !1, $scope.dropOver = !1, $scope.dragObject = null, $scope.dndStart = function(event) {
        event.dataTransfer && a4p.safeApply($scope, function() {
            $scope.dndActive = !0, $scope.dragObject = event.dataTransfer;
        });
    }, $scope.dndEnd = function() {
        $scope.dndActive && a4p.safeApply($scope, function() {
            $scope.dndActive = !1, $scope.dragObject = null;
        });
    }, $scope.dndCancel = function() {
        $scope.dndActive && a4p.safeApply($scope, function() {
            $scope.dndActive = !1, $scope.dragObject = null;
        });
    }, $scope.dropOverEnter = function() {
        $scope.dndActive && !$scope.dropOver && a4p.safeApply($scope, function() {
            $scope.dropOver = !0;
        });
    }, $scope.dropOverLeave = function() {
        $scope.dndActive && $scope.dropOver && a4p.safeApply($scope, function() {
            $scope.dropOver = !1;
        });
    }, $scope.dropEnd = function(event) {
        var obj = event.dataTransfer, aPlan = $scope.selectedMeetingPlan;
        srvData.newAttachment("Plannee", obj, aPlan), aPlan.title = srvConfig.getItemName(obj), 
        a4p.safeApply($scope, function() {
            $scope.setMeetingObject(null);
        }), a4p.safeApply($scope, function() {
            $scope.setActionItem("plan"), $scope.setMeetingObject(aPlan);
        });
    };
}

function ctrlMeetingRemoveDrop($scope, srvLocale, srvData, srvNav) {
    $scope.dndActive = !1, $scope.dropOver = !1, $scope.dragObject = null, $scope.dndStart = function(event) {
        event.dataTransfer && a4p.safeApply($scope, function() {
            $scope.dndActive = !0, $scope.dragObject = event.dataTransfer;
        });
    }, $scope.dndEnd = function() {
        $scope.dndActive && a4p.safeApply($scope, function() {
            $scope.dndActive = !1, $scope.dragObject = null;
        });
    }, $scope.dndCancel = function() {
        $scope.dndActive && a4p.safeApply($scope, function() {
            $scope.dndActive = !1, $scope.dragObject = null;
        });
    }, $scope.dropOverEnter = function() {
        $scope.dndActive && !$scope.dropOver && a4p.safeApply($scope, function() {
            $scope.dropOver = !0;
        });
    }, $scope.dropOverLeave = function() {
        $scope.dndActive && $scope.dropOver && a4p.safeApply($scope, function() {
            $scope.dropOver = !1;
        });
    }, $scope.dropEnd = function(event) {
        var obj = event.dataTransfer;
        a4p.isDefinedAndNotNull(obj) && "Plan" == obj.a4p_type && obj.parent_id == srvNav.item.id.dbid && ($scope.removeMeetingElement($scope.plans, obj.pos), 
        a4p.safeApply($scope, function() {
            $scope.setActionItem("plan"), $scope.setMeetingObject(null);
        }));
    };
}

function ctrlNamedObject($scope, srvConfig) {
    $scope.init = function(item) {
        $scope.item = item, $scope.itemIcon = c4p.Model.getItemIcon(item), $scope.itemName = srvConfig.getItemName(item);
    };
}

function ctrlNavObject($scope, srvNav, srvConfig) {
    $scope.closeAsidePage = !1, $scope.item = srvNav.item, $scope.current = srvNav.current, 
    srvNav.item ? ($scope.itemIcon = c4p.Model.getItemIcon(srvNav.item), $scope.itemName = srvConfig.getItemName(srvNav.item)) : ($scope.itemIcon = "", 
    $scope.itemName = ""), $scope.navListener = srvNav.addListenerOnUpdate(function(callbackId, action) {
        "clear" == action ? a4p.safeApply($scope, function() {
            $scope.item = null, $scope.current = null, $scope.itemIcon = "", $scope.itemName = "";
        }) : ("goto" == action || "update" == action) && a4p.safeApply($scope, function() {
            $scope.item = srvNav.item, $scope.current = srvNav.current, $scope.itemIcon = c4p.Model.getItemIcon($scope.item), 
            $scope.itemName = srvConfig.getItemName($scope.item);
        });
    }), $scope.$on("$destroy", function() {
        srvNav.cancelListener($scope.navListener);
    });
}

function navigationCtrl($scope, $q, $timeout, $location, $anchorScroll, $http, $modal, $sce, version, srvLoad, srvLocalStorage, srvFileStorage, srvAnalytics, srvConfig, srvLog, srvLocale, srvData, srvRunning, srvSecurity, srvSynchro, cordovaReady, srvLink, srvNav, srvGuider, srvFacet, srvOpenUrl) {
    function initLocalStorage(scope, deferred) {
        a4p.safeApply(scope, function() {
            scope.loadLocalStorage(), scope.filteredContacts = [], scope.filteredAccounts = [], 
            scope.filteredEvents = [], scope.filteredOpportunities = [], scope.filteredDocuments = [], 
            initConfig(scope, deferred);
        });
    }
    function initConfig(scope, deferred) {
        a4p.InternalLog.log("ctrlNavigation", "srvConfig.startLoading"), srvAnalytics.init(), 
        srvConfig.startLoading(function() {
            a4p.safeApply(scope, function() {
                initLocale(scope, deferred);
            });
        });
    }
    function initLocale(scope, deferred) {
        a4p.InternalLog.log("ctrlNavigation", "srvLocale.startLoading"), srvLocale.startLoading(function() {
            a4p.safeApply(scope, function() {
                initFileStorage(scope, deferred);
            });
        });
    }
    function initFileStorage(scope, deferred) {
        a4p.InternalLog.log("ctrlNavigation", "srvFileStorage.init");
        var msg = a4pFormat(srvLocale.translations.htmlMsgInitializingFileStorage, scope.fileStorageQuota);
        srvLoad.setStatus(msg), srvFileStorage.init().then(function() {
            a4p.safeApply(scope, function() {
                srvLoad.setStatus(srvLocale.translations.htmlTextInitializingData), initData(scope, deferred);
            });
        }, function(message) {
            a4p.safeApply(scope, function() {
                srvLoad.setStatus(srvLocale.translations.htmlMsgLoadFileStoragePb), scope.setA4pSpinnerState("doneWithPb"), 
                srvLoad.setError(message), deferred.reject({
                    error: message
                });
            });
        });
    }
    function initData(scope, deferred) {
        a4p.safeApply(scope, function() {
            a4p.InternalLog.log("ctrlNavigation", "initData"), scope.loadLocalStorage(), scope.filteredContacts = [], 
            scope.filteredAccounts = [], scope.filteredEvents = [], scope.filteredOpportunities = [], 
            scope.filteredDocuments = [], srvData.init(), srvGuider.init(), scope.initFinished(deferred);
        });
    }
    function beginSynchronization(scope) {
        srvRunning.setRefresh(!0), scope.setA4pSpinnerState("run");
    }
    function endSynchronization(scope) {
        srvRunning.setRefresh(!1), scope.setA4pSpinnerState("done"), srvLog.logSuccess(!0, srvLocale.translations.htmlMsgSynchronizationOK, a4pFormat(srvLocale.translations.htmlMsgNbObjectsInserted, srvData.nbObjects));
    }
    function failSynchronization(scope) {
        srvRunning.setRefresh(!1), scope.setA4pSpinnerState("doneWithPb");
    }
    function doRefreshClient(scope, isDemo, userEmail, userPassword, c4pToken, keepCrmLogin, deferred) {
        beginSynchronization(scope), srvData.nbObjects > 0 ? isDemo ? (endSynchronization(scope), 
        deferred.resolve()) : refreshMindMap(scope, userEmail, userPassword, c4pToken, deferred) : loginUser(scope, isDemo, userEmail, userPassword, c4pToken, keepCrmLogin, deferred);
    }
    function refreshMindMap(scope, userEmail, userPassword, c4pToken, deferred) {
        srvData.refreshFullMap(c4pToken).then(function() {
            a4p.safeApply(scope, function() {
                scope.gotoWelcome(), scope.filteredContacts = [], scope.filteredAccounts = [], scope.filteredEvents = [], 
                scope.filteredOpportunities = [], scope.filteredDocuments = [], scope.setFirstConfigDone(!0), 
                scope.$broadcast("mindMapUpdated"), a4p.InternalLog.log("ctrlNavigation", "MindMap updated"), 
                endSynchronization(scope), deferred.resolve(), scope.lastRefresh = 1e3 * (srvData.lastRefreshMindMap ? srvData.lastRefreshMindMap || 0 : 0), 
                srvSynchro.clearChannel("data"), srvAnalytics.run();
            });
        }, function(response) {
            if (response.error) a4p.safeApply(scope, function() {
                var errorCode = response.error, log = response.log;
                srvLog.logWarning(!0, srvLocale.translations[errorCode], log), failSynchronization(scope), 
                deferred.reject({
                    error: srvLocale.translations[errorCode] + " : " + log
                });
            }); else if (response.maintenance) a4p.safeApply(scope, function() {
                var errorCode = "htmlMsgMaintenancePb", log = response.log;
                srvLog.logWarning(!0, srvLocale.translations[errorCode], log), failSynchronization(scope), 
                deferred.reject({
                    error: srvLocale.translations[errorCode] + " : " + log
                });
            }); else if (response.redirect) {
                var onClose = function() {
                    a4p.safeApply(scope, function() {
                        a4p.ErrorLog.log("ctrlNavigation", "onLoginCancel "), failSynchronization(scope), 
                        deferred.reject({
                            error: "User has cancelled Login"
                        });
                    });
                }, onLocationChange = function() {
                    a4p.safeApply(scope, function() {
                        a4p.InternalLog.log("ctrlNavigation", "onLoginSuccess " + response.redirect), doRefreshClient(scope, !1, userEmail, userPassword, c4pToken, !0, deferred), 
                        scope.gotoWelcome();
                    });
                };
                openChildBrowser(response.redirect, "url", onLocationChange, onClose);
            } else a4p.safeApply(scope, function() {
                endSynchronization(scope), deferred.resolve();
            });
        });
    }
    function loginUser(scope, isDemo, userEmail, userPassword, c4pToken, keepCrmLogin, deferred) {
        a4p.InternalLog.log("ctrlNavigation", "loginUser " + userEmail + " demo=" + isDemo);
        var userFeedback = {
            company_name: "",
            phone: "",
            feedback: "",
            star: ""
        };
        srvData.loginUser(isDemo, userEmail, userPassword, c4pToken, keepCrmLogin, userFeedback, scope.version).then(function() {
            a4p.InternalLog.log("ctrlNavigation", "loginUser done"), downloadMindMap(scope, srvSecurity.getHttpRequestToken(), deferred);
        }, function(response) {
            response.error ? a4p.safeApply(scope, function() {
                a4p.ErrorLog.log("ctrlNavigation", "loginUser error " + response.error + " " + response.log);
                var errorCode = response.error, log = response.log;
                scope.page == scope.pageGuider ? (scope.setMessageGuider(errorCode), scope.setSlideToTransferInGuider(scope.slideGuiderConnection), 
                scope.gotoSlide(scope.pageGuider, scope.slideGuiderValidationReceiveRes)) : srvLog.logWarning(!0, srvLocale.translations[errorCode], log), 
                failSynchronization(scope), deferred.reject({
                    error: srvLocale.translations[errorCode] + " : " + log
                });
            }) : response.maintenance ? a4p.safeApply(scope, function() {
                a4p.ErrorLog.log("ctrlNavigation", "loginUser failed because server is in maintenance " + response.maintenance + " " + response.log);
                var errorCode = "htmlMsgMaintenancePb", log = response.log;
                scope.page == scope.pageGuider ? (scope.setMessageGuider(errorCode), scope.setSlideToTransferInGuider(scope.slideGuiderConnection), 
                scope.gotoSlide(scope.pageGuider, scope.slideGuiderValidationReceiveRes)) : srvLog.logWarning(!0, srvLocale.translations[errorCode], log), 
                failSynchronization(scope), deferred.reject({
                    error: srvLocale.translations[errorCode] + " : " + log
                });
            }) : a4p.safeApply(scope, function() {
                a4p.ErrorLog.log("ctrlNavigation", "loginUser urlBase changed to " + response.redirect + " => retry downloadFullMap"), 
                doRefreshClient(scope, isDemo, userEmail, userPassword, c4pToken, !0, deferred);
            });
        });
    }
    function downloadMindMap(scope, c4pToken, deferred) {
        srvData.downloadFullMap(c4pToken).then(function() {
            a4p.safeApply(scope, function() {
                a4p.InternalLog.log("ctrlNavigation", "downloadFullMap done"), scope.filteredContacts = [], 
                scope.filteredAccounts = [], scope.filteredEvents = [], scope.filteredOpportunities = [], 
                scope.filteredDocuments = [], scope.setFirstConfigDone(!0), scope.$broadcast("mindMapLoaded"), 
                endSynchronization(scope), scope.gotoWelcome(), deferred.resolve(), scope.lastRefresh = 1e3 * (srvData.lastRefreshMindMap ? srvData.lastRefreshMindMap || 0 : 0), 
                srvAnalytics.run();
            });
        }, function(response) {
            if (response.error) a4p.safeApply(scope, function() {
                a4p.ErrorLog.log("ctrlNavigation", "downloadFullMap error " + response.error + " " + response.log);
                var errorCode = response.error, log = response.log;
                scope.page == scope.pageGuider ? (scope.setMessageGuider(errorCode), scope.setSlideToTransferInGuider(scope.slideGuiderConnection), 
                scope.gotoSlide(scope.pageGuider, scope.slideGuiderValidationReceiveRes)) : srvLog.logWarning(!0, srvLocale.translations[errorCode], log), 
                failSynchronization(scope), deferred.reject({
                    error: srvLocale.translations[errorCode] + " : " + log
                });
            }); else if (response.maintenance) a4p.safeApply(scope, function() {
                a4p.ErrorLog.log("ctrlNavigation", "downloadFullMap failed because server is in maintenance " + response.maintenance + " " + response.log);
                var errorCode = "htmlMsgMaintenancePb", log = response.log;
                scope.page == scope.pageGuider ? (scope.setMessageGuider(errorCode), scope.setSlideToTransferInGuider(scope.slideGuiderConnection), 
                scope.gotoSlide(scope.pageGuider, scope.slideGuiderValidationReceiveRes)) : srvLog.logWarning(!0, srvLocale.translations[errorCode], log), 
                failSynchronization(scope), deferred.reject({
                    error: srvLocale.translations[errorCode] + " : " + log
                });
            }); else if (response.redirect) {
                a4p.ErrorLog.log("ctrlNavigation", "downloadFullMap redirect to " + response.redirect);
                var onClose = function() {
                    a4p.safeApply(scope, function() {
                        a4p.ErrorLog.log("ctrlNavigation", "onLoginCancel"), scope.page == scope.pageGuider && scope.gotoLogin(), 
                        failSynchronization(scope), deferred.reject({
                            error: "User has cancelled Login"
                        });
                    });
                }, onLocationChange = function() {
                    a4p.safeApply(scope, function() {
                        a4p.InternalLog.log("ctrlNavigation", "onLoginSuccess => retry downloadFullMap"), 
                        scope.page == scope.pageGuider && scope.gotoSlide(scope.pageGuider, scope.slideGuiderValidation), 
                        downloadMindMap(scope, c4pToken, deferred);
                    });
                };
                openChildBrowser(response.redirect, "url", onLocationChange, onClose);
            } else a4p.safeApply(scope, function() {
                a4p.ErrorLog.log("ctrlNavigation", "downloadFullMap empty"), scope.filteredContacts = [], 
                scope.filteredAccounts = [], scope.filteredEvents = [], scope.filteredOpportunities = [], 
                scope.filteredDocuments = [], scope.setFirstConfigDone(!0), scope.$broadcast("mindMapLoaded"), 
                endSynchronization(scope), scope.gotoWelcome(), deferred.resolve();
            });
        });
    }
    $scope.location = $location, $scope.http = $http, $scope.calendarView = "monthView", 
    $scope.version = version, $scope.pageAuth = "auth", $scope.pageGuider = "guider", 
    $scope.pageMeeting = "meeting", $scope.pageNavigation = "navigation", $scope.pageTimeline = "timeline", 
    $scope.slideAuth = "index", $scope.slideGuiderGuider = "guider", $scope.slideGuiderConnection = "connection", 
    $scope.slideGuiderRegister = "register", $scope.slideGuiderRequestPassword = "requestPassword", 
    $scope.slideGuiderValidation = "validation", $scope.slideGuiderValidationReceiveRes = "validationReceiveRes", 
    $scope.slideMeeting = "index", $scope.slideMeetingMeeting = "meeting", $scope.slideTimeline = "timeline", 
    $scope.slideNavigation = "index", $scope.slideNavigationConfig = "config", $scope.slideNavigationCalendar = "calendar", 
    $scope.slideNavigationAccounts = "accounts", $scope.slideNavigationContacts = "contacts", 
    $scope.slideNavigationDocuments = "documents", $scope.slideNavigationEvents = "events", 
    $scope.slideNavigationTasks = "tasks", $scope.slideNavigationFavorites = "favorites", 
    $scope.slideNavigationOpportunities = "opportunities", $scope.slideNavigationLeads = "leads", 
    $scope.slideNavigationNotes = "notes", $scope.slideNavigationReports = "reports", 
    $scope.slideNavigationFacets = "facets", $scope.slideNavigationType = {
        Account: $scope.slideNavigationAccounts,
        Contact: $scope.slideNavigationContacts,
        Document: $scope.slideNavigationDocuments,
        Event: $scope.slideNavigationEvents,
        Task: $scope.slideNavigationTasks,
        Opportunity: $scope.slideNavigationOpportunities,
        Lead: $scope.slideNavigationLeads,
        Note: $scope.slideNavigationNotes,
        Report: $scope.slideNavigationReports,
        Facet: $scope.slideNavigationFacets
    }, $scope.srvLoad = srvLoad, $scope.srvLocalStorage = srvLocalStorage, $scope.srvFileStorage = srvFileStorage, 
    $scope.srvAnalytics = srvAnalytics, $scope.srvConfig = srvConfig, $scope.srvLog = srvLog, 
    $scope.srvLocale = srvLocale, $scope.srvData = srvData, $scope.srvRunning = srvRunning, 
    $scope.srvSecurity = srvSecurity, $scope.srvSynchro = srvSynchro, $scope.srvLink = srvLink, 
    $scope.srvNav = srvNav, $scope.srvGuider = srvGuider, $scope.srvOpenUrl = srvOpenUrl, 
    $scope.fileStorageQuota = 4294967296, $scope.initAlreadyCalled = !1, $scope.initializationFinished = !1, 
    $scope.lastRefresh = null, $scope.isDemo = !1, $scope.firstConfigDone = !1, $scope.rememberPassword = !0, 
    $scope.keepCrmLogin = !1, $scope.taskTimer = null, $scope.taskQueue = [], $scope.enqueueTask = function(fct) {
        $scope.taskQueue.push(fct), $scope.initializationFinished && null == $scope.taskTimer && $scope.runNextTask();
    }, $scope.runNextTask = function() {
        if ($scope.taskQueue.length > 0) {
            var fct = $scope.taskQueue.shift();
            a4p.safeApply($scope, fct), $scope.taskTimer = window.setTimeout(function() {
                $scope.taskTimer = null, $scope.runNextTask();
            }, 300);
        }
    }, $scope.initNavigationCtrl = function() {
        a4p.InternalLog.log("navigationCtrl", "init() launched by AngularJS");
        var deferred = $q.defer();
        if ($scope.initAlreadyCalled) return deferred.resolve(), deferred.promise;
        $scope.initAlreadyCalled = !0;
        var msg = "Initializing Cache: " + $scope.page + " page";
        srvLoad.setStatus(msg);
        var startApplication = function() {
            a4p.InternalLog.log("navigationCtrl", "startApplication() launched by cordovaReady");
            var msg = "Initializing Local Storage ...";
            a4p.safeApply($scope, function() {
                a4p.Resize.refreshAll(), srvLoad.setStatus(msg), $scope.setA4pSpinnerState("run"), 
                initLocalStorage($scope, deferred);
            }), "undefined" != typeof StatusBar && StatusBar && StatusBar.styleBlackTranslucent();
        };
        return cordovaReady(startApplication)(), deferred.promise;
    }, $scope.initFinished = function(deferred) {
        a4p.safeApply($scope, function() {
            a4p.InternalLog.log("ctrlNavigation", "initFinished - guider: / firstConfig:" + $scope.firstConfigDone + " / slide:" + $scope.slide + " / page:" + $scope.page), 
            $scope.setA4pSpinnerState("done"), srvLoad.setLoaded(), deferred.resolve(), $scope.initializationFinished = !0, 
            srvAnalytics.run();
            var login = srvSecurity.getA4pLogin();
            srvAnalytics.setUid(login), srvAnalytics.add("Once", "App launched"), srvData.start(), 
            $scope.firstConfigDone && $scope.rememberPassword || srvSecurity.resetPINCode(), 
            srvSecurity.isSecured() ? $scope.openDialogLocked(function() {
                a4p.safeApply($scope, function() {
                    $scope.firstConfigDone && $scope.rememberPassword ? $scope.gotoWelcome() : $scope.gotoRegister();
                });
            }) : $scope.firstConfigDone && $scope.rememberPassword ? $scope.gotoWelcome() : $scope.gotoRegister(), 
            null == $scope.taskTimer && $scope.runNextTask();
        });
    }, $scope.loadLocalStorage = function() {
        srvConfig.init(), srvLog.init(), srvLocale.init(), srvSecurity.init(), $scope.isDemo = srvLocalStorage.get("DemoMode", !1), 
        $scope.firstConfigDone = srvLocalStorage.get("FirstConfigDone", !1), $scope.rememberPassword = srvLocalStorage.get("RememberPassword", !0), 
        $scope.keepCrmLogin = $scope.rememberPassword;
    }, $scope.setFirstConfigDone = function(firstConfigDone) {
        $scope.firstConfigDone = firstConfigDone, $scope.saveFirstConfigDone();
    }, $scope.saveFirstConfigDone = function() {
        srvLocalStorage.set("FirstConfigDone", $scope.firstConfigDone);
    }, $scope.setRememberPassword = function(rememberPassword) {
        $scope.keepCrmLogin = rememberPassword, !$scope.rememberPassword && rememberPassword && ($scope.keepCrmLogin = !1), 
        $scope.rememberPassword = rememberPassword, $scope.saveRememberPassword();
    }, $scope.saveRememberPassword = function() {
        srvLocalStorage.set("RememberPassword", $scope.rememberPassword);
    }, $scope.demoCounter = 5, $scope.doubleSetDemo = function(isDemo) {
        $scope.demoCounter = $scope.demoCounter - 1, $scope.demoCounter <= 0 && $scope.setDemo(isDemo);
    }, $scope.setDemo = function(isDemo) {
        return $scope.isDemo = isDemo, srvLocalStorage.set("DemoMode", $scope.isDemo), $scope.downloadClient();
    }, $scope.setEventDbidToBeCopied = function(dbid) {
        $scope.eventDbidToBeCopied = dbid;
    }, $scope.getEventDbidToBeCopied = function() {
        return $scope.eventDbidToBeCopied;
    }, $scope.setA4pSpinnerState = function(state) {
        $scope.a4pSpinnerState = state;
    }, srvLoad.setStatus(""), srvLoad.setError(""), $scope.page = "", $scope.slide = "", 
    $scope.slideToTransferInGuider = "", $scope.a4pSpinnerState = "done", $scope.a4pSpinnerDownloadState = "done", 
    $scope.filteredContacts = [], $scope.filteredAccounts = [], $scope.filteredEvents = [], 
    $scope.filteredOpportunities = [], $scope.filteredDocuments = [], $scope.contactQuery = "", 
    $scope.accountQuery = "", $scope.eventQuery = "", $scope.opportunityQuery = "", 
    $scope.documentQuery = "", $scope.sameElementQuery = "", $scope.runningOnline = srvRunning.addListenerOnOnline(function(callbackId, online) {
        online || a4p.safeApply($scope, function() {
            $scope.setA4pSpinnerState("offline");
        });
    }), $scope.handleOpenUrl = srvOpenUrl.addListener(function(callbackId, url) {
        a4p.InternalLog.log("ctrlNavigation.handleOpenUrl", url), $scope.enqueueTask(function() {
            $scope.importNewFile(url);
        });
    }), $scope.$on("$destroy", function() {
        srvRunning.cancelListener($scope.runningOnline), srvOpenUrl.cancelListener($scope.handleOpenUrl);
    }), $scope.gotoLogin = function() {
        $scope.gotoSlide($scope.pageGuider, $scope.slideGuiderConnection);
    }, $scope.gotoRegister = function() {
        $scope.gotoSlide($scope.pageGuider, $scope.slideGuiderRegister);
    }, $scope.gotoWelcome = function() {
        var login = srvSecurity.getA4pLogin();
        srvAnalytics.setUid(login), $scope.gotoSlide($scope.pageNavigation, $scope.slideNavigationCalendar);
    }, $scope.gotoMeeting = function(item) {
        item || "events" != $scope.getSlideFromDetail() ? item && "Event" == item.a4p_type ? $scope.setItemAndGoMeeting(item) : $scope.openDialog({
            backdrop: !1,
            windowClass: "modal c4p-modal-small c4p-modal-goto-meeting",
            controller: "ctrlGoToMeetingDialog",
            templateUrl: "partials/dialog/dialogGoToMeeting.html",
            resolve: {
                item: function() {
                    return item;
                },
                version: function() {
                    return version;
                },
                srvData: function() {
                    return srvData;
                },
                srvNav: function() {
                    return srvNav;
                },
                srvLink: function() {
                    return srvLink;
                },
                srvLocale: function() {
                    return srvLocale;
                },
                srvConfig: function() {
                    return srvConfig;
                },
                srvAnalytics: function() {
                    return srvAnalytics;
                }
            }
        }, function(result) {
            result && $scope.setItemAndGoMeeting(result);
        }) : $scope.setItemAndGoMeeting(srvNav.item);
    }, $scope.spinnerContainers = new Array(), $scope.isSpinnerActive = !1, $scope.addSpinner = function(spinnerContainer) {
        $scope.spinnerContainers.push(spinnerContainer);
    }, $scope.startSpinner = function(bAutoStop) {
        console.log("startSpinner !"), $scope.isSpinnerActive = !0, 1 == bAutoStop && $timeout(function() {
            $scope.isSpinnerActive = !1;
        }, 3e3);
    }, $scope.stopSpinner = function() {
        console.log("stopSpinner !"), $timeout(function() {
            $scope.isSpinnerActive = !1;
        }, 3e3);
    }, $scope.refreshClient = function() {
        a4p.InternalLog.log("ctrlNavigation", "refreshClient");
        var deferred = $q.defer();
        return doRefreshClient($scope, $scope.isDemo, srvSecurity.getA4pLogin(), srvSecurity.getA4pPassword(), srvSecurity.getHttpRequestToken(), $scope.keepCrmLogin, deferred), 
        $scope.keepCrmLogin = $scope.rememberPassword, deferred.promise;
    }, $scope.downloadClient = function() {
        var deferred = $q.defer();
        return beginSynchronization($scope), loginUser($scope, $scope.isDemo, srvSecurity.getA4pLogin(), srvSecurity.getA4pPassword(), srvSecurity.getHttpRequestToken(), $scope.keepCrmLogin, deferred), 
        $scope.keepCrmLogin = $scope.rememberPassword, deferred.promise;
    }, $scope.setMessageGuider = function(text) {
        a4p.isUndefined(srvLocale.translations[text]) ? (a4p.ErrorLog.log("ctrlNavigation", "setMessageGuider : key " + text + " does not exists => fall back to htmlMsgSynchronizationServerPb"), 
        text = "htmlMsgSynchronizationServerPb") : a4p.InternalLog.log("ctrlNavigation", "setMessageGuider : " + text), 
        $scope.messageGuider = text;
    }, $scope.getMessageGuider = function() {
        return $scope.messageGuider;
    }, $scope.setSlideToTransferInGuider = function(slide) {
        $scope.slideToTransferInGuider = slide;
    }, $scope.getSlideToTransferInGuider = function() {
        return $scope.slideToTransferInGuider;
    }, $scope.setItemCarousel = function(index) {
        $scope.itemCarousel = index;
    }, $scope.pausedPage = null, $scope.pausedSlide = null, $scope.gotoSlide = function(nextPage, nextSlide) {
        a4p.InternalLog.log("ctrlNavigation - gotoSlide", "Begin " + $scope.page + "/" + $scope.slide + " New:" + nextPage + "/" + nextSlide);
        {
            var changePage = nextPage != $scope.page;
            changePage || $scope.slide != nextSlide;
        }
        changePage && ($scope.slide = "", $scope.page = nextPage), $scope.slide = nextSlide;
    }, $scope.getSlide = function() {
        return $scope.slide;
    }, $scope.getSlideFromNavSidebarNav = function() {
        return $scope.slide;
    }, $scope.getSlideFromNavSidebarForm = function() {
        return $scope.slide;
    }, $scope.getSlideFromNavIndex = function() {
        return $scope.slide;
    }, $scope.getSlideFromDetail = function() {
        return $scope.slide;
    }, $scope.getSlideFromGuider = function() {
        return a4p.InternalLog.log("ctrlNavigation - getSlideFromGuider: " + $scope.slide), 
        $scope.slide;
    }, $scope.getSlideFromFooter = function() {
        return $scope.slide;
    }, $scope.getPage = function() {
        return $scope.page;
    }, $scope.getPageFromIndex = function() {
        return $scope.page;
    }, $scope.gotoBack = function(index) {
        var back = srvNav.backInHistory(index);
        null != back ? back.id ? $scope.setItemAndGoDetail(srvData.getObject(back.id)) : $scope.gotoSlide(back.page, back.slide) : $scope.gotoSlide($scope.pageNavigation, $scope.slideNavigationCalendar);
    }, $scope.gotoIndex = function(index) {
        var back = srvNav.gotoInHistory(index);
        null != back ? back.id ? $scope.setItemAndGoDetail(srvData.getObject(back.id)) : $scope.gotoSlide(back.page, back.slide) : $scope.gotoSlide($scope.pageNavigation, $scope.slideNavigationCalendar);
    }, $scope.resumeSlide = function() {
        $scope.gotoSlide($scope.pausedPage, $scope.pausedSlide);
    }, $scope.gotoSlideWithSearchReset = function(nextPage, nextSlide) {
        srvNav.goto(nextPage, nextSlide, null), $scope.gotoSlide(nextPage, nextSlide), $scope.setNavAside(!1);
    }, $scope.setCalendarView = function(view) {
        $scope.calendarView = view, $scope.updateScroller();
    }, $scope.calculSelectDefault = function(elements, type, order) {
        if (order) {
            for (var orderby = "", dbid = "", fullname = "", companyName = "", name = "", direction = !1, i = 0; i < elements.length; i++) 0 == i ? ("contacts" == type ? (fullname = elements[i].first_name + " " + elements[i].last_name, 
            orderby = fullname.toLowerCase()) : "accounts" == type ? (companyName = elements[i].company_name, 
            orderby = companyName.toLowerCase()) : (name = elements[i].name, orderby = name.toLowerCase()), 
            dbid = elements[i].dbid) : "contacts" == type ? (fullname = elements[i].first_name + " " + elements[i].last_name, 
            fullname = fullname.toLowerCase(), direction ? fullname >= orderby && (orderby = fullname, 
            dbid = elements[i].dbid) : orderby >= fullname && (orderby = fullname, dbid = elements[i].dbid)) : "accounts" == type ? (companyName = elements[i].company_name, 
            companyName = companyName.toLowerCase(), direction ? companyName >= orderby && (orderby = companyName, 
            dbid = elements[i].dbid) : orderby >= companyName && (orderby = companyName, dbid = elements[i].dbid)) : (name = elements[i].name, 
            name = name.toLowerCase(), direction ? name >= orderby && (orderby = name, dbid = elements[i].dbid) : orderby >= name && (orderby = name, 
            dbid = elements[i].dbid));
            return dbid;
        }
        return elements[0].dbid;
    }, $scope.cancelFiltreAccount = function() {
        $scope.setAccountQuery(""), $scope.setSameElementQuery(""), $scope.gotoSlide($scope.page, $scope.slide);
    }, $scope.cancelFiltreContact = function() {
        $scope.setContactQuery(""), $scope.setSameElementQuery(""), $scope.gotoSlide($scope.page, $scope.slide);
    }, $scope.cancelFiltreEvent = function() {
        $scope.setEventQuery(""), $scope.setSameElementQuery(""), $scope.gotoSlide($scope.page, $scope.slide);
    }, $scope.cancelFiltreOpportunity = function() {
        $scope.setOpportunityQuery(""), $scope.setSameElementQuery(""), $scope.gotoSlide($scope.page, $scope.slide);
    }, $scope.cancelFiltreDocument = function() {
        $scope.setDocumentQuery(""), $scope.setSameElementQuery(""), $scope.gotoSlide($scope.page, $scope.slide);
    }, $scope.hasToolbar = function() {
        return $scope.slide != $scope.slideNavigationConfig && $scope.slide != $scope.slideNavigationCalendar;
    }, $scope.isTwoPagesFormat = function() {
        return $scope.slide == $scope.slideNavigationConfig || $scope.slide == $scope.slideNavigationCalendar && "dayView" != $scope.calendarView;
    }, $scope.has3Pages = function() {
        return $scope.responsiveIsOnePageFormat() && !$scope.isTwoPagesFormat();
    }, $scope.navRelated = !1, $scope.navAside = !1, $scope.toggleNavRelated = function() {
        $scope.setNavRelated(!$scope.navRelated);
    }, $scope.toggleNavAside = function() {
        $scope.setNavAside(!$scope.navAside);
    }, $scope.setNavRelated = function(v) {
        $scope.navRelated = v, $scope.navAside = $scope.has3Pages() ? !1 : !v, $scope.updateScroller();
    }, $scope.setNavAside = function(v) {
        $scope.navAside = v, $scope.navRelated = $scope.has3Pages() ? !1 : !v, $scope.updateScroller();
    }, $scope.getPanelX = function() {
        var x = 0;
        return x = $scope.navAside ? 0 : $scope.has3Pages() && $scope.navRelated ? $scope.responsivePanel2X() : $scope.responsivePanel1X(), 
        $scope.updateScroller(), x;
    }, $scope.updateScroller = function() {
        a4p.InternalLog.log("ctrlNavigation", "updateScroller"), $timeout(function() {
            var relative = !1, timeMs = 500, x = 0, y = 0;
            x = $scope.navAside ? 0 : $scope.has3Pages() && $scope.navRelated ? $scope.responsivePanel2X() : $scope.responsivePanel1X(), 
            $scope.sensePanel && $scope.sensePanel.scroll && ($scope.sensePanel.scroll.checkDOMChanges() && $scope.sensePanel.scroll.refresh(), 
            $scope.sensePanel.scroll.scrollTo(x, y, timeMs, relative)), $anchorScroll(), $location.hash("");
        }, 300);
    }, $scope.sensePanel = null, $scope.setSensePanel = function(sense) {
        $scope.sensePanel = sense;
    }, $scope.onPanelAfterScrollEnd = function() {
        $scope.sensePanel && $scope.sensePanel.scroll && ($scope.sensePanel.scroll.x > -$scope.responsiveMagnetWidth() ? a4p.safeApply($scope, function() {
            $scope.navRelated = !1, $scope.setNavAside(!0);
        }) : $scope.has3Pages() && $scope.responsivePanel2X() - $scope.responsiveMagnetWidth() < $scope.sensePanel.scroll.x && $scope.sensePanel.scroll.x < $scope.responsiveMagnetWidth() + $scope.responsivePanel2X() ? a4p.safeApply($scope, function() {
            $scope.setNavRelated(!0);
        }) : (!$scope.has3Pages() && $scope.sensePanel.scroll.x < $scope.responsiveMagnetWidth() + $scope.responsivePanel1X() || $scope.has3Pages() && Math.abs($scope.sensePanel.scroll.x - $scope.responsivePanel1X()) < $scope.responsiveMagnetWidth()) && a4p.safeApply($scope, function() {
            $scope.setNavAside(!1);
        }));
    }, $scope.getSensePanelScrollX = function() {
        return $scope.sensePanel && $scope.sensePanel.scroll ? $scope.sensePanel.scroll.x : 0;
    }, $scope.navTitle = "", $scope.setNavTitle = function(v) {
        $scope.navTitle = v;
    }, $scope.showCancelCopyEvent = function() {
        $scope.getCopyEvent() && $("#c4pCancelCopyEvent").modal("show");
    }, $scope.addItemDialog = function(type) {
        alert("TEST MLE redefine in sub controller ?" + type);
    }, $scope.setItemAndGoDetail = function(item, closeAside) {
        item && (a4p.InternalLog.log("ctrlNavigation", "setItemAndGoDetail " + (item ? item.name : "none") + " " + closeAside), 
        srvNav.goto($scope.pageNavigation, $scope.slideNavigationType[item.a4p_type], item), 
        $scope.gotoSlide($scope.pageNavigation, $scope.slideNavigationType[item.a4p_type]), 
        closeAside && $scope.setNavAside(!1), $scope.$broadcast("setItemDetail", item));
    }, $scope.setItemAndGoMeeting = function(item) {
        $scope.gotoSlide($scope.pageMeeting, $scope.slideMeetingMeeting), item && srvNav.goto($scope.pageMeeting, $scope.slideMeetingMeeting, item);
    }, $scope.setItemAndGoTimeline = function(item) {
        $scope.gotoSlide($scope.pageTimeline, $scope.slideTimeline), item && srvNav.goto($scope.pageTimeline, $scope.slideTimeline, item);
    }, $scope.setItemAndGoCalendar = function(item) {
        $scope.gotoSlide($scope.pageNavigation, $scope.slideNavigationCalendar), item && srvNav.goto($scope.pageNavigation, $scope.slideNavigationCalendar, item);
    }, $scope.getTypeIcon = function(type) {
        return c4p.Model.getTypeIcon(type);
    }, $scope.getTypeColor = function(type) {
        return c4p.Model.getTypeColor(type);
    }, $scope.getFacetColor = function(facet) {
        if (a4p.isUndefinedOrNull(facet)) return "a";
        switch (facet.key) {
          case "objects":
            return c4p.Model.getTypeColor(facet.value);

          case "favorites":
            return c4p.Model.getTypeColor("Document");

          case "top20":
            return c4p.Model.getTypeColor("Document");

          case "mine":
            return c4p.Model.getTypeColor("Document");

          default:
            return "a";
        }
    }, $scope.getObjectIcon = function(object) {
        return c4p.Model.getItemIcon(object);
    }, $scope.getObjectColor = function(object) {
        return c4p.Model.getItemColor(object);
    }, $scope.getObjectName = function(object) {
        return srvConfig.getItemName(object);
    }, $scope.getItemNameById = function(itemId) {
        var result = "", item = srvData.getObject(itemId);
        return item ? srvConfig.getItemName(item) : result;
    }, $scope.getItemHtmlDescriptionById = function(itemId) {
        var result = "", item = srvData.getObject(itemId);
        return item ? c4p.Model.getItemHtmlDescription(item) : result;
    }, $scope.getItemTitle = function(type) {
        var result = "";
        return type ? result = srvLocale.translations.htmlTitle[type] : result;
    }, $scope.getItemCount = function(type) {
        if (!type) return "";
        var result = srvData.getObjectCount(type);
        return result;
    }, $scope.getLastRefreshAsString = function() {
        return $scope.lastRefresh ? srvLocale.formatDate($scope.lastRefresh, "medium") : srvLocale.translations.htmlTextLastRefreshNone;
    }, $scope.eventFullStartDate = function(event) {
        return srvLocale.formatDate(a4pDateParse(event.date_start), "fullDate");
    }, $scope.eventFullEndDate = function(event) {
        return srvLocale.formatDate(a4pDateParse(event.date_end), "fullDate");
    }, $scope.isMultiDayEvent = function(event) {
        var b = !1, evtStartDate = a4pDateParse(event.date_start), evtEndDate = a4pDateParse(event.date_end);
        return (evtStartDate.getDate() < evtEndDate.getDate() || evtStartDate.getMonth() < evtEndDate.getMonth() || evtStartDate.getFullYear() < evtEndDate.getFullYear()) && (b = !0), 
        b;
    }, $scope.addEmailToParent = function(item, share, email, parent) {
        var targetDirPath = "a4p/c4p/doc", now = new Date(), itemName = srvConfig.getItemName(item), parentName = srvConfig.getItemName(parent), normalizedParentName = parentName.replace(/ /g, "_"), documentInsert = srvData.createObject("Document", {
            name: "email_" + normalizedParentName + "_" + srvLocale.formatDate(a4pDateParse(a4pDateFormat(now)), "shortDate").replace(/\//g, "-") + ".pdf",
            body: "",
            length: "0",
            path: targetDirPath,
            description: "Email" + (share ? " to share " + itemName : "") + " for " + parent.a4p_type + " " + parentName
        });
        return email.editable = !0, documentInsert.email = email, srvData.addObject(documentInsert), 
        srvData.linkToItem("Document", "parent", [ documentInsert ], parent), srvData.addObjectToSave(documentInsert.a4p_type, documentInsert.id.dbid), 
        documentInsert;
    }, $scope.promiseDialog = function(dialogOptions) {
        return $modal.open(dialogOptions).result;
    }, $scope.openDialog = function(dialogOptions, onSuccess) {
        a4p.safeApply($scope, function() {
            $scope.setBlur(!0), $modal.open(dialogOptions).result.then(function(result) {
                onSuccess(result), $scope.setBlur(!1), $scope.stopSpinner();
            }, function() {
                $scope.setBlur(!1), $scope.stopSpinner();
            });
        });
    }, $scope.openDialogConfirm = function(text, array, fctConfirm) {
        $scope.openDialog({
            backdrop: !1,
            windowClass: "modal c4p-modal-full c4p-modal-confirm",
            controller: "ctrlDialogConfirm",
            templateUrl: "partials/dialog/confirm.html",
            resolve: {
                text: function() {
                    return text;
                },
                textArray: function() {
                    return array;
                },
                srvLocale: function() {
                    return srvLocale;
                }
            }
        }, function(result) {
            a4p.safeApply($scope, function() {
                fctConfirm(result);
            });
        });
    }, $scope.openDialogInitPinCode = function(fn) {
        $scope.openDialog({
            backdrop: !1,
            windowClass: "modal c4p-modal-full c4p-modal-confirm",
            controller: "ctrlInitDialogPinCode",
            templateUrl: "partials/dialog/pin_init.html",
            resolve: {
                srvLocale: function() {
                    return srvLocale;
                }
            }
        }, function(result) {
            a4p.safeApply($scope, function() {
                fn(result);
            });
        });
    }, $scope.openDialogModifyPinCode = function(fctSuccess) {
        $scope.openDialog({
            backdrop: !1,
            windowClass: "modal c4p-modal-full c4p-modal-confirm",
            controller: "ctrlModifyDialogPinCode",
            templateUrl: "partials/dialog/pin_modify.html",
            resolve: {
                srvLocale: function() {
                    return srvLocale;
                },
                srvSecurity: function() {
                    return srvSecurity;
                }
            }
        }, function(result) {
            a4p.isDefined(result) && a4p.safeApply($scope, function() {
                fctSuccess(result);
            });
        });
    }, $scope.openDialogLocked = function(fctSuccess) {
        $scope.openDialog({
            backdrop: !1,
            windowClass: "modal c4p-modal-full c4p-modal-confirm",
            controller: "ctrlOpenDialogLocked",
            templateUrl: "partials/dialog/pin_locked.html",
            resolve: {
                srvLocale: function() {
                    return srvLocale;
                },
                srvSecurity: function() {
                    return srvSecurity;
                }
            }
        }, function() {
            a4p.InternalLog.log("ctrlNavigation", "close page locked"), fctSuccess && a4p.safeApply($scope, function() {
                fctSuccess();
            });
        });
    }, $scope.openDialogMessage = function(text) {
        $scope.openDialog({
            backdrop: !0,
            windowClass: "modal c4p-modal-full c4p-modal-confirm",
            controller: "ctrlDialogConfirm",
            templateUrl: "partials/dialog/message.html",
            resolve: {
                text: function() {
                    return text;
                },
                textArray: function() {
                    return [];
                },
                srvLocale: function() {
                    return srvLocale;
                }
            }
        }, function() {});
    }, $scope.openShowImageDialog = function(imageObject) {
        $scope.openDialog({
            backdrop: !1,
            windowClass: "modal c4p-modal-full c4p-modal-image",
            controller: "ctrlShowImage",
            templateUrl: "partials/dialog/dialogShowImage.html",
            resolve: {
                imageData: function() {
                    return imageObject;
                }
            }
        }, function() {});
    }, $scope.editObjectDialog = function(event, fctSuccess) {
        return $scope.openDialog({
            backdrop: !1,
            windowClass: "modal c4p-modal-large c4p-dialog",
            controller: "ctrlEditDialogObject",
            templateUrl: "partials/dialog/edit_object.html",
            resolve: {
                srvData: function() {
                    return srvData;
                },
                srvLocale: function() {
                    return srvLocale;
                },
                srvConfig: function() {
                    return srvConfig;
                },
                objectItem: function() {
                    return event;
                },
                removeFct: function() {
                    return function(obj) {
                        srvData.removeAndSaveObject(obj), $scope.gotoBack(0);
                    };
                },
                startSpinner: function() {
                    return $scope.startSpinner;
                },
                stopSpinner: function() {
                    return $scope.stopSpinner;
                },
                openDialogFct: function() {
                    return $scope.openDialog;
                }
            }
        }, function(result) {
            a4p.isDefined(result) && a4p.safeApply($scope, function() {
                fctSuccess(result);
            });
        });
    }, $scope.takePicture = function(parentObject) {
        var deferred = $q.defer();
        return srvData.takePicture(parentObject, srvConfig.getItemName(parentObject)).then(function(document) {
            var msg = "Picture file written to " + document.filePath;
            msg += srvData.isDemo ? ". In demo mode, the picture is not uploaded." : ". It will be uploaded as soon as possible.", 
            a4p.safeApply($scope, function() {
                window.device || srvLog.logSuccess(!0, srvLocale.translations.htmlMsgDummyPicture), 
                srvLog.logSuccess(!0, srvLocale.translations.htmlMsgTakePictureOK, msg), srvData.addObject(document), 
                srvData.linkToItem(document.a4p_type, "parent", [ document ], parentObject), srvData.addObjectToSave(document.a4p_type, document.id.dbid), 
                srvAnalytics.add("Once", "Create " + document.a4p_type), deferred.resolve(document);
            });
        }, function(diag) {
            a4p.safeApply($scope, function() {
                srvLog.logInfo(!0, srvLocale.translations[diag.error], diag.log), deferred.reject(diag);
            });
        }), deferred.promise;
    }, $scope.takeNote = function(parentObject) {
        var deferred = $q.defer(), note = {
            a4p_type: "Note",
            title: "",
            message: ""
        };
        return $scope.openDialog({
            backdrop: !1,
            windowClass: "modal c4p-modal-large c4p-dialog",
            controller: "ctrlEditDialogNote",
            templateUrl: "partials/dialog/dialogNote.html",
            resolve: {
                srvLocale: function() {
                    return srvLocale;
                },
                srvConfig: function() {
                    return srvConfig;
                },
                srvData: function() {
                    return srvData;
                },
                srvFacet: function() {
                    return srvFacet;
                },
                attendees: function() {
                    return [];
                },
                attachments: function() {
                    return [];
                },
                noteParentObject: function() {
                    return parentObject;
                },
                note: function() {
                    return note;
                },
                editable: function() {
                    return !0;
                },
                modeEdit: function() {
                    return !0;
                },
                spinner: function() {
                    return $scope.spinnerContainer;
                },
                openDialogFct: function() {
                    return $scope.openDialog;
                }
            }
        }, function(result) {
            a4p.isDefined(result) ? a4p.safeApply($scope, function() {
                var object = $scope.addNewNote(result.note, parentObject);
                object ? result.share ? result.byChatter ? $scope.shareByChatter(object, parentObject).then(function(document) {
                    deferred.resolve(document);
                }, function(diag) {
                    deferred.reject(diag);
                }) : $scope.shareByEmail(object, parentObject).then(function(document) {
                    deferred.resolve(document);
                }, function(diag) {
                    deferred.reject(diag);
                }) : deferred.resolve(object) : deferred.reject({
                    error: "htmlMsgMakeNotePb",
                    log: "no parent"
                });
            }) : a4p.safeApply($scope, function() {
                deferred.reject({
                    error: "htmlMsgMakeNotePb",
                    log: "cancelled by user"
                });
            });
        }), deferred.promise;
    }, $scope.takeReport = function(parentObject) {
        for (var note, deferred = $q.defer(), attendees = srvData.getTypedDirectLinks(parentObject, "attendee", "Attendee"), attachments = srvData.getTypedDirectLinks(parentObject, "child", "Document"), idsContact = [], idsDocument = [], attendeeIdx = 0; attendeeIdx < attendees.length; attendeeIdx++) idsContact.push(attendees[attendeeIdx].relation_id);
        for (var docIdx = 0; docIdx < attachments.length; docIdx++) idsDocument.push(attachments[docIdx].id);
        return note = {
            a4p_type: "Report",
            contact_ids: idsContact,
            document_ids: idsDocument,
            ratings: [],
            title: "",
            description: "",
            message: ""
        }, $scope.openDialog({
            backdrop: !1,
            windowClass: "modal c4p-modal-large c4p-dialog",
            controller: "ctrlEditDialogNote",
            templateUrl: "partials/dialog/dialogNote.html",
            resolve: {
                srvLocale: function() {
                    return srvLocale;
                },
                srvConfig: function() {
                    return srvConfig;
                },
                srvData: function() {
                    return srvData;
                },
                srvFacet: function() {
                    return srvFacet;
                },
                attendees: function() {
                    return attendees;
                },
                attachments: function() {
                    return attachments;
                },
                noteParentObject: function() {
                    return parentObject;
                },
                note: function() {
                    return note;
                },
                editable: function() {
                    return !0;
                },
                modeEdit: function() {
                    return !0;
                },
                spinner: function() {
                    return $scope.spinnerContainer;
                },
                openDialogFct: function() {
                    return $scope.openDialog;
                }
            }
        }, function(result) {
            a4p.isDefined(result) ? a4p.safeApply($scope, function() {
                var object = $scope.addNewReport(result.note, parentObject);
                object ? result.share ? result.byChatter ? $scope.shareByChatter(object, parentObject).then(function(document) {
                    deferred.resolve(document);
                }, function(diag) {
                    deferred.reject(diag);
                }) : $scope.shareByEmail(object, parentObject).then(function(document) {
                    deferred.resolve(document);
                }, function(diag) {
                    deferred.reject(diag);
                }) : deferred.resolve(object) : deferred.reject({
                    error: "htmlMsgMakeReportPb",
                    log: "no parent"
                });
            }) : a4p.safeApply($scope, function() {
                deferred.reject({
                    error: "htmlMsgMakeReportPb",
                    log: "cancelled by user"
                });
            });
        }), deferred.promise;
    }, $scope.openDialogSendFeedbackReport = function(title, praiseCode, praiseText) {
        praiseCode && srvAnalytics.add("Once", "Interest in " + praiseCode), $scope.openDialog({
            backdrop: !1,
            windowClass: "modal c4p-modal-large c4p-dialog",
            controller: "ctrlEditDialogFeedback",
            templateUrl: "partials/dialog/dialogFeedback.html",
            resolve: {
                srvLocale: function() {
                    return srvLocale;
                },
                title: function() {
                    return title;
                },
                message: function() {
                    return praiseText || "";
                },
                onlyFeedback: function() {
                    var onlyFeedback = "undefined" != typeof praiseCode && praiseCode ? !0 : !1;
                    return onlyFeedback;
                },
                emailRequired: function() {
                    return srvSecurity.getA4pLogin() || $scope.isDemo ? !1 : !0;
                }
            }
        }, function(result) {
            if (a4p.isDefined(result)) {
                if (!result.feedback.message) return void alert(srvLocale.translations.htmlMsgFeedbackMessageEmpty);
                if (!srvSecurity.getA4pLogin()) {
                    if ((a4p.isUndefined(result.feedback.email) || "" == result.feedback.email) && (a4p.isUndefined(result.feedback.phone) || "" == result.feedback.phone)) return void alert(srvLocale.translations.htmlMsgFeedbackContactEmpty);
                    srvSecurity.setA4pLogin(result.feedback.email);
                }
                var params = {
                    email: srvSecurity.getA4pLogin(),
                    title: title,
                    c4pBuildDate: srvConfig.c4pBuildDate,
                    language: srvLocale.getLanguage(),
                    appVersion: $scope.version,
                    feedback: result.feedback.message,
                    logs: srvLog.getInternalLog(),
                    errors: srvLog.getErrorLog()
                }, requestCtx = {
                    type: "Feedback Report",
                    title: "Send user feedback report"
                };
                srvSynchro.addRequest("config", requestCtx, srvConfig.c4pUrlFeedbackReport, "POST", params, {
                    "Content-Type": "application/x-www-form-urlencoded"
                });
            }
        });
    }, $scope.removeItemDialog = function(object) {
        if (object || (object = srvNav.item), a4p.isDefined(object)) {
            var name = [ $scope.getItemNameById(object.id.dbid) ];
            $scope.openDialogConfirm(srvLocale.translations.htmlTextConfirmDelete, name, function(confirm) {
                confirm && a4p.safeApply($scope, function() {
                    srvData.removeAndSaveObject(object);
                });
            });
        }
    }, $scope.viewDocument = function(item) {
        if (item || (item = srvNav.item), "Note" == item.a4p_type || "Report" == item.a4p_type) $scope.viewNote(item, !1); else if ("Document" == item.a4p_type && item.email) $scope.viewEmail(item); else if ("Document" == item.a4p_type && c4p.Model.isImage(item.extension)) $scope.viewImage(item); else if (item.fileUrl && item.extension) $scope.viewFile(item.fileUrl, item.extension); else if (item.mimetype && item.extension) {
            var url = srvConfig.c4pUrlDownload + "?type=" + encodeURIComponent(item.a4p_type) + "&dbid=" + encodeURIComponent(item.id.dbid) + "&sf_id=" + encodeURIComponent(item.id.sf_id) + "&mimetype=" + encodeURIComponent(item.mimetype) + "&c4pToken=" + encodeURIComponent(srvSecurity.getHttpRequestToken());
            openChildBrowser(url, item.extension);
        }
    }, $scope.viewFile = function(url, extension) {
        openChildBrowser(url, extension);
    }, $scope.viewImage = function(imageObject) {
        $scope.openShowImageDialog(imageObject);
    }, $scope.importNewFile = function(url) {
        var filename = decodeURI(url.split("/")[url.split("/").length - 1]);
        if (console.log("importNewFile userId = " + a4pDumpData(srvData.userId, 2)), a4p.InternalLog.log("ctrlNavigation.importNewFile", url + " initialized=" + $scope.initAlreadyCalled + " userId=" + a4pDumpData(srvData.userId, 2)), 
        a4p.isUndefined(srvData.userId.dbid)) return void window.alert(srvLocale.translations.htmlMsgRejectImportNotLogged);
        var contact = srvData.getObject(srvData.userId.dbid);
        if (a4p.isUndefined(contact)) return void window.alert(srvLocale.translations.htmlMsgRejectImportNotLogged);
        console.log("importNewFile dialog opening");
        var onConfirm = function() {
            console.log("importNewFile dialog confirmed");
            var targetDirPath = "a4p/c4p/import/", onSuccess = function(document) {
                a4p.safeApply($scope, function() {
                    console.log("importNewFile importFile success");
                    var msg = "File " + document.name + " imported and written to " + document.filePath;
                    srvLog.logSuccess(!0, srvLocale.translations.htmlMsgFileImportOK, msg), srvData.addObject(document), 
                    srvData.linkToItem(document.a4p_type, "parent", [ document ], contact), srvData.addObjectToSave(document.a4p_type, document.id.dbid), 
                    $scope.setItemAndGoDetail(document);
                });
            }, onFailure = function(diag) {
                a4p.safeApply($scope, function() {
                    console.log("importNewFile importFile failure"), srvLog.logInfo(!0, srvLocale.translations[diag.error], diag.log), 
                    $scope.stopSpinner();
                });
            };
            a4p.promiseWakeup($scope, srvData.importFile(url, targetDirPath), onSuccess, onFailure), 
            $scope.startSpinner();
        };
        $scope.openDialogConfirm(srvLocale.translations.htmlMsgFileImport, [ filename ], function(confirm) {
            confirm ? a4p.safeApply($scope, function() {
                onConfirm();
            }) : console.log("importNewFile dialog cancelled");
        });
    }, $scope.addNewNote = function(note, parent) {
        if (parent || (parent = srvNav.item), !parent) return void 0;
        var document = srvData.createObject("Note", note);
        return srvData.addObject(document), srvData.linkToItem(document.a4p_type, "parent", [ document ], parent), 
        srvData.addObjectToSave(document.a4p_type, document.id.dbid), srvAnalytics.add("Once", "Create " + document.a4p_type), 
        document;
    }, $scope.addNewReport = function(report, parent) {
        if (parent || (parent = srvNav.item), !parent) return void 0;
        var document = srvData.createObject("Report", report);
        return srvData.addObject(document), srvData.linkToItem(document.a4p_type, "parent", [ document ], parent), 
        srvData.addObjectToSave(document.a4p_type, document.id.dbid), srvAnalytics.add("Once", "Create " + document.a4p_type), 
        document;
    }, $scope.shareByEmail = function(item, parent) {
        var postTitle, deferred = $q.defer(), itemName = srvConfig.getItemName(item), parentName = srvConfig.getItemName(parent);
        return postTitle = "Note" == item.a4p_type ? "Sharing " + item.a4p_type + " about " + parent.a4p_type + " " + parentName : "Report" == item.a4p_type ? "Sharing " + item.a4p_type + " about " + parent.a4p_type + " " + parentName : item.email ? "Sharing Email about " + parent.a4p_type + " " + parentName : "Sharing Document " + itemName + " about " + parent.a4p_type + " " + parentName, 
        $scope.openDialog({
            backdrop: !1,
            windowClass: "modal c4p-modal-full c4p-modal-mail c4p-dialog",
            controller: "ctrlEditDialogEmail",
            templateUrl: "partials/dialog/dialogEmail.html",
            resolve: {
                srvLocale: function() {
                    return srvLocale;
                },
                srvData: function() {
                    return srvData;
                },
                srvConfig: function() {
                    return srvConfig;
                },
                srvFacet: function() {
                    return srvFacet;
                },
                title: function() {
                    return srvLocale.translations.htmlTitleShareByEmail;
                },
                attendees: function() {
                    return srvData.getTypedDirectLinks(parent, "attendee", "Attendee");
                },
                attachments: function() {
                    return [];
                },
                email: function() {
                    return {
                        emailType: "share",
                        subject: postTitle,
                        body: "",
                        contacts: [],
                        documents: [ item.id ],
                        emailsInput: []
                    };
                },
                emailId: function() {
                    return null;
                },
                editable: function() {
                    return !0;
                },
                modeEdit: function() {
                    return !0;
                },
                openDialogFct: function() {
                    return $scope.openDialog;
                }
            }
        }, function(result) {
            a4p.isDefined(result) ? (srvAnalytics.add("Once", "Create Mail"), a4p.safeApply($scope, function() {
                var document = $scope.addEmailToParent(item, !0, result, parent);
                deferred.resolve(document);
            })) : a4p.safeApply($scope, function() {
                deferred.reject({
                    error: "htmlMsgShareByEmailPb",
                    log: "cancelled by user"
                });
            });
        }), deferred.promise;
    }, $scope.shareByChatter = function(item, parent) {
        var deferred = $q.defer();
        parent || (parent = srvData.getObject(item.parent_id.dbid));
        var postTitle, itemName = srvConfig.getItemName(item), parentName = srvConfig.getItemName(parent);
        return "Note" == item.a4p_type && parent ? postTitle = "Sharing " + item.a4p_type + " about " + parent.a4p_type + " " + parentName : "Report" == item.a4p_type && parent ? postTitle = "Sharing " + item.a4p_type + " about " + parent.a4p_type + " " + parentName : item.email && parent ? postTitle = "Sharing Email about " + parent.a4p_type + " " + parentName : parent && (postTitle = "Sharing Document " + itemName + " about " + parent.a4p_type + " " + parentName), 
        $scope.openDialog({
            backdrop: !1,
            windowClass: "modal c4p-modal-full c4p-modal-mail c4p-dialog",
            controller: "ctrlEditDialogFeed",
            templateUrl: "partials/dialog/dialogFeed.html",
            resolve: {
                srvLocale: function() {
                    return srvLocale;
                },
                srvData: function() {
                    return srvData;
                },
                title: function() {
                    return srvLocale.translations.htmlTitleShareByChatter;
                },
                feed: function() {
                    return {
                        title: postTitle,
                        body: "",
                        id: item.id
                    };
                },
                editable: function() {
                    return !0;
                },
                modeEdit: function() {
                    return !0;
                }
            }
        }, function(result) {
            a4p.isDefined(result) ? a4p.safeApply($scope, function() {
                item.feed = result, srvData.setAndSaveObject(item), deferred.resolve(item);
            }) : a4p.safeApply($scope, function() {
                deferred.reject({
                    error: "htmlMsgShareByChatterPb",
                    log: "cancelled by user"
                });
            });
        }), deferred.promise;
    }, $scope.viewEmail = function(item) {
        var title, parent = srvData.getObject(item.parent_id.dbid), dialogOptions = {
            backdrop: !1,
            controller: "ctrlEditDialogEmail",
            templateUrl: "partials/dialog/dialogEmail.html"
        };
        "share" == item.email.emailType ? (dialogOptions.windowClass = "modal c4p-modal-full c4p-modal-mail c4p-dialog", 
        title = srvLocale.translations.htmlTitleShareByEmail) : (dialogOptions.windowClass = "modal c4p-modal-full c4p-modal-mail c4p-dialog", 
        title = srvLocale.translations.htmlFormEmail), $scope.openDialog(angular.extend(dialogOptions, {
            resolve: {
                srvLocale: function() {
                    return srvLocale;
                },
                srvData: function() {
                    return srvData;
                },
                srvConfig: function() {
                    return srvConfig;
                },
                srvFacet: function() {
                    return srvFacet;
                },
                title: function() {
                    return title;
                },
                attendees: function() {
                    return srvData.getTypedDirectLinks(parent, "attendee", "Attendee");
                },
                attachments: function() {
                    if ("share" == item.email.emailType) return [];
                    for (var docs = srvData.getTypedDirectLinks(parent, "child", "Document"), links = srvData.getTypedRemoteLinks(parent, "attachee", "Document"), i = 0, nb = links.length; nb > i; i++) docs.push(links[i]);
                    return docs;
                },
                email: function() {
                    return item.email;
                },
                emailId: function() {
                    return item.id;
                },
                editable: function() {
                    return srvData.isObjectOwnedByUser(parent) ? item.email.editable : !1;
                },
                modeEdit: function() {
                    return !1;
                },
                openDialogFct: function() {
                    return $scope.openDialog;
                }
            }
        }), function(result) {
            a4p.isDefined(result) && a4p.safeApply($scope, function() {
                item.email = result, srvData.setAndSaveObject(item);
            });
        });
    }, $scope.viewNote = function(item, modeEdit) {
        var parent = srvData.getObject(item.parent_id.dbid), itemRefreshed = srvData.getObject(item.id.dbid), editable = !0;
        $scope.openDialog({
            backdrop: !1,
            windowClass: "modal c4p-modal-large c4p-dialog",
            controller: "ctrlEditDialogNote",
            templateUrl: "partials/dialog/dialogNote.html",
            resolve: {
                srvLocale: function() {
                    return srvLocale;
                },
                srvConfig: function() {
                    return srvConfig;
                },
                srvData: function() {
                    return srvData;
                },
                srvFacet: function() {
                    return srvFacet;
                },
                attendees: function() {
                    return srvData.getTypedDirectLinks(parent, "attendee", "Attendee");
                },
                attachments: function() {
                    for (var docs = srvData.getTypedDirectLinks(parent, "child", "Document"), links = srvData.getTypedRemoteLinks(parent, "attachee", "Document"), i = 0, nb = links.length; nb > i; i++) docs.push(links[i]);
                    return docs;
                },
                noteParentObject: function() {
                    return parent;
                },
                note: function() {
                    var noteTemp = {};
                    return noteTemp = angular.extend(noteTemp, itemRefreshed);
                },
                editable: function() {
                    return srvData.isObjectOwnedByUser(parent) ? editable : !1;
                },
                modeEdit: function() {
                    return modeEdit;
                },
                spinner: function() {
                    return $scope.spinnerContainer;
                },
                openDialogFct: function() {
                    return $scope.openDialog;
                }
            }
        }, function(result) {
            a4p.isDefined(result) && a4p.safeApply($scope, function() {
                srvData.setAndSaveObject(result.note), result.share && (result.byChatter ? $scope.shareByChatter(result.note, parent) : $scope.shareByEmail(result.note, parent));
            });
        });
    }, $scope.showDetailMeetingBtn = function() {
        return $scope.responsiveIsOnePageFormat() ? $scope.hasToolbar() ? !1 : !0 : $scope.hasToolbar() ? !1 : "dayView" != $scope.calendarView ? !0 : $scope.navAside ? !0 : !1;
    }, $scope.modeLock = !1, $scope.setModeLock = function(mode) {
        var oldMode = $scope.modeLock;
        return oldMode != mode && !mode && srvSecurity.isSecured() ? $scope.openDialogLocked(function() {
            a4p.safeApply($scope, function() {
                $scope.modeLock = mode;
            });
        }) : ($scope.modeLock = mode, void (!oldMode && mode && $scope.setModeEdit(!1)));
    }, $scope.formError = function(errKey, args) {
        return c4p.Model.createErrMsg($scope, errKey, args);
    }, $scope.translate = function(key) {
        var translation = srvLocale.translations[key];
        return translation ? translation : key;
    }, $scope.to_trusted = function(html_code) {
        return $sce.trustAsHtml(html_code);
    }, $scope.setBlur = function(isBlur) {
        $scope.isBlurOn = isBlur;
    }, $scope.addMoreDataInDemoMode = function() {
        if ($scope.isDemo) {
            var deferred = $q.defer();
            $scope.srvData.createDemoData().then(function() {
                deferred.resolve(data);
            }, function(response) {
                deferred.reject(response);
            });
        }
    };
}

function networkTestRunnerCtrl($scope, $q, $location, $http, $modal, version, srvLoad, srvLocalStorage, srvFileStorage, srvAnalytics, srvConfig, srvLog, srvLocale, srvData, srvRunning, srvSecurity, srvSynchro, cordovaReady) {
    function initLocalStorage(scope, deferred) {
        scope.loadLocalStorage(), initConfig(scope, deferred);
    }
    function initConfig(scope, deferred) {
        a4p.InternalLog.log("testCtrl", "srvConfig.startLoading"), srvConfig.setC4pUrlConf("../../www/models/c4p_conf.json"), 
        srvConfig.startLoading(function() {
            a4p.safeApply(scope, function() {
                initLocale(scope, deferred);
            });
        });
    }
    function initLocale(scope, deferred) {
        a4p.InternalLog.log("testCtrl", "srvLocale.startLoading"), srvLocale.setLocaleDir("../../www/"), 
        srvLocale.startLoading(function() {
            a4p.safeApply(scope, function() {
                initFileStorage(scope, deferred);
            });
        });
    }
    function initFileStorage(scope, deferred) {
        a4p.InternalLog.log("testCtrl", "srvFileStorage.init"), srvFileStorage.init().then(function() {
            a4p.safeApply(scope, function() {
                initData(scope, deferred);
            });
        }, function(message) {
            a4p.safeApply(scope, function() {
                deferred.reject({
                    error: message
                });
            });
        });
    }
    function initData(scope, deferred) {
        a4p.InternalLog.log("testCtrl", "initData"), scope.loadLocalStorage(), srvData.init(), 
        scope.initFinished(deferred);
    }
    function getObjectFromList(list, crm, id) {
        if (a4p.isUndefinedOrNull(list)) return !1;
        for (var i = list.length - 1; i >= 0; i--) {
            var crmObjects = (list[i].a4p_type, list[i].crmObjects);
            if (a4p.isUndefinedOrNull(crmObjects)) return !1;
            for (var j = crmObjects.length - 1; j >= 0; j--) {
                var crmObject = crmObjects[j];
                if (a4p.isDefined(crmObject.crmId) && crmObject.crmId.crm == crm && crmObject.crmId.id == id) return crmObject;
            }
        }
        return !1;
    }
    function openChildBrowser(url, extension, onLocationChange, onClose) {
        var closeChildBrowserAfterLocationChange = !1;
        if (!window.device) {
            var new_window = window.open(url, "_blank", "menubar=no,scrollbars=yes,resizable=1,height=400,width=600"), initialLocation = void 0, initialUrl = void 0;
            a4p.isDefined(new_window.location) && (initialLocation = new_window.location.href), 
            a4p.isDefined(new_window.document) && (initialUrl = new_window.document.URL), a4p.InternalLog.log("openChildBrowser", "initialLocation=" + initialLocation + " initialUrl=" + initialUrl);
            var locationChanged = !1, new_window_tracker = function() {
                if (a4p.isDefined(new_window.location) && "string" == typeof new_window.location.href ? a4p.InternalLog.log("openChildBrowser", "new location=" + new_window.location.href) : a4p.isDefined(new_window.document) && "string" == typeof new_window.document.URL && a4p.InternalLog.log("openChildBrowser", "new url=" + new_window.document.URL), 
                locationChanged) {
                    if (a4p.isDefined(new_window.location) && "string" == typeof new_window.location.href && new_window.location.href.indexOf("about:blank") >= 0) return a4p.InternalLog.log("openChildBrowser", "onLocationChange"), 
                    onLocationChange && onLocationChange(), closeChildBrowserAfterLocationChange = !0, 
                    void new_window.close();
                    if (a4p.isDefined(new_window.document) && "string" == typeof new_window.document.URL && new_window.document.URL.indexOf("about:blank") >= 0) return a4p.InternalLog.log("openChildBrowser", "onUrlChange"), 
                    onLocationChange && onLocationChange(), closeChildBrowserAfterLocationChange = !0, 
                    void new_window.close();
                } else {
                    if (a4p.isDefined(new_window.location) && "string" == typeof new_window.location.href && initialLocation != new_window.location.href) return a4p.InternalLog.log("openChildBrowser", "new location=" + new_window.location.href), 
                    locationChanged = !0, void setTimeout(new_window_tracker, 100);
                    if (a4p.isDefined(new_window.document) && "string" == typeof new_window.document.URL && initialUrl != new_window.document.URL) return a4p.InternalLog.log("openChildBrowser", "new url=" + new_window.document.URL), 
                    locationChanged = !0, void setTimeout(new_window_tracker, 100);
                }
                return new_window.closed ? (a4p.InternalLog.log("openChildBrowser", "onClose"), 
                void (closeChildBrowserAfterLocationChange || onClose && onClose())) : (a4p.InternalLog.log("openChildBrowser", "track locationChanged=" + locationChanged), 
                void setTimeout(new_window_tracker, 100));
            };
            return void setTimeout(new_window_tracker, 100);
        }
        if (window.device) {
            var ref = window.open(url, "_blank", "location=yes");
            ref.addEventListener("loadstart", function() {}), ref.addEventListener("loadstop", function(e) {
                "string" == typeof e.url && e.url.indexOf("about:blank") >= 0 && (closeChildBrowserAfterLocationChange = !0, 
                onLocationChange && onLocationChange(), ref.close());
            }), ref.addEventListener("loaderror", function() {}), ref.addEventListener("exit", function() {
                closeChildBrowserAfterLocationChange || onClose && onClose();
            });
        }
    }
    $scope.todo = [], $scope.tests = [], $scope.status = "No test started", $scope.status2 = "", 
    $scope.initialized = !1, $scope.fileStorageType = null, $scope.fileStorageQuota = 4294967296, 
    $scope.currentIdx = $scope.todo.length, $scope.networkDataListener = srvData.addListenerOnUpdate(function(callbackId, action, type, id) {
        a4p.safeApply($scope, function() {
            "clear" == action ? $scope.status2 = "srvData has cleared" : "remove" == action ? $scope.status2 = "srvData has removed " + type + " " + id : "set" == action ? $scope.status2 = "srvData has updated " + type + " " + id : "add" == action && ($scope.status2 = "srvData has created " + type + " " + id);
        });
    }), $scope.networkSynchroStartListener = srvSynchro.addListenerOnStart("networkTestRunner", function(callbackId, reqId, reqCtx, reqNbTry) {
        a4p.safeApply($scope, function() {
            $scope.synchroStart = {
                id: reqId,
                ctx: reqCtx,
                nbTry: reqNbTry
            };
        });
    }), $scope.networkSynchroErrorListener = srvSynchro.addListenerOnError("networkTestRunner", function(callbackId, reqId, reqCtx, reqNbTry, message) {
        a4p.safeApply($scope, function() {
            $scope.synchroError = {
                id: reqId,
                ctx: reqCtx,
                nbTry: reqNbTry,
                message: message
            };
        });
    }), $scope.networkSynchroCancelListener = srvSynchro.addListenerOnCancel("networkTestRunner", function(callbackId, reqId, reqCtx, reqNbTry) {
        a4p.safeApply($scope, function() {
            $scope.synchroCancel = {
                id: reqId,
                ctx: reqCtx,
                nbTry: reqNbTry
            };
        });
    }), $scope.networkSynchroSuccessListener = srvSynchro.addListenerOnSuccess("networkTestRunner", function(callbackId, reqId, reqCtx, reqNbTry, responseCode, responseData, responseHeaders) {
        a4p.safeApply($scope, function() {
            $scope.synchroSuccess = {
                id: reqId,
                ctx: reqCtx,
                nbTry: reqNbTry,
                code: responseCode,
                data: responseData,
                headers: responseHeaders
            };
        });
    }), $scope.$on("$destroy", function() {
        srvData.cancelListener($scope.networkDataListener), srvSynchro.cancelListener($scope.networkSynchroStartListener), 
        srvSynchro.cancelListener($scope.networkSynchroErrorListener), srvSynchro.cancelListener($scope.networkSynchroCancelListener), 
        srvSynchro.cancelListener($scope.networkSynchroSuccessListener);
    }), $scope.run = function() {
        $scope.init().then(function() {
            $scope.tests = [], $scope.runTest(0);
        }, function(response) {
            $scope.tests.push({
                title: "init",
                ok: !1,
                log: response.error + " => All tests aborted"
            });
        });
    }, $scope.runTest = function(idx) {
        a4p.safeApply($scope, function() {
            if (idx < $scope.todo.length) {
                $scope.currentIdx = idx;
                var test = $scope.todo[idx];
                $scope.status = "Running test " + idx + " (" + test.name + ") : ", $scope.status2 = "", 
                a4p.InternalLog.log("Test#" + $scope.currentIdx, "starting test"), test.fct();
            } else $scope.currentIdx = idx, $scope.status = "All tests finished", $scope.status2 = "";
        });
    }, $scope.success = function() {
        a4p.safeApply($scope, function() {
            var test = $scope.todo[$scope.currentIdx];
            $scope.tests.push({
                title: test.name,
                ok: !0,
                log: ""
            }), a4p.InternalLog.log("Test#" + $scope.currentIdx, "success"), setTimeout(function(scope, idx) {
                return function() {
                    scope.runTest(idx);
                };
            }($scope, $scope.currentIdx + 1), 1e3);
        });
    }, $scope.failure = function(log) {
        a4p.safeApply($scope, function() {
            var test = $scope.todo[$scope.currentIdx];
            $scope.tests.push({
                title: test.name,
                ok: !1,
                log: log
            }), a4p.InternalLog.log("Test#" + $scope.currentIdx, "failure : " + log), setTimeout(function(scope, idx) {
                return function() {
                    scope.runTest(idx);
                };
            }($scope, $scope.currentIdx + 1), 1e3);
        });
    }, $scope.init = function() {
        var deferred = $q.defer();
        if ($scope.initialized) return deferred.resolve(), deferred.promise;
        $scope.initialized = !0;
        var startApplication = function() {
            a4p.safeApply($scope, function() {
                initLocalStorage($scope, deferred);
            });
        };
        return cordovaReady(startApplication)(), deferred.promise;
    }, $scope.loadLocalStorage = function() {
        srvConfig.init(), srvLog.init(), srvLocale.init(), srvSecurity.init();
    }, $scope.initFinished = function(deferred) {
        a4p.safeApply($scope, function() {
            a4p.InternalLog.log("testCtrl", "init finished"), deferred.resolve(), srvData.start(), 
            srvData.clear();
        });
    }, $scope.badLoginUser = function() {
        var userFeedback = {
            company_name: "apps4pro",
            phone: "01.23.45.67.89",
            feedback: "test network",
            star: ""
        };
        srvData.loginUser(!1, "mat@apps4pro.com", "dummy", "", !0, userFeedback, "v01").then(function() {
            $scope.failure("login should not succeed");
        }, function(response) {
            response.error ? "htmlMsgInvalidPassword" != response.error ? $scope.failure("login should not fail with error " + response.error) : $scope.success() : $scope.failure("loginUser should fail with InvalidPassword instead of urlBase changed to " + response.urlBase);
        });
    }, $scope.loginUser = function(testName) {
        var userFeedback = {
            company_name: "apps4pro",
            phone: "01.23.45.67.89",
            feedback: "test network",
            star: ""
        };
        srvData.loginUser(!1, "mat@apps4pro.com", "apps4pro", "", !0, userFeedback, "v01").then(function() {
            a4p.InternalLog.log(testName, "loginUser done"), setTimeout(function() {
                $scope.forcePossibleCrms(testName).then(function() {
                    $scope.success();
                }, function(message) {
                    $scope.failure(message);
                });
            }, 1e3);
        }, function(response) {
            $scope.failure(response.error ? "loginUser error " + response.error + " " + response.log : "loginUser urlBase changed to " + response.urlBase);
        });
    }, $scope.waitFor = function(timeMs) {
        var deferred = $q.defer(), timeStart = new Date().getTime(), timer = function() {
            a4p.safeApply($scope, function() {
                a4p.safeApply($scope, function() {
                    var nb = new Date().getTime() - timeStart;
                    nb >= timeMs ? deferred.resolve() : ($scope.status2 = "Still " + (timeMs - nb) / 1e3 + " seconds to wait for", 
                    setTimeout(function() {
                        timer();
                    }, 1e3));
                });
            });
        };
        return setTimeout(function() {
            timer();
        }, 1e3), deferred.promise;
    }, $scope.waitSynchroDone = function() {
        var deferred = $q.defer(), timer = function() {
            a4p.safeApply($scope, function() {
                0 == srvSynchro.nbPendingRequests() ? deferred.resolve() : (a4p.InternalLog.log("waitSynchroDone", "tick"), 
                $scope.status2 = "Still " + srvSynchro.nbPendingRequests() + " pending requests in srvSynchro", 
                setTimeout(function() {
                    timer();
                }, 1e3));
            });
        };
        return setTimeout(function() {
            timer();
        }, 1e3), deferred.promise;
    }, $scope.forcePossibleCrms = function(testName) {
        var deferred = $q.defer();
        srvConfig.setPossibleCrms([ "ios", "c4p", "sf" ]), srvConfig.setActiveCrms([ "ios", "c4p" ]);
        var ctx = {};
        return $scope.synchroStart = null, $scope.synchroError = null, $scope.synchroCancel = null, 
        $scope.synchroSuccess = null, srvSynchro.addRequest("networkTestRunner", ctx, "https://admin:admin@127.0.0.1/c4p_server/www/_admin/setUserConfig.php", "POST", {
            login: "mat@apps4pro.com",
            setting: "on",
            possibleDevice: "checked",
            possibleApps4Pro: "checked",
            possibleSalesforce: "checked"
        }), $scope.waitSynchroDone().then(function() {
            a4p.isUndefinedOrNull($scope.synchroStart) && deferred.reject("forcePossibleCrms not started"), 
            a4p.isDefinedAndNotNull($scope.synchroError) && deferred.reject("forcePossibleCrms failed : " + $scope.synchroError.message), 
            a4p.isDefinedAndNotNull($scope.synchroCancel) && deferred.reject("forcePossibleCrms cancelled"), 
            a4p.isUndefinedOrNull($scope.synchroSuccess) && deferred.reject("forcePossibleCrms not succeed"), 
            200 != $scope.synchroSuccess.code && deferred.reject("forcePossibleCrms failed : code=" + $scope.synchroSuccess.code), 
            $scope.synchroSuccess.data.search("Use Device CRM = 1") < 0 && deferred.reject("forcePossibleCrms failed : Device CRM not possible"), 
            $scope.synchroSuccess.data.search("Use Apps4Pro CRM = 1") < 0 && deferred.reject("forcePossibleCrms failed : Apps4Pro CRM not possible"), 
            $scope.synchroSuccess.data.search("Use Salesforce CRM = 1") < 0 && deferred.reject("forcePossibleCrms failed : Salesforce CRM not possible"), 
            a4p.InternalLog.log(testName, "forcePossibleCrms done"), setTimeout(function() {
                $scope.downloadFullMap(testName).then(function() {
                    deferred.resolve();
                }, function(message) {
                    deferred.reject(message);
                });
            }, 1e3);
        }, function() {
            deferred.reject("forcePossibleCrms failed");
        }), deferred.promise;
    }, $scope.downloadFullMap = function(testName) {
        var deferred = $q.defer();
        return srvData.downloadFullMap(srvSecurity.getHttpRequestToken()).then(function() {
            a4p.InternalLog.log(testName, "downloadFullMap done"), deferred.resolve();
        }, function(response) {
            if (response.error) deferred.reject("downloadFullMap error " + response.error + " " + response.log); else if (response.redirect) {
                var onClose = function() {
                    deferred.reject("onLoginCancel");
                }, onLocationChange = function() {
                    a4p.InternalLog.log(testName, "onLoginSuccess => retry downloadFullMap"), $scope.downloadFullMap(testName).then(function() {
                        deferred.resolve();
                    }, function(message) {
                        deferred.reject(message);
                    });
                };
                openChildBrowser(response.redirect, "url", onLocationChange, onClose);
            } else deferred.reject("downloadFullMap empty");
        }), deferred.promise;
    }, $scope.waitSynchronized = function() {
        var deferred = $q.defer(), timer = function() {
            a4p.safeApply($scope, function() {
                0 == srvData.objectsToDownload.length && 0 == srvData.objectsToSave.length ? deferred.resolve() : ($scope.status2 = "Still " + srvData.objectsToDownload.length + " objects to download and " + srvData.objectsToSave.length + " objects to upload", 
                setTimeout(function() {
                    timer();
                }, 1e3));
            });
        };
        return setTimeout(function() {
            timer();
        }, 1e3), deferred.promise;
    }, $scope.refreshMap = function(dataListener) {
        var deferred = $q.defer();
        return setTimeout(function() {
            srvData.refreshFullMap(srvSecurity.getHttpRequestToken()).then(function(refreshMap) {
                srvData.cancelListener(dataListener), deferred.resolve(refreshMap);
            }, function(response) {
                srvData.cancelListener(dataListener), deferred.reject(response);
            });
        }, 1e3), deferred.promise;
    }, $scope.todo.push({
        name: "test Success",
        fct: function() {
            $scope.success();
        }
    }), $scope.todo.push({
        name: "test Bad Login",
        fct: function() {
            $scope.badLoginUser();
        }
    }), $scope.todo.push({
        name: "test Login (srvData will download any Document in the Map)",
        fct: function() {
            $scope.loginUser();
        }
    }), $scope.todo.push({
        name: "wait for all downloads/uploads done",
        fct: function() {
            $scope.waitSynchronized().then(function() {
                a4p.isUndefined(srvData.userObject) || "mat@apps4pro.com" != srvData.userObject.email ? $scope.failure("User 'mat@apps4pro.com' is not found in srvData") : a4p.isUndefined(srvData.favoritesObject) || srvData.favoritesObject.name != srvLocale.translations.htmlFavorites ? $scope.failure("Facet '" + srvLocale.translations.htmlFavorites + "' is not found in srvData") : $scope.success();
            }, function(response) {
                $scope.failure(response.error);
            });
        }
    }), $scope.todo.push({
        name: "test C4P Facet creation",
        fct: function() {
            var dataActions = {
                clear: [],
                remove: [],
                set: [],
                add: []
            }, dataListener = srvData.addListenerOnUpdate(function(callbackId, action, type, id) {
                a4p.InternalLog.log("refreshMap", action + " " + type + " " + id), "clear" == action ? dataActions.clear.push(id) : "remove" == action ? dataActions.remove.push(id) : "set" == action ? dataActions.set.push(id) : "add" == action && dataActions.add.push(id);
            });
            $scope.facet = srvData.createObject("Facet", {
                prefix: "",
                name: "FacetName",
                description: "Descriptif"
            }), srvData.addAndSaveObject($scope.facet), $scope.waitSynchronized().then(function() {
                $scope.refreshMap(dataListener).then(function(refreshMap) {
                    getObjectFromList(refreshMap.updates, "c4p", $scope.facet.id.c4p_id) ? isValueInList(dataActions.set, $scope.facet.id.dbid) ? $scope.success() : $scope.failure("Facet newly created is not found in dataActions") : $scope.failure("Facet newly created is not found in refreshMap");
                }, function(response) {
                    $scope.failure(response.error ? "refreshMap error " + response.error + " " + response.log : response.redirect ? "refreshMap failure, redirect to " + response.redirect : "refreshMap empty");
                });
            }, function(response) {
                $scope.failure("waiting for all downloads/uploads failed : " + response.error);
            });
        }
    }), $scope.todo.push({
        name: "test C4P Facet update",
        fct: function() {
            var dataActions = {
                clear: [],
                remove: [],
                set: [],
                add: []
            }, dataListener = srvData.addListenerOnUpdate(function(callbackId, action, type, id) {
                a4p.InternalLog.log("refreshMap", action + " " + type + " " + id), "clear" == action ? dataActions.clear.push(id) : "remove" == action ? dataActions.remove.push(id) : "set" == action ? dataActions.set.push(id) : "add" == action && dataActions.add.push(id);
            });
            $scope.facet.description = "Second descriptif", srvData.setAndSaveObject($scope.facet), 
            $scope.waitSynchronized().then(function() {
                $scope.refreshMap(dataListener).then(function(refreshMap) {
                    getObjectFromList(refreshMap.updates, "c4p", $scope.facet.id.c4p_id) ? isValueInList(dataActions.set, $scope.facet.id.dbid) ? $scope.success() : $scope.failure("Facet newly updated is not found in dataActions") : $scope.failure("Facet newly updated is not found in refreshMap");
                }, function(response) {
                    $scope.failure(response.error ? "refreshMap error " + response.error + " " + response.log : response.redirect ? "refreshMap failure, redirect to " + response.redirect : "refreshMap empty");
                });
            }, function(response) {
                $scope.failure("waiting for all downloads/uploads failed : " + response.error);
            });
        }
    }), $scope.todo.push({
        name: "test C4P Many objects creation",
        fct: function() {
            var dataActions = {
                clear: [],
                remove: [],
                set: [],
                add: []
            }, dataListener = srvData.addListenerOnUpdate(function(callbackId, action, type, id) {
                a4p.InternalLog.log("refreshMap", action + " " + type + " " + id), "clear" == action ? dataActions.clear.push(id) : "remove" == action ? dataActions.remove.push(id) : "set" == action ? dataActions.set.push(id) : "add" == action && dataActions.add.push(id);
            });
            $scope.account1 = srvData.createObject("Account", {
                company_name: "NetworkTestRunner account",
                phone: "(33) 01 47 55 78",
                annual_revenue: 125e3,
                nb_employees: 145,
                industry: "Electronics",
                description: "NetworkTestRunner account description"
            }), srvData.addObject($scope.account1), $scope.contact1 = srvData.createObject("Contact", {
                salutation: "Mr",
                first_name: "Alain",
                last_name: "Porthus",
                title: "Director",
                email: "aporthus@ntr.com"
            }), srvData.addObject($scope.contact1), srvData.linkToItem("Contact", "accounter", [ $scope.contact1 ], $scope.account1), 
            $scope.opportunity1 = srvData.createObject("Opportunity", {
                name: "Software CRM",
                stage: "Prospecting",
                amount: 5400,
                probability: 75,
                description: "CRM software selling"
            }), srvData.addObject($scope.opportunity1), srvData.linkToItem("Opportunity", "accounter", [ $scope.opportunity1 ], $scope.account1), 
            $scope.event1 = srvData.createObject("Event", {
                name: "NetworkTestRunner 2 hours event",
                location: "Tours",
                date_start: "2014-07-01 12:00:00",
                date_end: "2014-07-01 14:00:00",
                description: "NetworkTestRunner 2 hours event description"
            }), srvData.addObject($scope.event1), srvData.linkToItem("Event", "leader", [ $scope.event1 ], $scope.contact1), 
            $scope.task1 = srvData.createObject("Task", {
                name: "NetworkTestRunner task",
                date_start: "2014-07-01 00:00:00",
                description: "NetworkTestRunner task description"
            }), srvData.addObject($scope.task1), srvData.linkToItem("Task", "leader", [ $scope.task1 ], $scope.contact1), 
            $scope.note1 = srvData.createObject("Note", {
                title: "NetworkTestRunner note1",
                message: "Recall after Christmas",
                description: "NetworkTestRunner note1 description"
            }), srvData.addObject($scope.note1), srvData.linkToItem("Note", "parent", [ $scope.note1 ], $scope.event1), 
            $scope.report1 = srvData.createObject("Report", {
                title: "NetworkTestRunner report1",
                message: "Report of yesterday",
                ratings: {
                    code: "Feeling",
                    name: "Feeling",
                    type: "star",
                    value: 0
                },
                description: "NetworkTestRunner report1 description"
            }), srvData.addObject($scope.report1), srvData.linkToItem("Report", "parent", [ $scope.report1 ], $scope.event1), 
            srvData.addObjectToSave($scope.account1.a4p_type, $scope.account1.id.dbid), srvData.addObjectToSave($scope.contact1.a4p_type, $scope.contact1.id.dbid), 
            srvData.addObjectToSave($scope.opportunity1.a4p_type, $scope.opportunity1.id.dbid), 
            srvData.addObjectToSave($scope.event1.a4p_type, $scope.event1.id.dbid), srvData.addObjectToSave($scope.task1.a4p_type, $scope.task1.id.dbid), 
            srvData.addObjectToSave($scope.note1.a4p_type, $scope.note1.id.dbid), srvData.addObjectToSave($scope.report1.a4p_type, $scope.report1.id.dbid), 
            $scope.waitSynchronized().then(function() {
                $scope.refreshMap(dataListener).then(function(refreshMap) {
                    getObjectFromList(refreshMap.updates, "c4p", $scope.account1.id.c4p_id) ? isValueInList(dataActions.set, $scope.account1.id.dbid) ? getObjectFromList(refreshMap.updates, "c4p", $scope.contact1.id.c4p_id) ? isValueInList(dataActions.set, $scope.contact1.id.dbid) ? getObjectFromList(refreshMap.updates, "c4p", $scope.opportunity1.id.c4p_id) ? isValueInList(dataActions.set, $scope.opportunity1.id.dbid) ? getObjectFromList(refreshMap.updates, "c4p", $scope.event1.id.c4p_id) ? getObjectFromList(refreshMap.updates, "c4p", $scope.task1.id.c4p_id) ? isValueInList(dataActions.set, $scope.event1.id.dbid) ? isValueInList(dataActions.set, $scope.task1.id.dbid) ? getObjectFromList(refreshMap.updates, "c4p", $scope.note1.id.c4p_id) ? isValueInList(dataActions.set, $scope.note1.id.dbid) ? getObjectFromList(refreshMap.updates, "c4p", $scope.report1.id.c4p_id) ? isValueInList(dataActions.set, $scope.report1.id.dbid) ? $scope.success() : $scope.failure("Report newly created is not found in dataActions") : $scope.failure("Report newly created is not found in refreshMap") : $scope.failure("Note newly created is not found in dataActions") : $scope.failure("Note newly created is not found in refreshMap") : $scope.failure("Task newly created is not found in dataActions") : $scope.failure("Event newly created is not found in dataActions") : $scope.failure("Task newly created is not found in refreshMap") : $scope.failure("Event newly created is not found in refreshMap") : $scope.failure("Opportunity newly created is not found in dataActions") : $scope.failure("Opportunity newly created is not found in refreshMap") : $scope.failure("Contact newly created is not found in dataActions") : $scope.failure("Contact newly created is not found in refreshMap") : $scope.failure("Account newly created is not found in dataActions") : $scope.failure("Account newly created is not found in refreshMap");
                }, function(response) {
                    $scope.failure(response.error ? "refreshMap error " + response.error + " " + response.log : response.redirect ? "refreshMap failure, redirect to " + response.redirect : "refreshMap empty");
                });
            }, function(response) {
                $scope.failure("waiting for all downloads/uploads failed : " + response.error);
            });
        }
    }), $scope.todo.push({
        name: "test C4P Facet remove",
        fct: function() {
            var dataActions = {
                clear: [],
                remove: [],
                set: [],
                add: []
            }, dataListener = srvData.addListenerOnUpdate(function(callbackId, action, type, id) {
                a4p.InternalLog.log("refreshMap", action + " " + type + " " + id), "clear" == action ? dataActions.clear.push(id) : "remove" == action ? dataActions.remove.push(id) : "set" == action ? dataActions.set.push(id) : "add" == action && dataActions.add.push(id);
            });
            srvData.removeAndSaveObject($scope.facet), $scope.waitSynchronized().then(function() {
                $scope.refreshMap(dataListener).then(function(refreshMap) {
                    getObjectFromList(refreshMap.deletes, "c4p", $scope.facet.id.c4p_id) ? isValueInList(dataActions.remove, $scope.facet.id.dbid) ? $scope.success() : $scope.failure("Facet newly removed is not found in dataActions") : $scope.failure("Facet newly removed is not found in refreshMap");
                }, function(response) {
                    $scope.failure(response.error ? "refreshMap error " + response.error + " " + response.log : response.redirect ? "refreshMap failure, redirect to " + response.redirect : "refreshMap empty");
                });
            }, function(response) {
                $scope.failure("waiting for all downloads/uploads failed : " + response.error);
            });
        }
    }), $scope.todo.push({
        name: "test C4P Many objects remove",
        fct: function() {
            var dataActions = {
                clear: [],
                remove: [],
                set: [],
                add: []
            }, dataListener = srvData.addListenerOnUpdate(function(callbackId, action, type, id) {
                a4p.InternalLog.log("refreshMap", action + " " + type + " " + id), "clear" == action ? dataActions.clear.push(id) : "remove" == action ? dataActions.remove.push(id) : "set" == action ? dataActions.set.push(id) : "add" == action && dataActions.add.push(id);
            });
            srvData.removeAndSaveObject($scope.report1), srvData.removeAndSaveObject($scope.note1), 
            srvData.removeAndSaveObject($scope.event1), srvData.removeAndSaveObject($scope.task1), 
            srvData.removeAndSaveObject($scope.opportunity1), srvData.removeAndSaveObject($scope.contact1), 
            srvData.removeAndSaveObject($scope.account1), $scope.waitSynchronized().then(function() {
                $scope.refreshMap(dataListener).then(function(refreshMap) {
                    getObjectFromList(refreshMap.deletes, "c4p", $scope.account1.id.c4p_id) ? isValueInList(dataActions.remove, $scope.account1.id.dbid) ? getObjectFromList(refreshMap.deletes, "c4p", $scope.contact1.id.c4p_id) ? isValueInList(dataActions.remove, $scope.contact1.id.dbid) ? getObjectFromList(refreshMap.deletes, "c4p", $scope.opportunity1.id.c4p_id) ? isValueInList(dataActions.remove, $scope.opportunity1.id.dbid) ? getObjectFromList(refreshMap.deletes, "c4p", $scope.event1.id.c4p_id) ? getObjectFromList(refreshMap.deletes, "c4p", $scope.task1.id.c4p_id) ? isValueInList(dataActions.remove, $scope.event1.id.dbid) ? isValueInList(dataActions.remove, $scope.task1.id.dbid) ? getObjectFromList(refreshMap.deletes, "c4p", $scope.note1.id.c4p_id) ? isValueInList(dataActions.remove, $scope.note1.id.dbid) ? getObjectFromList(refreshMap.deletes, "c4p", $scope.report1.id.c4p_id) ? isValueInList(dataActions.remove, $scope.report1.id.dbid) ? $scope.success() : $scope.failure("Report newly removed is not found in dataActions") : $scope.failure("Report newly removed is not found in refreshMap") : $scope.failure("Note newly removed is not found in dataActions") : $scope.failure("Note newly removed is not found in refreshMap") : $scope.failure("Task newly removed is not found in dataActions") : $scope.failure("Event newly removed is not found in dataActions") : $scope.failure("Task newly removed is not found in refreshMap") : $scope.failure("Event newly removed is not found in refreshMap") : $scope.failure("Opportunity newly removed is not found in dataActions") : $scope.failure("Opportunity newly removed is not found in refreshMap") : $scope.failure("Contact newly removed is not found in dataActions") : $scope.failure("Contact newly removed is not found in refreshMap") : $scope.failure("Account newly removed is not found in dataActions") : $scope.failure("Account newly removed is not found in refreshMap");
                }, function(response) {
                    $scope.failure(response.error ? "refreshMap error " + response.error + " " + response.log : response.redirect ? "refreshMap failure, redirect to " + response.redirect : "refreshMap empty");
                });
            }, function(response) {
                $scope.failure("waiting for all downloads/uploads failed : " + response.error);
            });
        }
    }), $scope.todo.push({
        name: "test SF CRM activation",
        fct: function() {
            srvConfig.setPossibleCrms([ "c4p", "ios", "sf" ]), srvConfig.setActiveCrms([ "c4p", "ios", "sf" ]), 
            $scope.downloadFullMap("test SF CRM activation").then(function() {
                $scope.waitSynchronized().then(function() {
                    $scope.success();
                }, function(response) {
                    $scope.failure("waiting for all downloads/uploads failed : " + response.error);
                });
            }, function(message) {
                $scope.failure(message);
            });
        }
    }), $scope.todo.push({
        name: "test SF Many objects creation",
        fct: function() {
            var now = new Date(), dataActions = {
                clear: [],
                remove: [],
                set: [],
                add: []
            }, dataListener = srvData.addListenerOnUpdate(function(callbackId, action, type, id) {
                a4p.InternalLog.log("refreshMap", action + " " + type + " " + id), "clear" == action ? dataActions.clear.push(id) : "remove" == action ? dataActions.remove.push(id) : "set" == action ? dataActions.set.push(id) : "add" == action && dataActions.add.push(id);
            });
            $scope.account1 = srvData.createObject("Account", {
                company_name: "NetworkTestRunner account",
                phone: "(33) 01 47 55 78",
                annual_revenue: 125e3,
                nb_employees: 145,
                industry: "Electronics",
                description: "NetworkTestRunner account description"
            }), srvData.addObject($scope.account1), srvData.addObjectToSave($scope.account1.a4p_type, $scope.account1.id.dbid), 
            $scope.contact1 = srvData.createObject("Contact", {
                salutation: "Mr",
                first_name: "Alain",
                last_name: "Porthus",
                title: "Director",
                email: "aporthus@ntr.com"
            }), srvData.addObject($scope.contact1), srvData.linkToItem("Contact", "accounter", [ $scope.contact1 ], $scope.account1), 
            srvData.addObjectToSave($scope.contact1.a4p_type, $scope.contact1.id.dbid), $scope.opportunity1 = srvData.createObject("Opportunity", {
                name: "Software CRM",
                stage: "Prospecting",
                amount: 5400,
                probability: 75,
                description: "CRM software selling"
            }), srvData.addObject($scope.opportunity1), srvData.linkToItem("Opportunity", "accounter", [ $scope.opportunity1 ], $scope.account1), 
            srvData.addObjectToSave($scope.opportunity1.a4p_type, $scope.opportunity1.id.dbid), 
            $scope.event1 = srvData.createObject("Event", {
                name: "NetworkTestRunner 2 hours event",
                location: "Tours",
                date_start: a4pDateFormat(now),
                date_end: a4pTimestampFormat(now.getTime() + 72e5),
                description: "NetworkTestRunner 2 hours event description"
            }), srvData.addObject($scope.event1), srvData.linkToItem("Event", "leader", [ $scope.event1 ], $scope.contact1), 
            srvData.addObjectToSave($scope.event1.a4p_type, $scope.event1.id.dbid), $scope.task1 = srvData.createObject("Task", {
                name: "NetworkTestRunner task",
                date_start: a4pDateFormat(now),
                is_reminder_set: !0,
                date_reminder: a4pTimestampFormat(now.getTime() - 72e5),
                description: "NetworkTestRunner task description"
            }), srvData.addObject($scope.task1), srvData.linkToItem("Task", "leader", [ $scope.task1 ], $scope.contact1), 
            srvData.addObjectToSave($scope.task1.a4p_type, $scope.task1.id.dbid), $scope.note1 = srvData.createObject("Note", {
                title: "NetworkTestRunner note1",
                message: "Recall after Christmas",
                description: "NetworkTestRunner note1 description"
            }), srvData.addObject($scope.note1), srvData.linkToItem("Note", "parent", [ $scope.note1 ], $scope.event1), 
            srvData.addObjectToSave($scope.note1.a4p_type, $scope.note1.id.dbid), $scope.report1 = srvData.createObject("Report", {
                title: "NetworkTestRunner report1",
                message: "Report of yesterday",
                ratings: {
                    code: "Feeling",
                    name: "Feeling",
                    type: "star",
                    value: 0
                },
                description: "NetworkTestRunner report1 description"
            }), srvData.addObject($scope.report1), srvData.linkToItem("Report", "parent", [ $scope.report1 ], $scope.event1), 
            srvData.addObjectToSave($scope.report1.a4p_type, $scope.report1.id.dbid), $scope.attach1 = !1, 
            srvData.currentItems.Document.length > 0 && ($scope.attach1 = srvData.newAndSaveAttachment("Attachee", srvData.currentItems.Document[0], $scope.event1)), 
            $scope.waitSynchronized().then(function() {
                $scope.waitFor(3e5).then(function() {
                    $scope.refreshMap(dataListener).then(function(refreshMap) {
                        getObjectFromList(refreshMap.updates, "sf", $scope.account1.id.sf_id) ? isValueInList(dataActions.set, $scope.account1.id.dbid) ? getObjectFromList(refreshMap.updates, "sf", $scope.contact1.id.sf_id) ? isValueInList(dataActions.set, $scope.contact1.id.dbid) ? getObjectFromList(refreshMap.updates, "sf", $scope.opportunity1.id.sf_id) ? isValueInList(dataActions.set, $scope.opportunity1.id.dbid) ? getObjectFromList(refreshMap.updates, "sf", $scope.event1.id.sf_id) ? getObjectFromList(refreshMap.updates, "sf", $scope.task1.id.sf_id) ? isValueInList(dataActions.set, $scope.event1.id.dbid) ? isValueInList(dataActions.set, $scope.task1.id.dbid) ? getObjectFromList(refreshMap.updates, "c4p", $scope.note1.id.c4p_id) ? isValueInList(dataActions.set, $scope.note1.id.dbid) ? getObjectFromList(refreshMap.updates, "c4p", $scope.report1.id.c4p_id) ? isValueInList(dataActions.set, $scope.report1.id.dbid) ? getObjectFromList(refreshMap.updates, "sf", $scope.attach1.id.sf_id) ? $scope.success() : $scope.failure("SF Attachee newly created is not found in refreshMap") : $scope.failure("Report newly created is not found in dataActions") : $scope.failure("C4P Report newly created is not found in refreshMap") : $scope.failure("Note newly created is not found in dataActions") : $scope.failure("C4P Note newly created is not found in refreshMap") : $scope.failure("Task newly created is not found in dataActions") : $scope.failure("Event newly created is not found in dataActions") : $scope.failure("SF Task newly created is not found in refreshMap") : $scope.failure("SF Event newly created is not found in refreshMap") : $scope.failure("Opportunity newly created is not found in dataActions") : $scope.failure("SF Opportunity newly created is not found in refreshMap") : $scope.failure("Contact newly created is not found in dataActions") : $scope.failure("SF Contact newly created is not found in refreshMap") : $scope.failure("Account newly created is not found in dataActions") : $scope.failure("SF Account newly created is not found in refreshMap");
                    }, function(response) {
                        $scope.failure(response.error ? "refreshMap error " + response.error + " " + response.log : response.redirect ? "refreshMap failure, redirect to " + response.redirect : "refreshMap empty");
                    });
                }, function() {
                    $scope.failure("waiting for 5 minutes failed");
                });
            }, function(response) {
                $scope.failure("waiting for all downloads/uploads failed : " + response.error);
            });
        }
    }), $scope.todo.push({
        name: "test SF Many objects remove",
        fct: function() {
            var dataActions = {
                clear: [],
                remove: [],
                set: [],
                add: []
            }, dataListener = srvData.addListenerOnUpdate(function(callbackId, action, type, id) {
                a4p.InternalLog.log("refreshMap", action + " " + type + " " + id), "clear" == action ? dataActions.clear.push(id) : "remove" == action ? dataActions.remove.push(id) : "set" == action ? dataActions.set.push(id) : "add" == action && dataActions.add.push(id);
            });
            $scope.attach1 && srvData.removeAndSaveObject($scope.attach1), srvData.removeAndSaveObject($scope.report1), 
            srvData.removeAndSaveObject($scope.note1), srvData.removeAndSaveObject($scope.event1), 
            srvData.removeAndSaveObject($scope.task1), srvData.removeAndSaveObject($scope.opportunity1), 
            srvData.removeAndSaveObject($scope.contact1), srvData.removeAndSaveObject($scope.account1), 
            $scope.waitSynchronized().then(function() {
                $scope.waitFor(3e5).then(function() {
                    $scope.refreshMap(dataListener).then(function(refreshMap) {
                        getObjectFromList(refreshMap.deletes, "sf", $scope.account1.id.sf_id) ? isValueInList(dataActions.remove, $scope.account1.id.dbid) ? getObjectFromList(refreshMap.deletes, "sf", $scope.contact1.id.sf_id) ? isValueInList(dataActions.remove, $scope.contact1.id.dbid) ? getObjectFromList(refreshMap.deletes, "sf", $scope.opportunity1.id.sf_id) ? isValueInList(dataActions.remove, $scope.opportunity1.id.dbid) ? getObjectFromList(refreshMap.deletes, "sf", $scope.event1.id.sf_id) ? getObjectFromList(refreshMap.deletes, "sf", $scope.task1.id.sf_id) ? isValueInList(dataActions.remove, $scope.event1.id.dbid) ? isValueInList(dataActions.remove, $scope.task1.id.dbid) ? getObjectFromList(refreshMap.deletes, "c4p", $scope.note1.id.c4p_id) ? isValueInList(dataActions.remove, $scope.note1.id.dbid) ? getObjectFromList(refreshMap.deletes, "c4p", $scope.report1.id.c4p_id) ? isValueInList(dataActions.remove, $scope.report1.id.dbid) ? $scope.attach1 && !getObjectFromList(refreshMap.deletes, "sf", $scope.attach1.id.sf_id) ? $scope.failure("SF Attachee newly removed is not found in refreshMap") : $scope.success() : $scope.failure("Report newly removed is not found in dataActions") : $scope.failure("C4P Report newly removed is not found in refreshMap") : $scope.failure("Note newly removed is not found in dataActions") : $scope.failure("C4P Note newly removed is not found in refreshMap") : $scope.failure("Task newly removed is not found in dataActions") : $scope.failure("Event newly removed is not found in dataActions") : $scope.failure("SF Task newly removed is not found in refreshMap") : $scope.failure("SF Event newly removed is not found in refreshMap") : $scope.failure("Opportunity newly removed is not found in dataActions") : $scope.failure("SF Opportunity newly removed is not found in refreshMap") : $scope.failure("Contact newly removed is not found in dataActions") : $scope.failure("SF Contact newly removed is not found in refreshMap") : $scope.failure("Account newly removed is not found in dataActions") : $scope.failure("SF Account newly removed is not found in refreshMap");
                    }, function(response) {
                        $scope.failure(response.error ? "refreshMap error " + response.error + " " + response.log : response.redirect ? "refreshMap failure, redirect to " + response.redirect : "refreshMap empty");
                    });
                }, function() {
                    $scope.failure("waiting for 5 minutes failed");
                });
            }, function(response) {
                $scope.failure("waiting for all downloads/uploads failed : " + response.error);
            });
        }
    });
}

function ctrlResponsive($scope, $window, $timeout, srvConfig) {
    $scope.respBaseMagnetWidth = 100, $scope.respBaseToolbarWidth = 80, $scope.respBasePageWidth = 240, 
    $scope.respBasePageHeight = 240, $scope.respIsComputing = !0, $scope.respIsReady = !1, 
    $scope.respMagnetWidth = $scope.respBaseMagnetWidth, $scope.respToolbarWidth = $scope.respBaseToolbarWidth, 
    $scope.respOnePageFormat = !1, $scope.respPageHeight = $scope.respBasePageHeight, 
    $scope.respPageWidth = $scope.respBasePageWidth, $scope.respCentralContainerWidth = $scope.respPageWidth - 2 * $scope.respToolbarWidth, 
    $scope.respAsideWidth = Math.round(.4 * $scope.respCentralContainerWidth), $scope.respMainWidth = $scope.respCentralContainerWidth - $scope.respAsideWidth, 
    $scope.respRelatedWidth = $scope.respAsideWidth, $scope.respDetailWidth = $scope.respCentralContainerWidth - $scope.respAsideWidth, 
    $scope.respPanel1X = -$scope.respAsideWidth, $scope.respPanel2X = $scope.respPanel1X - $scope.respDetailWidth, 
    $scope.respOld_ResizePortrait = 0, $scope.respOld_ResizeHeight = 0, $scope.respOld_ResizeWidth = 0, 
    $scope.responsiveHasChanged = function() {
        var bChange = !1;
        return ($scope.respOld_ResizePortrait != a4p.Resize.resizePortrait || $scope.respOld_ResizeHeight != a4p.Resize.resizeHeight || $scope.respOld_ResizeWidth != a4p.Resize.resizeWidth) && ($scope.respOld_ResizePortrait = a4p.Resize.resizePortrait, 
        $scope.respOld_ResizeHeight = a4p.Resize.resizeHeight, $scope.respOld_ResizeWidth = a4p.Resize.resizeWidth, 
        (0 == $scope.respOld_ResizeHeight || 0 == $scope.respOld_ResizeWidth) && (a4p.InternalLog.log("ctrlResponsive", "PB on init, set with dom values"), 
        $scope.respOld_ResizeWidth = document.body.offsetWidth, $scope.respOld_ResizeHeight = document.body.offsetHeight, 
        $scope.respOld_ResizePortrait = !1, $scope.respOld_ResizeWidth < 500 && ($scope.respOld_ResizePortrait = !0)), 
        bChange = !0), bChange;
    }, $scope.responsiveBeforeWindowSizeChanged = function() {
        $scope.responsiveWindowSizeChanged();
    }, $scope.responsiveWindowSizeChanged = function() {
        if ($scope.responsiveHasChanged()) {
            $scope.respIsComputing = !0, $scope.respIsReady = !1, console.log("responsiveWindowSizeChanged");
            try {
                var fontSizePx = $window.getComputedStyle(document.body, null).getPropertyValue("font-size");
                fontSizePx = fontSizePx.substr(0, fontSizePx.length - 2);
                var fontSizePxHtml = $window.getComputedStyle(document.documentElement, null).getPropertyValue("font-size");
                fontSizePxHtml = fontSizePxHtml.substr(0, fontSizePxHtml.length - 2), "" == srvConfig.getSizeCss() && srvConfig.setSizeCss("75%"), 
                $scope.respToolbarWidth = Math.ceil(2.9 * fontSizePx), $scope.respOnePageFormat = $scope.respOld_ResizePortrait, 
                $scope.respPageHeight = $scope.respOld_ResizeHeight, $scope.respPageWidth = $scope.respOld_ResizeWidth, 
                $scope.respOnePageFormat ? ($scope.respMainWidth = $scope.respPageWidth - $scope.respToolbarWidth, 
                $scope.respCentralContainerWidth = $scope.respMainWidth, $scope.respAsideWidth = $scope.respMainWidth, 
                $scope.respRelatedWidth = $scope.respMainWidth, $scope.respDetailWidth = $scope.respMainWidth, 
                $scope.respMagnetWidth = Math.floor($scope.respCentralContainerWidth / 2)) : ($scope.respCentralContainerWidth = $scope.respPageWidth - 2 * $scope.respToolbarWidth, 
                $scope.respAsideWidth = Math.round(.4 * $scope.respCentralContainerWidth), $scope.respMainWidth = $scope.respCentralContainerWidth - $scope.respAsideWidth, 
                $scope.respRelatedWidth = $scope.respAsideWidth, $scope.respDetailWidth = $scope.respCentralContainerWidth - $scope.respRelatedWidth, 
                $scope.respMagnetWidth = Math.floor($scope.respAsideWidth / 2)), $scope.respPanel1X = -$scope.respAsideWidth, 
                $scope.respPanel2X = $scope.respPanel1X - $scope.respDetailWidth;
            } catch (err) {
                var txt = "There was an error on this page.\n\n";
                txt += "Error description: " + err.message + "\n\n", txt += "Click OK to continue.\n\n", 
                a4p.ErrorLog.log("ctrlResponsive", "responsiveWindowSizeChanged error :" + txt);
            }
            $scope.respIsComputing = !1, console.log("responsiveWindowSizeChanged - end"), $timeout(function() {
                console.log("responsiveWindowSizeChanged - timeout"), $scope.respIsReady = !0, $scope.$broadcast("responsiveWindowSizeChanged");
            }, 300);
        }
    }, $scope.responsiveIsOnePageFormat = function() {
        return $scope.respOnePageFormat;
    }, $scope.responsiveToolbarWidth = function() {
        return $scope.respToolbarWidth;
    }, $scope.responsiveAsideWidth = function() {
        return $scope.respAsideWidth;
    }, $scope.responsiveMainWidth = function() {
        return $scope.respMainWidth;
    }, $scope.responsiveRelatedWidth = function() {
        return $scope.respRelatedWidth;
    }, $scope.responsiveDetailWidth = function() {
        return $scope.respDetailWidth;
    }, $scope.responsiveCentralContainerWidth = function() {
        return $scope.respCentralContainerWidth;
    }, $scope.responsivePanel1X = function() {
        return $scope.respPanel1X;
    }, $scope.responsivePanel2X = function() {
        return $scope.respPanel2X;
    }, $scope.responsiveMagnetWidth = function() {
        return $scope.respMagnetWidth;
    }, $scope.responsivePageHeight = function() {
        return $scope.respPageHeight;
    }, $scope.responsivePageWidth = function() {
        return $scope.respPageWidth;
    }, $scope.responsiveWindowSizeChanged();
}

function ctrlRightToolbar($scope, $timeout) {
    $scope.detailLoadingSpinner = !0, $scope.$on("setItemDetail", function(event, item) {
        a4p.InternalLog.log("ctrlRightToolbar - Broadcast setItemDetail", "" + item.id.dbid), 
        $scope.detailLoadingSpinner = !0, $timeout(function() {
            $scope.detailLoadingSpinner = !1;
        }, 2e3);
    });
}

function ctrlSingleTap($scope) {
    $scope.singleTapFocusId = "", $scope.firstSingleTap = function(focusObject, fnDoubleTap, forceDoubleTap) {
        return focusObject ? forceDoubleTap || $scope.singleTapFocusId == focusObject.id.dbid ? (fnDoubleTap && fnDoubleTap(focusObject, forceDoubleTap), 
        void ($scope.singleTapFocusId = "")) : void ($scope.singleTapFocusId = focusObject.id.dbid) : void ($scope.singleTapFocusId = "");
    };
}

function ctrlSummarizedObject($scope, srvLocale, srvData, srvLink, srvConfig) {
    $scope.srvLocale = srvLocale, $scope.linkedItems = {}, $scope.dataListener = srvData.addListenerOnUpdate(function(callbackId, action, type, id) {
        "clear" == action ? a4p.safeApply($scope, function() {
            $scope.clear();
        }) : "remove" == action ? $scope.item && ($scope.item.id.dbid == id ? a4p.safeApply($scope, function() {
            $scope.clear();
        }) : $scope.linkedItems[id] && a4p.safeApply($scope, function() {
            $scope.init($scope.item);
        })) : "set" == action ? $scope.item && ($scope.item.id.dbid == id || $scope.linkedItems[id]) && a4p.safeApply($scope, function() {
            $scope.init($scope.item);
        }) : "add" == action && $scope.item && a4p.safeApply($scope, function() {
            $scope.init($scope.item);
        });
    }), $scope.$on("$destroy", function() {
        srvData.cancelListener($scope.dataListener);
    }), $scope.set = function(item, modelType) {
        item ? $scope.init(item, modelType) : $scope.clear();
    }, $scope.clear = function() {
        $scope.item = null, $scope.itemIcon = "", $scope.itemName = "", $scope.isFile = !1, 
        $scope.allDayEvent = !1, $scope.manyDayEvent = !1, $scope.groups = [], $scope.linkedItems = {};
    }, $scope.init = function(item, modelType) {
        if ($scope.item = item, $scope.itemIcon = c4p.Model.getItemIcon(item), $scope.itemName = srvConfig.getItemName(item), 
        $scope.isFile = !!c4p.Model.files[item.a4p_type], $scope.linkedItems = {}, $scope.allDayEvent = !1, 
        $scope.manyDayEvent = !1, $scope.item.date_start && $scope.item.date_end) {
            var startDate = srvLocale.formatDate($scope.item.date_start, "shortDate"), endDate = srvLocale.formatDate($scope.item.date_end, "shortDate");
            startDate != endDate ? ($scope.manyDayEvent = !0, $scope.allDayEvent = !0) : $scope.item.duration_hours > 23 && ($scope.allDayEvent = !0);
        }
        $scope.groups = [];
        var objDesc = c4p.Model.a4p_types[$scope.item.a4p_type], editDesc = objDesc.editObjectFields, groups = objDesc[modelType];
        if (a4p.isDefined(editDesc) && a4p.isDefined(groups)) for (var groupIdx = 0, groupNb = groups.length; groupNb > groupIdx; groupIdx++) {
            for (var groupDesc = groups[groupIdx], groupShow = !!groupDesc.icon && groupDesc.icon.length > 0 || !!groupDesc.name || !!groupDesc.synchro, group = {
                key: groupDesc.key,
                synchro: !!groupDesc.synchro,
                icon: groupDesc.icon ? groupDesc.icon : "",
                name: !!groupDesc.name,
                title: groupDesc.title ? srvLocale.translations[groupDesc.title] : "",
                size: groupDesc.size,
                type: groupDesc.type,
                brSeparated: groupDesc.brSeparated,
                fields: []
            }, fieldIdx = 0, fieldNb = groupDesc.fields.length; fieldNb > fieldIdx; fieldIdx++) {
                var fieldDesc = groupDesc.fields[fieldIdx], fieldKey = fieldDesc.key, fieldTitle = "", isLink = objDesc.linkDescs[fieldKey], isArray = a4p.isDefined(c4p.Model.objectArrays[$scope.item.a4p_type][fieldKey]), fieldType = "", fieldValue = $scope.item[fieldKey], value = "";
                if (isLink) {
                    fieldTitle = srvLocale.translations.htmlShortLinkName[objDesc.linkDescs[fieldKey].one], 
                    fieldType = "";
                    var targetItem;
                    if (isArray) {
                        value = [];
                        for (var valueIdx = 0, valueNb = fieldValue.length; valueNb > valueIdx; valueIdx++) targetItem = srvData.getObject(fieldValue[valueIdx].dbid), 
                        targetItem && ($scope.linkedItems[targetItem.id.dbid] = targetItem, value.push(srvConfig.getItemName(targetItem)));
                    } else targetItem = srvData.getObject(fieldValue.dbid), targetItem && ($scope.linkedItems[targetItem.id.dbid] = targetItem, 
                    value = srvConfig.getItemName(targetItem));
                } else if (a4p.isDefined(editDesc[fieldKey])) a4p.isDefined(editDesc[fieldKey]) && editDesc[fieldKey].type && (fieldType = fieldDesc.type ? fieldDesc.type : editDesc[fieldKey].type), 
                a4p.isDefined(editDesc[fieldKey]) && editDesc[fieldKey].title && (fieldTitle = srvLocale.translations[editDesc[fieldKey].title]), 
                "duration" == fieldType ? $scope.allDayEvent ? (fieldType = "datetime", value = fieldValue) : (fieldType = "", 
                value = $scope.item.duration_hours + ":" + a4pPadNumber($scope.item.duration_minutes, 2)) : "samedayTIME" == fieldType ? $scope.manyDayEvent ? (fieldType = "dateTIME", 
                value = fieldValue) : (fieldType = "TIME", value = fieldValue) : value = fieldValue; else if (a4p.isDefined(fieldValue)) value = fieldValue; else {
                    fieldTitle = srvLocale.translations.htmlShortLinkName[fieldKey], fieldType = "", 
                    isArray = !0, value = [], fieldValue = srvData.getRemoteLinks($scope.item, fieldKey);
                    for (var valueIdx = 0, valueNb = fieldValue.length; valueNb > valueIdx; valueIdx++) targetItem = fieldValue[valueIdx], 
                    targetItem && ($scope.linkedItems[targetItem.id.dbid] = targetItem, value.push(srvConfig.getItemName(targetItem)));
                }
                var field = {
                    key: fieldKey,
                    title: fieldDesc.title ? fieldTitle : "",
                    type: fieldType,
                    isArray: isArray,
                    value: value,
                    prefix: fieldDesc.prefix ? srvLocale.translations[fieldDesc.prefix] : "",
                    suffix: fieldDesc.suffix ? srvLocale.translations[fieldDesc.suffix] : "",
                    size: fieldDesc.size
                };
                value && (groupShow = !0, group.fields.push(field));
            }
            groupShow && $scope.groups.push(group);
        }
    };
}

function ctrlTimeline($scope, srvData) {
    $scope.srvData = srvData, $scope.initTimeline = function() {}, $scope.buildTimelineData = function() {
        var dataObject = {};
        if (!$scope.srvNav || !$scope.srvNav.item) return dataObject;
        $scope.setNavTitle($scope.getItemTitle($scope.srvNav.item.a4p_type));
        for (var itemDetailName = $scope.getItemNameById($scope.srvNav.item.id.dbid), itemDetailDescription = $scope.getItemHtmlDescriptionById($scope.srvNav.item.id.dbid), main_headline = itemDetailName, main_descr = itemDetailDescription, main_thumb_url = $scope.srvNav.item.thumb_url, dates = [], eras = [], i = 0; 10 > i; i++) {
            var stardDate = "2011,12,0" + i, endDate = "2011,12,1" + i, date = {
                startDate: stardDate,
                endDate: endDate,
                headline: "Headline Goes Here",
                text: "<p>Body text goes here, some HTML is OK</p>",
                tag: "This is Optional",
                classname: "optionaluniqueclassnamecanbeaddedhere",
                asset: {
                    media: "http://twitter.com/ArjunaSoriano/status/164181156147900416",
                    thumbnail: "optional-32x32px.jpg",
                    credit: "Credit Name Goes Here",
                    caption: "Caption text goes here"
                }
            }, era = {
                startDate: stardDate,
                endDate: endDate,
                headline: "ERA Headline Goes Here",
                text: "<p>ERA Body text goes here, some HTML is OK</p>",
                tag: "This is Optional"
            };
            dates.push(date), eras.push(era);
        }
        var timeline = {
            headline: main_headline,
            type: "default",
            text: main_descr,
            asset: {
                media: main_thumb_url
            },
            date: dates,
            era: eras
        };
        return dataObject = {
            timeline: timeline
        };
    }, $scope.initTimeline();
}

function ctrlTrashObject($scope) {
    $scope.dndActive = !1, $scope.dropOver = !1, $scope.dragObject = null, $scope.dndStart = function(event) {
        event.dataTransfer && a4p.safeApply($scope, function() {
            $scope.dndActive = !0, $scope.dragObject = event.dataTransfer;
        });
    }, $scope.dndEnd = function() {
        $scope.dndActive && a4p.safeApply($scope, function() {
            $scope.dndActive = !1, $scope.dragObject = null;
        });
    }, $scope.dndCancel = function() {
        $scope.dndActive && a4p.safeApply($scope, function() {
            $scope.dndActive = !1, $scope.dragObject = null;
        });
    }, $scope.dropOverEnter = function() {
        $scope.dndActive && !$scope.dropOver && a4p.safeApply($scope, function() {
            $scope.dropOver = !0;
        });
    }, $scope.dropOverLeave = function() {
        $scope.dndActive && $scope.dropOver && a4p.safeApply($scope, function() {
            $scope.dropOver = !1;
        });
    }, $scope.dropEnd = function(event) {
        $scope.removeItemDialog(event.dataTransfer);
    };
}

function ctrlViewer($scope, srvData, srvNav) {
    $scope.sensePanel = null, $scope.documentList = [], $scope.documentIndex = -1, $scope.documentObject = null, 
    $scope.isFullScreen = !1, $scope.handleNavUpdate = srvNav.addListenerOnUpdate(function(callbackId, action) {
        ("goto" == action || "update" == action) && $scope.setDocumentListFromLinkItem(srvNav.itemRelatedList.Document);
    }), $scope.$on("$destroy", function() {
        srvNav.cancelListener($scope.handleNavUpdate);
    }), $scope.setSensePanel = function(sense) {
        $scope.sensePanel = sense;
    }, $scope.setDocumentListFromLinkItem = function(documentList) {
        var oldDocDbid;
        $scope.documentIndex >= 0 && $scope.documentIndex < $scope.documentList.length && (oldDocDbid = $scope.documentList[$scope.documentIndex].id.dbid), 
        $scope.documentList = [], $scope.documentIndex = -1, $scope.documentObject = null;
        for (var i = 0, nb = documentList.length; nb > i; i++) {
            var doc = documentList[i];
            c4p.Model.isImage(doc.item.extension) && ($scope.documentList.push(doc.item), a4p.isDefined(oldDocDbid) && oldDocDbid == doc.item.id.dbid && ($scope.documentIndex = i, 
            $scope.documentObject = doc.item));
        }
        -1 == $scope.documentIndex && $scope.documentList.length > 0 && ($scope.documentIndex = 0, 
        $scope.documentObject = $scope.documentList[0]);
    }, $scope.setDocumentList = function(documentList) {
        $scope.documentList = [], $scope.documentIndex = -1, $scope.documentObject = null;
        for (var i = 0, nb = documentList.length; nb > i; i++) {
            var doc = documentList[i];
            $scope.documentList.push(doc);
        }
        -1 == $scope.documentIndex && $scope.documentList.length > 0 && ($scope.documentIndex = 0, 
        $scope.documentObject = $scope.documentList[0]);
    }, $scope.hideDocuments = function() {
        $scope.documentList = [], $scope.documentIndex = -1, $scope.documentObject = null;
    }, $scope.showDocuments = function() {
        $scope.setDocumentListFromLinkItem(srvNav.itemRelatedList.Document);
    }, $scope.onDocumentSwipe = function(event) {
        "left" == event.side ? a4p.safeApply($scope, function() {
            console.log("swipe left"), $scope.nextDocument();
        }) : "right" == event.side && a4p.safeApply($scope, function() {
            console.log("swipe right"), $scope.prevDocument();
        });
    }, $scope.nextDocument = function() {
        $scope.documentIndex++, $scope.documentIndex >= $scope.documentList.length && ($scope.documentIndex = 0), 
        console.log("Document index: " + $scope.documentIndex), $scope.documentObject = $scope.documentList[$scope.documentIndex], 
        $scope.sensePanel && ($scope.sensePanel.scroll.zoom(0, 0, 1, 300), $scope.sensePanel.sizeRefresh());
    }, $scope.prevDocument = function() {
        $scope.documentIndex--, $scope.documentIndex < 0 && ($scope.documentIndex = $scope.documentList.length - 1), 
        console.log("Document index: " + $scope.documentIndex), $scope.documentObject = $scope.documentList[$scope.documentIndex], 
        $scope.sensePanel && ($scope.sensePanel.scroll.zoom(0, 0, 1, 300), $scope.sensePanel.sizeRefresh());
    }, $scope.isCurrentDocument = function(index) {
        return $scope.documentIndex === index;
    }, $scope.toggleFullScreen = function() {
        $scope.isFullScreen = !$scope.isFullScreen;
    }, $scope.showDocument = function(doc) {
        $scope.documentObject = c4p.Model.isImage(doc.extension) ? doc : doc;
    }, $scope.getViewerWidth = function() {
        return $scope.isFullScreen ? $scope.getResizeWidth() : $scope.responsiveIsOnePageFormat() ? $scope.getAsideWidth() : $scope.getResizeWidth() - $scope.getAsideWidth() - $scope.getToolbarWidth();
    }, $scope.getViewerHeight = function() {
        return $scope.isFullScreen ? $scope.getResizeHeight() : $scope.getResizeHeight() - $scope.getResizePathValue("meeting_header", "", "offsetHeight");
    }, $scope.getDocumentObject = function() {
        return $scope.documentObject;
    };
}

function ctrlAddAccount($scope, srvLocale, accounts, $modalInstance) {
    $scope.srvLocale = srvLocale, $scope.possibleAccounts = accounts, $scope.idxChosen = -1, 
    $scope.add = function() {
        var result = void 0;
        $scope.idxChosen >= 0 && (result = accounts[$scope.idxChosen]), $modalInstance.close(result);
    }, $scope.close = function() {
        $modalInstance.dismiss();
    }, $scope.toggleItem = function(idxChosen) {
        $scope.idxChosen = $scope.idxChosen == idxChosen ? -1 : idxChosen;
    };
}

function ctrlAddContact($scope, srvLocale, contacts, $modalInstance) {
    $scope.srvLocale = srvLocale, $scope.possibleContacts = contacts, $scope.idxChosen = -1, 
    $scope.add = function() {
        var result = void 0;
        $scope.idxChosen >= 0 && (result = contacts[$scope.idxChosen]), $modalInstance.close(result);
    }, $scope.close = function() {
        $modalInstance.dismiss();
    }, $scope.toggleItem = function(idxChosen) {
        $scope.idxChosen = $scope.idxChosen == idxChosen ? -1 : idxChosen;
    };
}

function ctrlAddDialogObject($scope, srvData, srvLocale, srvConfig, item, createLinks, $modalInstance) {
    $scope.srvLocale = null, $scope.item = null, $scope.targetTypes = [], $scope.sameLinks = [], 
    $scope.linkedTargetTypes = [], $scope.createLinks = !1, $scope.init = function(srvLocale, item, createLinks) {
        if ($scope.srvLocale = srvLocale, $scope.item = item, $scope.createLinks = createLinks && 1 == createLinks, 
        $scope.itemName = srvConfig.getItemName(item), $scope.targetTypes = [], $scope.sameLinks = [], 
        $scope.linkedTargetTypes = [], $scope.createLinks || $scope.targetTypes.push(item.a4p_type), 
        null != item && $scope.createLinks) for (var m = 0, len5 = c4p.Model.a4p_types[item.a4p_type].linkFields.length; len5 > m; m++) {
            var linkModel = c4p.Model.a4p_types[item.a4p_type].linkFields[m], sameLink = linkModel.key, sameLinkName = linkModel.one, isArrayField = a4p.isDefined(c4p.Model.objectArrays[item.a4p_type][sameLink]);
            isArrayField || a4p.isDefined(item[sameLink]) && a4p.isDefined(item[sameLink].dbid) && $scope.sameLinks.push({
                type: item.a4p_type,
                name: sameLinkName,
                title: a4pFormat($scope.srvLocale.translations.htmlLinkName[sameLinkName], $scope.itemName)
            });
        }
        if ($scope.createLinks) for (var i = 0, len = c4p.Model.objectTypes.length; len > i; i++) {
            var type = c4p.Model.objectTypes[i];
            if ("Document" != type) for (var j = 0, len2 = c4p.Model.a4p_types[type].linkFields.length; len2 > j; j++) {
                var linkModel = c4p.Model.a4p_types[type].linkFields[j], targetLink = linkModel.key, targetLinkName = linkModel.one;
                if ("owner" != targetLinkName && "creator" != targetLinkName && "modifier" != targetLinkName) {
                    var isArrayField = a4p.isDefined(c4p.Model.objectArrays[type][targetLink]);
                    if (!isArrayField) for (var reverseTargetLinkName = linkModel.many, k = 0, len3 = linkModel.types.length; len3 > k; k++) {
                        var targetType = linkModel.types[k];
                        if (null == item || targetType == item.a4p_type) {
                            for (var typeAdded = !1, links = [], l = 0, len4 = $scope.linkedTargetTypes.length; len4 > l; l++) if ($scope.linkedTargetTypes[l].type == type) {
                                typeAdded = !0, links = $scope.linkedTargetTypes[l].links;
                                break;
                            }
                            links.push({
                                name: targetLinkName,
                                title: a4pFormat($scope.srvLocale.translations.htmlLinkName[reverseTargetLinkName], $scope.itemName)
                            }), typeAdded || $scope.linkedTargetTypes.push({
                                type: type,
                                links: links
                            });
                        }
                    }
                }
            }
        }
    }, $scope.close = function(type, sameLinks, linkName) {
        $modalInstance.close({
            type: type,
            sameLinks: sameLinks,
            linkedBy: linkName
        });
    }, $scope.getItemNameById = function(dbid) {
        var item = srvData.getObject(dbid);
        return item ? srvConfig.getItemName(item) : "";
    }, $scope.init(srvLocale, item, createLinks);
}

function ctrlAddRatings($scope, srvLocale, ratings, $modalInstance) {
    $scope.ratingsChosen = ratings, $scope.initAddRatings = function() {
        $scope.ratingsDone = ratings.slice(0), $scope.srvLocale = srvLocale, $scope.possibleRatings = [ {
            code: "Feeling",
            name: $scope.srvLocale.translations.htmlTextRatingsFeeling,
            type: "star",
            selected: !1,
            value: 0
        }, {
            code: "Quality",
            name: $scope.srvLocale.translations.htmlTextRatingsQuality,
            type: "star",
            selected: !1,
            value: 0
        }, {
            code: "Environment",
            name: $scope.srvLocale.translations.htmlTextRatingsEnvironment,
            type: "star",
            selected: !1,
            value: 0
        }, {
            code: "Achievement",
            name: $scope.srvLocale.translations.htmlTextRatingsObjectiveAchieved,
            type: "check",
            selected: !1,
            value: 0
        }, {
            code: "Meeting",
            name: $scope.srvLocale.translations.htmlTextRatingsMeetingDone,
            type: "check",
            selected: !1,
            value: 0
        } ];
    }, $scope.close = function() {
        $modalInstance.dismiss();
    }, $scope.add = function() {
        $modalInstance.close($scope.ratingsChosen);
    }, $scope.toggleItem = function(rating) {
        if (rating) if (rating.selected) {
            rating.selected = !1;
            for (var index = -1, i = 0; i < $scope.ratingsChosen.length && 0 > index; i++) $scope.ratingsChosen[i].name == rating.name && (index = i);
            $scope.ratingsChosen.splice(index, 1);
        } else {
            rating.selected = !0;
            var rate = angular.copy(rating);
            $scope.ratingsChosen.push(rate);
        }
    }, $scope.initAddRatings();
}

function ctrlDialogCalendarDay($scope, calendarDayCasualName, calendarDayFullName, calendarSelectedDay, srvLocale, $modalInstance) {
    $scope.srvLocale = null, $scope.calendarDayCasualName = "none", $scope.calendarDayFullName = "none", 
    $scope.calendarSelectedDay = {
        events: []
    }, $scope.constructor = function(calendarDayCasualName, calendarDayFullName, calendarSelectedDay, srvLocale) {
        $scope.srvLocale = srvLocale, $scope.calendarDayCasualName = calendarDayCasualName || "...", 
        $scope.calendarDayFullName = calendarDayFullName || "...", $scope.calendarSelectedDay = calendarSelectedDay || {
            events: []
        };
    }, $scope.close = function() {
        $modalInstance.dismiss();
    }, $scope.selectItem = function(item) {
        $modalInstance.close(item);
    }, $scope.constructor(calendarDayCasualName, calendarDayFullName, calendarSelectedDay, srvLocale);
}

function ctrlDialogConfirm($scope, text, textArray, srvLocale, $modalInstance) {
    $scope.srvLocale = null, $scope.text = null, $scope.textArray = null, $scope.init = function(text, textArray, srvLocale) {
        a4p.InternalLog.log("ctrlDialogConfirm", text), $scope.srvLocale = srvLocale, $scope.text = text, 
        $scope.textArray = textArray;
    }, $scope.submit = function() {
        console.log("ctrlDialogConfirm : submit"), $modalInstance.close(!0);
    }, $scope.close = function() {
        console.log("ctrlDialogConfirm : close"), $modalInstance.dismiss(!1);
    }, $scope.init(text, textArray, srvLocale);
}

function ctrlDialogDemoMode($scope, textFunc, srvLocale, $modalInstance) {
    $scope.srvLocale = null, $scope.textFunc = null, $scope.textDemo = null, $scope.init = function(textFunc, srvLocale) {
        $scope.srvLocale = srvLocale, $scope.textFunc = textFunc, $scope.textDemo = $scope.srvLocale.translations.htmlTextDemoModeImpossible;
    }, $scope.login = function() {
        $modalInstance.close("login");
    }, $scope.register = function() {
        $modalInstance.close("register");
    }, $scope.close = function() {
        $modalInstance.dismiss(!1);
    }, $scope.init(textFunc, srvLocale);
}

function ctrlDialogICal($scope, srvLocale, srvData, srvConfig, srvFacet, ical, attendees, $modal, dialog) {
    function isEmail(email) {
        return /^([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22))*\x40([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d))*$/.test(email);
    }
    $scope.emailInput = "", $scope.errorMap = {}, $scope.initDialogICalCtrl = function() {
        $scope.srvLocale = srvLocale, $scope.srvData = srvData, $scope.emails = [], $scope.contacts = [], 
        $scope.ical = ical;
    }, $scope.addEmailToList = function(value) {
        for (var emailAddrList = value.split(";"), i = 0, n = emailAddrList.length; n > i; i++) {
            var emailAddr = emailAddrList[i].trim();
            "" != emailAddr && (addKeyToList($scope.ical.emailsInput, "email", {
                email: emailAddr
            }), addKeyToList($scope.emails, "email", {
                email: emailAddr
            }));
        }
        $scope.emailInput = "";
    }, $scope.openDialogContacts = function() {
        var menus = [], addedOrganizers = [];
        menus.push({
            icon: "chevron-right",
            name: "eventAttendees",
            filterFct: function(object) {
                if (a4p.isDefinedAndNotNull(object)) for (var i = 0; i < attendees.length; i++) if (attendees[i].relation_id.dbid == object.id.dbid) return !0;
                return !1;
            }
        }), addedOrganizers.push(srvFacet.createEventAttendeesOrganizer(attendees));
        var dialogOptions = {
            backdrop: !1,
            windowClass: "modal c4p-modal-left c4p-modal-search c4p-dialog"
        }, resolve = {
            srvData: function() {
                return srvData;
            },
            srvConfig: function() {
                return srvConfig;
            },
            srvLocale: function() {
                return srvLocale;
            },
            type: function() {
                return "Contact";
            },
            initFilter: function() {
                return function(object) {
                    for (var i = 0; i < $scope.contacts.length; i++) if ($scope.contacts[i].dbid == object.id.dbid) return !1;
                    return !0;
                };
            },
            initSelector: function() {
                return function() {
                    return !1;
                };
            },
            multiple: function() {
                return !0;
            },
            createFct: function() {
                return null;
            }
        };
        srvConfig.c4pConfig.exposeFacetDialog ? (dialogOptions.controller = "ctrlFacetSelectedDialog", 
        dialogOptions.templateUrl = "partials/dialog/dialogFacetSelected.html", resolve.srvFacet = function() {
            return srvFacet;
        }, resolve.addedOrganizers = function() {
            return addedOrganizers;
        }) : (dialogOptions.controller = "ctrlSelectObjectsDialog", dialogOptions.templateUrl = "partials/dialog/dialogSelectObjects.html", 
        resolve.suggestedMenus = function() {
            return menus;
        }), dialogOptions.resolve = resolve, openDialog(dialogOptions, function(result) {
            a4p.isDefined(result) && a4p.safeApply($scope, function() {
                for (var i = 0; i < result.length; i++) $scope.ical.contacts.push(result[i].id), 
                $scope.contacts.push(result[i]);
            });
        });
    }, $scope.closeAlert = function(index, type) {
        "contact" == type ? ($scope.ical.contacts.splice(index, 1), $scope.contacts.splice(index, 1)) : "email" == type && ($scope.ical.emailsInput.splice(index, 1), 
        $scope.emails.splice(index, 1));
    }, $scope.close = function() {
        dialog.close(void 0);
    }, $scope.sendICal = function() {
        $scope.validateICal(), a4p.isTrueOrNonEmpty($scope.errorMap) || dialog.close($scope.ical);
    }, $scope.setModeEdit = function(modeEdit) {
        $scope.modeEdit = modeEdit;
    }, $scope.validateICal = function() {
        $scope.errorMap = {};
        var emailErrors = [];
        $scope.emails.length < 1 && $scope.ical.contacts.length < 1 && emailErrors.push(srvLocale.translations.htmlRequireOneEmail);
        for (var i = 0, nbContact = $scope.ical.contacts.length; nbContact > i; i++) {
            var contact = srvData.getObject($scope.ical.contacts[i].dbid);
            if (a4p.isEmptyOrFalse(contact.email)) {
                var fullName = contact.first_name + " " + contact.last_name;
                emailErrors.push(a4pFormat(srvLocale.translations.htmlNoEmailAddr, fullName));
            }
        }
        for (var j = 0, nbEmail = $scope.emails.length; nbEmail > j; j++) isEmail($scope.emails[j].email) || emailErrors.push(a4pFormat(srvLocale.translations.htmlInvalidEmail, $scope.emails[j].email));
        emailErrors.length > 0 && ($scope.errorMap.email = emailErrors);
    }, $scope.initDialogICalCtrl();
}

function ctrlDupMeeting($scope, srvLocale, srvData, mEvent, mEventSrc, dialog) {
    function calculateFields(scope, changedField) {
        if (a4p.isDefined(c4p.Model.a4p_types[scope.event.a4p_type].editObjectFields)) {
            var editObjectFields = c4p.Model.a4p_types[scope.event.a4p_type].editObjectFields;
            if (a4p.isDefined(editObjectFields[changedField.key])) {
                var editObjectField = editObjectFields[changedField.key];
                if (a4p.isDefined(editObjectField.calculations)) for (var calculationIdx = 0; calculationIdx < editObjectField.calculations.length; calculationIdx++) {
                    for (var calculation = editObjectField.calculations[calculationIdx], values = [], j = 0, len2 = calculation.fromFields.length; len2 > j; j++) values.push(scope.event[calculation.fromFields[j]]);
                    scope.event[calculation.toField] = c4p.Model[calculation.getter].apply(c4p.Model, values), 
                    a4p.InternalLog.log("ctrlDupMeeting", "onFieldChanged : calculate " + calculation.toField + "=" + scope.event[calculation.toField]);
                }
            }
        }
    }
    function isObjectValidatedByOtherFields(scope, skippedFieldName) {
        for (var objectGroupIdx = 0; objectGroupIdx < scope.objectGroups.length; objectGroupIdx++) for (var objectGroup = scope.objectGroups[objectGroupIdx], objectFieldIdx = 0; objectFieldIdx < objectGroup.groupFields.length; objectFieldIdx++) {
            var objectField = objectGroup.groupFields[objectFieldIdx];
            if (objectField.key != skippedFieldName && "" != objectField.warn) return !1;
        }
        return !0;
    }
    function warningForThisField(scope, thisFieldName) {
        if (a4p.isDefined(c4p.Model.a4p_types[scope.event.a4p_type].editObjectFields)) {
            var editObjectFields = c4p.Model.a4p_types[scope.event.a4p_type].editObjectFields;
            if (a4p.isDefined(editObjectFields[thisFieldName])) {
                var editObjectField = editObjectFields[thisFieldName];
                if (a4p.isDefined(editObjectField.validations)) for (var validationIdx = 0; validationIdx < editObjectField.validations.length; validationIdx++) {
                    var validation = editObjectField.validations[validationIdx], valid = c4p.Model.validateObject.apply(c4p.Model, [ scope.event, validation.expr ]);
                    if (!valid) return c4p.Model.getErrorMsg.apply(c4p.Model, [ scope, validation.errorKey ]);
                }
            }
        }
        return null;
    }
    $scope.srvLocale = srvLocale, $scope.event = mEvent, $scope.hasWhat = a4p.isDefined(mEventSrc.what_id.dbid), 
    $scope.hasAssignedContact = a4p.isDefined(mEventSrc.assigned_contact_id.dbid), $scope.nbAttachment = srvData.getTypedDirectLinks(mEventSrc, "child", "Document").length + srvData.getTypedRemoteLinks(mEventSrc, "attachee", "Document").length, 
    $scope.nbAttendee = srvData.getTypedRemoteLinks(mEventSrc, "attendee", "Contact").length, 
    $scope.dupWhat = !1, $scope.dupAssignedContact = !1, $scope.dupAttachment = !1, 
    $scope.dupAttendee = !1, $scope.valid = function() {
        "" == $scope.nameField.warn && "" == $scope.startField.warn && "" == $scope.endField.warn && dialog.close({
            dupWhat: $scope.dupWhat,
            dupAssignedContact: $scope.dupAssignedContact,
            dupAttachment: $scope.dupAttachment,
            dupAttendee: $scope.dupAttendee
        });
    }, $scope.cancel = function() {
        dialog.close();
    }, $scope.nameField = {
        title: srvLocale.translations.htmlFormName,
        key: "name",
        warn: "",
        type: ""
    }, $scope.startField = {
        title: srvLocale.translations.htmlFormDateStart,
        key: "date_start",
        warn: "",
        type: "datetime"
    }, $scope.endField = {
        title: srvLocale.translations.htmlFormDateEnd,
        key: "date_end",
        warn: "",
        type: "datetime"
    }, $scope.objectGroups = [ {
        title: "Dates",
        warn: "",
        groupFields: [ $scope.startField, $scope.endField ]
    } ], $scope.onFieldChanged = function(field) {
        var validationHasChanged = !1;
        if (calculateFields($scope, field), a4p.isDefined(c4p.Model.a4p_types[$scope.event.a4p_type].editObjectFields)) {
            var editObjectFields = c4p.Model.a4p_types[$scope.event.a4p_type].editObjectFields;
            if (a4p.isDefined(editObjectFields[field.key])) {
                var editObjectField = editObjectFields[field.key];
                if (a4p.isDefined(editObjectField.validations)) {
                    $scope.objectValidated = isObjectValidatedByOtherFields($scope, field.key);
                    var message = warningForThisField($scope, field.key);
                    null != message ? (field.warn != message && (validationHasChanged = !0), field.warn = message, 
                    $scope.objectValidated = !1) : ("" != field.warn && (validationHasChanged = !0), 
                    field.warn = "");
                }
            }
        }
        if (validationHasChanged) {
            for (var objectGroupIdx = 0; objectGroupIdx < $scope.objectGroups.length; objectGroupIdx++) {
                for (var objectGroup = $scope.objectGroups[objectGroupIdx], groupWarn = "", objectFieldIdx = 0; objectFieldIdx < objectGroup.groupFields.length; objectFieldIdx++) {
                    var objectField = objectGroup.groupFields[objectFieldIdx];
                    "" != objectField.warn && 0 == groupWarn.length && (groupWarn = objectField.warn);
                }
                objectGroup.warn = groupWarn;
            }
            $scope.setLastChange();
        }
    }, $scope.setLastChange = function() {
        $scope.objectLastChange = new Date();
    };
}

function ctrlEditDialogEmail($scope, srvLocale, srvData, srvConfig, srvFacet, title, attendees, attachments, email, emailId, editable, modeEdit, openDialogFct, $modal, dialog) {
    function isEmail(email) {
        return /^([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22))*\x40([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d))*$/.test(email);
    }
    $scope.title = title || $scope.srvLocale.translations.htmlTitleDialogEmail, $scope.mailLastUpdate = 0, 
    $scope.modeEdit = modeEdit, $scope.editable = editable, $scope.emailInput = "", 
    $scope.errorMap = {}, $scope.openDialogFct = openDialogFct, $scope.initEditDialogEmailCtrl = function() {
        $scope.srvLocale = srvLocale, $scope.srvData = srvData, $scope.emails = [], $scope.contacts = [], 
        $scope.documents = [], $scope.email = email;
        for (var i = 0; i < $scope.email.emailsInput.length; i++) $scope.emails.push($scope.email.emailsInput[i]);
        for (var i = 0; i < $scope.email.contacts.length; i++) {
            var contact = $scope.srvData.getObject($scope.email.contacts[i].dbid);
            $scope.contacts.push(contact);
        }
        for (var i = 0; i < $scope.email.documents.length; i++) {
            var document = $scope.srvData.getObject($scope.email.documents[i].dbid);
            $scope.documents.push(document);
        }
        $scope.$watch("emails.length", function() {
            $scope.setLastUpdate();
        }), $scope.$watch("contacts.length", function() {
            $scope.setLastUpdate();
        }), $scope.$watch("documents.length", function() {
            $scope.setLastUpdate();
        }), $scope.$watch("email.body", function() {
            $scope.setLastUpdate();
        });
    }, $scope.getTypeColor = function() {
        return c4p.Model.getTypeColor("Document");
    }, $scope.setLastUpdate = function() {
        $scope.mailLastUpdate = new Date();
    }, $scope.addEmailToList = function(value) {
        for (var emailAddrList = value.split(";"), i = 0, n = emailAddrList.length; n > i; i++) {
            var emailAddr = emailAddrList[i].trim();
            "" != emailAddr && (addKeyToList($scope.email.emailsInput, "email", {
                email: emailAddr
            }), addKeyToList($scope.emails, "email", {
                email: emailAddr
            }));
        }
        $scope.emailInput = "";
    }, $scope.openDialogContacts = function() {
        var menus = [], addedOrganizers = [];
        menus.push({
            icon: "chevron-right",
            name: "eventAttendees",
            filterFct: function(object) {
                if (a4p.isDefinedAndNotNull(object)) for (var i = 0; i < attendees.length; i++) if (attendees[i].relation_id.dbid == object.id.dbid) return !0;
                return !1;
            }
        }), addedOrganizers.push(srvFacet.createEventAttendeesOrganizer(attendees));
        var dialogOptions = {
            backdrop: !1,
            windowClass: "modal c4p-modal-left c4p-modal-search c4p-dialog"
        }, resolve = {
            srvData: function() {
                return srvData;
            },
            srvConfig: function() {
                return srvConfig;
            },
            srvLocale: function() {
                return srvLocale;
            },
            type: function() {
                return "Contact";
            },
            initFilter: function() {
                return function(object) {
                    for (var i = 0; i < $scope.email.contacts.length; i++) if ($scope.email.contacts[i].dbid == object.id.dbid) return !1;
                    return !0;
                };
            },
            initSelector: function() {
                return function() {
                    return !1;
                };
            },
            multiple: function() {
                return !0;
            },
            createFct: function() {
                return null;
            }
        };
        srvConfig.c4pConfig.exposeFacetDialog ? (dialogOptions.controller = "ctrlFacetSelectedDialog", 
        dialogOptions.templateUrl = "partials/dialog/dialogFacetSelected.html", resolve.srvFacet = function() {
            return srvFacet;
        }, resolve.addedOrganizers = function() {
            return addedOrganizers;
        }) : (dialogOptions.controller = "ctrlSelectObjectsDialog", dialogOptions.templateUrl = "partials/dialog/dialogSelectObjects.html", 
        resolve.suggestedMenus = function() {
            return menus;
        }), dialogOptions.resolve = resolve, $scope.openDialogFct(dialogOptions, function(result) {
            a4p.isDefined(result) && a4p.safeApply($scope, function() {
                for (var i = 0; i < result.length; i++) $scope.email.contacts.push(result[i].id), 
                $scope.contacts.push(result[i]);
            });
        });
    }, $scope.openDialogAttachments = function() {
        var menus = [], addedDocuments = [];
        menus.push({
            icon: "chevron-right",
            name: "eventAttachments",
            filterFct: function(object) {
                for (var i = 0; i < attachments.length; i++) if (attachments[i].id.dbid == object.id.dbid) return !0;
                return !1;
            }
        }), addedDocuments.push(srvFacet.createEventAttachmentsOrganizer(attachments));
        var dialogOptions = {
            backdrop: !1,
            windowClass: "modal c4p-modal-left c4p-modal-search c4p-dialog"
        }, resolve = {
            srvData: function() {
                return srvData;
            },
            srvConfig: function() {
                return srvConfig;
            },
            srvLocale: function() {
                return srvLocale;
            },
            type: function() {
                return "Document";
            },
            initFilter: function() {
                return function(object) {
                    if (emailId && emailId.dbid == object.id.dbid) return !1;
                    for (var i = 0; i < $scope.email.documents.length; i++) if ($scope.email.documents[i].dbid == object.id.dbid) return !1;
                    return !0;
                };
            },
            initSelector: function() {
                return function() {
                    return !1;
                };
            },
            multiple: function() {
                return !0;
            },
            createFct: function() {
                return null;
            }
        };
        srvConfig.c4pConfig.exposeFacetDialog ? (dialogOptions.controller = "ctrlFacetSelectedDialog", 
        dialogOptions.templateUrl = "partials/dialog/dialogFacetSelected.html", resolve.srvFacet = function() {
            return srvFacet;
        }, resolve.addedDocuments = function() {
            return [];
        }) : (dialogOptions.controller = "ctrlSelectObjectsDialog", dialogOptions.templateUrl = "partials/dialog/dialogSelectObjects.html", 
        resolve.suggestedMenus = function() {
            return [];
        }), dialogOptions.resolve = resolve, openDialog(dialogOptions, function(result) {
            a4p.isDefined(result) && a4p.safeApply($scope, function() {
                for (var i = 0; i < result.length; i++) $scope.email.documents.push(result[i].id), 
                $scope.documents.push(result[i]);
            });
        });
    }, $scope.closeAlert = function(index, type) {
        "contact" == type ? ($scope.email.contacts.splice(index, 1), $scope.contacts.splice(index, 1)) : "email" == type ? ($scope.email.emailsInput.splice(index, 1), 
        $scope.emails.splice(index, 1)) : ($scope.email.documents.splice(index, 1), $scope.documents.splice(index, 1));
    }, $scope.close = function() {
        dialog.close(void 0);
    }, $scope.setSubject = function(subject) {
        $scope.email.subject = subject;
    }, $scope.setBody = function(body) {
        $scope.email.body = body;
    }, $scope.createEmail = function() {
        $scope.validateEmail(), a4p.isTrueOrNonEmpty($scope.errorMap) || ($scope.email.editable = !0, 
        dialog.close($scope.email));
    }, $scope.setModeEdit = function(modeEdit) {
        $scope.modeEdit = modeEdit;
    }, $scope.validateEmail = function() {
        $scope.errorMap = {};
        var emailErrors = [];
        $scope.emails.length < 1 && $scope.email.contacts.length < 1 && emailErrors.push(srvLocale.translations.htmlRequireOneEmail);
        for (var i = 0, nbContact = $scope.email.contacts.length; nbContact > i; i++) {
            var contact = srvData.getObject($scope.email.contacts[i].dbid);
            if (a4p.isEmptyOrFalse(contact.email)) {
                var fullName = contact.first_name + " " + contact.last_name;
                emailErrors.push(a4pFormat(srvLocale.translations.htmlNoEmailAddr, fullName));
            }
        }
        for (var j = 0, nbEmail = $scope.emails.length; nbEmail > j; j++) isEmail($scope.emails[j].email) || emailErrors.push(a4pFormat(srvLocale.translations.htmlInvalidEmail, $scope.emails[j].email));
        emailErrors.length > 0 && ($scope.errorMap.email = emailErrors), "" == $scope.email.subject.trim() && ($scope.errorMap.subject = srvLocale.translations.htmlRequiredSubject), 
        "" == $scope.email.body.trim() && ($scope.errorMap.message = srvLocale.translations.htmlRequiredMessage);
    }, $scope.openDialogPasteNote = function() {
        var menus = [], toPasteDoc = [];
        menus.push({
            icon: "chevron-right",
            name: "eventAttachments",
            filterFct: function(object) {
                for (var i = 0; i < attachments.length; i++) if (attachments[i].id.dbid == object.id.dbid) return !0;
                return !1;
            }
        }), toPasteDoc.push(srvFacet.createEventAttachmentsOrganizer(attachments));
        var dialogOptions = {
            backdrop: !1,
            windowClass: "modal c4p-modal-left c4p-modal-search c4p-dialog"
        }, resolve = {
            srvData: function() {
                return srvData;
            },
            srvConfig: function() {
                return srvConfig;
            },
            srvLocale: function() {
                return srvLocale;
            },
            type: function() {
                return "Note";
            },
            initFilter: function() {
                return function(object) {
                    if (emailId && emailId.dbid == object.id.dbid) return !1;
                    for (var i = 0; i < $scope.email.documents.length; i++) if ($scope.email.documents[i].dbid == object.id.dbid) return !1;
                    return !0;
                };
            },
            initSelector: function() {
                return function() {
                    return !1;
                };
            },
            multiple: function() {
                return !0;
            },
            createFct: function() {
                return null;
            }
        };
        srvConfig.c4pConfig.exposeFacetDialog ? (dialogOptions.controller = "ctrlFacetSelectedDialog", 
        dialogOptions.templateUrl = "partials/dialog/dialogFacetSelected.html", resolve.srvFacet = function() {
            return srvFacet;
        }, resolve.toPasteDoc = function() {
            return [];
        }) : (dialogOptions.controller = "ctrlSelectObjectsDialog", dialogOptions.templateUrl = "partials/dialog/dialogSelectObjects.html", 
        resolve.suggestedMenus = function() {
            return [];
        }), dialogOptions.resolve = resolve, $scope.openDialogFct(dialogOptions, function(result) {
            a4p.isDefined(result) && a4p.safeApply($scope, function() {
                for (var i = 0; i < result.length; i++) $scope.email.body = $scope.email.body + "\n" + result[i].title + "\n" + result[i].description;
            });
        });
    }, $scope.openDialogPasteReport = function() {
        var menus = [], toPasteDoc = [];
        menus.push({
            icon: "chevron-right",
            name: "eventAttachments",
            filterFct: function(object) {
                for (var i = 0; i < attachments.length; i++) if (attachments[i].id.dbid == object.id.dbid) return !0;
                return !1;
            }
        }), toPasteDoc.push(srvFacet.createEventAttachmentsOrganizer(attachments));
        var dialogOptions = {
            backdrop: !1,
            windowClass: "modal c4p-modal-left c4p-modal-search c4p-dialog"
        }, resolve = {
            srvData: function() {
                return srvData;
            },
            srvConfig: function() {
                return srvConfig;
            },
            srvLocale: function() {
                return srvLocale;
            },
            type: function() {
                return "Report";
            },
            initFilter: function() {
                return function(object) {
                    if (emailId && emailId.dbid == object.id.dbid) return !1;
                    for (var i = 0; i < $scope.email.documents.length; i++) if ($scope.email.documents[i].dbid == object.id.dbid) return !1;
                    return !0;
                };
            },
            initSelector: function() {
                return function() {
                    return !1;
                };
            },
            multiple: function() {
                return !0;
            },
            createFct: function() {
                return null;
            }
        };
        srvConfig.c4pConfig.exposeFacetDialog ? (dialogOptions.controller = "ctrlFacetSelectedDialog", 
        dialogOptions.templateUrl = "partials/dialog/dialogFacetSelected.html", resolve.srvFacet = function() {
            return srvFacet;
        }, resolve.toPasteDoc = function() {
            return [];
        }) : (dialogOptions.controller = "ctrlSelectObjectsDialog", dialogOptions.templateUrl = "partials/dialog/dialogSelectObjects.html", 
        resolve.suggestedMenus = function() {
            return [];
        }), dialogOptions.resolve = resolve, $scope.openDialogFct(dialogOptions, function(result) {
            a4p.isDefined(result) && a4p.safeApply($scope, function() {
                for (var i = 0; i < result.length; i++) $scope.email.body = $scope.email.body + "\n" + result[i].title + "\n" + result[i].description + "\n" + result[i].message;
            });
        });
    }, $scope.initEditDialogEmailCtrl();
}

function ctrlEditDialogErrorReport($scope, srvLocale, $modalInstance) {
    $scope.srvLocale = srvLocale, $scope.feedbackLastUpdate = 0, $scope.feedback = {
        message: ""
    }, $scope.submit = function() {
        $modalInstance.close({
            feedback: $scope.feedback
        });
    }, $scope.close = function() {
        $modalInstance.dismiss(void 0);
    };
}

function ctrlEditDialogFeed($scope, srvLocale, srvData, title, feed, editable, modeEdit, $modalInstance) {
    $scope.title = title || $scope.srvLocale.translations.htmlTitleDialogFeed, $scope.feedLastUpdate = 0, 
    $scope.modeEdit = modeEdit, $scope.editable = editable, $scope.srvLocale = srvLocale, 
    $scope.srvData = srvData, $scope.feed = feed, $scope.feedObject = $scope.srvData.getObject(feed.id.dbid), 
    $scope.$watch("feed.body", function() {
        $scope.setLastUpdate();
    }), $scope.getTypeColor = function() {
        return c4p.Model.getTypeColor("Document");
    }, $scope.setLastUpdate = function() {
        $scope.feedLastUpdate = new Date();
    }, $scope.close = function() {
        $modalInstance.dismiss(void 0);
    }, $scope.setSubject = function(subject) {
        $scope.feed.title = subject;
    }, $scope.setBody = function(body) {
        $scope.feed.body = body;
    }, $scope.createFeed = function() {
        $scope.feed.editable = !0, $modalInstance.close($scope.feed);
    }, $scope.setModeEdit = function(modeEdit) {
        $scope.modeEdit = modeEdit;
    };
}

function ctrlEditDialogFeedback($scope, srvLocale, title, message, onlyFeedback, emailRequired, $modalInstance) {
    $scope.srvLocale = srvLocale, $scope.onlyFeedback = 1 == onlyFeedback, $scope.feedback = {
        message: message,
        emailRequired: emailRequired,
        email: "",
        phone: "",
        title: title || srvLocale.translations.htmlTitleFeedback
    }, $scope.submit = function() {
        (!$scope.feedback.emailRequired || $scope.feedback.email) && $modalInstance.close({
            feedback: $scope.feedback
        });
    }, $scope.close = function() {
        $modalInstance.dismiss("cancel");
    };
}

function ctrlEditDialogNote($scope, srvLocale, srvConfig, srvData, srvFacet, attendees, attachments, noteParentObject, note, editable, modeEdit, spinner, openDialogFct, $modalInstance) {
    function initFields() {
        $scope.objectValidated = !0, $scope.objectGroups = [];
        var groups, objDesc = c4p.Model.a4p_types[note.a4p_type];
        if (a4p.isDefined(objDesc.editObjectGroups)) groups = objDesc.editObjectGroups; else {
            for (var fields = [], i = 0; i < objDesc.fields.length; i++) {
                var key = objDesc.fields[i];
                a4p.isDefined(objDesc.editObjectFields) && a4p.isDefined(objDesc.editObjectFields[key]) && fields.push(key);
            }
            groups = [ {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: fields
            } ];
        }
        for (var groupIdx = 0; groupIdx < groups.length; groupIdx++) {
            for (var groupDesc = groups[groupIdx], groupSet = [], fieldIdx = 0; fieldIdx < groupDesc.fields.length; fieldIdx++) {
                var key = groupDesc.fields[fieldIdx];
                if (a4p.isDefined(c4p.Model.a4p_types[note.a4p_type].editObjectFields) && a4p.isDefined(c4p.Model.a4p_types[note.a4p_type].editObjectFields[key])) {
                    var editObjectField = c4p.Model.a4p_types[note.a4p_type].editObjectFields[key], warn = "";
                    if (a4p.isDefined(editObjectField.validations)) {
                        var message = warningForThisField(key);
                        null != message && (warn = message, $scope.objectValidated = !1);
                    }
                    groupSet.push(a4p.isDefined($scope.srvLocale.translations[editObjectField.title]) ? {
                        title: $scope.srvLocale.translations[editObjectField.title],
                        type: editObjectField.type,
                        warn: warn,
                        key: key
                    } : {
                        title: key,
                        type: editObjectField.type,
                        warn: warn,
                        key: key
                    });
                }
            }
            var group = {
                title: $scope.srvLocale.translations[groupDesc.title],
                groupFields: groupSet
            };
            0 == groupIdx && $scope.toggleObjectGroupFilter(group), $scope.objectGroups.push(group);
        }
    }
    function isObjectValidatedByOtherFields(scope, skippedFieldName) {
        for (var objectGroupIdx = 0; objectGroupIdx < scope.objectGroups.length; objectGroupIdx++) for (var objectGroup = scope.objectGroups[objectGroupIdx], objectFieldIdx = 0; objectFieldIdx < objectGroup.groupFields.length; objectFieldIdx++) {
            var objectField = objectGroup.groupFields[objectFieldIdx];
            if (objectField.key != skippedFieldName && "" != objectField.warn) return !1;
        }
        return !0;
    }
    function warningForThisField(thisFieldName) {
        if (a4p.isDefined(c4p.Model.a4p_types[note.a4p_type].editObjectFields)) {
            var editObjectFields = c4p.Model.a4p_types[note.a4p_type].editObjectFields;
            if (a4p.isDefined(editObjectFields[thisFieldName])) {
                var editObjectField = editObjectFields[thisFieldName];
                if (a4p.isDefined(editObjectField.validations)) for (var validationIdx = 0; validationIdx < editObjectField.validations.length; validationIdx++) {
                    var validation = editObjectField.validations[validationIdx], valid = c4p.Model.validateObject.apply(c4p.Model, [ $scope.note, validation.expr ]);
                    if (!valid) return c4p.Model.getErrorMsg.apply(c4p.Model, [ $scope, validation.errorKey ]);
                }
            }
        }
        return null;
    }
    $scope.srvLocale = srvLocale, $scope.srvData = srvData, $scope.openDialogFct = openDialogFct, 
    $scope.note = note, $scope.footerToolboxInEditMode = [], $scope.removeEnabled = a4p.isDefined(note.id) && a4p.isDefined(srvData.getObject(note.id.dbid)) && srvData.isObjectOwnedByUser(note) && note.id.dbid != srvData.userId.dbid, 
    $scope.noteLastUpdate = 0, $scope.modeEdit = modeEdit, $scope.editable = editable, 
    $scope.toolboxContacts = [], $scope.toolboxDocs = [], $scope.toolboxRatings = [], 
    $scope.noteParentObject = noteParentObject, $scope.getTypeColor = function() {
        return c4p.Model.getTypeColor(note.a4p_type);
    }, $scope.initEditDialogNoteCtrl = function() {
        $scope.note.description = $scope.note.description || "", $scope.noteDescriptionRows = Math.max(1, Math.round($scope.note.description.length / 40)), 
        $scope.note.message = $scope.note.message || "";
        var now = new Date(), stringNow = $scope.srvLocale.formatDate(now, "fullDate");
        if ($scope.note.when = $scope.note.when || stringNow, "Report" == note.a4p_type) {
            $scope.note.title = $scope.note.title || ($scope.noteParentObject.name ? a4pFormat(srvLocale.translations.htmlTitleReportOf, $scope.noteParentObject.name) : srvLocale.translations.htmlTitleTypeReport), 
            $scope.toolboxDocs = [];
            for (var i = 0; i < $scope.note.document_ids.length; i++) $scope.toolboxDocs.push($scope.srvData.getObject($scope.note.document_ids[i].dbid));
            $scope.toolboxContacts = [];
            for (var i = 0; i < $scope.note.contact_ids.length; i++) $scope.toolboxContacts.push($scope.srvData.getObject($scope.note.contact_ids[i].dbid));
            $scope.toolboxRatings = $scope.note.ratings, $scope.toolboxInEditMode = [ {
                fn: $scope.openDialogPeople,
                icon: "user"
            }, {
                fn: $scope.openDialogDocs,
                icon: "link"
            }, {
                fn: $scope.openDialogAddRatings,
                icon: "star"
            } ];
        } else {
            var noteName = srvConfig.getItemName($scope.noteParentObject);
            noteName = a4pFormat(srvLocale.translations.htmlTitleNoteOf, noteName), $scope.note.title = noteName || srvLocale.translations.htmlTitleTypeNote;
        }
    }, $scope.toggleObjectGroupFilter = function(group) {
        group && ($scope.objectGroupFilter = group, $scope.setLastChange());
    }, $scope.setLastChange = function() {
        $scope.noteLastUpdate = new Date();
    }, $scope.onFieldChanged = function(field) {
        var validationHasChanged = !1;
        if (a4p.isDefined(c4p.Model.a4p_types[note.a4p_type].editObjectFields)) {
            var editObjectFields = c4p.Model.a4p_types[note.a4p_type].editObjectFields;
            if (a4p.isDefined(editObjectFields[field.key])) {
                var editObjectField = editObjectFields[field.key];
                if (a4p.isDefined(editObjectField.validations)) {
                    $scope.objectValidated = isObjectValidatedByOtherFields($scope, field.key);
                    var message = warningForThisField(field.key);
                    null != message ? (field.warn != message && (validationHasChanged = !0), field.warn = message, 
                    $scope.objectValidated = !1) : ("" != field.warn && (validationHasChanged = !0), 
                    field.warn = "");
                }
            }
        }
        validationHasChanged && $scope.setLastChange();
    }, $scope.submit = function() {
        if ($scope.objectValidated) {
            for (var objectGroupIdx = 0; objectGroupIdx < $scope.objectGroups.length; objectGroupIdx++) for (var objectGroup = $scope.objectGroups[objectGroupIdx], objectFieldIdx = 0; objectFieldIdx < objectGroup.groupFields.length; objectFieldIdx++) {
                var objectField = objectGroup.groupFields[objectFieldIdx];
                note[objectField.key] = $scope.note[objectField.key];
            }
            $scope.note.editable = !0, $modalInstance.close({
                note: $scope.note,
                share: !1
            });
        } else $scope.setLastChange();
    }, $scope.submitAndShare = function() {
        $scope.note.editable = !0, $modalInstance.close({
            note: $scope.note,
            share: !0,
            byChatter: !1
        });
    }, $scope.submitAndShareByChatter = function() {
        $scope.note.editable = !0, $modalInstance.close({
            note: $scope.note,
            share: !0,
            byChatter: !0
        });
    }, $scope.close = function() {
        $modalInstance.dismiss();
    }, $scope.remove = function() {
        $scope.confirmRemove();
    }, $scope.confirmRemove = function() {
        var text = $scope.srvLocale.translations.htmlTextConfirmDelete, array = [ srvConfig.getItemName($scope.note) ];
        $scope.openDialogFct({
            backdrop: !1,
            windowClass: "modal c4p-modal-full c4p-modal-confirm",
            controller: "ctrlDialogConfirm",
            templateUrl: "partials/dialog/confirm.html",
            resolve: {
                text: function() {
                    return text;
                },
                textArray: function() {
                    return array;
                },
                srvLocale: function() {
                    return $scope.srvLocale;
                }
            }
        }, function(result) {
            result && (srvData.removeAndSaveObject($scope.note), $modalInstance.close());
        });
    }, $scope.setModeEdit = function(modeEdit) {
        $scope.modeEdit = modeEdit, $scope.setLastChange();
    }, $scope.openDialogPeople = function() {
        var menus = [], addedOrganizers = [];
        menus.push({
            icon: "chevron-right",
            name: "eventAttendees",
            filterFct: function(object) {
                if (a4p.isDefinedAndNotNull(object)) for (var i = 0; i < attendees.length; i++) if (attendees[i].relation_id.dbid == object.id.dbid) return !0;
                return !1;
            }
        }), addedOrganizers.push(srvFacet.createEventAttendeesOrganizer(attendees));
        var dialogOptions = {
            backdrop: !0,
            windowClass: "modal c4p-modal-left c4p-modal-search c4p-dialog"
        }, resolve = {
            srvData: function() {
                return srvData;
            },
            srvConfig: function() {
                return srvConfig;
            },
            srvLocale: function() {
                return srvLocale;
            },
            type: function() {
                return "Contact";
            },
            initFilter: function() {
                return function(object) {
                    for (var i = 0; i < $scope.note.contact_ids.length; i++) if ($scope.note.contact_ids[i].dbid == object.id.dbid) return !1;
                    return !0;
                };
            },
            initSelector: function() {
                return function() {
                    return !1;
                };
            },
            multiple: function() {
                return !0;
            },
            createFct: function() {
                return function() {
                    var newObject = $scope.srvData.createObject("Contact", {});
                    return promiseDialog({
                        backdrop: !1,
                        windowClass: "modal c4p-modal-full c4p-dialog",
                        controller: "ctrlEditDialogObject",
                        templateUrl: "partials/dialog/edit_object.html",
                        resolve: {
                            srvData: function() {
                                return srvData;
                            },
                            srvLocale: function() {
                                return srvLocale;
                            },
                            srvConfig: function() {
                                return srvConfig;
                            },
                            objectItem: function() {
                                return newObject;
                            },
                            removeFct: function() {
                                return function(obj) {
                                    srvData.removeAndSaveObject(obj);
                                };
                            },
                            startSpinner: function() {
                                return $scope.startSpinner;
                            },
                            stopSpinner: function() {
                                return $scope.stopSpinner;
                            },
                            openDialogFct: function() {
                                return $scope.openDialog;
                            }
                        }
                    });
                };
            }
        };
        srvConfig.c4pConfig.exposeFacetDialog ? (dialogOptions.controller = "ctrlFacetSelectedDialog", 
        dialogOptions.templateUrl = "partials/dialog/dialogFacetSelected.html", resolve.srvFacet = function() {
            return srvFacet;
        }, resolve.addedOrganizers = function() {
            return addedOrganizers;
        }) : (dialogOptions.controller = "ctrlSelectObjectsDialog", dialogOptions.templateUrl = "partials/dialog/dialogSelectObjects.html", 
        resolve.suggestedMenus = function() {
            return menus;
        }), dialogOptions.resolve = resolve, $scope.openDialogFct(dialogOptions, function(result) {
            a4p.isDefined(result) && a4p.safeApply($scope, function() {
                for (var i = 0; i < result.length; i++) $scope.note.contact_ids.push(result[i].id), 
                $scope.toolboxContacts.push(result[i]);
                $scope.setLastChange();
            });
        });
    }, $scope.openDialogDocs = function() {
        var menus = [], addedOrganizers = [];
        menus.push({
            icon: "chevron-right",
            name: "eventAttachments",
            filterFct: function(object) {
                for (var i = 0; i < attachments.length; i++) if (attachments[i].id.dbid == object.id.dbid) return !0;
                return !1;
            }
        }), addedOrganizers.push(srvFacet.createEventAttachmentsOrganizer(attachments));
        var dialogOptions = {
            backdrop: !0,
            windowClass: "modal c4p-modal-left c4p-modal-search c4p-dialog"
        }, resolve = {
            srvData: function() {
                return srvData;
            },
            srvConfig: function() {
                return srvConfig;
            },
            srvLocale: function() {
                return srvLocale;
            },
            type: function() {
                return "Document";
            },
            initFilter: function() {
                return function(object) {
                    for (var i = 0; i < $scope.note.document_ids.length; i++) if ($scope.note.document_ids[i].dbid == object.id.dbid) return !1;
                    return !0;
                };
            },
            initSelector: function() {
                return function() {
                    return !1;
                };
            },
            multiple: function() {
                return !0;
            },
            createFct: function() {
                return null;
            }
        };
        srvConfig.c4pConfig.exposeFacetDialog ? (dialogOptions.controller = "ctrlFacetSelectedDialog", 
        dialogOptions.templateUrl = "partials/dialog/dialogFacetSelected.html", resolve.srvFacet = function() {
            return srvFacet;
        }, resolve.addedOrganizers = function() {
            return [];
        }) : (dialogOptions.controller = "ctrlSelectObjectsDialog", dialogOptions.templateUrl = "partials/dialog/dialogSelectObjects.html", 
        resolve.suggestedMenus = function() {
            return [];
        }), dialogOptions.resolve = resolve, $scope.openDialogFct(dialogOptions, function(result) {
            a4p.isDefined(result) && a4p.safeApply($scope, function() {
                for (var i = 0; i < result.length; i++) $scope.note.document_ids.push(result[i].id), 
                $scope.toolboxDocs.push(result[i]);
                $scope.setLastChange();
            });
        });
    }, $scope.openDialogAddRatings = function() {
        $scope.openDialogFct({
            windowClass: "modal c4p-modal-left c4p-modal-search c4p-dialog",
            backdrop: !0,
            controller: "ctrlAddRatings",
            templateUrl: "partials/dialog/dialogAddRatings.html",
            resolve: {
                srvLocale: function() {
                    return $scope.srvLocale;
                },
                ratings: function() {
                    return $scope.toolboxRatings.slice(0);
                }
            }
        }, function(result) {
            a4p.isDefined(result) && ($scope.toolboxRatings = result.slice(0), $scope.note.ratings = $scope.toolboxRatings, 
            $scope.setLastChange());
        });
    }, $scope.removeContact = function(index) {
        $scope.note.contact_ids.splice(index, 1), $scope.toolboxContacts.splice(index, 1), 
        $scope.setLastChange();
    }, $scope.removeDoc = function(index) {
        $scope.note.document_ids.splice(index, 1), $scope.toolboxDocs.splice(index, 1), 
        $scope.setLastChange();
    }, $scope.removeRating = function(index) {
        $scope.note.ratings.splice(index, 1), $scope.toolboxRatings = $scope.note.ratings, 
        $scope.setLastChange();
    }, $scope.initEditDialogNoteCtrl(), initFields();
}

function ctrlEditDialogObject($scope, $location, $anchorScroll, srvData, srvLocale, srvConfig, objectItem, removeFct, startSpinner, stopSpinner, openDialogFct, $modalInstance) {
    function initFields(scope) {
        scope.object = angular.copy(objectItem), scope.hasOpenImportContactDialog = "Contact" == objectItem.a4p_type && navigator && a4p.isDefined(window.plugins.ContactPicker), 
        scope.hasOpenImportAccountDialog = "Account" == objectItem.a4p_type && navigator && navigator.contacts, 
        scope.hasOpenImportEventDialog = "Event" == objectItem.a4p_type && "undefined" != typeof calendarPlugin, 
        scope.objectValidated = !0, scope.objectGroups = [];
        var groups, objDesc = c4p.Model.a4p_types[objectItem.a4p_type];
        if (a4p.isDefined(objDesc.editObjectGroups)) groups = objDesc.editObjectGroups; else {
            for (var fields = [], i = 0; i < objDesc.fields.length; i++) {
                var key = objDesc.fields[i];
                a4p.isDefined(objDesc.editObjectFields) && a4p.isDefined(objDesc.editObjectFields[key]) && fields.push(key);
            }
            groups = [ {
                key: "details",
                title: "htmlFieldsetDetails",
                fields: fields
            } ];
        }
        for (var groupIdx = 0; groupIdx < groups.length; groupIdx++) {
            for (var groupDesc = groups[groupIdx], groupWarn = "", groupSet = [], group = [], fieldIdx = 0; fieldIdx < groupDesc.fields.length; fieldIdx++) {
                var key = groupDesc.fields[fieldIdx];
                if (a4p.isDefined(c4p.Model.a4p_types[objectItem.a4p_type].editObjectFields) && a4p.isDefined(c4p.Model.a4p_types[objectItem.a4p_type].editObjectFields[key])) {
                    var editObjectField = c4p.Model.a4p_types[objectItem.a4p_type].editObjectFields[key], fieldLabel = scope.srvLocale.translations[editObjectField.title];
                    a4p.isDefined(fieldLabel) || (fieldLabel = key);
                    var isFocus = !1;
                    a4p.isDefined(editObjectField.autofocus) && (isFocus = editObjectField.autofocus);
                    var selectOptions = "";
                    a4p.isDefined(editObjectField.optionList) && (selectOptions = scope.srvLocale.translations[editObjectField.optionList]), 
                    groupSet.push({
                        title: fieldLabel,
                        type: editObjectField.type,
                        warn: "",
                        key: key,
                        focus: isFocus,
                        optionList: selectOptions
                    });
                }
            }
            group = {
                title: scope.srvLocale.translations[groupDesc.title],
                warn: groupWarn,
                groupFields: groupSet
            }, scope.objectGroups.push(group);
        }
    }
    function calculateFields(scope, changedField) {
        if (a4p.isDefined(c4p.Model.a4p_types[objectItem.a4p_type].editObjectFields)) {
            var editObjectFields = c4p.Model.a4p_types[objectItem.a4p_type].editObjectFields;
            if (a4p.isDefined(editObjectFields[changedField.key])) {
                var editObjectField = editObjectFields[changedField.key];
                if (a4p.isDefined(editObjectField.calculations)) for (var calculationIdx = 0; calculationIdx < editObjectField.calculations.length; calculationIdx++) {
                    for (var calculation = editObjectField.calculations[calculationIdx], values = [], j = 0, len2 = calculation.fromFields.length; len2 > j; j++) values.push(scope.object[calculation.fromFields[j]]);
                    scope.object[calculation.toField] = c4p.Model[calculation.getter].apply(c4p.Model, values), 
                    a4p.InternalLog.log("ctrlEditDialogObject", "onFieldChanged : calculate " + calculation.toField + "=" + scope.object[calculation.toField]);
                }
            }
        }
    }
    function checkGlobalFormValidation(scope) {
        for (var objectGroupIdx = 0; objectGroupIdx < scope.objectGroups.length; objectGroupIdx++) for (var objectGroup = scope.objectGroups[objectGroupIdx], objectFieldIdx = 0; objectFieldIdx < objectGroup.groupFields.length; objectFieldIdx++) {
            var objectField = objectGroup.groupFields[objectFieldIdx];
            if ("" != objectField.warn) return !1;
        }
        return !0;
    }
    function warningForThisField(scope, thisFieldName) {
        if (a4p.isDefined(c4p.Model.a4p_types[objectItem.a4p_type].editObjectFields)) {
            var editObjectFields = c4p.Model.a4p_types[objectItem.a4p_type].editObjectFields;
            if (a4p.isDefined(editObjectFields[thisFieldName])) {
                var editObjectField = editObjectFields[thisFieldName];
                if (a4p.isDefined(editObjectField.validations)) for (var validationIdx = 0; validationIdx < editObjectField.validations.length; validationIdx++) {
                    var validation = editObjectField.validations[validationIdx], valid = c4p.Model.validateObject.apply(c4p.Model, [ scope.object, validation.expr ]);
                    if (!valid) return c4p.Model.getErrorMsg.apply(c4p.Model, [ scope, validation.errorKey ]);
                }
            }
        }
        return null;
    }
    $scope.srvData = srvData, $scope.srvLocale = srvLocale, $scope.srvConfig = srvConfig, 
    $scope.object = {}, $scope.objectName = srvConfig.getItemName(objectItem), $scope.objectIcon = c4p.Model.getItemIcon(objectItem), 
    $scope.objectGroups = [], $scope.objectTypeLocale = objectItem.a4p_type, $scope.objectValidated = !1, 
    $scope.startSpinner = startSpinner, $scope.stopSpinner = stopSpinner, $scope.openDialogFct = openDialogFct;
    var object = srvData.getObject(objectItem.id.dbid);
    $scope.removeEnabled = a4p.isDefined(object) && srvData.isObjectOwnedByUser(object) && objectItem.id.dbid != srvData.userId.dbid, 
    $scope.removeFct = removeFct, $scope.objectGroup = null, $scope.objectGroupFilter = null, 
    $scope.hasOpenImportContactDialog = !1, $scope.hasOpenImportAccountDialog = !1, 
    $scope.hasOpenImportEventDialog = !1, $scope.submit = function() {
        if ($scope.objectValidated) {
            for (var objectGroupIdx = 0; objectGroupIdx < $scope.objectGroups.length; objectGroupIdx++) for (var objectGroup = $scope.objectGroups[objectGroupIdx], objectFieldIdx = 0; objectFieldIdx < objectGroup.groupFields.length; objectFieldIdx++) {
                var objectField = objectGroup.groupFields[objectFieldIdx];
                objectItem[objectField.key] = $scope.object[objectField.key];
            }
            $modalInstance.close(objectItem);
        } else {
            for (var globalWarn = "", warnList = [], objectGroupIdx = 0; objectGroupIdx < $scope.objectGroups.length; objectGroupIdx++) {
                for (var objectGroup = $scope.objectGroups[objectGroupIdx], groupWarn = "", objectFieldIdx = 0; objectFieldIdx < objectGroup.groupFields.length; objectFieldIdx++) {
                    var objectField = objectGroup.groupFields[objectFieldIdx];
                    "" != objectField.warn && (warnList.push(objectField.warn), 0 == groupWarn.length && (groupWarn = objectField.warn), 
                    0 == globalWarn.length && (globalWarn = objectField.warn, $scope.editScrollTo("field_" + objectGroupIdx + "_" + objectFieldIdx)));
                }
                objectGroup.warn = groupWarn;
            }
            $scope.openDialogFct({
                backdrop: !0,
                windowClass: "modal c4p-modal-full c4p-modal-confirm",
                controller: "ctrlDialogConfirm",
                templateUrl: "partials/dialog/message.html",
                resolve: {
                    text: function() {
                        return srvLocale.translations.htmlMsgObjectInvalid;
                    },
                    textArray: function() {
                        return warnList;
                    },
                    srvLocale: function() {
                        return srvLocale;
                    }
                }
            }, function() {});
        }
    }, $scope.onFieldChanged = function(field) {
        var validationHasChanged = !1;
        if (calculateFields($scope, field), a4p.isDefined(c4p.Model.a4p_types[objectItem.a4p_type].editObjectFields)) {
            var editObjectFields = c4p.Model.a4p_types[objectItem.a4p_type].editObjectFields;
            if (a4p.isDefined(editObjectFields[field.key])) {
                var editObjectField = editObjectFields[field.key];
                if (a4p.isDefined(editObjectField.validations)) {
                    var message = warningForThisField($scope, field.key);
                    null != message ? (field.warn != message && (validationHasChanged = !0), field.warn = message, 
                    $scope.objectValidated = !1) : ("" != field.warn && (validationHasChanged = !0), 
                    field.warn = "", $scope.objectValidated = checkGlobalFormValidation($scope));
                }
            }
        }
        if (validationHasChanged) for (var objectGroupIdx = 0; objectGroupIdx < $scope.objectGroups.length; objectGroupIdx++) {
            var objectGroup = $scope.objectGroups[objectGroupIdx];
            objectGroup.warn = "";
            for (var objectFieldIdx = 0; objectFieldIdx < objectGroup.groupFields.length; objectFieldIdx++) {
                var objectField = objectGroup.groupFields[objectFieldIdx];
                if ("" != objectField.warn) {
                    objectGroup.warn = objectField.warn;
                    break;
                }
            }
        }
    }, $scope.close = function() {
        $modalInstance.dismiss();
    }, $scope.clear = function() {
        $scope.objectName = "", $scope.objectName = srvConfig.getItemName(objectItem), initFields($scope);
    }, $scope.remove = function() {
        $scope.confirmRemove();
    }, $scope.confirmRemove = function() {
        var text = $scope.srvLocale.translations.htmlTextConfirmDelete, array = [ $scope.objectName ];
        $scope.openDialogFct({
            windowClass: "modal c4p-modal-full c4p-modal-confirm",
            controller: "ctrlDialogConfirm",
            templateUrl: "partials/dialog/confirm.html",
            resolve: {
                text: function() {
                    return text;
                },
                textArray: function() {
                    return array;
                },
                srvLocale: function() {
                    return $scope.srvLocale;
                }
            }
        }, function(result) {
            result && ($scope.removeFct(objectItem), $modalInstance.close());
        });
    }, $scope.editScrollTo = function(id) {
        $location.hash(id), $anchorScroll();
    }, $scope.getTypeColor = function(type) {
        return c4p.Model.getTypeColor(type);
    };
    var createNewContactViaPlugin = function(contact, objectToFill) {
        a4p.InternalLog.log("ctrlEditDialogObject", "createNewContactViaPlugin analyze a contact from Device : " + a4pDumpData(contact, 3));
        var splitName = contact.displayName ? contact.displayName.split(" ") : [ "...", "..." ], firstName = splitName[0] ? splitName[0] : "...", lastName = splitName[1] ? splitName[1] : "...", possibleContact = {
            id: contact.id || 0,
            first_name: firstName,
            last_name: lastName,
            phone_work: contact.phoneNumber || "",
            email: contact.email || ""
        };
        objectToFill.first_name = possibleContact.first_name, objectToFill.last_name = possibleContact.last_name, 
        possibleContact.phone_work && (objectToFill.phone_work = possibleContact.phone_work), 
        possibleContact.email && (objectToFill.email = possibleContact.email);
    };
    $scope.openImportContactDialog = function() {
        $scope.hasOpenImportContactDialog ? window.plugins.ContactPicker.chooseContact(function(contactInfo) {
            contactInfo && $scope.object && a4p.safeApply($scope, createNewContactViaPlugin(contactInfo, $scope.object));
        }) : a4p.InternalLog.log("ctrlEditDialogObject", "NO Device to import Contacts");
    }, $scope.openImportAccountDialog = function() {
        var possibleAccounts = [];
        if (hasOpenImportAccountDialog) {
            var possibleAccountsSelectionDialog = function() {
                $scope.openDialogFct({
                    backdrop: !0,
                    windowClass: "modal c4p-modal-left c4p-modal-search",
                    controller: "ctrlAddAccount",
                    templateUrl: "partials/dialog/dialogAddAccount.html",
                    resolve: {
                        srvLocale: function() {
                            return $scope.srvLocale;
                        },
                        accounts: function() {
                            return possibleAccounts.slice(0);
                        }
                    }
                }, function(result) {
                    a4p.isDefined(result) && a4p.safeApply($scope, function() {
                        $scope.clear(), $scope.object.type = result.type, $scope.object.company_name = result.company_name;
                        for (var objectGroupIdx = 0; objectGroupIdx < $scope.objectGroups.length; objectGroupIdx++) for (var objectGroup = $scope.objectGroups[objectGroupIdx], objectFieldIdx = 0; objectFieldIdx < objectGroup.groupFields.length; objectFieldIdx++) {
                            var objectField = objectGroup.groupFields[objectFieldIdx];
                            $scope.onFieldChanged(objectField);
                        }
                    });
                });
            }, onContactsSuccess = function(contacts) {
                a4p.safeApply($scope, function() {
                    $scope.stopSpinner();
                    for (var nbNewAccount = 0, accountIndex = {}, i = 0, nb = contacts.length; nb > i; i++) {
                        var contact = contacts[i];
                        a4p.InternalLog.log("ctrlEditDialogObject", "analyze a contact from IOS : " + a4pDumpData(contact, 3));
                        var j, max;
                        if (contact.organizations) for (j = 0, max = contact.organizations.length; max > j; j++) {
                            var name = contact.organizations[j].name;
                            if (a4p.isUndefined(accountIndex[name])) {
                                var possibleAccount = {
                                    type: contact.organizations[j].type,
                                    company_name: name
                                };
                                possibleAccounts.push(possibleAccount), nbNewAccount++, accountIndex[name] = !0;
                            }
                        }
                    }
                    nbNewAccount ? ($scope.setAccountImportList(possibleAccounts), possibleAccountsSelectionDialog()) : a4p.InternalLog.log("ctrlEditDialogObject", "NO Account found in IOS");
                });
            }, onContactsFailure = function(contactError) {
                a4p.safeApply($scope, function() {
                    $scope.stopSpinner(), contactError.code == ContactError.UNKNOWN_ERROR ? a4p.ErrorLog.log("ctrlEditDialogObject", "Device Accounts not imported from IOS : UNKNOWN_ERROR") : contactError.code == ContactError.INVALID_ARGUMENT_ERROR ? a4p.ErrorLog.log("ctrlEditDialogObject", "Device Accounts not imported from IOS : INVALID_ARGUMENT_ERROR") : contactError.code == ContactError.TIMEOUT_ERROR ? a4p.ErrorLog.log("ctrlEditDialogObject", "Device Accounts not imported from IOS : TIMEOUT_ERROR") : contactError.code == ContactError.PENDING_OPERATION_ERROR ? a4p.ErrorLog.log("ctrlEditDialogObject", "Device Accounts not imported from IOS : PENDING_OPERATION_ERROR") : contactError.code == ContactError.IO_ERROR ? a4p.ErrorLog.log("ctrlEditDialogObject", "Device Accounts not imported from IOS : IO_ERROR") : contactError.code == ContactError.NOT_SUPPORTED_ERROR ? a4p.ErrorLog.log("ctrlEditDialogObject", "Device Accounts not imported from IOS : NOT_SUPPORTED_ERROR") : contactError.code == ContactError.PERMISSION_DENIED_ERROR ? a4p.ErrorLog.log("ctrlEditDialogObject", "Device Accounts not imported from IOS : PERMISSION_DENIED_ERROR") : a4p.ErrorLog.log("ctrlEditDialogObject", "Device Accounts not imported from IOS : contactError.code unknown");
                });
            };
            if (possibleAccounts = $scope.getAccountImportList(), possibleAccounts.length > 0) possibleAccountsSelectionDialog(); else {
                var findOptions = new ContactFindOptions();
                findOptions.filter = "", findOptions.multiple = !0, $scope.startSpinner(), navigator.contacts.find([ "*" ], onContactsSuccess, onContactsFailure, findOptions);
            }
        } else a4p.InternalLog.log("ctrlEditDialogObject", "NO Device to import Accounts");
    }, $scope.openImportEventDialog = function() {
        if (hasOpenImportEventDialog) {
            var onEventsSuccess = function(events) {
                a4p.InternalLog.log("ctrlEditDialogObject", "analyze events from IOS : " + a4pDumpData(events, 3));
            }, onEventsFailure = function(contactError) {
                a4p.safeApply($scope, function() {
                    a4p.ErrorLog.log("ctrlEditDialogObject", "Device Events not imported from IOS : " + a4pDumpData(contactError, 3));
                });
            }, cal = new calendarPlugin(), startDate = "2012-01-01 00:00:00", endDate = "2016-01-01 00:00:00";
            cal.findEvent("*", "", "", startDate, endDate, onEventsSuccess, onEventsFailure);
        } else a4p.InternalLog.log("ctrlEditDialogObject", "NO Device to import Events");
    }, initFields($scope);
}

function ctrlEditFocus($scope, $window) {
    $scope.isEditFocused = !1, $scope.initCtrlEditFocusDone = !1, $scope.setEditFocusState = function(state) {
        $scope.isEditFocused != state && ($scope.isEditFocused = 1 == state, $window && $window.scrollX ? $window.scrollX = 0 : $(window).scrollTop(0), 
        console.log("scrollTop"));
    }, $scope.initEditFocus = function() {
        if (1 != $scope.initCtrlEditFocusDone) {
            var el = document.body, keyboardUp = function() {
                a4p.safeApply($scope, function() {
                    $scope.setEditFocusState(!0);
                });
            }, keyboardDown = function() {
                a4p.safeApply($scope, function() {
                    $scope.setEditFocusState(!1);
                });
            };
            el && el.addEventListener && "undefined" != typeof Keyboard && (el.addEventListener("keyboardWillShow", keyboardUp, !1), 
            el.addEventListener("keyboardDidHide", keyboardDown, !1)), $scope.initCtrlEditFocusDone = !0;
        }
    }, $scope.initEditFocus();
}

function ctrlFacetSelectedDialog($scope, $modalInstance, srvData, srvFacet, srvLocale, srvConfig, type, initFilter, initSelector, multiple, addedOrganizers, createFct) {
    $scope.srvLocale = srvLocale, $scope.type = type, $scope.typeColor = c4p.Model.getTypeColor(type), 
    $scope.definedFacetKeyes = [], $scope.definedOrganizers = {}, $scope.createPredefinedObjectEnabled = createFct && type && "Document" != type && !isValueInList(c4p.Model.attachTypes, type), 
    $scope.ascendingOrder = !0, $scope.caseSensitive = !1, $scope.filterQuery = "", 
    $scope.filterFacets = [], $scope.lastFacetKey = "", $scope.rootItems = [], $scope.queryItems = [], 
    $scope.items = {
        keyes: [],
        lists: {},
        others: []
    }, $scope.createPredefinedObject = function() {
        $scope.createPredefinedObjectEnabled && a4p.safeApply($scope, function() {
            createFct().then(function(newObject) {
                a4p.isDefined(newObject) && a4p.safeApply($scope, function() {
                    if (srvData.addAndSaveObject(newObject), !multiple) for (var i = 0, nb = $scope.rootItems.length; nb > i; i++) $scope.rootItems[i].selected = !1, 
                    $scope.rootItems[i].scrollTo = !1;
                    $scope.rootItems.push({
                        object: newObject,
                        selected: !0,
                        scrollTo: !0
                    }), $scope.updateItems(0);
                });
            }, function() {});
        });
    }, $scope.getTypeColor = function() {
        return c4p.Model.getTypeColor($scope.type);
    }, $scope.getObjectIcon = function(object) {
        return c4p.Model.getItemIcon(object);
    }, $scope.getObjectName = function(object) {
        return srvConfig.getItemName(object);
    }, $scope.validateDialog = function() {
        for (var result = [], parentItems = $scope.filterFacets.length <= 0 ? $scope.queryItems : $scope.filterFacets[$scope.filterFacets.length - 1].items, i = 0, nb = parentItems.length; nb > i && (!parentItems[i].selected || (result.push(parentItems[i].object), 
        multiple)); i++) ;
        $modalInstance.close(result);
    }, $scope.closeDialog = function() {
        $modalInstance.dismiss();
    }, $scope.addPossibleOrganizerFacet = function(organizer) {
        a4p.isUndefined($scope.definedOrganizers[organizer.key]) && $scope.definedFacetKeyes.push(organizer.key), 
        $scope.definedOrganizers[organizer.key] = organizer, "" == $scope.lastFacetKey && $scope.setFacet(organizer.key);
    }, $scope.setFacet = function(facetKey) {
        var updateFromLevel = -1;
        "" == $scope.lastFacetKey ? ($scope.lastFacetKey = facetKey, updateFromLevel = -1) : ($scope.lastFacetKey = facetKey, 
        updateFromLevel = $scope.filterFacets.length), $scope.isFacetActivable(facetKey) || ($scope.lastFacetKey = $scope.definedFacetKeyes[0]), 
        $scope.updateItems(updateFromLevel);
    }, $scope.addFacet = function(facetKey, title, value) {
        var updateFromLevel = -1;
        $scope.lastFacetKey != facetKey && ("" == $scope.lastFacetKey ? ($scope.lastFacetKey = facetKey, 
        updateFromLevel = -1) : ($scope.lastFacetKey = facetKey, updateFromLevel = $scope.filterFacets.length)), 
        $scope.filterFacets.push(a4p.isDefined(value) ? {
            key: facetKey,
            title: title,
            value: value,
            items: $scope.items.lists[value]
        } : {
            key: facetKey,
            title: title,
            value: value,
            items: $scope.items.others
        });
        for (var facetIdx = $scope.filterFacets.length - 1; facetIdx >= 0; facetIdx--) {
            var filterFacet = $scope.filterFacets[facetIdx], organizer = $scope.definedOrganizers[filterFacet.key];
            a4p.isDefined(organizer) && a4p.isDefined(organizer.keepValue) && (organizer.keepValue(filterFacet.title, filterFacet.value, $scope.filterFacets.slice(0, facetIdx)) || ($scope.filterFacets.splice(facetIdx, 1), 
            updateFromLevel >= facetIdx && (updateFromLevel = facetIdx - 1)));
        }
        $scope.isFacetActivable(facetKey) || ($scope.lastFacetKey = $scope.definedFacetKeyes[0]), 
        $scope.updateItems(updateFromLevel);
    }, $scope.removeFacet = function(facetIdx) {
        var updateFromLevel = facetIdx - 1;
        $scope.filterFacets.splice(facetIdx, 1);
        for (var i = $scope.filterFacets.length - 1; i >= 0; i--) {
            var filterFacet = $scope.filterFacets[i], organizer = $scope.definedOrganizers[filterFacet.key];
            a4p.isDefined(organizer) && a4p.isDefined(organizer.keepValue) && (organizer.keepValue(filterFacet.title, filterFacet.value, $scope.filterFacets.slice(0, i)) || ($scope.filterFacets.splice(i, 1), 
            updateFromLevel >= i && (updateFromLevel = i - 1)));
        }
        this.lastFacetKey = this.getLastFacetKey(), "" != this.lastFacetKey && $scope.isFacetActivable($scope.lastFacetKey) || ($scope.lastFacetKey = $scope.definedFacetKeyes[0]), 
        $scope.updateItems(updateFromLevel);
    }, $scope.removeLastFacet = function() {
        $scope.filterFacets.length > 0 && $scope.removeFacet($scope.filterFacets.length - 1);
    }, $scope.getFacet = function(facetIdx) {
        return $scope.filterFacets[facetIdx];
    }, $scope.getLastFacet = function() {
        return $scope.filterFacets.length > 0 ? $scope.getFacet($scope.filterFacets.length - 1) : null;
    }, $scope.isFacetActivable = function(facetKey) {
        var organizer = $scope.definedOrganizers[facetKey];
        return a4p.isDefined(organizer) && a4p.isDefined(organizer.keepActive) ? organizer.keepActive($scope.filterFacets) : !1;
    }, $scope.isFacetAnObjectType = function(value) {
        return c4p.Model.allTypes.indexOf(value) >= 0;
    }, $scope.isLastFacetAnObjectType = function() {
        return $scope.filterFacets.length > 0 ? c4p.Model.allTypes.indexOf($scope.getLastFacet().value) >= 0 : !1;
    }, $scope.toggleOrder = function() {
        $scope.ascendingOrder = !$scope.ascendingOrder, $scope.updateItems(0);
    }, $scope.toggleCaseSensitive = function() {
        $scope.caseSensitive = !$scope.caseSensitive, $scope.updateItems(0);
    }, $scope.setFilterQuery = function(filterQuery) {
        $scope.filterQuery = filterQuery, $scope.updateItems(0);
    }, $scope.clear = function() {
        $scope.ascendingOrder = !0, $scope.caseSensitive = !1, $scope.filterQuery = "", 
        $scope.filterFacets = [], $scope.lastFacetKey = "", $scope.queryItems = [], $scope.items = {
            keyes: [],
            lists: {},
            others: []
        }, $scope.definedFacetKeyes.length && ($scope.lastFacetKey = $scope.definedFacetKeyes[0], 
        $scope.updateItems(0));
    }, $scope.updateItems = function(from) {
        "" != $scope.lastFacetKey && (a4p.isUndefined(from) && (from = -1), 0 > from && $scope.updateRootItems(), 
        0 >= from && ($scope.queryItems = srvFacet.queryFilter($scope.rootItems, $scope.filterQuery, $scope.caseSensitive), 
        srvFacet.sortItems($scope.queryItems, $scope.ascendingOrder, $scope.caseSensitive)), 
        $scope.applyFilterFacets(from), $scope.updateFinalItems());
    }, $scope.updateRootItems = function() {
        if ($scope.rootItems = [], type) for (var i = 0, nb = srvData.currentItems[type].length; nb > i; i++) {
            var object = srvData.currentItems[type][i];
            (!initFilter || initFilter(object)) && $scope.rootItems.push({
                object: object,
                selected: initSelector && initSelector(object)
            });
        } else for (var typeIdx = 0; typeIdx < c4p.Model.objectTypes.length; typeIdx++) for (var objectType = c4p.Model.objectTypes[typeIdx], i = 0, nb = srvData.currentItems[objectType].length; nb > i; i++) {
            var object = srvData.currentItems[objectType][i];
            (!initFilter || initFilter(object)) && $scope.rootItems.push({
                object: object,
                selected: initSelector && initSelector(object)
            });
        }
    }, $scope.applyFilterFacets = function(from) {
        if (a4p.isUndefined(from) && (from = 0), 0 > from && (from = 0), from < $scope.filterFacets.length) for (var parentItems = 0 >= from ? $scope.queryItems : $scope.filterFacets[from - 1].items, facetIdx = from; facetIdx < $scope.filterFacets.length; facetIdx++) srvFacet.applyFilterFacet($scope.definedOrganizers, parentItems, $scope.filterFacets.slice(0, facetIdx), $scope.filterFacets[facetIdx]), 
        parentItems = $scope.filterFacets[facetIdx].items;
    }, $scope.updateFinalItems = function() {
        var parentItems = $scope.filterFacets.length <= 0 ? $scope.queryItems : $scope.filterFacets[$scope.filterFacets.length - 1].items;
        $scope.items = srvFacet.applyFacet($scope.definedOrganizers, parentItems, $scope.filterFacets, $scope.lastFacetKey), 
        srvFacet.sortKeyes($scope.items.keyes, $scope.ascendingOrder, $scope.caseSensitive);
    }, $scope.$on("mindMapUpdated", function() {
        $scope.updateItems();
    }), $scope.$on("mindMapLoaded", function() {
        $scope.updateItems();
    });
    for (var i = 0, nb = srvFacet.definedFacetKeyes.length; nb > i; i++) {
        var facetKey = srvFacet.definedFacetKeyes[i];
        $scope.addPossibleOrganizerFacet(srvFacet.definedOrganizers[facetKey]);
    }
    if (a4p.isDefined(addedOrganizers)) for (var i = 0, nb = addedOrganizers.length; nb > i; i++) $scope.addPossibleOrganizerFacet(addedOrganizers[i]);
    isValueInList(c4p.Model.objectTypes, type) && $scope.addFacet("objects", srvLocale.translations.htmlTitleType[type], type);
}

function ctrlGoToMeetingDialog($scope, item, version, srvData, srvNav, srvLink, srvLocale, srvConfig, srvAnalytics, $modalInstance) {
    $scope.item = item, $scope.itemName = srvConfig.getItemName(item), $scope.relatedEvents = [], 
    $scope.selectedEvent = null, $scope.srvLocale = srvLocale, $scope.init = function() {
        if (a4p.isDefinedAndNotNull(srvNav.itemRelatedList.Event)) {
            for (var i = 0, nbEvent = srvNav.itemRelatedList.Event.length; nbEvent > i; i++) $scope.relatedEvents.push(srvNav.itemRelatedList.Event[i].item);
            $scope.selectedEvent = $scope.relatedEvents[0];
        }
    }, $scope.createNewMeeting = function(linkItem) {
        var meeting = srvData.createObject("Event", {
            name: srvLocale.translations.htmlTextDefaultEventName
        });
        if (srvData.addAndSaveObject(meeting), srvAnalytics.add("Once", "Create Meeting"), 
        a4p.isDefinedAndNotNull(linkItem)) {
            var linkType = linkItem.a4p_type, newLinkList = [ linkItem ], linkName = "";
            "Contact" == linkType ? linkName = "attended" : "Account" == linkType ? linkName = "affected" : "Opportunity" == linkType ? linkName = "affected" : "Document" == linkType && (linkName = "attached"), 
            srvLink.linkObjectsToItem(linkType, linkName, newLinkList, meeting);
        }
        $modalInstance.close(meeting);
    }, $scope.gotoMeeting = function() {
        $modalInstance.close($scope.selectedEvent);
    }, $scope.close = function() {
        console.log("ctrlGoToMeetingDialog : close"), $modalInstance.dismiss();
    }, $scope.init();
}

function ctrlGuiderDialog($scope, $sce, srvLocale) {
    $scope.guider_interval = -1, $scope.guider_slides = [ {
        image: "img/guider/c4p-guider-01.png",
        text: srvLocale.translations.htmlTextGuiderSlide01
    }, {
        image: "img/guider/c4p-guider-02.png",
        text: srvLocale.translations.htmlTextGuiderSlide02
    }, {
        image: "img/guider/c4p-guider-03.png",
        text: srvLocale.translations.htmlTextGuiderSlide03
    } ], $scope.to_trusted = function(html_code) {
        return $sce.trustAsHtml(html_code);
    };
}

function ctrlInitDialogPinCode($scope, srvLocale, $modalInstance) {
    $scope.srvLocale = null, $scope.pinCode = "", $scope.warningEmptyPinCode = !1, $scope.init = function(srvLocale) {
        $scope.srvLocale = srvLocale;
    }, $scope.closeDialog = function() {
        $modalInstance.dismiss();
    }, $scope.setPinCode = function(pinCode) {
        $scope.pinCode = pinCode;
    }, $scope.submit = function() {
        "" == $scope.pinCode || a4p.isUndefined($scope.pinCode) ? a4p.safeApply($scope, function() {
            $scope.warningEmptyPinCode = !0;
        }) : $modalInstance.close($scope.pinCode);
    }, $scope.init(srvLocale);
}

function ctrlModifyDialogPinCode($scope, srvLocale, srvSecurity, $modalInstance) {
    $scope.srvLocale = srvLocale, $scope.srvSecurity = srvSecurity, $scope.newPinCode = "", 
    $scope.oldPinCode = "", $scope.firstError = "", $scope.oldPinCodeError = !1, $scope.newPinCodeError = !1, 
    $scope.closeDialog = function() {
        $modalInstance.dismiss();
    }, $scope.setNewPinCode = function(newPinCode) {
        $scope.newPinCode = newPinCode;
    }, $scope.setOldPinCode = function(oldPinCode) {
        $scope.oldPinCode = oldPinCode;
    }, $scope.submitNewPinCode = function() {
        a4p.safeApply($scope, function() {
            $scope.oldPinIncorrect() || $scope.sameAsOldPin() || $modalInstance.close($scope.newPinCode);
        });
    }, $scope.oldPinIncorrect = function() {
        return $scope.oldPinCodeError = !1, a4p.isDefined($scope.oldPinCode) && "" != $scope.oldPinCode && (srvSecurity.verify($scope.oldPinCode) || ($scope.oldPinCodeError = !0)), 
        $scope.oldPinCodeError;
    }, $scope.sameAsOldPin = function() {
        return $scope.newPinCodeError = !1, a4p.isDefined($scope.oldPinCode) && "" != $scope.oldPinCode && a4p.isDefined($scope.newPinCode) && "" != $scope.newPinCode && $scope.newPinCode == $scope.oldPinCode && ($scope.newPinCodeError = !0), 
        $scope.newPinCodeError;
    };
}

function ctrlOpenDialogLocked($scope, srvLocale, srvSecurity, $modalInstance) {
    $scope.srvLocale = srvLocale, $scope.srvSecurity = srvSecurity, $scope.pinCode = "", 
    $scope.oldPinCodeError = !1, $scope.closeDialog = function() {
        $modalInstance.dismiss();
    }, $scope.setPinCode = function(pinCode) {
        $scope.pinCode = pinCode;
    }, $scope.submit = function() {
        a4p.safeApply($scope, function() {
            $scope.oldPinIncorrect() || $modalInstance.close();
        });
    }, $scope.oldPinIncorrect = function() {
        return $scope.oldPinCodeError = !1, a4p.isDefined($scope.pinCode) && "" != $scope.pinCode && (srvSecurity.verify($scope.pinCode) || ($scope.oldPinCodeError = !0)), 
        $scope.oldPinCodeError;
    };
}

function ctrlSelectCrmsDialog($scope, srvLocale, possibleCrms, activeCrms, multiple, $modalInstance) {
    $scope.srvLocale = srvLocale, $scope.possibleCrms = possibleCrms, $scope.activeCrms = activeCrms, 
    $scope.multiple = multiple, $scope.selectedCrms = {};
    for (var i = 0; i < $scope.possibleCrms.length; i++) {
        var crm = $scope.possibleCrms[i];
        $scope.selectedCrms[crm] = isValueInList($scope.activeCrms, crm) ? !0 : !1;
    }
    $scope.validateDialog = function() {
        for (var result = [], i = 0; i < $scope.possibleCrms.length; i++) {
            var crm = $scope.possibleCrms[i];
            if ($scope.selectedCrms[crm] && (result.push(crm), !multiple)) break;
        }
        $modalInstance.close(result);
    }, $scope.closeDialog = function() {
        $modalInstance.dismiss();
    }, $scope.toggleItem = function(key) {
        if (!a4p.isUndefined($scope.selectedCrms[key])) if ($scope.selectedCrms[key]) $scope.selectedCrms[key] = !1; else {
            if (!multiple) for (var i = 0; i < $scope.possibleCrms.length; i++) {
                var crm = $scope.possibleCrms[i];
                $scope.selectedCrms[crm] = !1;
            }
            $scope.selectedCrms[key] = !0;
        }
    };
}

function ctrlSelectDialog($scope, srvLocale, srvData, srvConfig, type, objects, initFilter, initSelector, multiple, suggestedMenus, createFct, $modalInstance) {
    $scope.srvLocale = srvLocale, $scope.type = type, $scope.typeColor = c4p.Model.getTypeColor(type), 
    $scope.multiple = multiple, $scope.createButton = createFct && "Document" != type, 
    $scope.showFilter = "", $scope.forceSearch = !0, $scope.suggestedOptions = [];
    for (var badgeClasses = [ "badge-success", "badge-warning", "badge-important", "badge-info", "badge-inverse" ], m = 0; m < suggestedMenus.length; m++) {
        var ibadge = m % 5;
        $scope.suggestedOptions.push({
            icon: badgeClasses[ibadge],
            name: suggestedMenus[m].name,
            selected: !1
        });
    }
    $scope.selectedIndex = {}, $scope.lastSelectedDbid = void 0, $scope.elements = [];
    for (var i = 0; i < objects.length; i++) {
        var object = objects[i];
        if (!initFilter || initFilter(object)) {
            for (var selection = {
                selected: initSelector && initSelector(object)
            }, s = 0; s < suggestedMenus.length; s++) selection[suggestedMenus[s].name] = suggestedMenus[s].filterFct(object);
            $scope.selectedIndex[object.id.dbid] = selection, $scope.elements.push({
                selected: selection.selected,
                object: object,
                id: object.id.dbid,
                showName: srvConfig.getItemName(object)
            });
        }
    }
    $scope.getTypeColor = function() {
        return c4p.Model.getTypeColor($scope.type);
    }, $scope.validateDialog = function() {
        for (var result = [], i = 0; i < $scope.elements.length; i++) {
            var item = $scope.elements[i];
            if (item.selected && (result.push(item.object), !multiple)) break;
        }
        $modalInstance.close(result);
    }, $scope.closeDialog = function() {
        $modalInstance.dismiss();
    }, $scope.createObject = function() {
        a4p.safeApply($scope, function() {
            createFct().then(function(newObject) {
                a4p.safeApply($scope, function() {
                    a4p.isDefined(newObject) && srvData.addAndSaveObject(newObject), !multiple && a4p.isDefined($scope.lastSelectedDbid) && $scope.toggleItem($scope.lastSelectedDbid);
                    for (var selection = {
                        selected: !0
                    }, s = 0; s < suggestedMenus.length; s++) selection[suggestedMenus[s].name] = suggestedMenus[s].filterFct(newObject);
                    $scope.selectedIndex[newObject.id.dbid] = selection, $scope.elements.push({
                        selected: !0,
                        object: newObject,
                        id: newObject.id.dbid,
                        showName: srvConfig.getItemName(newObject),
                        scrollTo: !0
                    }), $scope.lastSelectedDbid = newObject.id.dbid;
                });
            }, function() {});
        });
    }, $scope.toggleSuggestion = function(index) {
        0 > index || index >= $scope.suggestedOptions.length || ($scope.suggestedOptions[index].selected = !$scope.suggestedOptions[index].selected, 
        $scope.updateElements());
    }, $scope.toggleItem = function(dbid) {
        a4p.isUndefined($scope.selectedIndex[dbid]) || ($scope.selectedIndex[dbid].selected ? ($scope.selectedIndex[dbid].selected = !1, 
        $scope.lastSelectedDbid = void 0) : (!multiple && a4p.isDefined($scope.lastSelectedDbid) && ($scope.selectedIndex[$scope.lastSelectedDbid].selected = !1), 
        $scope.selectedIndex[dbid].selected = !0, $scope.lastSelectedDbid = dbid), $scope.updateElements());
    }, $scope.updateElements = function() {
        for (var noSuggestion = !0, j = 0; j < suggestedMenus.length; j++) if ($scope.suggestedOptions[j].selected) {
            noSuggestion = !1;
            break;
        }
        $scope.elements = [];
        for (var i = 0; i < objects.length; i++) {
            var object = objects[i];
            if (!initFilter || initFilter(object)) {
                var addObject = noSuggestion || $scope.selectedIndex[object.id.dbid].selected;
                if (!addObject) for (var s = 0; s < suggestedMenus.length; s++) if ($scope.suggestedOptions[s].selected && $scope.selectedIndex[object.id.dbid][suggestedMenus[s].name]) {
                    addObject = !0;
                    break;
                }
                addObject && $scope.elements.push({
                    selected: $scope.selectedIndex[object.id.dbid].selected,
                    object: object,
                    id: object.id.dbid,
                    showName: srvConfig.getItemName(object)
                });
            }
        }
    };
}

function ctrlSelectObjectsDialog($scope, srvLocale, srvData, srvConfig, type, initFilter, initSelector, multiple, suggestedMenus, createFct, $modalInstance) {
    $scope.srvLocale = srvLocale, $scope.type = type, $scope.typeColor = c4p.Model.getTypeColor(type), 
    $scope.multiple = multiple, $scope.createButton = createFct && "Document" != type, 
    $scope.showFilter = "", $scope.forceSearch = !0, $scope.suggestedOptions = [];
    for (var badgeClasses = [ "badge-success", "badge-warning", "badge-important", "badge-info", "badge-inverse" ], m = 0; m < suggestedMenus.length; m++) {
        var ibadge = m % 5;
        $scope.suggestedOptions.push({
            icon: badgeClasses[ibadge],
            name: suggestedMenus[m].name,
            selected: !1
        });
    }
    $scope.selectedIndex = {}, $scope.lastSelectedDbid = void 0, $scope.elements = [];
    for (var i = 0; i < srvData.currentItems[type].length; i++) {
        var object = srvData.currentItems[type][i];
        if (!initFilter || initFilter(object)) {
            for (var selection = {
                selected: initSelector && initSelector(object)
            }, s = 0; s < suggestedMenus.length; s++) selection[suggestedMenus[s].name] = suggestedMenus[s].filterFct(object);
            $scope.selectedIndex[object.id.dbid] = selection, $scope.elements.push({
                selected: selection.selected,
                object: object,
                id: object.id.dbid,
                showName: srvConfig.getItemName(object)
            });
        }
    }
    $scope.getTypeColor = function() {
        return c4p.Model.getTypeColor($scope.type);
    }, $scope.validateDialog = function() {
        for (var result = [], i = 0; i < $scope.elements.length; i++) {
            var item = $scope.elements[i];
            if (item.selected && (result.push(item.object), !multiple)) break;
        }
        $modalInstance.close(result);
    }, $scope.closeDialog = function() {
        $modalInstance.dismiss();
    }, $scope.createObject = function() {
        a4p.safeApply($scope, function() {
            createFct().then(function(newObject) {
                a4p.safeApply($scope, function() {
                    a4p.isDefined(newObject) && srvData.addAndSaveObject(newObject), !multiple && a4p.isDefined($scope.lastSelectedDbid) && $scope.toggleItem($scope.lastSelectedDbid);
                    for (var selection = {
                        selected: !0
                    }, s = 0; s < suggestedMenus.length; s++) selection[suggestedMenus[s].name] = suggestedMenus[s].filterFct(newObject);
                    $scope.selectedIndex[newObject.id.dbid] = selection, $scope.elements.push({
                        selected: !0,
                        object: newObject,
                        id: newObject.id.dbid,
                        showName: srvConfig.getItemName(newObject),
                        scrollTo: !0
                    }), $scope.lastSelectedDbid = newObject.id.dbid;
                });
            }, function() {});
        });
    }, $scope.toggleSuggestion = function(index) {
        0 > index || index >= $scope.suggestedOptions.length || ($scope.suggestedOptions[index].selected = !$scope.suggestedOptions[index].selected, 
        $scope.updateElements());
    }, $scope.toggleItem = function(dbid) {
        a4p.isUndefined($scope.selectedIndex[dbid]) || ($scope.selectedIndex[dbid].selected ? ($scope.selectedIndex[dbid].selected = !1, 
        $scope.lastSelectedDbid = void 0) : (!multiple && a4p.isDefined($scope.lastSelectedDbid) && ($scope.selectedIndex[$scope.lastSelectedDbid].selected = !1), 
        $scope.selectedIndex[dbid].selected = !0, $scope.lastSelectedDbid = dbid), $scope.updateElements());
    }, $scope.updateElements = function() {
        for (var noSuggestion = !0, j = 0; j < suggestedMenus.length; j++) if ($scope.suggestedOptions[j].selected) {
            noSuggestion = !1;
            break;
        }
        $scope.elements = [];
        for (var i = 0; i < srvData.currentItems[type].length; i++) {
            var object = srvData.currentItems[type][i];
            if (!initFilter || initFilter(object)) {
                var addObject = noSuggestion || $scope.selectedIndex[object.id.dbid].selected;
                if (!addObject) for (var s = 0; s < suggestedMenus.length; s++) if ($scope.suggestedOptions[s].selected && $scope.selectedIndex[object.id.dbid][suggestedMenus[s].name]) {
                    addObject = !0;
                    break;
                }
                addObject && $scope.elements.push({
                    selected: $scope.selectedIndex[object.id.dbid].selected,
                    object: object,
                    id: object.id.dbid,
                    showName: srvConfig.getItemName(object)
                });
            }
        }
    };
}

function ctrlShowImage($scope, imageData, $modalInstance) {
    $scope.sensePanel = null, $scope.imageList = [], $scope.imageIndex = -1, $scope.imageObject = null, 
    $scope.init = function(imageData) {
        Array.isArray(imageData) ? $scope.imageList = imageData : $scope.imageList.push(imageData), 
        $scope.documentIndex = 0, $scope.imageObject = $scope.imageList[0];
    }, $scope.setSensePanel = function(sense) {
        $scope.sensePanel = sense;
    }, $scope.close = function() {
        $modalInstance.dismiss();
    }, $scope.onImageSwipe = function(event) {
        "left" == event.side ? a4p.safeApply($scope, function() {
            console.log("swipe left"), $scope.nextImage();
        }) : "right" == event.side && a4p.safeApply($scope, function() {
            console.log("swipe right"), $scope.prevImage();
        });
    }, $scope.nextImage = function() {
        $scope.imageIndex++, $scope.imageIndex >= $scope.imageList.length && ($scope.imageIndex = 0), 
        console.log("Image index: " + $scope.documentIndex), $scope.imageObject = $scope.imageList[$scope.imageIndex], 
        $scope.sensePanel && ($scope.sensePanel.scroll.zoom(0, 0, 1, 300), $scope.sensePanel.sizeRefresh());
    }, $scope.prevImage = function() {
        $scope.imageIndex--, $scope.imageIndex < 0 && ($scope.imageIndex = $scope.imageList.length - 1), 
        console.log("Image index: " + $scope.imageIndex), $scope.imageObject = $scope.imageList[$scope.imageIndex], 
        $scope.sensePanel && ($scope.sensePanel.scroll.zoom(0, 0, 1, 300), $scope.sensePanel.sizeRefresh());
    }, $scope.init(imageData);
}

function ctrlTimeline($scope, srvData, srvLocale, srvConfig, srvNav, objectItem, $modalInstance, $filter) {
    $scope.objectName = srvConfig.getItemName(objectItem), $scope.close = function() {
        $modalInstance.dismiss();
    }, $scope.buildTimelineData = function() {
        var dataObject = {};
        if (!objectItem) return dataObject;
        var main_headline = $scope.objectName, main_descr = c4p.Model.getItemHtmlDescription(objectItem), main_thumb_url = objectItem.thumb_url, dates = [];
        if (a4p.isTrueOrNonEmpty(objectItem.created_date) && "Event" != objectItem.a4p_type) {
            var itemCreated = {
                startDate: $filter("date")(a4pDateParse(objectItem.created_date).getTime(), "yyyy, MM, dd"),
                headline: $scope.objectName,
                text: c4p.Model.getItemHtmlDescription(objectItem)
            };
            dates.push(itemCreated);
        }
        if ("Event" == objectItem.a4p_type) {
            var event = {
                startDate: $filter("date")(a4pDateParse(objectItem.date_start).getTime(), "yyyy, MM, dd, HH, mm, ss"),
                endDate: $filter("date")(a4pDateParse(objectItem.date_end).getTime(), "yyyy, MM, dd, HH, mm, ss"),
                headline: objectItem.name,
                text: objectItem.description
            };
            dates.push(event);
        }
        var timeline = {
            headline: main_headline,
            type: "default",
            text: main_descr,
            asset: {
                media: main_thumb_url
            },
            date: dates
        };
        return dataObject = {
            timeline: timeline
        };
    };
}

function addKey(items, prefix, title, key) {
    a4p.isDefined(key) && a4p.isUndefined(items.lists[key]) && (items.lists[key] = [], 
    items.keyes.push({
        prefix: prefix,
        title: title,
        value: key
    }));
}

function addItem(items, prefix, title, key, item) {
    a4p.isUndefined(key) ? items.others.push(item) : (a4p.isUndefined(items.lists[key]) && (items.lists[key] = [], 
    items.keyes.push({
        prefix: prefix,
        title: title,
        value: key
    })), items.lists[key].push(item));
}

function addOther(items, item) {
    items.others.push(item);
}

function handleOpenURL(url) {
    console.log("handleOpenURL " + url), window.setTimeout(function() {
        if (null != srvOpenUrlSingleton) srvOpenUrlSingleton.openUrl(url); else {
            var msg = "Application not yet started to import the file " + url;
            console.log(msg);
        }
    }, 1e3);
}

if (function(e, undefined) {
    function j(e) {
        var t = e.length, n = x.type(e);
        return x.isWindow(e) ? !1 : 1 === e.nodeType && t ? !0 : "array" === n || "function" !== n && (0 === t || "number" == typeof t && t > 0 && t - 1 in e);
    }
    function A(e) {
        var t = D[e] = {};
        return x.each(e.match(w) || [], function(e, n) {
            t[n] = !0;
        }), t;
    }
    function F() {
        Object.defineProperty(this.cache = {}, 0, {
            get: function() {
                return {};
            }
        }), this.expando = x.expando + Math.random();
    }
    function P(e, t, n) {
        var r;
        if (n === undefined && 1 === e.nodeType) if (r = "data-" + t.replace(O, "-$1").toLowerCase(), 
        n = e.getAttribute(r), "string" == typeof n) {
            try {
                n = "true" === n ? !0 : "false" === n ? !1 : "null" === n ? null : +n + "" === n ? +n : H.test(n) ? JSON.parse(n) : n;
            } catch (i) {}
            L.set(e, t, n);
        } else n = undefined;
        return n;
    }
    function U() {
        return !0;
    }
    function Y() {
        return !1;
    }
    function V() {
        try {
            return o.activeElement;
        } catch (e) {}
    }
    function Z(e, t) {
        for (;(e = e[t]) && 1 !== e.nodeType; ) ;
        return e;
    }
    function et(e, t, n) {
        if (x.isFunction(t)) return x.grep(e, function(e, r) {
            return !!t.call(e, r, e) !== n;
        });
        if (t.nodeType) return x.grep(e, function(e) {
            return e === t !== n;
        });
        if ("string" == typeof t) {
            if (G.test(t)) return x.filter(t, e, n);
            t = x.filter(t, e);
        }
        return x.grep(e, function(e) {
            return g.call(t, e) >= 0 !== n;
        });
    }
    function pt(e, t) {
        return x.nodeName(e, "table") && x.nodeName(1 === t.nodeType ? t : t.firstChild, "tr") ? e.getElementsByTagName("tbody")[0] || e.appendChild(e.ownerDocument.createElement("tbody")) : e;
    }
    function ft(e) {
        return e.type = (null !== e.getAttribute("type")) + "/" + e.type, e;
    }
    function ht(e) {
        var t = ut.exec(e.type);
        return t ? e.type = t[1] : e.removeAttribute("type"), e;
    }
    function dt(e, t) {
        for (var n = e.length, r = 0; n > r; r++) q.set(e[r], "globalEval", !t || q.get(t[r], "globalEval"));
    }
    function gt(e, t) {
        var n, r, i, o, s, a, u, l;
        if (1 === t.nodeType) {
            if (q.hasData(e) && (o = q.access(e), s = q.set(t, o), l = o.events)) {
                delete s.handle, s.events = {};
                for (i in l) for (n = 0, r = l[i].length; r > n; n++) x.event.add(t, i, l[i][n]);
            }
            L.hasData(e) && (a = L.access(e), u = x.extend({}, a), L.set(t, u));
        }
    }
    function mt(e, t) {
        var n = e.getElementsByTagName ? e.getElementsByTagName(t || "*") : e.querySelectorAll ? e.querySelectorAll(t || "*") : [];
        return t === undefined || t && x.nodeName(e, t) ? x.merge([ e ], n) : n;
    }
    function yt(e, t) {
        var n = t.nodeName.toLowerCase();
        "input" === n && ot.test(e.type) ? t.checked = e.checked : ("input" === n || "textarea" === n) && (t.defaultValue = e.defaultValue);
    }
    function At(e, t) {
        if (t in e) return t;
        for (var n = t.charAt(0).toUpperCase() + t.slice(1), r = t, i = Dt.length; i--; ) if (t = Dt[i] + n, 
        t in e) return t;
        return r;
    }
    function Lt(e, t) {
        return e = t || e, "none" === x.css(e, "display") || !x.contains(e.ownerDocument, e);
    }
    function qt(t) {
        return e.getComputedStyle(t, null);
    }
    function Ht(e, t) {
        for (var n, r, i, o = [], s = 0, a = e.length; a > s; s++) r = e[s], r.style && (o[s] = q.get(r, "olddisplay"), 
        n = r.style.display, t ? (o[s] || "none" !== n || (r.style.display = ""), "" === r.style.display && Lt(r) && (o[s] = q.access(r, "olddisplay", Rt(r.nodeName)))) : o[s] || (i = Lt(r), 
        (n && "none" !== n || !i) && q.set(r, "olddisplay", i ? n : x.css(r, "display"))));
        for (s = 0; a > s; s++) r = e[s], r.style && (t && "none" !== r.style.display && "" !== r.style.display || (r.style.display = t ? o[s] || "" : "none"));
        return e;
    }
    function Ot(e, t, n) {
        var r = Tt.exec(t);
        return r ? Math.max(0, r[1] - (n || 0)) + (r[2] || "px") : t;
    }
    function Ft(e, t, n, r, i) {
        for (var o = n === (r ? "border" : "content") ? 4 : "width" === t ? 1 : 0, s = 0; 4 > o; o += 2) "margin" === n && (s += x.css(e, n + jt[o], !0, i)), 
        r ? ("content" === n && (s -= x.css(e, "padding" + jt[o], !0, i)), "margin" !== n && (s -= x.css(e, "border" + jt[o] + "Width", !0, i))) : (s += x.css(e, "padding" + jt[o], !0, i), 
        "padding" !== n && (s += x.css(e, "border" + jt[o] + "Width", !0, i)));
        return s;
    }
    function Pt(e, t, n) {
        var r = !0, i = "width" === t ? e.offsetWidth : e.offsetHeight, o = qt(e), s = x.support.boxSizing && "border-box" === x.css(e, "boxSizing", !1, o);
        if (0 >= i || null == i) {
            if (i = vt(e, t, o), (0 > i || null == i) && (i = e.style[t]), Ct.test(i)) return i;
            r = s && (x.support.boxSizingReliable || i === e.style[t]), i = parseFloat(i) || 0;
        }
        return i + Ft(e, t, n || (s ? "border" : "content"), r, o) + "px";
    }
    function Rt(e) {
        var t = o, n = Nt[e];
        return n || (n = Mt(e, t), "none" !== n && n || (xt = (xt || x("<iframe frameborder='0' width='0' height='0'/>").css("cssText", "display:block !important")).appendTo(t.documentElement), 
        t = (xt[0].contentWindow || xt[0].contentDocument).document, t.write("<!doctype html><html><body>"), 
        t.close(), n = Mt(e, t), xt.detach()), Nt[e] = n), n;
    }
    function Mt(e, t) {
        var n = x(t.createElement(e)).appendTo(t.body), r = x.css(n[0], "display");
        return n.remove(), r;
    }
    function _t(e, t, n, r) {
        var i;
        if (x.isArray(t)) x.each(t, function(t, i) {
            n || $t.test(e) ? r(e, i) : _t(e + "[" + ("object" == typeof i ? t : "") + "]", i, n, r);
        }); else if (n || "object" !== x.type(t)) r(e, t); else for (i in t) _t(e + "[" + i + "]", t[i], n, r);
    }
    function un(e) {
        return function(t, n) {
            "string" != typeof t && (n = t, t = "*");
            var r, i = 0, o = t.toLowerCase().match(w) || [];
            if (x.isFunction(n)) for (;r = o[i++]; ) "+" === r[0] ? (r = r.slice(1) || "*", 
            (e[r] = e[r] || []).unshift(n)) : (e[r] = e[r] || []).push(n);
        };
    }
    function ln(e, t, n, r) {
        function s(a) {
            var u;
            return i[a] = !0, x.each(e[a] || [], function(e, a) {
                var l = a(t, n, r);
                return "string" != typeof l || o || i[l] ? o ? !(u = l) : undefined : (t.dataTypes.unshift(l), 
                s(l), !1);
            }), u;
        }
        var i = {}, o = e === on;
        return s(t.dataTypes[0]) || !i["*"] && s("*");
    }
    function cn(e, t) {
        var n, r, i = x.ajaxSettings.flatOptions || {};
        for (n in t) t[n] !== undefined && ((i[n] ? e : r || (r = {}))[n] = t[n]);
        return r && x.extend(!0, e, r), e;
    }
    function pn(e, t, n) {
        for (var r, i, o, s, a = e.contents, u = e.dataTypes; "*" === u[0]; ) u.shift(), 
        r === undefined && (r = e.mimeType || t.getResponseHeader("Content-Type"));
        if (r) for (i in a) if (a[i] && a[i].test(r)) {
            u.unshift(i);
            break;
        }
        if (u[0] in n) o = u[0]; else {
            for (i in n) {
                if (!u[0] || e.converters[i + " " + u[0]]) {
                    o = i;
                    break;
                }
                s || (s = i);
            }
            o = o || s;
        }
        return o ? (o !== u[0] && u.unshift(o), n[o]) : undefined;
    }
    function fn(e, t, n, r) {
        var i, o, s, a, u, l = {}, c = e.dataTypes.slice();
        if (c[1]) for (s in e.converters) l[s.toLowerCase()] = e.converters[s];
        for (o = c.shift(); o; ) if (e.responseFields[o] && (n[e.responseFields[o]] = t), 
        !u && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)), u = o, o = c.shift()) if ("*" === o) o = u; else if ("*" !== u && u !== o) {
            if (s = l[u + " " + o] || l["* " + o], !s) for (i in l) if (a = i.split(" "), a[1] === o && (s = l[u + " " + a[0]] || l["* " + a[0]])) {
                s === !0 ? s = l[i] : l[i] !== !0 && (o = a[0], c.unshift(a[1]));
                break;
            }
            if (s !== !0) if (s && e["throws"]) t = s(t); else try {
                t = s(t);
            } catch (p) {
                return {
                    state: "parsererror",
                    error: s ? p : "No conversion from " + u + " to " + o
                };
            }
        }
        return {
            state: "success",
            data: t
        };
    }
    function En() {
        return setTimeout(function() {
            xn = undefined;
        }), xn = x.now();
    }
    function Sn(e, t, n) {
        for (var r, i = (Nn[t] || []).concat(Nn["*"]), o = 0, s = i.length; s > o; o++) if (r = i[o].call(n, t, e)) return r;
    }
    function jn(e, t, n) {
        var r, i, o = 0, s = kn.length, a = x.Deferred().always(function() {
            delete u.elem;
        }), u = function() {
            if (i) return !1;
            for (var t = xn || En(), n = Math.max(0, l.startTime + l.duration - t), r = n / l.duration || 0, o = 1 - r, s = 0, u = l.tweens.length; u > s; s++) l.tweens[s].run(o);
            return a.notifyWith(e, [ l, o, n ]), 1 > o && u ? n : (a.resolveWith(e, [ l ]), 
            !1);
        }, l = a.promise({
            elem: e,
            props: x.extend({}, t),
            opts: x.extend(!0, {
                specialEasing: {}
            }, n),
            originalProperties: t,
            originalOptions: n,
            startTime: xn || En(),
            duration: n.duration,
            tweens: [],
            createTween: function(t, n) {
                var r = x.Tween(e, l.opts, t, n, l.opts.specialEasing[t] || l.opts.easing);
                return l.tweens.push(r), r;
            },
            stop: function(t) {
                var n = 0, r = t ? l.tweens.length : 0;
                if (i) return this;
                for (i = !0; r > n; n++) l.tweens[n].run(1);
                return t ? a.resolveWith(e, [ l, t ]) : a.rejectWith(e, [ l, t ]), this;
            }
        }), c = l.props;
        for (Dn(c, l.opts.specialEasing); s > o; o++) if (r = kn[o].call(l, e, c, l.opts)) return r;
        return x.map(c, Sn, l), x.isFunction(l.opts.start) && l.opts.start.call(e, l), x.fx.timer(x.extend(u, {
            elem: e,
            anim: l,
            queue: l.opts.queue
        })), l.progress(l.opts.progress).done(l.opts.done, l.opts.complete).fail(l.opts.fail).always(l.opts.always);
    }
    function Dn(e, t) {
        var n, r, i, o, s;
        for (n in e) if (r = x.camelCase(n), i = t[r], o = e[n], x.isArray(o) && (i = o[1], 
        o = e[n] = o[0]), n !== r && (e[r] = o, delete e[n]), s = x.cssHooks[r], s && "expand" in s) {
            o = s.expand(o), delete e[r];
            for (n in o) n in e || (e[n] = o[n], t[n] = i);
        } else t[r] = i;
    }
    function An(e, t, n) {
        var r, i, o, s, a, u, l = this, c = {}, p = e.style, f = e.nodeType && Lt(e), h = q.get(e, "fxshow");
        n.queue || (a = x._queueHooks(e, "fx"), null == a.unqueued && (a.unqueued = 0, u = a.empty.fire, 
        a.empty.fire = function() {
            a.unqueued || u();
        }), a.unqueued++, l.always(function() {
            l.always(function() {
                a.unqueued--, x.queue(e, "fx").length || a.empty.fire();
            });
        })), 1 === e.nodeType && ("height" in t || "width" in t) && (n.overflow = [ p.overflow, p.overflowX, p.overflowY ], 
        "inline" === x.css(e, "display") && "none" === x.css(e, "float") && (p.display = "inline-block")), 
        n.overflow && (p.overflow = "hidden", l.always(function() {
            p.overflow = n.overflow[0], p.overflowX = n.overflow[1], p.overflowY = n.overflow[2];
        }));
        for (r in t) if (i = t[r], wn.exec(i)) {
            if (delete t[r], o = o || "toggle" === i, i === (f ? "hide" : "show")) {
                if ("show" !== i || !h || h[r] === undefined) continue;
                f = !0;
            }
            c[r] = h && h[r] || x.style(e, r);
        }
        if (!x.isEmptyObject(c)) {
            h ? "hidden" in h && (f = h.hidden) : h = q.access(e, "fxshow", {}), o && (h.hidden = !f), 
            f ? x(e).show() : l.done(function() {
                x(e).hide();
            }), l.done(function() {
                var t;
                q.remove(e, "fxshow");
                for (t in c) x.style(e, t, c[t]);
            });
            for (r in c) s = Sn(f ? h[r] : 0, r, l), r in h || (h[r] = s.start, f && (s.end = s.start, 
            s.start = "width" === r || "height" === r ? 1 : 0));
        }
    }
    function Ln(e, t, n, r, i) {
        return new Ln.prototype.init(e, t, n, r, i);
    }
    function qn(e, t) {
        var n, r = {
            height: e
        }, i = 0;
        for (t = t ? 1 : 0; 4 > i; i += 2 - t) n = jt[i], r["margin" + n] = r["padding" + n] = e;
        return t && (r.opacity = r.width = e), r;
    }
    function Hn(e) {
        return x.isWindow(e) ? e : 9 === e.nodeType && e.defaultView;
    }
    var t, n, r = typeof undefined, i = e.location, o = e.document, s = o.documentElement, a = e.jQuery, u = e.$, l = {}, c = [], p = "2.0.3", f = c.concat, h = c.push, d = c.slice, g = c.indexOf, m = l.toString, y = l.hasOwnProperty, v = p.trim, x = function(e, n) {
        return new x.fn.init(e, n, t);
    }, b = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, w = /\S+/g, T = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, C = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, k = /^-ms-/, N = /-([\da-z])/gi, E = function(e, t) {
        return t.toUpperCase();
    }, S = function() {
        o.removeEventListener("DOMContentLoaded", S, !1), e.removeEventListener("load", S, !1), 
        x.ready();
    };
    x.fn = x.prototype = {
        jquery: p,
        constructor: x,
        init: function(e, t, n) {
            var r, i;
            if (!e) return this;
            if ("string" == typeof e) {
                if (r = "<" === e.charAt(0) && ">" === e.charAt(e.length - 1) && e.length >= 3 ? [ null, e, null ] : T.exec(e), 
                !r || !r[1] && t) return !t || t.jquery ? (t || n).find(e) : this.constructor(t).find(e);
                if (r[1]) {
                    if (t = t instanceof x ? t[0] : t, x.merge(this, x.parseHTML(r[1], t && t.nodeType ? t.ownerDocument || t : o, !0)), 
                    C.test(r[1]) && x.isPlainObject(t)) for (r in t) x.isFunction(this[r]) ? this[r](t[r]) : this.attr(r, t[r]);
                    return this;
                }
                return i = o.getElementById(r[2]), i && i.parentNode && (this.length = 1, this[0] = i), 
                this.context = o, this.selector = e, this;
            }
            return e.nodeType ? (this.context = this[0] = e, this.length = 1, this) : x.isFunction(e) ? n.ready(e) : (e.selector !== undefined && (this.selector = e.selector, 
            this.context = e.context), x.makeArray(e, this));
        },
        selector: "",
        length: 0,
        toArray: function() {
            return d.call(this);
        },
        get: function(e) {
            return null == e ? this.toArray() : 0 > e ? this[this.length + e] : this[e];
        },
        pushStack: function(e) {
            var t = x.merge(this.constructor(), e);
            return t.prevObject = this, t.context = this.context, t;
        },
        each: function(e, t) {
            return x.each(this, e, t);
        },
        ready: function(e) {
            return x.ready.promise().done(e), this;
        },
        slice: function() {
            return this.pushStack(d.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        eq: function(e) {
            var t = this.length, n = +e + (0 > e ? t : 0);
            return this.pushStack(n >= 0 && t > n ? [ this[n] ] : []);
        },
        map: function(e) {
            return this.pushStack(x.map(this, function(t, n) {
                return e.call(t, n, t);
            }));
        },
        end: function() {
            return this.prevObject || this.constructor(null);
        },
        push: h,
        sort: [].sort,
        splice: [].splice
    }, x.fn.init.prototype = x.fn, x.extend = x.fn.extend = function() {
        var e, t, n, r, i, o, s = arguments[0] || {}, a = 1, u = arguments.length, l = !1;
        for ("boolean" == typeof s && (l = s, s = arguments[1] || {}, a = 2), "object" == typeof s || x.isFunction(s) || (s = {}), 
        u === a && (s = this, --a); u > a; a++) if (null != (e = arguments[a])) for (t in e) n = s[t], 
        r = e[t], s !== r && (l && r && (x.isPlainObject(r) || (i = x.isArray(r))) ? (i ? (i = !1, 
        o = n && x.isArray(n) ? n : []) : o = n && x.isPlainObject(n) ? n : {}, s[t] = x.extend(l, o, r)) : r !== undefined && (s[t] = r));
        return s;
    }, x.extend({
        expando: "jQuery" + (p + Math.random()).replace(/\D/g, ""),
        noConflict: function(t) {
            return e.$ === x && (e.$ = u), t && e.jQuery === x && (e.jQuery = a), x;
        },
        isReady: !1,
        readyWait: 1,
        holdReady: function(e) {
            e ? x.readyWait++ : x.ready(!0);
        },
        ready: function(e) {
            (e === !0 ? --x.readyWait : x.isReady) || (x.isReady = !0, e !== !0 && --x.readyWait > 0 || (n.resolveWith(o, [ x ]), 
            x.fn.trigger && x(o).trigger("ready").off("ready")));
        },
        isFunction: function(e) {
            return "function" === x.type(e);
        },
        isArray: Array.isArray,
        isWindow: function(e) {
            return null != e && e === e.window;
        },
        isNumeric: function(e) {
            return !isNaN(parseFloat(e)) && isFinite(e);
        },
        type: function(e) {
            return null == e ? e + "" : "object" == typeof e || "function" == typeof e ? l[m.call(e)] || "object" : typeof e;
        },
        isPlainObject: function(e) {
            if ("object" !== x.type(e) || e.nodeType || x.isWindow(e)) return !1;
            try {
                if (e.constructor && !y.call(e.constructor.prototype, "isPrototypeOf")) return !1;
            } catch (t) {
                return !1;
            }
            return !0;
        },
        isEmptyObject: function(e) {
            var t;
            for (t in e) return !1;
            return !0;
        },
        error: function(e) {
            throw Error(e);
        },
        parseHTML: function(e, t, n) {
            if (!e || "string" != typeof e) return null;
            "boolean" == typeof t && (n = t, t = !1), t = t || o;
            var r = C.exec(e), i = !n && [];
            return r ? [ t.createElement(r[1]) ] : (r = x.buildFragment([ e ], t, i), i && x(i).remove(), 
            x.merge([], r.childNodes));
        },
        parseJSON: JSON.parse,
        parseXML: function(e) {
            var t, n;
            if (!e || "string" != typeof e) return null;
            try {
                n = new DOMParser(), t = n.parseFromString(e, "text/xml");
            } catch (r) {
                t = undefined;
            }
            return (!t || t.getElementsByTagName("parsererror").length) && x.error("Invalid XML: " + e), 
            t;
        },
        noop: function() {},
        globalEval: function(e) {
            var t, n = eval;
            e = x.trim(e), e && (1 === e.indexOf("use strict") ? (t = o.createElement("script"), 
            t.text = e, o.head.appendChild(t).parentNode.removeChild(t)) : n(e));
        },
        camelCase: function(e) {
            return e.replace(k, "ms-").replace(N, E);
        },
        nodeName: function(e, t) {
            return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase();
        },
        each: function(e, t, n) {
            var r, i = 0, o = e.length, s = j(e);
            if (n) {
                if (s) for (;o > i && (r = t.apply(e[i], n), r !== !1); i++) ; else for (i in e) if (r = t.apply(e[i], n), 
                r === !1) break;
            } else if (s) for (;o > i && (r = t.call(e[i], i, e[i]), r !== !1); i++) ; else for (i in e) if (r = t.call(e[i], i, e[i]), 
            r === !1) break;
            return e;
        },
        trim: function(e) {
            return null == e ? "" : v.call(e);
        },
        makeArray: function(e, t) {
            var n = t || [];
            return null != e && (j(Object(e)) ? x.merge(n, "string" == typeof e ? [ e ] : e) : h.call(n, e)), 
            n;
        },
        inArray: function(e, t, n) {
            return null == t ? -1 : g.call(t, e, n);
        },
        merge: function(e, t) {
            var n = t.length, r = e.length, i = 0;
            if ("number" == typeof n) for (;n > i; i++) e[r++] = t[i]; else for (;t[i] !== undefined; ) e[r++] = t[i++];
            return e.length = r, e;
        },
        grep: function(e, t, n) {
            var r, i = [], o = 0, s = e.length;
            for (n = !!n; s > o; o++) r = !!t(e[o], o), n !== r && i.push(e[o]);
            return i;
        },
        map: function(e, t, n) {
            var r, i = 0, o = e.length, s = j(e), a = [];
            if (s) for (;o > i; i++) r = t(e[i], i, n), null != r && (a[a.length] = r); else for (i in e) r = t(e[i], i, n), 
            null != r && (a[a.length] = r);
            return f.apply([], a);
        },
        guid: 1,
        proxy: function(e, t) {
            var n, r, i;
            return "string" == typeof t && (n = e[t], t = e, e = n), x.isFunction(e) ? (r = d.call(arguments, 2), 
            i = function() {
                return e.apply(t || this, r.concat(d.call(arguments)));
            }, i.guid = e.guid = e.guid || x.guid++, i) : undefined;
        },
        access: function(e, t, n, r, i, o, s) {
            var a = 0, u = e.length, l = null == n;
            if ("object" === x.type(n)) {
                i = !0;
                for (a in n) x.access(e, t, a, n[a], !0, o, s);
            } else if (r !== undefined && (i = !0, x.isFunction(r) || (s = !0), l && (s ? (t.call(e, r), 
            t = null) : (l = t, t = function(e, t, n) {
                return l.call(x(e), n);
            })), t)) for (;u > a; a++) t(e[a], n, s ? r : r.call(e[a], a, t(e[a], n)));
            return i ? e : l ? t.call(e) : u ? t(e[0], n) : o;
        },
        now: Date.now,
        swap: function(e, t, n, r) {
            var i, o, s = {};
            for (o in t) s[o] = e.style[o], e.style[o] = t[o];
            i = n.apply(e, r || []);
            for (o in t) e.style[o] = s[o];
            return i;
        }
    }), x.ready.promise = function(t) {
        return n || (n = x.Deferred(), "complete" === o.readyState ? setTimeout(x.ready) : (o.addEventListener("DOMContentLoaded", S, !1), 
        e.addEventListener("load", S, !1))), n.promise(t);
    }, x.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(e, t) {
        l["[object " + t + "]"] = t.toLowerCase();
    }), t = x(o), function(e, undefined) {
        function ot(e, t, r, i) {
            var o, s, a, u, l, f, g, m, x, w;
            if ((t ? t.ownerDocument || t : b) !== p && c(t), t = t || p, r = r || [], !e || "string" != typeof e) return r;
            if (1 !== (u = t.nodeType) && 9 !== u) return [];
            if (h && !i) {
                if (o = K.exec(e)) if (a = o[1]) {
                    if (9 === u) {
                        if (s = t.getElementById(a), !s || !s.parentNode) return r;
                        if (s.id === a) return r.push(s), r;
                    } else if (t.ownerDocument && (s = t.ownerDocument.getElementById(a)) && y(t, s) && s.id === a) return r.push(s), 
                    r;
                } else {
                    if (o[2]) return O.apply(r, t.getElementsByTagName(e)), r;
                    if ((a = o[3]) && n.getElementsByClassName && t.getElementsByClassName) return O.apply(r, t.getElementsByClassName(a)), 
                    r;
                }
                if (n.qsa && (!d || !d.test(e))) {
                    if (m = g = v, x = t, w = 9 === u && e, 1 === u && "object" !== t.nodeName.toLowerCase()) {
                        for (f = gt(e), (g = t.getAttribute("id")) ? m = g.replace(tt, "\\$&") : t.setAttribute("id", m), 
                        m = "[id='" + m + "'] ", l = f.length; l--; ) f[l] = m + mt(f[l]);
                        x = U.test(e) && t.parentNode || t, w = f.join(",");
                    }
                    if (w) try {
                        return O.apply(r, x.querySelectorAll(w)), r;
                    } catch (T) {} finally {
                        g || t.removeAttribute("id");
                    }
                }
            }
            return kt(e.replace(z, "$1"), t, r, i);
        }
        function st() {
            function t(n, r) {
                return e.push(n += " ") > i.cacheLength && delete t[e.shift()], t[n] = r;
            }
            var e = [];
            return t;
        }
        function at(e) {
            return e[v] = !0, e;
        }
        function ut(e) {
            var t = p.createElement("div");
            try {
                return !!e(t);
            } catch (n) {
                return !1;
            } finally {
                t.parentNode && t.parentNode.removeChild(t), t = null;
            }
        }
        function lt(e, t) {
            for (var n = e.split("|"), r = e.length; r--; ) i.attrHandle[n[r]] = t;
        }
        function ct(e, t) {
            var n = t && e, r = n && 1 === e.nodeType && 1 === t.nodeType && (~t.sourceIndex || D) - (~e.sourceIndex || D);
            if (r) return r;
            if (n) for (;n = n.nextSibling; ) if (n === t) return -1;
            return e ? 1 : -1;
        }
        function pt(e) {
            return function(t) {
                var n = t.nodeName.toLowerCase();
                return "input" === n && t.type === e;
            };
        }
        function ft(e) {
            return function(t) {
                var n = t.nodeName.toLowerCase();
                return ("input" === n || "button" === n) && t.type === e;
            };
        }
        function ht(e) {
            return at(function(t) {
                return t = +t, at(function(n, r) {
                    for (var i, o = e([], n.length, t), s = o.length; s--; ) n[i = o[s]] && (n[i] = !(r[i] = n[i]));
                });
            });
        }
        function dt() {}
        function gt(e, t) {
            var n, r, o, s, a, u, l, c = k[e + " "];
            if (c) return t ? 0 : c.slice(0);
            for (a = e, u = [], l = i.preFilter; a; ) {
                (!n || (r = _.exec(a))) && (r && (a = a.slice(r[0].length) || a), u.push(o = [])), 
                n = !1, (r = X.exec(a)) && (n = r.shift(), o.push({
                    value: n,
                    type: r[0].replace(z, " ")
                }), a = a.slice(n.length));
                for (s in i.filter) !(r = J[s].exec(a)) || l[s] && !(r = l[s](r)) || (n = r.shift(), 
                o.push({
                    value: n,
                    type: s,
                    matches: r
                }), a = a.slice(n.length));
                if (!n) break;
            }
            return t ? a.length : a ? ot.error(e) : k(e, u).slice(0);
        }
        function mt(e) {
            for (var t = 0, n = e.length, r = ""; n > t; t++) r += e[t].value;
            return r;
        }
        function yt(e, t, n) {
            var i = t.dir, o = n && "parentNode" === i, s = T++;
            return t.first ? function(t, n, r) {
                for (;t = t[i]; ) if (1 === t.nodeType || o) return e(t, n, r);
            } : function(t, n, a) {
                var u, l, c, p = w + " " + s;
                if (a) {
                    for (;t = t[i]; ) if ((1 === t.nodeType || o) && e(t, n, a)) return !0;
                } else for (;t = t[i]; ) if (1 === t.nodeType || o) if (c = t[v] || (t[v] = {}), 
                (l = c[i]) && l[0] === p) {
                    if ((u = l[1]) === !0 || u === r) return u === !0;
                } else if (l = c[i] = [ p ], l[1] = e(t, n, a) || r, l[1] === !0) return !0;
            };
        }
        function vt(e) {
            return e.length > 1 ? function(t, n, r) {
                for (var i = e.length; i--; ) if (!e[i](t, n, r)) return !1;
                return !0;
            } : e[0];
        }
        function xt(e, t, n, r, i) {
            for (var o, s = [], a = 0, u = e.length, l = null != t; u > a; a++) (o = e[a]) && (!n || n(o, r, i)) && (s.push(o), 
            l && t.push(a));
            return s;
        }
        function bt(e, t, n, r, i, o) {
            return r && !r[v] && (r = bt(r)), i && !i[v] && (i = bt(i, o)), at(function(o, s, a, u) {
                var l, c, p, f = [], h = [], d = s.length, g = o || Ct(t || "*", a.nodeType ? [ a ] : a, []), m = !e || !o && t ? g : xt(g, f, e, a, u), y = n ? i || (o ? e : d || r) ? [] : s : m;
                if (n && n(m, y, a, u), r) for (l = xt(y, h), r(l, [], a, u), c = l.length; c--; ) (p = l[c]) && (y[h[c]] = !(m[h[c]] = p));
                if (o) {
                    if (i || e) {
                        if (i) {
                            for (l = [], c = y.length; c--; ) (p = y[c]) && l.push(m[c] = p);
                            i(null, y = [], l, u);
                        }
                        for (c = y.length; c--; ) (p = y[c]) && (l = i ? P.call(o, p) : f[c]) > -1 && (o[l] = !(s[l] = p));
                    }
                } else y = xt(y === s ? y.splice(d, y.length) : y), i ? i(null, s, y, u) : O.apply(s, y);
            });
        }
        function wt(e) {
            for (var t, n, r, o = e.length, s = i.relative[e[0].type], a = s || i.relative[" "], l = s ? 1 : 0, c = yt(function(e) {
                return e === t;
            }, a, !0), p = yt(function(e) {
                return P.call(t, e) > -1;
            }, a, !0), f = [ function(e, n, r) {
                return !s && (r || n !== u) || ((t = n).nodeType ? c(e, n, r) : p(e, n, r));
            } ]; o > l; l++) if (n = i.relative[e[l].type]) f = [ yt(vt(f), n) ]; else {
                if (n = i.filter[e[l].type].apply(null, e[l].matches), n[v]) {
                    for (r = ++l; o > r && !i.relative[e[r].type]; r++) ;
                    return bt(l > 1 && vt(f), l > 1 && mt(e.slice(0, l - 1).concat({
                        value: " " === e[l - 2].type ? "*" : ""
                    })).replace(z, "$1"), n, r > l && wt(e.slice(l, r)), o > r && wt(e = e.slice(r)), o > r && mt(e));
                }
                f.push(n);
            }
            return vt(f);
        }
        function Tt(e, t) {
            var n = 0, o = t.length > 0, s = e.length > 0, a = function(a, l, c, f, h) {
                var d, g, m, y = [], v = 0, x = "0", b = a && [], T = null != h, C = u, k = a || s && i.find.TAG("*", h && l.parentNode || l), N = w += null == C ? 1 : Math.random() || .1;
                for (T && (u = l !== p && l, r = n); null != (d = k[x]); x++) {
                    if (s && d) {
                        for (g = 0; m = e[g++]; ) if (m(d, l, c)) {
                            f.push(d);
                            break;
                        }
                        T && (w = N, r = ++n);
                    }
                    o && ((d = !m && d) && v--, a && b.push(d));
                }
                if (v += x, o && x !== v) {
                    for (g = 0; m = t[g++]; ) m(b, y, l, c);
                    if (a) {
                        if (v > 0) for (;x--; ) b[x] || y[x] || (y[x] = q.call(f));
                        y = xt(y);
                    }
                    O.apply(f, y), T && !a && y.length > 0 && v + t.length > 1 && ot.uniqueSort(f);
                }
                return T && (w = N, u = C), b;
            };
            return o ? at(a) : a;
        }
        function Ct(e, t, n) {
            for (var r = 0, i = t.length; i > r; r++) ot(e, t[r], n);
            return n;
        }
        function kt(e, t, r, o) {
            var s, u, l, c, p, f = gt(e);
            if (!o && 1 === f.length) {
                if (u = f[0] = f[0].slice(0), u.length > 2 && "ID" === (l = u[0]).type && n.getById && 9 === t.nodeType && h && i.relative[u[1].type]) {
                    if (t = (i.find.ID(l.matches[0].replace(nt, rt), t) || [])[0], !t) return r;
                    e = e.slice(u.shift().value.length);
                }
                for (s = J.needsContext.test(e) ? 0 : u.length; s-- && (l = u[s], !i.relative[c = l.type]); ) if ((p = i.find[c]) && (o = p(l.matches[0].replace(nt, rt), U.test(u[0].type) && t.parentNode || t))) {
                    if (u.splice(s, 1), e = o.length && mt(u), !e) return O.apply(r, o), r;
                    break;
                }
            }
            return a(e, f)(o, t, !h, r, U.test(e)), r;
        }
        var t, n, r, i, o, s, a, u, l, c, p, f, h, d, g, m, y, v = "sizzle" + -new Date(), b = e.document, w = 0, T = 0, C = st(), k = st(), N = st(), E = !1, S = function(e, t) {
            return e === t ? (E = !0, 0) : 0;
        }, j = typeof undefined, D = 1 << 31, A = {}.hasOwnProperty, L = [], q = L.pop, H = L.push, O = L.push, F = L.slice, P = L.indexOf || function(e) {
            for (var t = 0, n = this.length; n > t; t++) if (this[t] === e) return t;
            return -1;
        }, R = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", M = "[\\x20\\t\\r\\n\\f]", W = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", $ = W.replace("w", "w#"), B = "\\[" + M + "*(" + W + ")" + M + "*(?:([*^$|!~]?=)" + M + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + $ + ")|)|)" + M + "*\\]", I = ":(" + W + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + B.replace(3, 8) + ")*)|.*)\\)|)", z = RegExp("^" + M + "+|((?:^|[^\\\\])(?:\\\\.)*)" + M + "+$", "g"), _ = RegExp("^" + M + "*," + M + "*"), X = RegExp("^" + M + "*([>+~]|" + M + ")" + M + "*"), U = RegExp(M + "*[+~]"), Y = RegExp("=" + M + "*([^\\]'\"]*)" + M + "*\\]", "g"), V = RegExp(I), G = RegExp("^" + $ + "$"), J = {
            ID: RegExp("^#(" + W + ")"),
            CLASS: RegExp("^\\.(" + W + ")"),
            TAG: RegExp("^(" + W.replace("w", "w*") + ")"),
            ATTR: RegExp("^" + B),
            PSEUDO: RegExp("^" + I),
            CHILD: RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + M + "*(even|odd|(([+-]|)(\\d*)n|)" + M + "*(?:([+-]|)" + M + "*(\\d+)|))" + M + "*\\)|)", "i"),
            bool: RegExp("^(?:" + R + ")$", "i"),
            needsContext: RegExp("^" + M + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + M + "*((?:-\\d)?\\d*)" + M + "*\\)|)(?=[^-]|$)", "i")
        }, Q = /^[^{]+\{\s*\[native \w/, K = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, Z = /^(?:input|select|textarea|button)$/i, et = /^h\d$/i, tt = /'|\\/g, nt = RegExp("\\\\([\\da-f]{1,6}" + M + "?|(" + M + ")|.)", "ig"), rt = function(e, t, n) {
            var r = "0x" + t - 65536;
            return r !== r || n ? t : 0 > r ? String.fromCharCode(r + 65536) : String.fromCharCode(55296 | r >> 10, 56320 | 1023 & r);
        };
        try {
            O.apply(L = F.call(b.childNodes), b.childNodes), L[b.childNodes.length].nodeType;
        } catch (it) {
            O = {
                apply: L.length ? function(e, t) {
                    H.apply(e, F.call(t));
                } : function(e, t) {
                    for (var n = e.length, r = 0; e[n++] = t[r++]; ) ;
                    e.length = n - 1;
                }
            };
        }
        s = ot.isXML = function(e) {
            var t = e && (e.ownerDocument || e).documentElement;
            return t ? "HTML" !== t.nodeName : !1;
        }, n = ot.support = {}, c = ot.setDocument = function(e) {
            var t = e ? e.ownerDocument || e : b, r = t.defaultView;
            return t !== p && 9 === t.nodeType && t.documentElement ? (p = t, f = t.documentElement, 
            h = !s(t), r && r.attachEvent && r !== r.top && r.attachEvent("onbeforeunload", function() {
                c();
            }), n.attributes = ut(function(e) {
                return e.className = "i", !e.getAttribute("className");
            }), n.getElementsByTagName = ut(function(e) {
                return e.appendChild(t.createComment("")), !e.getElementsByTagName("*").length;
            }), n.getElementsByClassName = ut(function(e) {
                return e.innerHTML = "<div class='a'></div><div class='a i'></div>", e.firstChild.className = "i", 
                2 === e.getElementsByClassName("i").length;
            }), n.getById = ut(function(e) {
                return f.appendChild(e).id = v, !t.getElementsByName || !t.getElementsByName(v).length;
            }), n.getById ? (i.find.ID = function(e, t) {
                if (typeof t.getElementById !== j && h) {
                    var n = t.getElementById(e);
                    return n && n.parentNode ? [ n ] : [];
                }
            }, i.filter.ID = function(e) {
                var t = e.replace(nt, rt);
                return function(e) {
                    return e.getAttribute("id") === t;
                };
            }) : (delete i.find.ID, i.filter.ID = function(e) {
                var t = e.replace(nt, rt);
                return function(e) {
                    var n = typeof e.getAttributeNode !== j && e.getAttributeNode("id");
                    return n && n.value === t;
                };
            }), i.find.TAG = n.getElementsByTagName ? function(e, t) {
                return typeof t.getElementsByTagName !== j ? t.getElementsByTagName(e) : undefined;
            } : function(e, t) {
                var n, r = [], i = 0, o = t.getElementsByTagName(e);
                if ("*" === e) {
                    for (;n = o[i++]; ) 1 === n.nodeType && r.push(n);
                    return r;
                }
                return o;
            }, i.find.CLASS = n.getElementsByClassName && function(e, t) {
                return typeof t.getElementsByClassName !== j && h ? t.getElementsByClassName(e) : undefined;
            }, g = [], d = [], (n.qsa = Q.test(t.querySelectorAll)) && (ut(function(e) {
                e.innerHTML = "<select><option selected=''></option></select>", e.querySelectorAll("[selected]").length || d.push("\\[" + M + "*(?:value|" + R + ")"), 
                e.querySelectorAll(":checked").length || d.push(":checked");
            }), ut(function(e) {
                var n = t.createElement("input");
                n.setAttribute("type", "hidden"), e.appendChild(n).setAttribute("t", ""), e.querySelectorAll("[t^='']").length && d.push("[*^$]=" + M + "*(?:''|\"\")"), 
                e.querySelectorAll(":enabled").length || d.push(":enabled", ":disabled"), e.querySelectorAll("*,:x"), 
                d.push(",.*:");
            })), (n.matchesSelector = Q.test(m = f.webkitMatchesSelector || f.mozMatchesSelector || f.oMatchesSelector || f.msMatchesSelector)) && ut(function(e) {
                n.disconnectedMatch = m.call(e, "div"), m.call(e, "[s!='']:x"), g.push("!=", I);
            }), d = d.length && RegExp(d.join("|")), g = g.length && RegExp(g.join("|")), y = Q.test(f.contains) || f.compareDocumentPosition ? function(e, t) {
                var n = 9 === e.nodeType ? e.documentElement : e, r = t && t.parentNode;
                return e === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r)));
            } : function(e, t) {
                if (t) for (;t = t.parentNode; ) if (t === e) return !0;
                return !1;
            }, S = f.compareDocumentPosition ? function(e, r) {
                if (e === r) return E = !0, 0;
                var i = r.compareDocumentPosition && e.compareDocumentPosition && e.compareDocumentPosition(r);
                return i ? 1 & i || !n.sortDetached && r.compareDocumentPosition(e) === i ? e === t || y(b, e) ? -1 : r === t || y(b, r) ? 1 : l ? P.call(l, e) - P.call(l, r) : 0 : 4 & i ? -1 : 1 : e.compareDocumentPosition ? -1 : 1;
            } : function(e, n) {
                var r, i = 0, o = e.parentNode, s = n.parentNode, a = [ e ], u = [ n ];
                if (e === n) return E = !0, 0;
                if (!o || !s) return e === t ? -1 : n === t ? 1 : o ? -1 : s ? 1 : l ? P.call(l, e) - P.call(l, n) : 0;
                if (o === s) return ct(e, n);
                for (r = e; r = r.parentNode; ) a.unshift(r);
                for (r = n; r = r.parentNode; ) u.unshift(r);
                for (;a[i] === u[i]; ) i++;
                return i ? ct(a[i], u[i]) : a[i] === b ? -1 : u[i] === b ? 1 : 0;
            }, t) : p;
        }, ot.matches = function(e, t) {
            return ot(e, null, null, t);
        }, ot.matchesSelector = function(e, t) {
            if ((e.ownerDocument || e) !== p && c(e), t = t.replace(Y, "='$1']"), !(!n.matchesSelector || !h || g && g.test(t) || d && d.test(t))) try {
                var r = m.call(e, t);
                if (r || n.disconnectedMatch || e.document && 11 !== e.document.nodeType) return r;
            } catch (i) {}
            return ot(t, p, null, [ e ]).length > 0;
        }, ot.contains = function(e, t) {
            return (e.ownerDocument || e) !== p && c(e), y(e, t);
        }, ot.attr = function(e, t) {
            (e.ownerDocument || e) !== p && c(e);
            var r = i.attrHandle[t.toLowerCase()], o = r && A.call(i.attrHandle, t.toLowerCase()) ? r(e, t, !h) : undefined;
            return o === undefined ? n.attributes || !h ? e.getAttribute(t) : (o = e.getAttributeNode(t)) && o.specified ? o.value : null : o;
        }, ot.error = function(e) {
            throw Error("Syntax error, unrecognized expression: " + e);
        }, ot.uniqueSort = function(e) {
            var t, r = [], i = 0, o = 0;
            if (E = !n.detectDuplicates, l = !n.sortStable && e.slice(0), e.sort(S), E) {
                for (;t = e[o++]; ) t === e[o] && (i = r.push(o));
                for (;i--; ) e.splice(r[i], 1);
            }
            return e;
        }, o = ot.getText = function(e) {
            var t, n = "", r = 0, i = e.nodeType;
            if (i) {
                if (1 === i || 9 === i || 11 === i) {
                    if ("string" == typeof e.textContent) return e.textContent;
                    for (e = e.firstChild; e; e = e.nextSibling) n += o(e);
                } else if (3 === i || 4 === i) return e.nodeValue;
            } else for (;t = e[r]; r++) n += o(t);
            return n;
        }, i = ot.selectors = {
            cacheLength: 50,
            createPseudo: at,
            match: J,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: !0
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: !0
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(e) {
                    return e[1] = e[1].replace(nt, rt), e[3] = (e[4] || e[5] || "").replace(nt, rt), 
                    "~=" === e[2] && (e[3] = " " + e[3] + " "), e.slice(0, 4);
                },
                CHILD: function(e) {
                    return e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3) ? (e[3] || ot.error(e[0]), 
                    e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && ot.error(e[0]), 
                    e;
                },
                PSEUDO: function(e) {
                    var t, n = !e[5] && e[2];
                    return J.CHILD.test(e[0]) ? null : (e[3] && e[4] !== undefined ? e[2] = e[4] : n && V.test(n) && (t = gt(n, !0)) && (t = n.indexOf(")", n.length - t) - n.length) && (e[0] = e[0].slice(0, t), 
                    e[2] = n.slice(0, t)), e.slice(0, 3));
                }
            },
            filter: {
                TAG: function(e) {
                    var t = e.replace(nt, rt).toLowerCase();
                    return "*" === e ? function() {
                        return !0;
                    } : function(e) {
                        return e.nodeName && e.nodeName.toLowerCase() === t;
                    };
                },
                CLASS: function(e) {
                    var t = C[e + " "];
                    return t || (t = RegExp("(^|" + M + ")" + e + "(" + M + "|$)")) && C(e, function(e) {
                        return t.test("string" == typeof e.className && e.className || typeof e.getAttribute !== j && e.getAttribute("class") || "");
                    });
                },
                ATTR: function(e, t, n) {
                    return function(r) {
                        var i = ot.attr(r, e);
                        return null == i ? "!=" === t : t ? (i += "", "=" === t ? i === n : "!=" === t ? i !== n : "^=" === t ? n && 0 === i.indexOf(n) : "*=" === t ? n && i.indexOf(n) > -1 : "$=" === t ? n && i.slice(-n.length) === n : "~=" === t ? (" " + i + " ").indexOf(n) > -1 : "|=" === t ? i === n || i.slice(0, n.length + 1) === n + "-" : !1) : !0;
                    };
                },
                CHILD: function(e, t, n, r, i) {
                    var o = "nth" !== e.slice(0, 3), s = "last" !== e.slice(-4), a = "of-type" === t;
                    return 1 === r && 0 === i ? function(e) {
                        return !!e.parentNode;
                    } : function(t, n, u) {
                        var l, c, p, f, h, d, g = o !== s ? "nextSibling" : "previousSibling", m = t.parentNode, y = a && t.nodeName.toLowerCase(), x = !u && !a;
                        if (m) {
                            if (o) {
                                for (;g; ) {
                                    for (p = t; p = p[g]; ) if (a ? p.nodeName.toLowerCase() === y : 1 === p.nodeType) return !1;
                                    d = g = "only" === e && !d && "nextSibling";
                                }
                                return !0;
                            }
                            if (d = [ s ? m.firstChild : m.lastChild ], s && x) {
                                for (c = m[v] || (m[v] = {}), l = c[e] || [], h = l[0] === w && l[1], f = l[0] === w && l[2], 
                                p = h && m.childNodes[h]; p = ++h && p && p[g] || (f = h = 0) || d.pop(); ) if (1 === p.nodeType && ++f && p === t) {
                                    c[e] = [ w, h, f ];
                                    break;
                                }
                            } else if (x && (l = (t[v] || (t[v] = {}))[e]) && l[0] === w) f = l[1]; else for (;(p = ++h && p && p[g] || (f = h = 0) || d.pop()) && ((a ? p.nodeName.toLowerCase() !== y : 1 !== p.nodeType) || !++f || (x && ((p[v] || (p[v] = {}))[e] = [ w, f ]), 
                            p !== t)); ) ;
                            return f -= i, f === r || 0 === f % r && f / r >= 0;
                        }
                    };
                },
                PSEUDO: function(e, t) {
                    var n, r = i.pseudos[e] || i.setFilters[e.toLowerCase()] || ot.error("unsupported pseudo: " + e);
                    return r[v] ? r(t) : r.length > 1 ? (n = [ e, e, "", t ], i.setFilters.hasOwnProperty(e.toLowerCase()) ? at(function(e, n) {
                        for (var i, o = r(e, t), s = o.length; s--; ) i = P.call(e, o[s]), e[i] = !(n[i] = o[s]);
                    }) : function(e) {
                        return r(e, 0, n);
                    }) : r;
                }
            },
            pseudos: {
                not: at(function(e) {
                    var t = [], n = [], r = a(e.replace(z, "$1"));
                    return r[v] ? at(function(e, t, n, i) {
                        for (var o, s = r(e, null, i, []), a = e.length; a--; ) (o = s[a]) && (e[a] = !(t[a] = o));
                    }) : function(e, i, o) {
                        return t[0] = e, r(t, null, o, n), !n.pop();
                    };
                }),
                has: at(function(e) {
                    return function(t) {
                        return ot(e, t).length > 0;
                    };
                }),
                contains: at(function(e) {
                    return function(t) {
                        return (t.textContent || t.innerText || o(t)).indexOf(e) > -1;
                    };
                }),
                lang: at(function(e) {
                    return G.test(e || "") || ot.error("unsupported lang: " + e), e = e.replace(nt, rt).toLowerCase(), 
                    function(t) {
                        var n;
                        do if (n = h ? t.lang : t.getAttribute("xml:lang") || t.getAttribute("lang")) return n = n.toLowerCase(), 
                        n === e || 0 === n.indexOf(e + "-"); while ((t = t.parentNode) && 1 === t.nodeType);
                        return !1;
                    };
                }),
                target: function(t) {
                    var n = e.location && e.location.hash;
                    return n && n.slice(1) === t.id;
                },
                root: function(e) {
                    return e === f;
                },
                focus: function(e) {
                    return e === p.activeElement && (!p.hasFocus || p.hasFocus()) && !!(e.type || e.href || ~e.tabIndex);
                },
                enabled: function(e) {
                    return e.disabled === !1;
                },
                disabled: function(e) {
                    return e.disabled === !0;
                },
                checked: function(e) {
                    var t = e.nodeName.toLowerCase();
                    return "input" === t && !!e.checked || "option" === t && !!e.selected;
                },
                selected: function(e) {
                    return e.parentNode && e.parentNode.selectedIndex, e.selected === !0;
                },
                empty: function(e) {
                    for (e = e.firstChild; e; e = e.nextSibling) if (e.nodeName > "@" || 3 === e.nodeType || 4 === e.nodeType) return !1;
                    return !0;
                },
                parent: function(e) {
                    return !i.pseudos.empty(e);
                },
                header: function(e) {
                    return et.test(e.nodeName);
                },
                input: function(e) {
                    return Z.test(e.nodeName);
                },
                button: function(e) {
                    var t = e.nodeName.toLowerCase();
                    return "input" === t && "button" === e.type || "button" === t;
                },
                text: function(e) {
                    var t;
                    return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (t = e.getAttribute("type")) || t.toLowerCase() === e.type);
                },
                first: ht(function() {
                    return [ 0 ];
                }),
                last: ht(function(e, t) {
                    return [ t - 1 ];
                }),
                eq: ht(function(e, t, n) {
                    return [ 0 > n ? n + t : n ];
                }),
                even: ht(function(e, t) {
                    for (var n = 0; t > n; n += 2) e.push(n);
                    return e;
                }),
                odd: ht(function(e, t) {
                    for (var n = 1; t > n; n += 2) e.push(n);
                    return e;
                }),
                lt: ht(function(e, t, n) {
                    for (var r = 0 > n ? n + t : n; --r >= 0; ) e.push(r);
                    return e;
                }),
                gt: ht(function(e, t, n) {
                    for (var r = 0 > n ? n + t : n; t > ++r; ) e.push(r);
                    return e;
                })
            }
        }, i.pseudos.nth = i.pseudos.eq;
        for (t in {
            radio: !0,
            checkbox: !0,
            file: !0,
            password: !0,
            image: !0
        }) i.pseudos[t] = pt(t);
        for (t in {
            submit: !0,
            reset: !0
        }) i.pseudos[t] = ft(t);
        dt.prototype = i.filters = i.pseudos, i.setFilters = new dt(), a = ot.compile = function(e, t) {
            var n, r = [], i = [], o = N[e + " "];
            if (!o) {
                for (t || (t = gt(e)), n = t.length; n--; ) o = wt(t[n]), o[v] ? r.push(o) : i.push(o);
                o = N(e, Tt(i, r));
            }
            return o;
        }, n.sortStable = v.split("").sort(S).join("") === v, n.detectDuplicates = E, c(), 
        n.sortDetached = ut(function(e) {
            return 1 & e.compareDocumentPosition(p.createElement("div"));
        }), ut(function(e) {
            return e.innerHTML = "<a href='#'></a>", "#" === e.firstChild.getAttribute("href");
        }) || lt("type|href|height|width", function(e, t, n) {
            return n ? undefined : e.getAttribute(t, "type" === t.toLowerCase() ? 1 : 2);
        }), n.attributes && ut(function(e) {
            return e.innerHTML = "<input/>", e.firstChild.setAttribute("value", ""), "" === e.firstChild.getAttribute("value");
        }) || lt("value", function(e, t, n) {
            return n || "input" !== e.nodeName.toLowerCase() ? undefined : e.defaultValue;
        }), ut(function(e) {
            return null == e.getAttribute("disabled");
        }) || lt(R, function(e, t, n) {
            var r;
            return n ? undefined : (r = e.getAttributeNode(t)) && r.specified ? r.value : e[t] === !0 ? t.toLowerCase() : null;
        }), x.find = ot, x.expr = ot.selectors, x.expr[":"] = x.expr.pseudos, x.unique = ot.uniqueSort, 
        x.text = ot.getText, x.isXMLDoc = ot.isXML, x.contains = ot.contains;
    }(e);
    var D = {};
    x.Callbacks = function(e) {
        e = "string" == typeof e ? D[e] || A(e) : x.extend({}, e);
        var t, n, r, i, o, s, a = [], u = !e.once && [], l = function(p) {
            for (t = e.memory && p, n = !0, s = i || 0, i = 0, o = a.length, r = !0; a && o > s; s++) if (a[s].apply(p[0], p[1]) === !1 && e.stopOnFalse) {
                t = !1;
                break;
            }
            r = !1, a && (u ? u.length && l(u.shift()) : t ? a = [] : c.disable());
        }, c = {
            add: function() {
                if (a) {
                    var n = a.length;
                    !function s(t) {
                        x.each(t, function(t, n) {
                            var r = x.type(n);
                            "function" === r ? e.unique && c.has(n) || a.push(n) : n && n.length && "string" !== r && s(n);
                        });
                    }(arguments), r ? o = a.length : t && (i = n, l(t));
                }
                return this;
            },
            remove: function() {
                return a && x.each(arguments, function(e, t) {
                    for (var n; (n = x.inArray(t, a, n)) > -1; ) a.splice(n, 1), r && (o >= n && o--, 
                    s >= n && s--);
                }), this;
            },
            has: function(e) {
                return e ? x.inArray(e, a) > -1 : !(!a || !a.length);
            },
            empty: function() {
                return a = [], o = 0, this;
            },
            disable: function() {
                return a = u = t = undefined, this;
            },
            disabled: function() {
                return !a;
            },
            lock: function() {
                return u = undefined, t || c.disable(), this;
            },
            locked: function() {
                return !u;
            },
            fireWith: function(e, t) {
                return !a || n && !u || (t = t || [], t = [ e, t.slice ? t.slice() : t ], r ? u.push(t) : l(t)), 
                this;
            },
            fire: function() {
                return c.fireWith(this, arguments), this;
            },
            fired: function() {
                return !!n;
            }
        };
        return c;
    }, x.extend({
        Deferred: function(e) {
            var t = [ [ "resolve", "done", x.Callbacks("once memory"), "resolved" ], [ "reject", "fail", x.Callbacks("once memory"), "rejected" ], [ "notify", "progress", x.Callbacks("memory") ] ], n = "pending", r = {
                state: function() {
                    return n;
                },
                always: function() {
                    return i.done(arguments).fail(arguments), this;
                },
                then: function() {
                    var e = arguments;
                    return x.Deferred(function(n) {
                        x.each(t, function(t, o) {
                            var s = o[0], a = x.isFunction(e[t]) && e[t];
                            i[o[1]](function() {
                                var e = a && a.apply(this, arguments);
                                e && x.isFunction(e.promise) ? e.promise().done(n.resolve).fail(n.reject).progress(n.notify) : n[s + "With"](this === r ? n.promise() : this, a ? [ e ] : arguments);
                            });
                        }), e = null;
                    }).promise();
                },
                promise: function(e) {
                    return null != e ? x.extend(e, r) : r;
                }
            }, i = {};
            return r.pipe = r.then, x.each(t, function(e, o) {
                var s = o[2], a = o[3];
                r[o[1]] = s.add, a && s.add(function() {
                    n = a;
                }, t[1 ^ e][2].disable, t[2][2].lock), i[o[0]] = function() {
                    return i[o[0] + "With"](this === i ? r : this, arguments), this;
                }, i[o[0] + "With"] = s.fireWith;
            }), r.promise(i), e && e.call(i, i), i;
        },
        when: function(e) {
            var a, u, l, t = 0, n = d.call(arguments), r = n.length, i = 1 !== r || e && x.isFunction(e.promise) ? r : 0, o = 1 === i ? e : x.Deferred(), s = function(e, t, n) {
                return function(r) {
                    t[e] = this, n[e] = arguments.length > 1 ? d.call(arguments) : r, n === a ? o.notifyWith(t, n) : --i || o.resolveWith(t, n);
                };
            };
            if (r > 1) for (a = Array(r), u = Array(r), l = Array(r); r > t; t++) n[t] && x.isFunction(n[t].promise) ? n[t].promise().done(s(t, l, n)).fail(o.reject).progress(s(t, u, a)) : --i;
            return i || o.resolveWith(l, n), o.promise();
        }
    }), x.support = function(t) {
        var n = o.createElement("input"), r = o.createDocumentFragment(), i = o.createElement("div"), s = o.createElement("select"), a = s.appendChild(o.createElement("option"));
        return n.type ? (n.type = "checkbox", t.checkOn = "" !== n.value, t.optSelected = a.selected, 
        t.reliableMarginRight = !0, t.boxSizingReliable = !0, t.pixelPosition = !1, n.checked = !0, 
        t.noCloneChecked = n.cloneNode(!0).checked, s.disabled = !0, t.optDisabled = !a.disabled, 
        n = o.createElement("input"), n.value = "t", n.type = "radio", t.radioValue = "t" === n.value, 
        n.setAttribute("checked", "t"), n.setAttribute("name", "t"), r.appendChild(n), t.checkClone = r.cloneNode(!0).cloneNode(!0).lastChild.checked, 
        t.focusinBubbles = "onfocusin" in e, i.style.backgroundClip = "content-box", i.cloneNode(!0).style.backgroundClip = "", 
        t.clearCloneStyle = "content-box" === i.style.backgroundClip, x(function() {
            var n, r, s = "padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box", a = o.getElementsByTagName("body")[0];
            a && (n = o.createElement("div"), n.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px", 
            a.appendChild(n).appendChild(i), i.innerHTML = "", i.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%", 
            x.swap(a, null != a.style.zoom ? {
                zoom: 1
            } : {}, function() {
                t.boxSizing = 4 === i.offsetWidth;
            }), e.getComputedStyle && (t.pixelPosition = "1%" !== (e.getComputedStyle(i, null) || {}).top, 
            t.boxSizingReliable = "4px" === (e.getComputedStyle(i, null) || {
                width: "4px"
            }).width, r = i.appendChild(o.createElement("div")), r.style.cssText = i.style.cssText = s, 
            r.style.marginRight = r.style.width = "0", i.style.width = "1px", t.reliableMarginRight = !parseFloat((e.getComputedStyle(r, null) || {}).marginRight)), 
            a.removeChild(n));
        }), t) : t;
    }({});
    var L, q, H = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/, O = /([A-Z])/g;
    F.uid = 1, F.accepts = function(e) {
        return e.nodeType ? 1 === e.nodeType || 9 === e.nodeType : !0;
    }, F.prototype = {
        key: function(e) {
            if (!F.accepts(e)) return 0;
            var t = {}, n = e[this.expando];
            if (!n) {
                n = F.uid++;
                try {
                    t[this.expando] = {
                        value: n
                    }, Object.defineProperties(e, t);
                } catch (r) {
                    t[this.expando] = n, x.extend(e, t);
                }
            }
            return this.cache[n] || (this.cache[n] = {}), n;
        },
        set: function(e, t, n) {
            var r, i = this.key(e), o = this.cache[i];
            if ("string" == typeof t) o[t] = n; else if (x.isEmptyObject(o)) x.extend(this.cache[i], t); else for (r in t) o[r] = t[r];
            return o;
        },
        get: function(e, t) {
            var n = this.cache[this.key(e)];
            return t === undefined ? n : n[t];
        },
        access: function(e, t, n) {
            var r;
            return t === undefined || t && "string" == typeof t && n === undefined ? (r = this.get(e, t), 
            r !== undefined ? r : this.get(e, x.camelCase(t))) : (this.set(e, t, n), n !== undefined ? n : t);
        },
        remove: function(e, t) {
            var n, r, i, o = this.key(e), s = this.cache[o];
            if (t === undefined) this.cache[o] = {}; else {
                x.isArray(t) ? r = t.concat(t.map(x.camelCase)) : (i = x.camelCase(t), t in s ? r = [ t, i ] : (r = i, 
                r = r in s ? [ r ] : r.match(w) || [])), n = r.length;
                for (;n--; ) delete s[r[n]];
            }
        },
        hasData: function(e) {
            return !x.isEmptyObject(this.cache[e[this.expando]] || {});
        },
        discard: function(e) {
            e[this.expando] && delete this.cache[e[this.expando]];
        }
    }, L = new F(), q = new F(), x.extend({
        acceptData: F.accepts,
        hasData: function(e) {
            return L.hasData(e) || q.hasData(e);
        },
        data: function(e, t, n) {
            return L.access(e, t, n);
        },
        removeData: function(e, t) {
            L.remove(e, t);
        },
        _data: function(e, t, n) {
            return q.access(e, t, n);
        },
        _removeData: function(e, t) {
            q.remove(e, t);
        }
    }), x.fn.extend({
        data: function(e, t) {
            var n, r, i = this[0], o = 0, s = null;
            if (e === undefined) {
                if (this.length && (s = L.get(i), 1 === i.nodeType && !q.get(i, "hasDataAttrs"))) {
                    for (n = i.attributes; n.length > o; o++) r = n[o].name, 0 === r.indexOf("data-") && (r = x.camelCase(r.slice(5)), 
                    P(i, r, s[r]));
                    q.set(i, "hasDataAttrs", !0);
                }
                return s;
            }
            return "object" == typeof e ? this.each(function() {
                L.set(this, e);
            }) : x.access(this, function(t) {
                var n, r = x.camelCase(e);
                if (i && t === undefined) {
                    if (n = L.get(i, e), n !== undefined) return n;
                    if (n = L.get(i, r), n !== undefined) return n;
                    if (n = P(i, r, undefined), n !== undefined) return n;
                } else this.each(function() {
                    var n = L.get(this, r);
                    L.set(this, r, t), -1 !== e.indexOf("-") && n !== undefined && L.set(this, e, t);
                });
            }, null, t, arguments.length > 1, null, !0);
        },
        removeData: function(e) {
            return this.each(function() {
                L.remove(this, e);
            });
        }
    }), x.extend({
        queue: function(e, t, n) {
            var r;
            return e ? (t = (t || "fx") + "queue", r = q.get(e, t), n && (!r || x.isArray(n) ? r = q.access(e, t, x.makeArray(n)) : r.push(n)), 
            r || []) : undefined;
        },
        dequeue: function(e, t) {
            t = t || "fx";
            var n = x.queue(e, t), r = n.length, i = n.shift(), o = x._queueHooks(e, t), s = function() {
                x.dequeue(e, t);
            };
            "inprogress" === i && (i = n.shift(), r--), i && ("fx" === t && n.unshift("inprogress"), 
            delete o.stop, i.call(e, s, o)), !r && o && o.empty.fire();
        },
        _queueHooks: function(e, t) {
            var n = t + "queueHooks";
            return q.get(e, n) || q.access(e, n, {
                empty: x.Callbacks("once memory").add(function() {
                    q.remove(e, [ t + "queue", n ]);
                })
            });
        }
    }), x.fn.extend({
        queue: function(e, t) {
            var n = 2;
            return "string" != typeof e && (t = e, e = "fx", n--), n > arguments.length ? x.queue(this[0], e) : t === undefined ? this : this.each(function() {
                var n = x.queue(this, e, t);
                x._queueHooks(this, e), "fx" === e && "inprogress" !== n[0] && x.dequeue(this, e);
            });
        },
        dequeue: function(e) {
            return this.each(function() {
                x.dequeue(this, e);
            });
        },
        delay: function(e, t) {
            return e = x.fx ? x.fx.speeds[e] || e : e, t = t || "fx", this.queue(t, function(t, n) {
                var r = setTimeout(t, e);
                n.stop = function() {
                    clearTimeout(r);
                };
            });
        },
        clearQueue: function(e) {
            return this.queue(e || "fx", []);
        },
        promise: function(e, t) {
            var n, r = 1, i = x.Deferred(), o = this, s = this.length, a = function() {
                --r || i.resolveWith(o, [ o ]);
            };
            for ("string" != typeof e && (t = e, e = undefined), e = e || "fx"; s--; ) n = q.get(o[s], e + "queueHooks"), 
            n && n.empty && (r++, n.empty.add(a));
            return a(), i.promise(t);
        }
    });
    var R, M, W = /[\t\r\n\f]/g, $ = /\r/g, B = /^(?:input|select|textarea|button)$/i;
    x.fn.extend({
        attr: function(e, t) {
            return x.access(this, x.attr, e, t, arguments.length > 1);
        },
        removeAttr: function(e) {
            return this.each(function() {
                x.removeAttr(this, e);
            });
        },
        prop: function(e, t) {
            return x.access(this, x.prop, e, t, arguments.length > 1);
        },
        removeProp: function(e) {
            return this.each(function() {
                delete this[x.propFix[e] || e];
            });
        },
        addClass: function(e) {
            var t, n, r, i, o, s = 0, a = this.length, u = "string" == typeof e && e;
            if (x.isFunction(e)) return this.each(function(t) {
                x(this).addClass(e.call(this, t, this.className));
            });
            if (u) for (t = (e || "").match(w) || []; a > s; s++) if (n = this[s], r = 1 === n.nodeType && (n.className ? (" " + n.className + " ").replace(W, " ") : " ")) {
                for (o = 0; i = t[o++]; ) 0 > r.indexOf(" " + i + " ") && (r += i + " ");
                n.className = x.trim(r);
            }
            return this;
        },
        removeClass: function(e) {
            var t, n, r, i, o, s = 0, a = this.length, u = 0 === arguments.length || "string" == typeof e && e;
            if (x.isFunction(e)) return this.each(function(t) {
                x(this).removeClass(e.call(this, t, this.className));
            });
            if (u) for (t = (e || "").match(w) || []; a > s; s++) if (n = this[s], r = 1 === n.nodeType && (n.className ? (" " + n.className + " ").replace(W, " ") : "")) {
                for (o = 0; i = t[o++]; ) for (;r.indexOf(" " + i + " ") >= 0; ) r = r.replace(" " + i + " ", " ");
                n.className = e ? x.trim(r) : "";
            }
            return this;
        },
        toggleClass: function(e, t) {
            var n = typeof e;
            return "boolean" == typeof t && "string" === n ? t ? this.addClass(e) : this.removeClass(e) : this.each(x.isFunction(e) ? function(n) {
                x(this).toggleClass(e.call(this, n, this.className, t), t);
            } : function() {
                if ("string" === n) for (var t, i = 0, o = x(this), s = e.match(w) || []; t = s[i++]; ) o.hasClass(t) ? o.removeClass(t) : o.addClass(t); else (n === r || "boolean" === n) && (this.className && q.set(this, "__className__", this.className), 
                this.className = this.className || e === !1 ? "" : q.get(this, "__className__") || "");
            });
        },
        hasClass: function(e) {
            for (var t = " " + e + " ", n = 0, r = this.length; r > n; n++) if (1 === this[n].nodeType && (" " + this[n].className + " ").replace(W, " ").indexOf(t) >= 0) return !0;
            return !1;
        },
        val: function(e) {
            var t, n, r, i = this[0];
            return arguments.length ? (r = x.isFunction(e), this.each(function(n) {
                var i;
                1 === this.nodeType && (i = r ? e.call(this, n, x(this).val()) : e, null == i ? i = "" : "number" == typeof i ? i += "" : x.isArray(i) && (i = x.map(i, function(e) {
                    return null == e ? "" : e + "";
                })), t = x.valHooks[this.type] || x.valHooks[this.nodeName.toLowerCase()], t && "set" in t && t.set(this, i, "value") !== undefined || (this.value = i));
            })) : i ? (t = x.valHooks[i.type] || x.valHooks[i.nodeName.toLowerCase()], t && "get" in t && (n = t.get(i, "value")) !== undefined ? n : (n = i.value, 
            "string" == typeof n ? n.replace($, "") : null == n ? "" : n)) : void 0;
        }
    }), x.extend({
        valHooks: {
            option: {
                get: function(e) {
                    var t = e.attributes.value;
                    return !t || t.specified ? e.value : e.text;
                }
            },
            select: {
                get: function(e) {
                    for (var t, n, r = e.options, i = e.selectedIndex, o = "select-one" === e.type || 0 > i, s = o ? null : [], a = o ? i + 1 : r.length, u = 0 > i ? a : o ? i : 0; a > u; u++) if (n = r[u], 
                    !(!n.selected && u !== i || (x.support.optDisabled ? n.disabled : null !== n.getAttribute("disabled")) || n.parentNode.disabled && x.nodeName(n.parentNode, "optgroup"))) {
                        if (t = x(n).val(), o) return t;
                        s.push(t);
                    }
                    return s;
                },
                set: function(e, t) {
                    for (var n, r, i = e.options, o = x.makeArray(t), s = i.length; s--; ) r = i[s], 
                    (r.selected = x.inArray(x(r).val(), o) >= 0) && (n = !0);
                    return n || (e.selectedIndex = -1), o;
                }
            }
        },
        attr: function(e, t, n) {
            var i, o, s = e.nodeType;
            return e && 3 !== s && 8 !== s && 2 !== s ? typeof e.getAttribute === r ? x.prop(e, t, n) : (1 === s && x.isXMLDoc(e) || (t = t.toLowerCase(), 
            i = x.attrHooks[t] || (x.expr.match.bool.test(t) ? M : R)), n === undefined ? i && "get" in i && null !== (o = i.get(e, t)) ? o : (o = x.find.attr(e, t), 
            null == o ? undefined : o) : null !== n ? i && "set" in i && (o = i.set(e, n, t)) !== undefined ? o : (e.setAttribute(t, n + ""), 
            n) : (x.removeAttr(e, t), undefined)) : void 0;
        },
        removeAttr: function(e, t) {
            var n, r, i = 0, o = t && t.match(w);
            if (o && 1 === e.nodeType) for (;n = o[i++]; ) r = x.propFix[n] || n, x.expr.match.bool.test(n) && (e[r] = !1), 
            e.removeAttribute(n);
        },
        attrHooks: {
            type: {
                set: function(e, t) {
                    if (!x.support.radioValue && "radio" === t && x.nodeName(e, "input")) {
                        var n = e.value;
                        return e.setAttribute("type", t), n && (e.value = n), t;
                    }
                }
            }
        },
        propFix: {
            "for": "htmlFor",
            "class": "className"
        },
        prop: function(e, t, n) {
            var r, i, o, s = e.nodeType;
            return e && 3 !== s && 8 !== s && 2 !== s ? (o = 1 !== s || !x.isXMLDoc(e), o && (t = x.propFix[t] || t, 
            i = x.propHooks[t]), n !== undefined ? i && "set" in i && (r = i.set(e, n, t)) !== undefined ? r : e[t] = n : i && "get" in i && null !== (r = i.get(e, t)) ? r : e[t]) : void 0;
        },
        propHooks: {
            tabIndex: {
                get: function(e) {
                    return e.hasAttribute("tabindex") || B.test(e.nodeName) || e.href ? e.tabIndex : -1;
                }
            }
        }
    }), M = {
        set: function(e, t, n) {
            return t === !1 ? x.removeAttr(e, n) : e.setAttribute(n, n), n;
        }
    }, x.each(x.expr.match.bool.source.match(/\w+/g), function(e, t) {
        var n = x.expr.attrHandle[t] || x.find.attr;
        x.expr.attrHandle[t] = function(e, t, r) {
            var i = x.expr.attrHandle[t], o = r ? undefined : (x.expr.attrHandle[t] = undefined) != n(e, t, r) ? t.toLowerCase() : null;
            return x.expr.attrHandle[t] = i, o;
        };
    }), x.support.optSelected || (x.propHooks.selected = {
        get: function(e) {
            var t = e.parentNode;
            return t && t.parentNode && t.parentNode.selectedIndex, null;
        }
    }), x.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], function() {
        x.propFix[this.toLowerCase()] = this;
    }), x.each([ "radio", "checkbox" ], function() {
        x.valHooks[this] = {
            set: function(e, t) {
                return x.isArray(t) ? e.checked = x.inArray(x(e).val(), t) >= 0 : undefined;
            }
        }, x.support.checkOn || (x.valHooks[this].get = function(e) {
            return null === e.getAttribute("value") ? "on" : e.value;
        });
    });
    var I = /^key/, z = /^(?:mouse|contextmenu)|click/, _ = /^(?:focusinfocus|focusoutblur)$/, X = /^([^.]*)(?:\.(.+)|)$/;
    x.event = {
        global: {},
        add: function(e, t, n, i, o) {
            var s, a, u, l, c, p, f, h, d, g, m, y = q.get(e);
            if (y) {
                for (n.handler && (s = n, n = s.handler, o = s.selector), n.guid || (n.guid = x.guid++), 
                (l = y.events) || (l = y.events = {}), (a = y.handle) || (a = y.handle = function(e) {
                    return typeof x === r || e && x.event.triggered === e.type ? undefined : x.event.dispatch.apply(a.elem, arguments);
                }, a.elem = e), t = (t || "").match(w) || [ "" ], c = t.length; c--; ) u = X.exec(t[c]) || [], 
                d = m = u[1], g = (u[2] || "").split(".").sort(), d && (f = x.event.special[d] || {}, 
                d = (o ? f.delegateType : f.bindType) || d, f = x.event.special[d] || {}, p = x.extend({
                    type: d,
                    origType: m,
                    data: i,
                    handler: n,
                    guid: n.guid,
                    selector: o,
                    needsContext: o && x.expr.match.needsContext.test(o),
                    namespace: g.join(".")
                }, s), (h = l[d]) || (h = l[d] = [], h.delegateCount = 0, f.setup && f.setup.call(e, i, g, a) !== !1 || e.addEventListener && e.addEventListener(d, a, !1)), 
                f.add && (f.add.call(e, p), p.handler.guid || (p.handler.guid = n.guid)), o ? h.splice(h.delegateCount++, 0, p) : h.push(p), 
                x.event.global[d] = !0);
                e = null;
            }
        },
        remove: function(e, t, n, r, i) {
            var o, s, a, u, l, c, p, f, h, d, g, m = q.hasData(e) && q.get(e);
            if (m && (u = m.events)) {
                for (t = (t || "").match(w) || [ "" ], l = t.length; l--; ) if (a = X.exec(t[l]) || [], 
                h = g = a[1], d = (a[2] || "").split(".").sort(), h) {
                    for (p = x.event.special[h] || {}, h = (r ? p.delegateType : p.bindType) || h, f = u[h] || [], 
                    a = a[2] && RegExp("(^|\\.)" + d.join("\\.(?:.*\\.|)") + "(\\.|$)"), s = o = f.length; o--; ) c = f[o], 
                    !i && g !== c.origType || n && n.guid !== c.guid || a && !a.test(c.namespace) || r && r !== c.selector && ("**" !== r || !c.selector) || (f.splice(o, 1), 
                    c.selector && f.delegateCount--, p.remove && p.remove.call(e, c));
                    s && !f.length && (p.teardown && p.teardown.call(e, d, m.handle) !== !1 || x.removeEvent(e, h, m.handle), 
                    delete u[h]);
                } else for (h in u) x.event.remove(e, h + t[l], n, r, !0);
                x.isEmptyObject(u) && (delete m.handle, q.remove(e, "events"));
            }
        },
        trigger: function(t, n, r, i) {
            var s, a, u, l, c, p, f, h = [ r || o ], d = y.call(t, "type") ? t.type : t, g = y.call(t, "namespace") ? t.namespace.split(".") : [];
            if (a = u = r = r || o, 3 !== r.nodeType && 8 !== r.nodeType && !_.test(d + x.event.triggered) && (d.indexOf(".") >= 0 && (g = d.split("."), 
            d = g.shift(), g.sort()), c = 0 > d.indexOf(":") && "on" + d, t = t[x.expando] ? t : new x.Event(d, "object" == typeof t && t), 
            t.isTrigger = i ? 2 : 3, t.namespace = g.join("."), t.namespace_re = t.namespace ? RegExp("(^|\\.)" + g.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, 
            t.result = undefined, t.target || (t.target = r), n = null == n ? [ t ] : x.makeArray(n, [ t ]), 
            f = x.event.special[d] || {}, i || !f.trigger || f.trigger.apply(r, n) !== !1)) {
                if (!i && !f.noBubble && !x.isWindow(r)) {
                    for (l = f.delegateType || d, _.test(l + d) || (a = a.parentNode); a; a = a.parentNode) h.push(a), 
                    u = a;
                    u === (r.ownerDocument || o) && h.push(u.defaultView || u.parentWindow || e);
                }
                for (s = 0; (a = h[s++]) && !t.isPropagationStopped(); ) t.type = s > 1 ? l : f.bindType || d, 
                p = (q.get(a, "events") || {})[t.type] && q.get(a, "handle"), p && p.apply(a, n), 
                p = c && a[c], p && x.acceptData(a) && p.apply && p.apply(a, n) === !1 && t.preventDefault();
                return t.type = d, i || t.isDefaultPrevented() || f._default && f._default.apply(h.pop(), n) !== !1 || !x.acceptData(r) || c && x.isFunction(r[d]) && !x.isWindow(r) && (u = r[c], 
                u && (r[c] = null), x.event.triggered = d, r[d](), x.event.triggered = undefined, 
                u && (r[c] = u)), t.result;
            }
        },
        dispatch: function(e) {
            e = x.event.fix(e);
            var t, n, r, i, o, s = [], a = d.call(arguments), u = (q.get(this, "events") || {})[e.type] || [], l = x.event.special[e.type] || {};
            if (a[0] = e, e.delegateTarget = this, !l.preDispatch || l.preDispatch.call(this, e) !== !1) {
                for (s = x.event.handlers.call(this, e, u), t = 0; (i = s[t++]) && !e.isPropagationStopped(); ) for (e.currentTarget = i.elem, 
                n = 0; (o = i.handlers[n++]) && !e.isImmediatePropagationStopped(); ) (!e.namespace_re || e.namespace_re.test(o.namespace)) && (e.handleObj = o, 
                e.data = o.data, r = ((x.event.special[o.origType] || {}).handle || o.handler).apply(i.elem, a), 
                r !== undefined && (e.result = r) === !1 && (e.preventDefault(), e.stopPropagation()));
                return l.postDispatch && l.postDispatch.call(this, e), e.result;
            }
        },
        handlers: function(e, t) {
            var n, r, i, o, s = [], a = t.delegateCount, u = e.target;
            if (a && u.nodeType && (!e.button || "click" !== e.type)) for (;u !== this; u = u.parentNode || this) if (u.disabled !== !0 || "click" !== e.type) {
                for (r = [], n = 0; a > n; n++) o = t[n], i = o.selector + " ", r[i] === undefined && (r[i] = o.needsContext ? x(i, this).index(u) >= 0 : x.find(i, this, null, [ u ]).length), 
                r[i] && r.push(o);
                r.length && s.push({
                    elem: u,
                    handlers: r
                });
            }
            return t.length > a && s.push({
                elem: this,
                handlers: t.slice(a)
            }), s;
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(e, t) {
                return null == e.which && (e.which = null != t.charCode ? t.charCode : t.keyCode), 
                e;
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(e, t) {
                var n, r, i, s = t.button;
                return null == e.pageX && null != t.clientX && (n = e.target.ownerDocument || o, 
                r = n.documentElement, i = n.body, e.pageX = t.clientX + (r && r.scrollLeft || i && i.scrollLeft || 0) - (r && r.clientLeft || i && i.clientLeft || 0), 
                e.pageY = t.clientY + (r && r.scrollTop || i && i.scrollTop || 0) - (r && r.clientTop || i && i.clientTop || 0)), 
                e.which || s === undefined || (e.which = 1 & s ? 1 : 2 & s ? 3 : 4 & s ? 2 : 0), 
                e;
            }
        },
        fix: function(e) {
            if (e[x.expando]) return e;
            var t, n, r, i = e.type, s = e, a = this.fixHooks[i];
            for (a || (this.fixHooks[i] = a = z.test(i) ? this.mouseHooks : I.test(i) ? this.keyHooks : {}), 
            r = a.props ? this.props.concat(a.props) : this.props, e = new x.Event(s), t = r.length; t--; ) n = r[t], 
            e[n] = s[n];
            return e.target || (e.target = o), 3 === e.target.nodeType && (e.target = e.target.parentNode), 
            a.filter ? a.filter(e, s) : e;
        },
        special: {
            load: {
                noBubble: !0
            },
            focus: {
                trigger: function() {
                    return this !== V() && this.focus ? (this.focus(), !1) : undefined;
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    return this === V() && this.blur ? (this.blur(), !1) : undefined;
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    return "checkbox" === this.type && this.click && x.nodeName(this, "input") ? (this.click(), 
                    !1) : undefined;
                },
                _default: function(e) {
                    return x.nodeName(e.target, "a");
                }
            },
            beforeunload: {
                postDispatch: function(e) {
                    e.result !== undefined && (e.originalEvent.returnValue = e.result);
                }
            }
        },
        simulate: function(e, t, n, r) {
            var i = x.extend(new x.Event(), n, {
                type: e,
                isSimulated: !0,
                originalEvent: {}
            });
            r ? x.event.trigger(i, null, t) : x.event.dispatch.call(t, i), i.isDefaultPrevented() && n.preventDefault();
        }
    }, x.removeEvent = function(e, t, n) {
        e.removeEventListener && e.removeEventListener(t, n, !1);
    }, x.Event = function(e, t) {
        return this instanceof x.Event ? (e && e.type ? (this.originalEvent = e, this.type = e.type, 
        this.isDefaultPrevented = e.defaultPrevented || e.getPreventDefault && e.getPreventDefault() ? U : Y) : this.type = e, 
        t && x.extend(this, t), this.timeStamp = e && e.timeStamp || x.now(), this[x.expando] = !0, 
        undefined) : new x.Event(e, t);
    }, x.Event.prototype = {
        isDefaultPrevented: Y,
        isPropagationStopped: Y,
        isImmediatePropagationStopped: Y,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = U, e && e.preventDefault && e.preventDefault();
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = U, e && e.stopPropagation && e.stopPropagation();
        },
        stopImmediatePropagation: function() {
            this.isImmediatePropagationStopped = U, this.stopPropagation();
        }
    }, x.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function(e, t) {
        x.event.special[e] = {
            delegateType: t,
            bindType: t,
            handle: function(e) {
                var n, r = this, i = e.relatedTarget, o = e.handleObj;
                return (!i || i !== r && !x.contains(r, i)) && (e.type = o.origType, n = o.handler.apply(this, arguments), 
                e.type = t), n;
            }
        };
    }), x.support.focusinBubbles || x.each({
        focus: "focusin",
        blur: "focusout"
    }, function(e, t) {
        var n = 0, r = function(e) {
            x.event.simulate(t, e.target, x.event.fix(e), !0);
        };
        x.event.special[t] = {
            setup: function() {
                0 === n++ && o.addEventListener(e, r, !0);
            },
            teardown: function() {
                0 === --n && o.removeEventListener(e, r, !0);
            }
        };
    }), x.fn.extend({
        on: function(e, t, n, r, i) {
            var o, s;
            if ("object" == typeof e) {
                "string" != typeof t && (n = n || t, t = undefined);
                for (s in e) this.on(s, t, n, e[s], i);
                return this;
            }
            if (null == n && null == r ? (r = t, n = t = undefined) : null == r && ("string" == typeof t ? (r = n, 
            n = undefined) : (r = n, n = t, t = undefined)), r === !1) r = Y; else if (!r) return this;
            return 1 === i && (o = r, r = function(e) {
                return x().off(e), o.apply(this, arguments);
            }, r.guid = o.guid || (o.guid = x.guid++)), this.each(function() {
                x.event.add(this, e, r, n, t);
            });
        },
        one: function(e, t, n, r) {
            return this.on(e, t, n, r, 1);
        },
        off: function(e, t, n) {
            var r, i;
            if (e && e.preventDefault && e.handleObj) return r = e.handleObj, x(e.delegateTarget).off(r.namespace ? r.origType + "." + r.namespace : r.origType, r.selector, r.handler), 
            this;
            if ("object" == typeof e) {
                for (i in e) this.off(i, t, e[i]);
                return this;
            }
            return (t === !1 || "function" == typeof t) && (n = t, t = undefined), n === !1 && (n = Y), 
            this.each(function() {
                x.event.remove(this, e, n, t);
            });
        },
        trigger: function(e, t) {
            return this.each(function() {
                x.event.trigger(e, t, this);
            });
        },
        triggerHandler: function(e, t) {
            var n = this[0];
            return n ? x.event.trigger(e, t, n, !0) : undefined;
        }
    });
    var G = /^.[^:#\[\.,]*$/, J = /^(?:parents|prev(?:Until|All))/, Q = x.expr.match.needsContext, K = {
        children: !0,
        contents: !0,
        next: !0,
        prev: !0
    };
    x.fn.extend({
        find: function(e) {
            var t, n = [], r = this, i = r.length;
            if ("string" != typeof e) return this.pushStack(x(e).filter(function() {
                for (t = 0; i > t; t++) if (x.contains(r[t], this)) return !0;
            }));
            for (t = 0; i > t; t++) x.find(e, r[t], n);
            return n = this.pushStack(i > 1 ? x.unique(n) : n), n.selector = this.selector ? this.selector + " " + e : e, 
            n;
        },
        has: function(e) {
            var t = x(e, this), n = t.length;
            return this.filter(function() {
                for (var e = 0; n > e; e++) if (x.contains(this, t[e])) return !0;
            });
        },
        not: function(e) {
            return this.pushStack(et(this, e || [], !0));
        },
        filter: function(e) {
            return this.pushStack(et(this, e || [], !1));
        },
        is: function(e) {
            return !!et(this, "string" == typeof e && Q.test(e) ? x(e) : e || [], !1).length;
        },
        closest: function(e, t) {
            for (var n, r = 0, i = this.length, o = [], s = Q.test(e) || "string" != typeof e ? x(e, t || this.context) : 0; i > r; r++) for (n = this[r]; n && n !== t; n = n.parentNode) if (11 > n.nodeType && (s ? s.index(n) > -1 : 1 === n.nodeType && x.find.matchesSelector(n, e))) {
                n = o.push(n);
                break;
            }
            return this.pushStack(o.length > 1 ? x.unique(o) : o);
        },
        index: function(e) {
            return e ? "string" == typeof e ? g.call(x(e), this[0]) : g.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
        },
        add: function(e, t) {
            var n = "string" == typeof e ? x(e, t) : x.makeArray(e && e.nodeType ? [ e ] : e), r = x.merge(this.get(), n);
            return this.pushStack(x.unique(r));
        },
        addBack: function(e) {
            return this.add(null == e ? this.prevObject : this.prevObject.filter(e));
        }
    }), x.each({
        parent: function(e) {
            var t = e.parentNode;
            return t && 11 !== t.nodeType ? t : null;
        },
        parents: function(e) {
            return x.dir(e, "parentNode");
        },
        parentsUntil: function(e, t, n) {
            return x.dir(e, "parentNode", n);
        },
        next: function(e) {
            return Z(e, "nextSibling");
        },
        prev: function(e) {
            return Z(e, "previousSibling");
        },
        nextAll: function(e) {
            return x.dir(e, "nextSibling");
        },
        prevAll: function(e) {
            return x.dir(e, "previousSibling");
        },
        nextUntil: function(e, t, n) {
            return x.dir(e, "nextSibling", n);
        },
        prevUntil: function(e, t, n) {
            return x.dir(e, "previousSibling", n);
        },
        siblings: function(e) {
            return x.sibling((e.parentNode || {}).firstChild, e);
        },
        children: function(e) {
            return x.sibling(e.firstChild);
        },
        contents: function(e) {
            return e.contentDocument || x.merge([], e.childNodes);
        }
    }, function(e, t) {
        x.fn[e] = function(n, r) {
            var i = x.map(this, t, n);
            return "Until" !== e.slice(-5) && (r = n), r && "string" == typeof r && (i = x.filter(r, i)), 
            this.length > 1 && (K[e] || x.unique(i), J.test(e) && i.reverse()), this.pushStack(i);
        };
    }), x.extend({
        filter: function(e, t, n) {
            var r = t[0];
            return n && (e = ":not(" + e + ")"), 1 === t.length && 1 === r.nodeType ? x.find.matchesSelector(r, e) ? [ r ] : [] : x.find.matches(e, x.grep(t, function(e) {
                return 1 === e.nodeType;
            }));
        },
        dir: function(e, t, n) {
            for (var r = [], i = n !== undefined; (e = e[t]) && 9 !== e.nodeType; ) if (1 === e.nodeType) {
                if (i && x(e).is(n)) break;
                r.push(e);
            }
            return r;
        },
        sibling: function(e, t) {
            for (var n = []; e; e = e.nextSibling) 1 === e.nodeType && e !== t && n.push(e);
            return n;
        }
    });
    var tt = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, nt = /<([\w:]+)/, rt = /<|&#?\w+;/, it = /<(?:script|style|link)/i, ot = /^(?:checkbox|radio)$/i, st = /checked\s*(?:[^=]|=\s*.checked.)/i, at = /^$|\/(?:java|ecma)script/i, ut = /^true\/(.*)/, lt = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, ct = {
        option: [ 1, "<select multiple='multiple'>", "</select>" ],
        thead: [ 1, "<table>", "</table>" ],
        col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: [ 0, "", "" ]
    };
    ct.optgroup = ct.option, ct.tbody = ct.tfoot = ct.colgroup = ct.caption = ct.thead, 
    ct.th = ct.td, x.fn.extend({
        text: function(e) {
            return x.access(this, function(e) {
                return e === undefined ? x.text(this) : this.empty().append((this[0] && this[0].ownerDocument || o).createTextNode(e));
            }, null, e, arguments.length);
        },
        append: function() {
            return this.domManip(arguments, function(e) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var t = pt(this, e);
                    t.appendChild(e);
                }
            });
        },
        prepend: function() {
            return this.domManip(arguments, function(e) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var t = pt(this, e);
                    t.insertBefore(e, t.firstChild);
                }
            });
        },
        before: function() {
            return this.domManip(arguments, function(e) {
                this.parentNode && this.parentNode.insertBefore(e, this);
            });
        },
        after: function() {
            return this.domManip(arguments, function(e) {
                this.parentNode && this.parentNode.insertBefore(e, this.nextSibling);
            });
        },
        remove: function(e, t) {
            for (var n, r = e ? x.filter(e, this) : this, i = 0; null != (n = r[i]); i++) t || 1 !== n.nodeType || x.cleanData(mt(n)), 
            n.parentNode && (t && x.contains(n.ownerDocument, n) && dt(mt(n, "script")), n.parentNode.removeChild(n));
            return this;
        },
        empty: function() {
            for (var e, t = 0; null != (e = this[t]); t++) 1 === e.nodeType && (x.cleanData(mt(e, !1)), 
            e.textContent = "");
            return this;
        },
        clone: function(e, t) {
            return e = null == e ? !1 : e, t = null == t ? e : t, this.map(function() {
                return x.clone(this, e, t);
            });
        },
        html: function(e) {
            return x.access(this, function(e) {
                var t = this[0] || {}, n = 0, r = this.length;
                if (e === undefined && 1 === t.nodeType) return t.innerHTML;
                if ("string" == typeof e && !it.test(e) && !ct[(nt.exec(e) || [ "", "" ])[1].toLowerCase()]) {
                    e = e.replace(tt, "<$1></$2>");
                    try {
                        for (;r > n; n++) t = this[n] || {}, 1 === t.nodeType && (x.cleanData(mt(t, !1)), 
                        t.innerHTML = e);
                        t = 0;
                    } catch (i) {}
                }
                t && this.empty().append(e);
            }, null, e, arguments.length);
        },
        replaceWith: function() {
            var e = x.map(this, function(e) {
                return [ e.nextSibling, e.parentNode ];
            }), t = 0;
            return this.domManip(arguments, function(n) {
                var r = e[t++], i = e[t++];
                i && (r && r.parentNode !== i && (r = this.nextSibling), x(this).remove(), i.insertBefore(n, r));
            }, !0), t ? this : this.remove();
        },
        detach: function(e) {
            return this.remove(e, !0);
        },
        domManip: function(e, t, n) {
            e = f.apply([], e);
            var r, i, o, s, a, u, l = 0, c = this.length, p = this, h = c - 1, d = e[0], g = x.isFunction(d);
            if (g || !(1 >= c || "string" != typeof d || x.support.checkClone) && st.test(d)) return this.each(function(r) {
                var i = p.eq(r);
                g && (e[0] = d.call(this, r, i.html())), i.domManip(e, t, n);
            });
            if (c && (r = x.buildFragment(e, this[0].ownerDocument, !1, !n && this), i = r.firstChild, 
            1 === r.childNodes.length && (r = i), i)) {
                for (o = x.map(mt(r, "script"), ft), s = o.length; c > l; l++) a = r, l !== h && (a = x.clone(a, !0, !0), 
                s && x.merge(o, mt(a, "script"))), t.call(this[l], a, l);
                if (s) for (u = o[o.length - 1].ownerDocument, x.map(o, ht), l = 0; s > l; l++) a = o[l], 
                at.test(a.type || "") && !q.access(a, "globalEval") && x.contains(u, a) && (a.src ? x._evalUrl(a.src) : x.globalEval(a.textContent.replace(lt, "")));
            }
            return this;
        }
    }), x.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(e, t) {
        x.fn[e] = function(e) {
            for (var n, r = [], i = x(e), o = i.length - 1, s = 0; o >= s; s++) n = s === o ? this : this.clone(!0), 
            x(i[s])[t](n), h.apply(r, n.get());
            return this.pushStack(r);
        };
    }), x.extend({
        clone: function(e, t, n) {
            var r, i, o, s, a = e.cloneNode(!0), u = x.contains(e.ownerDocument, e);
            if (!(x.support.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || x.isXMLDoc(e))) for (s = mt(a), 
            o = mt(e), r = 0, i = o.length; i > r; r++) yt(o[r], s[r]);
            if (t) if (n) for (o = o || mt(e), s = s || mt(a), r = 0, i = o.length; i > r; r++) gt(o[r], s[r]); else gt(e, a);
            return s = mt(a, "script"), s.length > 0 && dt(s, !u && mt(e, "script")), a;
        },
        buildFragment: function(e, t, n, r) {
            for (var i, o, s, a, u, l, c = 0, p = e.length, f = t.createDocumentFragment(), h = []; p > c; c++) if (i = e[c], 
            i || 0 === i) if ("object" === x.type(i)) x.merge(h, i.nodeType ? [ i ] : i); else if (rt.test(i)) {
                for (o = o || f.appendChild(t.createElement("div")), s = (nt.exec(i) || [ "", "" ])[1].toLowerCase(), 
                a = ct[s] || ct._default, o.innerHTML = a[1] + i.replace(tt, "<$1></$2>") + a[2], 
                l = a[0]; l--; ) o = o.lastChild;
                x.merge(h, o.childNodes), o = f.firstChild, o.textContent = "";
            } else h.push(t.createTextNode(i));
            for (f.textContent = "", c = 0; i = h[c++]; ) if ((!r || -1 === x.inArray(i, r)) && (u = x.contains(i.ownerDocument, i), 
            o = mt(f.appendChild(i), "script"), u && dt(o), n)) for (l = 0; i = o[l++]; ) at.test(i.type || "") && n.push(i);
            return f;
        },
        cleanData: function(e) {
            for (var t, n, r, i, o, s, a = x.event.special, u = 0; (n = e[u]) !== undefined; u++) {
                if (F.accepts(n) && (o = n[q.expando], o && (t = q.cache[o]))) {
                    if (r = Object.keys(t.events || {}), r.length) for (s = 0; (i = r[s]) !== undefined; s++) a[i] ? x.event.remove(n, i) : x.removeEvent(n, i, t.handle);
                    q.cache[o] && delete q.cache[o];
                }
                delete L.cache[n[L.expando]];
            }
        },
        _evalUrl: function(e) {
            return x.ajax({
                url: e,
                type: "GET",
                dataType: "script",
                async: !1,
                global: !1,
                "throws": !0
            });
        }
    }), x.fn.extend({
        wrapAll: function(e) {
            var t;
            return x.isFunction(e) ? this.each(function(t) {
                x(this).wrapAll(e.call(this, t));
            }) : (this[0] && (t = x(e, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && t.insertBefore(this[0]), 
            t.map(function() {
                for (var e = this; e.firstElementChild; ) e = e.firstElementChild;
                return e;
            }).append(this)), this);
        },
        wrapInner: function(e) {
            return this.each(x.isFunction(e) ? function(t) {
                x(this).wrapInner(e.call(this, t));
            } : function() {
                var t = x(this), n = t.contents();
                n.length ? n.wrapAll(e) : t.append(e);
            });
        },
        wrap: function(e) {
            var t = x.isFunction(e);
            return this.each(function(n) {
                x(this).wrapAll(t ? e.call(this, n) : e);
            });
        },
        unwrap: function() {
            return this.parent().each(function() {
                x.nodeName(this, "body") || x(this).replaceWith(this.childNodes);
            }).end();
        }
    });
    var vt, xt, bt = /^(none|table(?!-c[ea]).+)/, wt = /^margin/, Tt = RegExp("^(" + b + ")(.*)$", "i"), Ct = RegExp("^(" + b + ")(?!px)[a-z%]+$", "i"), kt = RegExp("^([+-])=(" + b + ")", "i"), Nt = {
        BODY: "block"
    }, Et = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, St = {
        letterSpacing: 0,
        fontWeight: 400
    }, jt = [ "Top", "Right", "Bottom", "Left" ], Dt = [ "Webkit", "O", "Moz", "ms" ];
    x.fn.extend({
        css: function(e, t) {
            return x.access(this, function(e, t, n) {
                var r, i, o = {}, s = 0;
                if (x.isArray(t)) {
                    for (r = qt(e), i = t.length; i > s; s++) o[t[s]] = x.css(e, t[s], !1, r);
                    return o;
                }
                return n !== undefined ? x.style(e, t, n) : x.css(e, t);
            }, e, t, arguments.length > 1);
        },
        show: function() {
            return Ht(this, !0);
        },
        hide: function() {
            return Ht(this);
        },
        toggle: function(e) {
            return "boolean" == typeof e ? e ? this.show() : this.hide() : this.each(function() {
                Lt(this) ? x(this).show() : x(this).hide();
            });
        }
    }), x.extend({
        cssHooks: {
            opacity: {
                get: function(e, t) {
                    if (t) {
                        var n = vt(e, "opacity");
                        return "" === n ? "1" : n;
                    }
                }
            }
        },
        cssNumber: {
            columnCount: !0,
            fillOpacity: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {
            "float": "cssFloat"
        },
        style: function(e, t, n, r) {
            if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {
                var i, o, s, a = x.camelCase(t), u = e.style;
                return t = x.cssProps[a] || (x.cssProps[a] = At(u, a)), s = x.cssHooks[t] || x.cssHooks[a], 
                n === undefined ? s && "get" in s && (i = s.get(e, !1, r)) !== undefined ? i : u[t] : (o = typeof n, 
                "string" === o && (i = kt.exec(n)) && (n = (i[1] + 1) * i[2] + parseFloat(x.css(e, t)), 
                o = "number"), null == n || "number" === o && isNaN(n) || ("number" !== o || x.cssNumber[a] || (n += "px"), 
                x.support.clearCloneStyle || "" !== n || 0 !== t.indexOf("background") || (u[t] = "inherit"), 
                s && "set" in s && (n = s.set(e, n, r)) === undefined || (u[t] = n)), undefined);
            }
        },
        css: function(e, t, n, r) {
            var i, o, s, a = x.camelCase(t);
            return t = x.cssProps[a] || (x.cssProps[a] = At(e.style, a)), s = x.cssHooks[t] || x.cssHooks[a], 
            s && "get" in s && (i = s.get(e, !0, n)), i === undefined && (i = vt(e, t, r)), 
            "normal" === i && t in St && (i = St[t]), "" === n || n ? (o = parseFloat(i), n === !0 || x.isNumeric(o) ? o || 0 : i) : i;
        }
    }), vt = function(e, t, n) {
        var r, i, o, s = n || qt(e), a = s ? s.getPropertyValue(t) || s[t] : undefined, u = e.style;
        return s && ("" !== a || x.contains(e.ownerDocument, e) || (a = x.style(e, t)), 
        Ct.test(a) && wt.test(t) && (r = u.width, i = u.minWidth, o = u.maxWidth, u.minWidth = u.maxWidth = u.width = a, 
        a = s.width, u.width = r, u.minWidth = i, u.maxWidth = o)), a;
    }, x.each([ "height", "width" ], function(e, t) {
        x.cssHooks[t] = {
            get: function(e, n, r) {
                return n ? 0 === e.offsetWidth && bt.test(x.css(e, "display")) ? x.swap(e, Et, function() {
                    return Pt(e, t, r);
                }) : Pt(e, t, r) : undefined;
            },
            set: function(e, n, r) {
                var i = r && qt(e);
                return Ot(e, n, r ? Ft(e, t, r, x.support.boxSizing && "border-box" === x.css(e, "boxSizing", !1, i), i) : 0);
            }
        };
    }), x(function() {
        x.support.reliableMarginRight || (x.cssHooks.marginRight = {
            get: function(e, t) {
                return t ? x.swap(e, {
                    display: "inline-block"
                }, vt, [ e, "marginRight" ]) : undefined;
            }
        }), !x.support.pixelPosition && x.fn.position && x.each([ "top", "left" ], function(e, t) {
            x.cssHooks[t] = {
                get: function(e, n) {
                    return n ? (n = vt(e, t), Ct.test(n) ? x(e).position()[t] + "px" : n) : undefined;
                }
            };
        });
    }), x.expr && x.expr.filters && (x.expr.filters.hidden = function(e) {
        return 0 >= e.offsetWidth && 0 >= e.offsetHeight;
    }, x.expr.filters.visible = function(e) {
        return !x.expr.filters.hidden(e);
    }), x.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(e, t) {
        x.cssHooks[e + t] = {
            expand: function(n) {
                for (var r = 0, i = {}, o = "string" == typeof n ? n.split(" ") : [ n ]; 4 > r; r++) i[e + jt[r] + t] = o[r] || o[r - 2] || o[0];
                return i;
            }
        }, wt.test(e) || (x.cssHooks[e + t].set = Ot);
    });
    var Wt = /%20/g, $t = /\[\]$/, Bt = /\r?\n/g, It = /^(?:submit|button|image|reset|file)$/i, zt = /^(?:input|select|textarea|keygen)/i;
    x.fn.extend({
        serialize: function() {
            return x.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                var e = x.prop(this, "elements");
                return e ? x.makeArray(e) : this;
            }).filter(function() {
                var e = this.type;
                return this.name && !x(this).is(":disabled") && zt.test(this.nodeName) && !It.test(e) && (this.checked || !ot.test(e));
            }).map(function(e, t) {
                var n = x(this).val();
                return null == n ? null : x.isArray(n) ? x.map(n, function(e) {
                    return {
                        name: t.name,
                        value: e.replace(Bt, "\r\n")
                    };
                }) : {
                    name: t.name,
                    value: n.replace(Bt, "\r\n")
                };
            }).get();
        }
    }), x.param = function(e, t) {
        var n, r = [], i = function(e, t) {
            t = x.isFunction(t) ? t() : null == t ? "" : t, r[r.length] = encodeURIComponent(e) + "=" + encodeURIComponent(t);
        };
        if (t === undefined && (t = x.ajaxSettings && x.ajaxSettings.traditional), x.isArray(e) || e.jquery && !x.isPlainObject(e)) x.each(e, function() {
            i(this.name, this.value);
        }); else for (n in e) _t(n, e[n], t, i);
        return r.join("&").replace(Wt, "+");
    }, x.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(e, t) {
        x.fn[t] = function(e, n) {
            return arguments.length > 0 ? this.on(t, null, e, n) : this.trigger(t);
        };
    }), x.fn.extend({
        hover: function(e, t) {
            return this.mouseenter(e).mouseleave(t || e);
        },
        bind: function(e, t, n) {
            return this.on(e, null, t, n);
        },
        unbind: function(e, t) {
            return this.off(e, null, t);
        },
        delegate: function(e, t, n, r) {
            return this.on(t, e, n, r);
        },
        undelegate: function(e, t, n) {
            return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n);
        }
    });
    var Xt, Ut, Yt = x.now(), Vt = /\?/, Gt = /#.*$/, Jt = /([?&])_=[^&]*/, Qt = /^(.*?):[ \t]*([^\r\n]*)$/gm, Kt = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, Zt = /^(?:GET|HEAD)$/, en = /^\/\//, tn = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/, nn = x.fn.load, rn = {}, on = {}, sn = "*/".concat("*");
    try {
        Ut = i.href;
    } catch (an) {
        Ut = o.createElement("a"), Ut.href = "", Ut = Ut.href;
    }
    Xt = tn.exec(Ut.toLowerCase()) || [], x.fn.load = function(e, t, n) {
        if ("string" != typeof e && nn) return nn.apply(this, arguments);
        var r, i, o, s = this, a = e.indexOf(" ");
        return a >= 0 && (r = e.slice(a), e = e.slice(0, a)), x.isFunction(t) ? (n = t, 
        t = undefined) : t && "object" == typeof t && (i = "POST"), s.length > 0 && x.ajax({
            url: e,
            type: i,
            dataType: "html",
            data: t
        }).done(function(e) {
            o = arguments, s.html(r ? x("<div>").append(x.parseHTML(e)).find(r) : e);
        }).complete(n && function(e, t) {
            s.each(n, o || [ e.responseText, t, e ]);
        }), this;
    }, x.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(e, t) {
        x.fn[t] = function(e) {
            return this.on(t, e);
        };
    }), x.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: Ut,
            type: "GET",
            isLocal: Kt.test(Xt[1]),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": sn,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": x.parseJSON,
                "text xml": x.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function(e, t) {
            return t ? cn(cn(e, x.ajaxSettings), t) : cn(x.ajaxSettings, e);
        },
        ajaxPrefilter: un(rn),
        ajaxTransport: un(on),
        ajax: function(e, t) {
            function k(e, t, o, a) {
                var l, m, y, b, w, C = t;
                2 !== v && (v = 2, s && clearTimeout(s), n = undefined, i = a || "", T.readyState = e > 0 ? 4 : 0, 
                l = e >= 200 && 300 > e || 304 === e, o && (b = pn(c, T, o)), b = fn(c, b, T, l), 
                l ? (c.ifModified && (w = T.getResponseHeader("Last-Modified"), w && (x.lastModified[r] = w), 
                w = T.getResponseHeader("etag"), w && (x.etag[r] = w)), 204 === e || "HEAD" === c.type ? C = "nocontent" : 304 === e ? C = "notmodified" : (C = b.state, 
                m = b.data, y = b.error, l = !y)) : (y = C, (e || !C) && (C = "error", 0 > e && (e = 0))), 
                T.status = e, T.statusText = (t || C) + "", l ? h.resolveWith(p, [ m, C, T ]) : h.rejectWith(p, [ T, C, y ]), 
                T.statusCode(g), g = undefined, u && f.trigger(l ? "ajaxSuccess" : "ajaxError", [ T, c, l ? m : y ]), 
                d.fireWith(p, [ T, C ]), u && (f.trigger("ajaxComplete", [ T, c ]), --x.active || x.event.trigger("ajaxStop")));
            }
            "object" == typeof e && (t = e, e = undefined), t = t || {};
            var n, r, i, o, s, a, u, l, c = x.ajaxSetup({}, t), p = c.context || c, f = c.context && (p.nodeType || p.jquery) ? x(p) : x.event, h = x.Deferred(), d = x.Callbacks("once memory"), g = c.statusCode || {}, m = {}, y = {}, v = 0, b = "canceled", T = {
                readyState: 0,
                getResponseHeader: function(e) {
                    var t;
                    if (2 === v) {
                        if (!o) for (o = {}; t = Qt.exec(i); ) o[t[1].toLowerCase()] = t[2];
                        t = o[e.toLowerCase()];
                    }
                    return null == t ? null : t;
                },
                getAllResponseHeaders: function() {
                    return 2 === v ? i : null;
                },
                setRequestHeader: function(e, t) {
                    var n = e.toLowerCase();
                    return v || (e = y[n] = y[n] || e, m[e] = t), this;
                },
                overrideMimeType: function(e) {
                    return v || (c.mimeType = e), this;
                },
                statusCode: function(e) {
                    var t;
                    if (e) if (2 > v) for (t in e) g[t] = [ g[t], e[t] ]; else T.always(e[T.status]);
                    return this;
                },
                abort: function(e) {
                    var t = e || b;
                    return n && n.abort(t), k(0, t), this;
                }
            };
            if (h.promise(T).complete = d.add, T.success = T.done, T.error = T.fail, c.url = ((e || c.url || Ut) + "").replace(Gt, "").replace(en, Xt[1] + "//"), 
            c.type = t.method || t.type || c.method || c.type, c.dataTypes = x.trim(c.dataType || "*").toLowerCase().match(w) || [ "" ], 
            null == c.crossDomain && (a = tn.exec(c.url.toLowerCase()), c.crossDomain = !(!a || a[1] === Xt[1] && a[2] === Xt[2] && (a[3] || ("http:" === a[1] ? "80" : "443")) === (Xt[3] || ("http:" === Xt[1] ? "80" : "443")))), 
            c.data && c.processData && "string" != typeof c.data && (c.data = x.param(c.data, c.traditional)), 
            ln(rn, c, t, T), 2 === v) return T;
            u = c.global, u && 0 === x.active++ && x.event.trigger("ajaxStart"), c.type = c.type.toUpperCase(), 
            c.hasContent = !Zt.test(c.type), r = c.url, c.hasContent || (c.data && (r = c.url += (Vt.test(r) ? "&" : "?") + c.data, 
            delete c.data), c.cache === !1 && (c.url = Jt.test(r) ? r.replace(Jt, "$1_=" + Yt++) : r + (Vt.test(r) ? "&" : "?") + "_=" + Yt++)), 
            c.ifModified && (x.lastModified[r] && T.setRequestHeader("If-Modified-Since", x.lastModified[r]), 
            x.etag[r] && T.setRequestHeader("If-None-Match", x.etag[r])), (c.data && c.hasContent && c.contentType !== !1 || t.contentType) && T.setRequestHeader("Content-Type", c.contentType), 
            T.setRequestHeader("Accept", c.dataTypes[0] && c.accepts[c.dataTypes[0]] ? c.accepts[c.dataTypes[0]] + ("*" !== c.dataTypes[0] ? ", " + sn + "; q=0.01" : "") : c.accepts["*"]);
            for (l in c.headers) T.setRequestHeader(l, c.headers[l]);
            if (c.beforeSend && (c.beforeSend.call(p, T, c) === !1 || 2 === v)) return T.abort();
            b = "abort";
            for (l in {
                success: 1,
                error: 1,
                complete: 1
            }) T[l](c[l]);
            if (n = ln(on, c, t, T)) {
                T.readyState = 1, u && f.trigger("ajaxSend", [ T, c ]), c.async && c.timeout > 0 && (s = setTimeout(function() {
                    T.abort("timeout");
                }, c.timeout));
                try {
                    v = 1, n.send(m, k);
                } catch (C) {
                    if (!(2 > v)) throw C;
                    k(-1, C);
                }
            } else k(-1, "No Transport");
            return T;
        },
        getJSON: function(e, t, n) {
            return x.get(e, t, n, "json");
        },
        getScript: function(e, t) {
            return x.get(e, undefined, t, "script");
        }
    }), x.each([ "get", "post" ], function(e, t) {
        x[t] = function(e, n, r, i) {
            return x.isFunction(n) && (i = i || r, r = n, n = undefined), x.ajax({
                url: e,
                type: t,
                dataType: i,
                data: n,
                success: r
            });
        };
    }), x.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function(e) {
                return x.globalEval(e), e;
            }
        }
    }), x.ajaxPrefilter("script", function(e) {
        e.cache === undefined && (e.cache = !1), e.crossDomain && (e.type = "GET");
    }), x.ajaxTransport("script", function(e) {
        if (e.crossDomain) {
            var t, n;
            return {
                send: function(r, i) {
                    t = x("<script>").prop({
                        async: !0,
                        charset: e.scriptCharset,
                        src: e.url
                    }).on("load error", n = function(e) {
                        t.remove(), n = null, e && i("error" === e.type ? 404 : 200, e.type);
                    }), o.head.appendChild(t[0]);
                },
                abort: function() {
                    n && n();
                }
            };
        }
    });
    var hn = [], dn = /(=)\?(?=&|$)|\?\?/;
    x.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var e = hn.pop() || x.expando + "_" + Yt++;
            return this[e] = !0, e;
        }
    }), x.ajaxPrefilter("json jsonp", function(t, n, r) {
        var i, o, s, a = t.jsonp !== !1 && (dn.test(t.url) ? "url" : "string" == typeof t.data && !(t.contentType || "").indexOf("application/x-www-form-urlencoded") && dn.test(t.data) && "data");
        return a || "jsonp" === t.dataTypes[0] ? (i = t.jsonpCallback = x.isFunction(t.jsonpCallback) ? t.jsonpCallback() : t.jsonpCallback, 
        a ? t[a] = t[a].replace(dn, "$1" + i) : t.jsonp !== !1 && (t.url += (Vt.test(t.url) ? "&" : "?") + t.jsonp + "=" + i), 
        t.converters["script json"] = function() {
            return s || x.error(i + " was not called"), s[0];
        }, t.dataTypes[0] = "json", o = e[i], e[i] = function() {
            s = arguments;
        }, r.always(function() {
            e[i] = o, t[i] && (t.jsonpCallback = n.jsonpCallback, hn.push(i)), s && x.isFunction(o) && o(s[0]), 
            s = o = undefined;
        }), "script") : undefined;
    }), x.ajaxSettings.xhr = function() {
        try {
            return new XMLHttpRequest();
        } catch (e) {}
    };
    var gn = x.ajaxSettings.xhr(), mn = {
        0: 200,
        1223: 204
    }, yn = 0, vn = {};
    e.ActiveXObject && x(e).on("unload", function() {
        for (var e in vn) vn[e]();
        vn = undefined;
    }), x.support.cors = !!gn && "withCredentials" in gn, x.support.ajax = gn = !!gn, 
    x.ajaxTransport(function(e) {
        var t;
        return x.support.cors || gn && !e.crossDomain ? {
            send: function(n, r) {
                var i, o, s = e.xhr();
                if (s.open(e.type, e.url, e.async, e.username, e.password), e.xhrFields) for (i in e.xhrFields) s[i] = e.xhrFields[i];
                e.mimeType && s.overrideMimeType && s.overrideMimeType(e.mimeType), e.crossDomain || n["X-Requested-With"] || (n["X-Requested-With"] = "XMLHttpRequest");
                for (i in n) s.setRequestHeader(i, n[i]);
                t = function(e) {
                    return function() {
                        t && (delete vn[o], t = s.onload = s.onerror = null, "abort" === e ? s.abort() : "error" === e ? r(s.status || 404, s.statusText) : r(mn[s.status] || s.status, s.statusText, "string" == typeof s.responseText ? {
                            text: s.responseText
                        } : undefined, s.getAllResponseHeaders()));
                    };
                }, s.onload = t(), s.onerror = t("error"), t = vn[o = yn++] = t("abort"), s.send(e.hasContent && e.data || null);
            },
            abort: function() {
                t && t();
            }
        } : undefined;
    });
    var xn, bn, wn = /^(?:toggle|show|hide)$/, Tn = RegExp("^(?:([+-])=|)(" + b + ")([a-z%]*)$", "i"), Cn = /queueHooks$/, kn = [ An ], Nn = {
        "*": [ function(e, t) {
            var n = this.createTween(e, t), r = n.cur(), i = Tn.exec(t), o = i && i[3] || (x.cssNumber[e] ? "" : "px"), s = (x.cssNumber[e] || "px" !== o && +r) && Tn.exec(x.css(n.elem, e)), a = 1, u = 20;
            if (s && s[3] !== o) {
                o = o || s[3], i = i || [], s = +r || 1;
                do a = a || ".5", s /= a, x.style(n.elem, e, s + o); while (a !== (a = n.cur() / r) && 1 !== a && --u);
            }
            return i && (s = n.start = +s || +r || 0, n.unit = o, n.end = i[1] ? s + (i[1] + 1) * i[2] : +i[2]), 
            n;
        } ]
    };
    x.Animation = x.extend(jn, {
        tweener: function(e, t) {
            x.isFunction(e) ? (t = e, e = [ "*" ]) : e = e.split(" ");
            for (var n, r = 0, i = e.length; i > r; r++) n = e[r], Nn[n] = Nn[n] || [], Nn[n].unshift(t);
        },
        prefilter: function(e, t) {
            t ? kn.unshift(e) : kn.push(e);
        }
    }), x.Tween = Ln, Ln.prototype = {
        constructor: Ln,
        init: function(e, t, n, r, i, o) {
            this.elem = e, this.prop = n, this.easing = i || "swing", this.options = t, this.start = this.now = this.cur(), 
            this.end = r, this.unit = o || (x.cssNumber[n] ? "" : "px");
        },
        cur: function() {
            var e = Ln.propHooks[this.prop];
            return e && e.get ? e.get(this) : Ln.propHooks._default.get(this);
        },
        run: function(e) {
            var t, n = Ln.propHooks[this.prop];
            return this.pos = t = this.options.duration ? x.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : e, 
            this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), 
            n && n.set ? n.set(this) : Ln.propHooks._default.set(this), this;
        }
    }, Ln.prototype.init.prototype = Ln.prototype, Ln.propHooks = {
        _default: {
            get: function(e) {
                var t;
                return null == e.elem[e.prop] || e.elem.style && null != e.elem.style[e.prop] ? (t = x.css(e.elem, e.prop, ""), 
                t && "auto" !== t ? t : 0) : e.elem[e.prop];
            },
            set: function(e) {
                x.fx.step[e.prop] ? x.fx.step[e.prop](e) : e.elem.style && (null != e.elem.style[x.cssProps[e.prop]] || x.cssHooks[e.prop]) ? x.style(e.elem, e.prop, e.now + e.unit) : e.elem[e.prop] = e.now;
            }
        }
    }, Ln.propHooks.scrollTop = Ln.propHooks.scrollLeft = {
        set: function(e) {
            e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now);
        }
    }, x.each([ "toggle", "show", "hide" ], function(e, t) {
        var n = x.fn[t];
        x.fn[t] = function(e, r, i) {
            return null == e || "boolean" == typeof e ? n.apply(this, arguments) : this.animate(qn(t, !0), e, r, i);
        };
    }), x.fn.extend({
        fadeTo: function(e, t, n, r) {
            return this.filter(Lt).css("opacity", 0).show().end().animate({
                opacity: t
            }, e, n, r);
        },
        animate: function(e, t, n, r) {
            var i = x.isEmptyObject(e), o = x.speed(t, n, r), s = function() {
                var t = jn(this, x.extend({}, e), o);
                (i || q.get(this, "finish")) && t.stop(!0);
            };
            return s.finish = s, i || o.queue === !1 ? this.each(s) : this.queue(o.queue, s);
        },
        stop: function(e, t, n) {
            var r = function(e) {
                var t = e.stop;
                delete e.stop, t(n);
            };
            return "string" != typeof e && (n = t, t = e, e = undefined), t && e !== !1 && this.queue(e || "fx", []), 
            this.each(function() {
                var t = !0, i = null != e && e + "queueHooks", o = x.timers, s = q.get(this);
                if (i) s[i] && s[i].stop && r(s[i]); else for (i in s) s[i] && s[i].stop && Cn.test(i) && r(s[i]);
                for (i = o.length; i--; ) o[i].elem !== this || null != e && o[i].queue !== e || (o[i].anim.stop(n), 
                t = !1, o.splice(i, 1));
                (t || !n) && x.dequeue(this, e);
            });
        },
        finish: function(e) {
            return e !== !1 && (e = e || "fx"), this.each(function() {
                var t, n = q.get(this), r = n[e + "queue"], i = n[e + "queueHooks"], o = x.timers, s = r ? r.length : 0;
                for (n.finish = !0, x.queue(this, e, []), i && i.stop && i.stop.call(this, !0), 
                t = o.length; t--; ) o[t].elem === this && o[t].queue === e && (o[t].anim.stop(!0), 
                o.splice(t, 1));
                for (t = 0; s > t; t++) r[t] && r[t].finish && r[t].finish.call(this);
                delete n.finish;
            });
        }
    }), x.each({
        slideDown: qn("show"),
        slideUp: qn("hide"),
        slideToggle: qn("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(e, t) {
        x.fn[e] = function(e, n, r) {
            return this.animate(t, e, n, r);
        };
    }), x.speed = function(e, t, n) {
        var r = e && "object" == typeof e ? x.extend({}, e) : {
            complete: n || !n && t || x.isFunction(e) && e,
            duration: e,
            easing: n && t || t && !x.isFunction(t) && t
        };
        return r.duration = x.fx.off ? 0 : "number" == typeof r.duration ? r.duration : r.duration in x.fx.speeds ? x.fx.speeds[r.duration] : x.fx.speeds._default, 
        (null == r.queue || r.queue === !0) && (r.queue = "fx"), r.old = r.complete, r.complete = function() {
            x.isFunction(r.old) && r.old.call(this), r.queue && x.dequeue(this, r.queue);
        }, r;
    }, x.easing = {
        linear: function(e) {
            return e;
        },
        swing: function(e) {
            return .5 - Math.cos(e * Math.PI) / 2;
        }
    }, x.timers = [], x.fx = Ln.prototype.init, x.fx.tick = function() {
        var e, t = x.timers, n = 0;
        for (xn = x.now(); t.length > n; n++) e = t[n], e() || t[n] !== e || t.splice(n--, 1);
        t.length || x.fx.stop(), xn = undefined;
    }, x.fx.timer = function(e) {
        e() && x.timers.push(e) && x.fx.start();
    }, x.fx.interval = 13, x.fx.start = function() {
        bn || (bn = setInterval(x.fx.tick, x.fx.interval));
    }, x.fx.stop = function() {
        clearInterval(bn), bn = null;
    }, x.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    }, x.fx.step = {}, x.expr && x.expr.filters && (x.expr.filters.animated = function(e) {
        return x.grep(x.timers, function(t) {
            return e === t.elem;
        }).length;
    }), x.fn.offset = function(e) {
        if (arguments.length) return e === undefined ? this : this.each(function(t) {
            x.offset.setOffset(this, e, t);
        });
        var t, n, i = this[0], o = {
            top: 0,
            left: 0
        }, s = i && i.ownerDocument;
        return s ? (t = s.documentElement, x.contains(t, i) ? (typeof i.getBoundingClientRect !== r && (o = i.getBoundingClientRect()), 
        n = Hn(s), {
            top: o.top + n.pageYOffset - t.clientTop,
            left: o.left + n.pageXOffset - t.clientLeft
        }) : o) : void 0;
    }, x.offset = {
        setOffset: function(e, t, n) {
            var r, i, o, s, a, u, l, c = x.css(e, "position"), p = x(e), f = {};
            "static" === c && (e.style.position = "relative"), a = p.offset(), o = x.css(e, "top"), 
            u = x.css(e, "left"), l = ("absolute" === c || "fixed" === c) && (o + u).indexOf("auto") > -1, 
            l ? (r = p.position(), s = r.top, i = r.left) : (s = parseFloat(o) || 0, i = parseFloat(u) || 0), 
            x.isFunction(t) && (t = t.call(e, n, a)), null != t.top && (f.top = t.top - a.top + s), 
            null != t.left && (f.left = t.left - a.left + i), "using" in t ? t.using.call(e, f) : p.css(f);
        }
    }, x.fn.extend({
        position: function() {
            if (this[0]) {
                var e, t, n = this[0], r = {
                    top: 0,
                    left: 0
                };
                return "fixed" === x.css(n, "position") ? t = n.getBoundingClientRect() : (e = this.offsetParent(), 
                t = this.offset(), x.nodeName(e[0], "html") || (r = e.offset()), r.top += x.css(e[0], "borderTopWidth", !0), 
                r.left += x.css(e[0], "borderLeftWidth", !0)), {
                    top: t.top - r.top - x.css(n, "marginTop", !0),
                    left: t.left - r.left - x.css(n, "marginLeft", !0)
                };
            }
        },
        offsetParent: function() {
            return this.map(function() {
                for (var e = this.offsetParent || s; e && !x.nodeName(e, "html") && "static" === x.css(e, "position"); ) e = e.offsetParent;
                return e || s;
            });
        }
    }), x.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(t, n) {
        var r = "pageYOffset" === n;
        x.fn[t] = function(i) {
            return x.access(this, function(t, i, o) {
                var s = Hn(t);
                return o === undefined ? s ? s[n] : t[i] : (s ? s.scrollTo(r ? e.pageXOffset : o, r ? o : e.pageYOffset) : t[i] = o, 
                undefined);
            }, t, i, arguments.length, null);
        };
    }), x.each({
        Height: "height",
        Width: "width"
    }, function(e, t) {
        x.each({
            padding: "inner" + e,
            content: t,
            "": "outer" + e
        }, function(n, r) {
            x.fn[r] = function(r, i) {
                var o = arguments.length && (n || "boolean" != typeof r), s = n || (r === !0 || i === !0 ? "margin" : "border");
                return x.access(this, function(t, n, r) {
                    var i;
                    return x.isWindow(t) ? t.document.documentElement["client" + e] : 9 === t.nodeType ? (i = t.documentElement, 
                    Math.max(t.body["scroll" + e], i["scroll" + e], t.body["offset" + e], i["offset" + e], i["client" + e])) : r === undefined ? x.css(t, n, s) : x.style(t, n, r, s);
                }, t, o ? r : undefined, o, null);
            };
        });
    }), x.fn.size = function() {
        return this.length;
    }, x.fn.andSelf = x.fn.addBack, "object" == typeof module && module && "object" == typeof module.exports ? module.exports = x : "function" == typeof define && define.amd && define("jquery", [], function() {
        return x;
    }), "object" == typeof e && "object" == typeof e.document && (e.jQuery = e.$ = x);
}(window), function(window, document, undefined) {
    "use strict";
    function minErr(module) {
        return function() {
            var message, i, code = arguments[0], prefix = "[" + (module ? module + ":" : "") + code + "] ", template = arguments[1], templateArgs = arguments, stringify = function(obj) {
                return "function" == typeof obj ? obj.toString().replace(/ \{[\s\S]*$/, "") : "undefined" == typeof obj ? "undefined" : "string" != typeof obj ? JSON.stringify(obj) : obj;
            };
            for (message = prefix + template.replace(/\{\d+\}/g, function(match) {
                var arg, index = +match.slice(1, -1);
                return index + 2 < templateArgs.length ? (arg = templateArgs[index + 2], "function" == typeof arg ? arg.toString().replace(/ ?\{[\s\S]*$/, "") : "undefined" == typeof arg ? "undefined" : "string" != typeof arg ? toJson(arg) : arg) : match;
            }), message = message + "\nhttp://errors.angularjs.org/1.3.0-local+sha.dba0162/" + (module ? module + "/" : "") + code, 
            i = 2; i < arguments.length; i++) message = message + (2 == i ? "?" : "&") + "p" + (i - 2) + "=" + encodeURIComponent(stringify(arguments[i]));
            return new Error(message);
        };
    }
    function isArrayLike(obj) {
        if (null == obj || isWindow(obj)) return !1;
        var length = obj.length;
        return 1 === obj.nodeType && length ? !0 : isString(obj) || isArray(obj) || 0 === length || "number" == typeof length && length > 0 && length - 1 in obj;
    }
    function forEach(obj, iterator, context) {
        var key;
        if (obj) if (isFunction(obj)) for (key in obj) "prototype" == key || "length" == key || "name" == key || obj.hasOwnProperty && !obj.hasOwnProperty(key) || iterator.call(context, obj[key], key); else if (obj.forEach && obj.forEach !== forEach) obj.forEach(iterator, context); else if (isArrayLike(obj)) for (key = 0; key < obj.length; key++) iterator.call(context, obj[key], key); else for (key in obj) obj.hasOwnProperty(key) && iterator.call(context, obj[key], key);
        return obj;
    }
    function sortedKeys(obj) {
        var keys = [];
        for (var key in obj) obj.hasOwnProperty(key) && keys.push(key);
        return keys.sort();
    }
    function forEachSorted(obj, iterator, context) {
        for (var keys = sortedKeys(obj), i = 0; i < keys.length; i++) iterator.call(context, obj[keys[i]], keys[i]);
        return keys;
    }
    function reverseParams(iteratorFn) {
        return function(value, key) {
            iteratorFn(key, value);
        };
    }
    function nextUid() {
        for (var digit, index = uid.length; index; ) {
            if (index--, digit = uid[index].charCodeAt(0), 57 == digit) return uid[index] = "A", 
            uid.join("");
            if (90 != digit) return uid[index] = String.fromCharCode(digit + 1), uid.join("");
            uid[index] = "0";
        }
        return uid.unshift("0"), uid.join("");
    }
    function setHashKey(obj, h) {
        h ? obj.$$hashKey = h : delete obj.$$hashKey;
    }
    function extend(dst) {
        var h = dst.$$hashKey;
        return forEach(arguments, function(obj) {
            obj !== dst && forEach(obj, function(value, key) {
                dst[key] = value;
            });
        }), setHashKey(dst, h), dst;
    }
    function int(str) {
        return parseInt(str, 10);
    }
    function inherit(parent, extra) {
        return extend(new (extend(function() {}, {
            prototype: parent
        }))(), extra);
    }
    function noop() {}
    function identity($) {
        return $;
    }
    function valueFn(value) {
        return function() {
            return value;
        };
    }
    function isUndefined(value) {
        return "undefined" == typeof value;
    }
    function isDefined(value) {
        return "undefined" != typeof value;
    }
    function isObject(value) {
        return null != value && "object" == typeof value;
    }
    function isString(value) {
        return "string" == typeof value;
    }
    function isNumber(value) {
        return "number" == typeof value;
    }
    function isDate(value) {
        return "[object Date]" === toString.call(value);
    }
    function isArray(value) {
        return "[object Array]" === toString.call(value);
    }
    function isFunction(value) {
        return "function" == typeof value;
    }
    function isRegExp(value) {
        return "[object RegExp]" === toString.call(value);
    }
    function isWindow(obj) {
        return obj && obj.document && obj.location && obj.alert && obj.setInterval;
    }
    function isScope(obj) {
        return obj && obj.$evalAsync && obj.$watch;
    }
    function isFile(obj) {
        return "[object File]" === toString.call(obj);
    }
    function isBlob(obj) {
        return "[object Blob]" === toString.call(obj);
    }
    function isElement(node) {
        return !(!node || !(node.nodeName || node.prop && node.attr && node.find));
    }
    function map(obj, iterator, context) {
        var results = [];
        return forEach(obj, function(value, index, list) {
            results.push(iterator.call(context, value, index, list));
        }), results;
    }
    function includes(array, obj) {
        return -1 != indexOf(array, obj);
    }
    function indexOf(array, obj) {
        if (array.indexOf) return array.indexOf(obj);
        for (var i = 0; i < array.length; i++) if (obj === array[i]) return i;
        return -1;
    }
    function arrayRemove(array, value) {
        var index = indexOf(array, value);
        return index >= 0 && array.splice(index, 1), value;
    }
    function copy(source, destination) {
        if (isWindow(source) || isScope(source)) throw ngMinErr("cpws", "Can't copy! Making copies of Window or Scope instances is not supported.");
        if (destination) {
            if (source === destination) throw ngMinErr("cpi", "Can't copy! Source and destination are identical.");
            if (isArray(source)) {
                destination.length = 0;
                for (var i = 0; i < source.length; i++) destination.push(copy(source[i]));
            } else {
                var h = destination.$$hashKey;
                forEach(destination, function(value, key) {
                    delete destination[key];
                });
                for (var key in source) destination[key] = copy(source[key]);
                setHashKey(destination, h);
            }
        } else destination = source, source && (isArray(source) ? destination = copy(source, []) : isDate(source) ? destination = new Date(source.getTime()) : isRegExp(source) ? destination = new RegExp(source.source) : isObject(source) && (destination = copy(source, {})));
        return destination;
    }
    function shallowCopy(src, dst) {
        dst = dst || {};
        for (var key in src) !src.hasOwnProperty(key) || "$" === key.charAt(0) && "$" === key.charAt(1) || (dst[key] = src[key]);
        return dst;
    }
    function equals(o1, o2) {
        if (o1 === o2) return !0;
        if (null === o1 || null === o2) return !1;
        if (o1 !== o1 && o2 !== o2) return !0;
        var length, key, keySet, t1 = typeof o1, t2 = typeof o2;
        if (t1 == t2 && "object" == t1) {
            if (!isArray(o1)) {
                if (isDate(o1)) return isDate(o2) && o1.getTime() == o2.getTime();
                if (isRegExp(o1) && isRegExp(o2)) return o1.toString() == o2.toString();
                if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) || isArray(o2)) return !1;
                keySet = {};
                for (key in o1) if ("$" !== key.charAt(0) && !isFunction(o1[key])) {
                    if (!equals(o1[key], o2[key])) return !1;
                    keySet[key] = !0;
                }
                for (key in o2) if (!keySet.hasOwnProperty(key) && "$" !== key.charAt(0) && o2[key] !== undefined && !isFunction(o2[key])) return !1;
                return !0;
            }
            if (!isArray(o2)) return !1;
            if ((length = o1.length) == o2.length) {
                for (key = 0; length > key; key++) if (!equals(o1[key], o2[key])) return !1;
                return !0;
            }
        }
        return !1;
    }
    function csp() {
        return document.securityPolicy && document.securityPolicy.isActive || document.querySelector && !(!document.querySelector("[ng-csp]") && !document.querySelector("[data-ng-csp]"));
    }
    function concat(array1, array2, index) {
        return array1.concat(slice.call(array2, index));
    }
    function sliceArgs(args, startIndex) {
        return slice.call(args, startIndex || 0);
    }
    function bind(self, fn) {
        var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
        return !isFunction(fn) || fn instanceof RegExp ? fn : curryArgs.length ? function() {
            return arguments.length ? fn.apply(self, curryArgs.concat(slice.call(arguments, 0))) : fn.apply(self, curryArgs);
        } : function() {
            return arguments.length ? fn.apply(self, arguments) : fn.call(self);
        };
    }
    function toJsonReplacer(key, value) {
        var val = value;
        return "string" == typeof key && "$" === key.charAt(0) ? val = undefined : isWindow(value) ? val = "$WINDOW" : value && document === value ? val = "$DOCUMENT" : isScope(value) && (val = "$SCOPE"), 
        val;
    }
    function toJson(obj, pretty) {
        return "undefined" == typeof obj ? undefined : JSON.stringify(obj, toJsonReplacer, pretty ? "  " : null);
    }
    function fromJson(json) {
        return isString(json) ? JSON.parse(json) : json;
    }
    function toBoolean(value) {
        if ("function" == typeof value) value = !0; else if (value && 0 !== value.length) {
            var v = lowercase("" + value);
            value = !("f" == v || "0" == v || "false" == v || "no" == v || "n" == v || "[]" == v);
        } else value = !1;
        return value;
    }
    function startingTag(element) {
        element = jqLite(element).clone();
        try {
            element.empty();
        } catch (e) {}
        var TEXT_NODE = 3, elemHtml = jqLite("<div>").append(element).html();
        try {
            return element[0].nodeType === TEXT_NODE ? lowercase(elemHtml) : elemHtml.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/, function(match, nodeName) {
                return "<" + lowercase(nodeName);
            });
        } catch (e) {
            return lowercase(elemHtml);
        }
    }
    function tryDecodeURIComponent(value) {
        try {
            return decodeURIComponent(value);
        } catch (e) {}
    }
    function parseKeyValue(keyValue) {
        var key_value, key, obj = {};
        return forEach((keyValue || "").split("&"), function(keyValue) {
            if (keyValue && (key_value = keyValue.split("="), key = tryDecodeURIComponent(key_value[0]), 
            isDefined(key))) {
                var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : !0;
                obj[key] ? isArray(obj[key]) ? obj[key].push(val) : obj[key] = [ obj[key], val ] : obj[key] = val;
            }
        }), obj;
    }
    function toKeyValue(obj) {
        var parts = [];
        return forEach(obj, function(value, key) {
            isArray(value) ? forEach(value, function(arrayValue) {
                parts.push(encodeUriQuery(key, !0) + (arrayValue === !0 ? "" : "=" + encodeUriQuery(arrayValue, !0)));
            }) : parts.push(encodeUriQuery(key, !0) + (value === !0 ? "" : "=" + encodeUriQuery(value, !0)));
        }), parts.length ? parts.join("&") : "";
    }
    function encodeUriSegment(val) {
        return encodeUriQuery(val, !0).replace(/%26/gi, "&").replace(/%3D/gi, "=").replace(/%2B/gi, "+");
    }
    function encodeUriQuery(val, pctEncodeSpaces) {
        return encodeURIComponent(val).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, pctEncodeSpaces ? "%20" : "+");
    }
    function getNgAttribute(element, ngAttr) {
        var attr, i, ii = ngAttrPrefixes.length;
        for (element = jqLite(element), i = 0; ii > i; ++i) if (attr = ngAttrPrefixes[i] + ngAttr, 
        isString(attr = element.attr(attr))) return attr;
        return null;
    }
    function angularInit(element, bootstrap) {
        function append(element) {
            element && elements.push(element);
        }
        var appElement, module, elements = [ element ], config = {}, names = [ "ng:app", "ng-app", "x-ng-app", "data-ng-app" ], NG_APP_CLASS_REGEXP = /\sng[:\-]app(:\s*([\w\d_]+);?)?\s/;
        forEach(names, function(name) {
            names[name] = !0, append(document.getElementById(name)), name = name.replace(":", "\\:"), 
            element.querySelectorAll && (forEach(element.querySelectorAll("." + name), append), 
            forEach(element.querySelectorAll("." + name + "\\:"), append), forEach(element.querySelectorAll("[" + name + "]"), append));
        }), forEach(elements, function(element) {
            if (!appElement) {
                var className = " " + element.className + " ", match = NG_APP_CLASS_REGEXP.exec(className);
                match ? (appElement = element, module = (match[2] || "").replace(/\s+/g, ",")) : forEach(element.attributes, function(attr) {
                    !appElement && names[attr.name] && (appElement = element, module = attr.value);
                });
            }
        }), appElement && (config.strictDi = null !== getNgAttribute(appElement, "strict-di"), 
        bootstrap(appElement, module ? [ module ] : [], config));
    }
    function bootstrap(element, modules, config) {
        isObject(config) || (config = {});
        var defaultConfig = {
            strictDi: !1
        };
        config = extend(defaultConfig, config);
        var doBootstrap = function() {
            if (element = jqLite(element), element.injector()) {
                var tag = element[0] === document ? "document" : startingTag(element);
                throw ngMinErr("btstrpd", "App Already Bootstrapped with this Element '{0}'", tag);
            }
            modules = modules || [], modules.unshift([ "$provide", function($provide) {
                $provide.value("$rootElement", element);
            } ]), modules.unshift("ng");
            var injector = createInjector(modules, config.strictDi);
            return injector.invoke([ "$rootScope", "$rootElement", "$compile", "$injector", "$animate", function(scope, element, compile, injector) {
                scope.$apply(function() {
                    element.data("$injector", injector), compile(element)(scope);
                });
            } ]), injector;
        }, NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;
        return window && !NG_DEFER_BOOTSTRAP.test(window.name) ? doBootstrap() : (window.name = window.name.replace(NG_DEFER_BOOTSTRAP, ""), 
        void (angular.resumeBootstrap = function(extraModules) {
            forEach(extraModules, function(module) {
                modules.push(module);
            }), doBootstrap();
        }));
    }
    function snake_case(name, separator) {
        return separator = separator || "_", name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
            return (pos ? separator : "") + letter.toLowerCase();
        });
    }
    function bindJQuery() {
        jQuery = window.jQuery, jQuery ? (jqLite = jQuery, extend(jQuery.fn, {
            scope: JQLitePrototype.scope,
            isolateScope: JQLitePrototype.isolateScope,
            controller: JQLitePrototype.controller,
            injector: JQLitePrototype.injector,
            inheritedData: JQLitePrototype.inheritedData
        }), jqLitePatchJQueryRemove("remove", !0, !0, !1), jqLitePatchJQueryRemove("empty", !1, !1, !1), 
        jqLitePatchJQueryRemove("html", !1, !1, !0)) : jqLite = JQLite, angular.element = jqLite;
    }
    function assertArg(arg, name, reason) {
        if (!arg) throw ngMinErr("areq", "Argument '{0}' is {1}", name || "?", reason || "required");
        return arg;
    }
    function assertArgFn(arg, name, acceptArrayAnnotation) {
        return acceptArrayAnnotation && isArray(arg) && (arg = arg[arg.length - 1]), assertArg(isFunction(arg), name, "not a function, got " + (arg && "object" == typeof arg ? arg.constructor.name || "Object" : typeof arg)), 
        arg;
    }
    function assertNotHasOwnProperty(name, context) {
        if ("hasOwnProperty" === name) throw ngMinErr("badname", "hasOwnProperty is not a valid {0} name", context);
    }
    function getter(obj, path, bindFnToScope) {
        if (!path) return obj;
        for (var key, keys = path.split("."), lastInstance = obj, len = keys.length, i = 0; len > i; i++) key = keys[i], 
        obj && (obj = (lastInstance = obj)[key]);
        return !bindFnToScope && isFunction(obj) ? bind(lastInstance, obj) : obj;
    }
    function getBlockElements(nodes) {
        var startNode = nodes[0], endNode = nodes[nodes.length - 1];
        if (startNode === endNode) return jqLite(startNode);
        var element = startNode, elements = [ element ];
        do {
            if (element = element.nextSibling, !element) break;
            elements.push(element);
        } while (element !== endNode);
        return jqLite(elements);
    }
    function setupModuleLoader(window) {
        function ensure(obj, name, factory) {
            return obj[name] || (obj[name] = factory());
        }
        var $injectorMinErr = minErr("$injector"), ngMinErr = minErr("ng"), angular = ensure(window, "angular", Object);
        return angular.$$minErr = angular.$$minErr || minErr, ensure(angular, "module", function() {
            var modules = {};
            return function(name, requires, configFn) {
                var assertNotHasOwnProperty = function(name, context) {
                    if ("hasOwnProperty" === name) throw ngMinErr("badname", "hasOwnProperty is not a valid {0} name", context);
                };
                return assertNotHasOwnProperty(name, "module"), requires && modules.hasOwnProperty(name) && (modules[name] = null), 
                ensure(modules, name, function() {
                    function invokeLater(provider, method, insertMethod) {
                        return function() {
                            return invokeQueue[insertMethod || "push"]([ provider, method, arguments ]), moduleInstance;
                        };
                    }
                    if (!requires) throw $injectorMinErr("nomod", "Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.", name);
                    var invokeQueue = [], runBlocks = [], config = invokeLater("$injector", "invoke"), moduleInstance = {
                        _invokeQueue: invokeQueue,
                        _runBlocks: runBlocks,
                        requires: requires,
                        name: name,
                        provider: invokeLater("$provide", "provider"),
                        factory: invokeLater("$provide", "factory"),
                        service: invokeLater("$provide", "service"),
                        value: invokeLater("$provide", "value"),
                        constant: invokeLater("$provide", "constant", "unshift"),
                        animation: invokeLater("$animateProvider", "register"),
                        filter: invokeLater("$filterProvider", "register"),
                        controller: invokeLater("$controllerProvider", "register"),
                        directive: invokeLater("$compileProvider", "directive"),
                        config: config,
                        run: function(block) {
                            return runBlocks.push(block), this;
                        }
                    };
                    return configFn && config(configFn), moduleInstance;
                });
            };
        });
    }
    function publishExternalAPI(angular) {
        extend(angular, {
            bootstrap: bootstrap,
            copy: copy,
            extend: extend,
            equals: equals,
            element: jqLite,
            forEach: forEach,
            injector: createInjector,
            noop: noop,
            bind: bind,
            toJson: toJson,
            fromJson: fromJson,
            identity: identity,
            isUndefined: isUndefined,
            isDefined: isDefined,
            isString: isString,
            isFunction: isFunction,
            isObject: isObject,
            isNumber: isNumber,
            isElement: isElement,
            isArray: isArray,
            version: version,
            isDate: isDate,
            lowercase: lowercase,
            uppercase: uppercase,
            callbacks: {
                counter: 0
            },
            $$minErr: minErr,
            $$csp: csp
        }), angularModule = setupModuleLoader(window);
        try {
            angularModule("ngLocale");
        } catch (e) {
            angularModule("ngLocale", []).provider("$locale", $LocaleProvider);
        }
        angularModule("ng", [ "ngLocale" ], [ "$provide", function($provide) {
            $provide.provider({
                $$sanitizeUri: $$SanitizeUriProvider
            }), $provide.provider("$compile", $CompileProvider).directive({
                a: htmlAnchorDirective,
                input: inputDirective,
                textarea: inputDirective,
                form: formDirective,
                script: scriptDirective,
                select: selectDirective,
                style: styleDirective,
                option: optionDirective,
                ngBind: ngBindDirective,
                ngBindHtml: ngBindHtmlDirective,
                ngBindTemplate: ngBindTemplateDirective,
                ngClass: ngClassDirective,
                ngClassEven: ngClassEvenDirective,
                ngClassOdd: ngClassOddDirective,
                ngCloak: ngCloakDirective,
                ngController: ngControllerDirective,
                ngForm: ngFormDirective,
                ngHide: ngHideDirective,
                ngIf: ngIfDirective,
                ngInclude: ngIncludeDirective,
                ngInit: ngInitDirective,
                ngNonBindable: ngNonBindableDirective,
                ngPluralize: ngPluralizeDirective,
                ngRepeat: ngRepeatDirective,
                ngShow: ngShowDirective,
                ngStyle: ngStyleDirective,
                ngSwitch: ngSwitchDirective,
                ngSwitchWhen: ngSwitchWhenDirective,
                ngSwitchDefault: ngSwitchDefaultDirective,
                ngOptions: ngOptionsDirective,
                ngTransclude: ngTranscludeDirective,
                ngModel: ngModelDirective,
                ngList: ngListDirective,
                ngChange: ngChangeDirective,
                required: requiredDirective,
                ngRequired: requiredDirective,
                ngValue: ngValueDirective,
                ngModelOptions: ngModelOptionsDirective
            }).directive({
                ngInclude: ngIncludeFillContentDirective
            }).directive(ngAttributeAliasDirectives).directive(ngEventDirectives), $provide.provider({
                $anchorScroll: $AnchorScrollProvider,
                $animate: $AnimateProvider,
                $browser: $BrowserProvider,
                $cacheFactory: $CacheFactoryProvider,
                $controller: $ControllerProvider,
                $document: $DocumentProvider,
                $exceptionHandler: $ExceptionHandlerProvider,
                $filter: $FilterProvider,
                $interpolate: $InterpolateProvider,
                $interval: $IntervalProvider,
                $http: $HttpProvider,
                $httpBackend: $HttpBackendProvider,
                $location: $LocationProvider,
                $log: $LogProvider,
                $parse: $ParseProvider,
                $rootScope: $RootScopeProvider,
                $q: $QProvider,
                $sce: $SceProvider,
                $sceDelegate: $SceDelegateProvider,
                $sniffer: $SnifferProvider,
                $templateCache: $TemplateCacheProvider,
                $timeout: $TimeoutProvider,
                $window: $WindowProvider,
                $$rAF: $$RAFProvider,
                $$asyncCallback: $$AsyncCallbackProvider
            });
        } ]);
    }
    function jqNextId() {
        return ++jqId;
    }
    function camelCase(name) {
        return name.replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
            return offset ? letter.toUpperCase() : letter;
        }).replace(MOZ_HACK_REGEXP, "Moz$1");
    }
    function jqLitePatchJQueryRemove(name, dispatchThis, filterElems, getterIfNoArguments) {
        function removePatch(param) {
            var set, setIndex, setLength, element, childIndex, childLength, children, list = filterElems && param ? [ this.filter(param) ] : [ this ], fireEvent = dispatchThis;
            if (!getterIfNoArguments || null != param) for (;list.length; ) for (set = list.shift(), 
            setIndex = 0, setLength = set.length; setLength > setIndex; setIndex++) for (element = jqLite(set[setIndex]), 
            fireEvent ? element.triggerHandler("$destroy") : fireEvent = !fireEvent, childIndex = 0, 
            childLength = (children = element.children()).length; childLength > childIndex; childIndex++) list.push(jQuery(children[childIndex]));
            return originalJqFn.apply(this, arguments);
        }
        var originalJqFn = jQuery.fn[name];
        originalJqFn = originalJqFn.$original || originalJqFn, removePatch.$original = originalJqFn, 
        jQuery.fn[name] = removePatch;
    }
    function jqLiteIsTextNode(html) {
        return !HTML_REGEXP.test(html);
    }
    function jqLiteBuildFragment(html, context) {
        var tmp, tag, wrap, i, fragment = context.createDocumentFragment(), nodes = [];
        if (jqLiteIsTextNode(html)) nodes.push(context.createTextNode(html)); else {
            for (tmp = tmp || fragment.appendChild(context.createElement("div")), tag = (TAG_NAME_REGEXP.exec(html) || [ "", "" ])[1].toLowerCase(), 
            wrap = wrapMap[tag] || wrapMap._default, tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2], 
            i = wrap[0]; i--; ) tmp = tmp.lastChild;
            nodes = concat(nodes, tmp.childNodes), tmp = fragment.firstChild, tmp.textContent = "";
        }
        return fragment.textContent = "", fragment.innerHTML = "", forEach(nodes, function(node) {
            fragment.appendChild(node);
        }), fragment;
    }
    function jqLiteParseHTML(html, context) {
        context = context || document;
        var parsed;
        return (parsed = SINGLE_TAG_REGEXP.exec(html)) ? [ context.createElement(parsed[1]) ] : (parsed = jqLiteBuildFragment(html, context)) ? parsed.childNodes : [];
    }
    function JQLite(element) {
        if (element instanceof JQLite) return element;
        if (isString(element) && (element = trim(element)), !(this instanceof JQLite)) {
            if (isString(element) && "<" != element.charAt(0)) throw jqLiteMinErr("nosel", "Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");
            return new JQLite(element);
        }
        isString(element) ? jqLiteAddNodes(this, jqLiteParseHTML(element)) : jqLiteAddNodes(this, element);
    }
    function jqLiteClone(element) {
        return element.cloneNode(!0);
    }
    function jqLiteDealoc(element) {
        jqLiteRemoveData(element);
        for (var i = 0, children = element.childNodes || []; i < children.length; i++) jqLiteDealoc(children[i]);
    }
    function jqLiteOff(element, type, fn, unsupported) {
        if (isDefined(unsupported)) throw jqLiteMinErr("offargs", "jqLite#off() does not support the `selector` argument");
        var events = jqLiteExpandoStore(element, "events"), handle = jqLiteExpandoStore(element, "handle");
        handle && (isUndefined(type) ? forEach(events, function(eventHandler, type) {
            removeEventListenerFn(element, type, eventHandler), delete events[type];
        }) : forEach(type.split(" "), function(type) {
            isUndefined(fn) ? (removeEventListenerFn(element, type, events[type]), delete events[type]) : arrayRemove(events[type] || [], fn);
        }));
    }
    function jqLiteRemoveData(element, name) {
        var expandoId = element[jqName], expandoStore = jqCache[expandoId];
        if (expandoStore) {
            if (name) return void delete jqCache[expandoId].data[name];
            expandoStore.handle && (expandoStore.events.$destroy && expandoStore.handle({}, "$destroy"), 
            jqLiteOff(element)), delete jqCache[expandoId], element[jqName] = undefined;
        }
    }
    function jqLiteExpandoStore(element, key, value) {
        var expandoId = element[jqName], expandoStore = jqCache[expandoId || -1];
        return isDefined(value) ? (expandoStore || (element[jqName] = expandoId = jqNextId(), 
        expandoStore = jqCache[expandoId] = {}), void (expandoStore[key] = value)) : expandoStore && expandoStore[key];
    }
    function jqLiteData(element, key, value) {
        var data = jqLiteExpandoStore(element, "data"), isSetter = isDefined(value), keyDefined = !isSetter && isDefined(key), isSimpleGetter = keyDefined && !isObject(key);
        if (data || isSimpleGetter || jqLiteExpandoStore(element, "data", data = {}), isSetter) data[key] = value; else {
            if (!keyDefined) return data;
            if (isSimpleGetter) return data && data[key];
            extend(data, key);
        }
    }
    function jqLiteHasClass(element, selector) {
        return element.getAttribute ? (" " + (element.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").indexOf(" " + selector + " ") > -1 : !1;
    }
    function jqLiteRemoveClass(element, cssClasses) {
        cssClasses && element.setAttribute && forEach(cssClasses.split(" "), function(cssClass) {
            element.setAttribute("class", trim((" " + (element.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").replace(" " + trim(cssClass) + " ", " ")));
        });
    }
    function jqLiteAddClass(element, cssClasses) {
        if (cssClasses && element.setAttribute) {
            var existingClasses = (" " + (element.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ");
            forEach(cssClasses.split(" "), function(cssClass) {
                cssClass = trim(cssClass), -1 === existingClasses.indexOf(" " + cssClass + " ") && (existingClasses += cssClass + " ");
            }), element.setAttribute("class", trim(existingClasses));
        }
    }
    function jqLiteAddNodes(root, elements) {
        if (elements) {
            elements = elements.nodeName || !isDefined(elements.length) || isWindow(elements) ? [ elements ] : elements;
            for (var i = 0; i < elements.length; i++) root.push(elements[i]);
        }
    }
    function jqLiteController(element, name) {
        return jqLiteInheritedData(element, "$" + (name || "ngController") + "Controller");
    }
    function jqLiteInheritedData(element, name, value) {
        element = jqLite(element), 9 == element[0].nodeType && (element = element.find("html"));
        for (var names = isArray(name) ? name : [ name ]; element.length; ) {
            for (var node = element[0], i = 0, ii = names.length; ii > i; i++) if ((value = element.data(names[i])) !== undefined) return value;
            element = jqLite(node.parentNode || 11 === node.nodeType && node.host);
        }
    }
    function jqLiteEmpty(element) {
        for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) jqLiteDealoc(childNodes[i]);
        for (;element.firstChild; ) element.removeChild(element.firstChild);
    }
    function getBooleanAttrName(element, name) {
        var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];
        return booleanAttr && BOOLEAN_ELEMENTS[element.nodeName] && booleanAttr;
    }
    function createEventHandler(element, events) {
        var eventHandler = function(event, type) {
            if (event.preventDefault || (event.preventDefault = function() {
                event.returnValue = !1;
            }), event.stopPropagation || (event.stopPropagation = function() {
                event.cancelBubble = !0;
            }), event.target || (event.target = event.srcElement || document), isUndefined(event.defaultPrevented)) {
                var prevent = event.preventDefault;
                event.preventDefault = function() {
                    event.defaultPrevented = !0, prevent.call(event);
                }, event.defaultPrevented = !1;
            }
            event.isDefaultPrevented = function() {
                return event.defaultPrevented || event.returnValue === !1;
            };
            var eventHandlersCopy = shallowCopy(events[type || event.type] || []);
            forEach(eventHandlersCopy, function(fn) {
                fn.call(element, event);
            }), 8 >= msie ? (event.preventDefault = null, event.stopPropagation = null, event.isDefaultPrevented = null) : (delete event.preventDefault, 
            delete event.stopPropagation, delete event.isDefaultPrevented);
        };
        return eventHandler.elem = element, eventHandler;
    }
    function hashKey(obj) {
        var key, objType = typeof obj;
        return "object" == objType && null !== obj ? "function" == typeof (key = obj.$$hashKey) ? key = obj.$$hashKey() : key === undefined && (key = obj.$$hashKey = nextUid()) : key = obj, 
        objType + ":" + key;
    }
    function HashMap(array) {
        forEach(array, this.put, this);
    }
    function anonFn(fn) {
        var fnText = fn.toString().replace(STRIP_COMMENTS, ""), args = fnText.match(FN_ARGS);
        return args ? "function(" + (args[1] || "").replace(/[\s\r\n]+/, " ") + ")" : "fn";
    }
    function annotate(fn, strictDi, name) {
        var $inject, fnText, argDecl, last;
        if ("function" == typeof fn) {
            if (!($inject = fn.$inject)) {
                if ($inject = [], fn.length) {
                    if (strictDi) throw isString(name) && name || (name = fn.name || anonFn(fn)), $injectorMinErr("strictdi", "{0} is not using explicit annotation and cannot be invoked in strict mode", name);
                    fnText = fn.toString().replace(STRIP_COMMENTS, ""), argDecl = fnText.match(FN_ARGS), 
                    forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
                        arg.replace(FN_ARG, function(all, underscore, name) {
                            $inject.push(name);
                        });
                    });
                }
                fn.$inject = $inject;
            }
        } else isArray(fn) ? (last = fn.length - 1, assertArgFn(fn[last], "fn"), $inject = fn.slice(0, last)) : assertArgFn(fn, "fn", !0);
        return $inject;
    }
    function createInjector(modulesToLoad, strictDi) {
        function supportObject(delegate) {
            return function(key, value) {
                return isObject(key) ? void forEach(key, reverseParams(delegate)) : delegate(key, value);
            };
        }
        function provider(name, provider_) {
            if (assertNotHasOwnProperty(name, "service"), (isFunction(provider_) || isArray(provider_)) && (provider_ = providerInjector.instantiate(provider_)), 
            !provider_.$get) throw $injectorMinErr("pget", "Provider '{0}' must define $get factory method.", name);
            return providerCache[name + providerSuffix] = provider_;
        }
        function factory(name, factoryFn) {
            return provider(name, {
                $get: factoryFn
            });
        }
        function service(name, constructor) {
            return factory(name, [ "$injector", function($injector) {
                return $injector.instantiate(constructor);
            } ]);
        }
        function value(name, val) {
            return factory(name, valueFn(val));
        }
        function constant(name, value) {
            assertNotHasOwnProperty(name, "constant"), providerCache[name] = value, instanceCache[name] = value;
        }
        function decorator(serviceName, decorFn) {
            var origProvider = providerInjector.get(serviceName + providerSuffix), orig$get = origProvider.$get;
            origProvider.$get = function() {
                var origInstance = instanceInjector.invoke(orig$get, origProvider);
                return instanceInjector.invoke(decorFn, null, {
                    $delegate: origInstance
                });
            };
        }
        function loadModules(modulesToLoad) {
            var moduleFn, invokeQueue, i, ii, runBlocks = [];
            return forEach(modulesToLoad, function(module) {
                if (!loadedModules.get(module)) {
                    loadedModules.put(module, !0);
                    try {
                        if (isString(module)) for (moduleFn = angularModule(module), runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks), 
                        invokeQueue = moduleFn._invokeQueue, i = 0, ii = invokeQueue.length; ii > i; i++) {
                            var invokeArgs = invokeQueue[i], provider = providerInjector.get(invokeArgs[0]);
                            provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
                        } else isFunction(module) ? runBlocks.push(providerInjector.invoke(module)) : isArray(module) ? runBlocks.push(providerInjector.invoke(module)) : assertArgFn(module, "module");
                    } catch (e) {
                        throw isArray(module) && (module = module[module.length - 1]), e.message && e.stack && -1 == e.stack.indexOf(e.message) && (e = e.message + "\n" + e.stack), 
                        $injectorMinErr("modulerr", "Failed to instantiate module {0} due to:\n{1}", module, e.stack || e.message || e);
                    }
                }
            }), runBlocks;
        }
        function createInternalInjector(cache, factory) {
            function getService(serviceName) {
                if (cache.hasOwnProperty(serviceName)) {
                    if (cache[serviceName] === INSTANTIATING) throw $injectorMinErr("cdep", "Circular dependency found: {0}", path.join(" <- "));
                    return cache[serviceName];
                }
                try {
                    return path.unshift(serviceName), cache[serviceName] = INSTANTIATING, cache[serviceName] = factory(serviceName);
                } catch (err) {
                    throw cache[serviceName] === INSTANTIATING && delete cache[serviceName], err;
                } finally {
                    path.shift();
                }
            }
            function invoke(fn, self, locals, serviceName) {
                "string" == typeof locals && (serviceName = locals, locals = null);
                var length, i, key, args = [], $inject = annotate(fn, strictDi, serviceName);
                for (i = 0, length = $inject.length; length > i; i++) {
                    if (key = $inject[i], "string" != typeof key) throw $injectorMinErr("itkn", "Incorrect injection token! Expected service name as string, got {0}", key);
                    args.push(locals && locals.hasOwnProperty(key) ? locals[key] : getService(key));
                }
                return fn.$inject || (fn = fn[length]), fn.apply(self, args);
            }
            function instantiate(Type, locals, serviceName) {
                var instance, returnedValue, Constructor = function() {};
                return Constructor.prototype = (isArray(Type) ? Type[Type.length - 1] : Type).prototype, 
                instance = new Constructor(), returnedValue = invoke(Type, instance, locals, serviceName), 
                isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
            }
            return {
                invoke: invoke,
                instantiate: instantiate,
                get: getService,
                annotate: annotate,
                has: function(name) {
                    return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
                }
            };
        }
        strictDi = strictDi === !0;
        var INSTANTIATING = {}, providerSuffix = "Provider", path = [], loadedModules = new HashMap(), providerCache = {
            $provide: {
                provider: supportObject(provider),
                factory: supportObject(factory),
                service: supportObject(service),
                value: supportObject(value),
                constant: supportObject(constant),
                decorator: decorator
            }
        }, providerInjector = providerCache.$injector = createInternalInjector(providerCache, function() {
            throw $injectorMinErr("unpr", "Unknown provider: {0}", path.join(" <- "));
        }, strictDi), instanceCache = {}, instanceInjector = instanceCache.$injector = createInternalInjector(instanceCache, function(servicename) {
            var provider = providerInjector.get(servicename + providerSuffix);
            return instanceInjector.invoke(provider.$get, provider, undefined, servicename);
        }, strictDi);
        return forEach(loadModules(modulesToLoad), function(fn) {
            instanceInjector.invoke(fn || noop);
        }), instanceInjector;
    }
    function $AnchorScrollProvider() {
        var autoScrollingEnabled = !0;
        this.disableAutoScrolling = function() {
            autoScrollingEnabled = !1;
        }, this.$get = [ "$window", "$location", "$rootScope", function($window, $location, $rootScope) {
            function getFirstAnchor(list) {
                var result = null;
                return forEach(list, function(element) {
                    result || "a" !== lowercase(element.nodeName) || (result = element);
                }), result;
            }
            function scroll() {
                var elm, hash = $location.hash();
                hash ? (elm = document.getElementById(hash)) ? elm.scrollIntoView() : (elm = getFirstAnchor(document.getElementsByName(hash))) ? elm.scrollIntoView() : "top" === hash && $window.scrollTo(0, 0) : $window.scrollTo(0, 0);
            }
            var document = $window.document;
            return autoScrollingEnabled && $rootScope.$watch(function() {
                return $location.hash();
            }, function() {
                $rootScope.$evalAsync(scroll);
            }), scroll;
        } ];
    }
    function $$AsyncCallbackProvider() {
        this.$get = [ "$$rAF", "$timeout", function($$rAF, $timeout) {
            return $$rAF.supported ? function(fn) {
                return $$rAF(fn);
            } : function(fn) {
                return $timeout(fn, 0, !1);
            };
        } ];
    }
    function Browser(window, document, $log, $sniffer) {
        function completeOutstandingRequest(fn) {
            try {
                fn.apply(null, sliceArgs(arguments, 1));
            } finally {
                if (outstandingRequestCount--, 0 === outstandingRequestCount) for (;outstandingRequestCallbacks.length; ) try {
                    outstandingRequestCallbacks.pop()();
                } catch (e) {
                    $log.error(e);
                }
            }
        }
        function startPoller(interval, setTimeout) {
            !function check() {
                forEach(pollFns, function(pollFn) {
                    pollFn();
                }), pollTimeout = setTimeout(check, interval);
            }();
        }
        function fireUrlChange() {
            newLocation = null, lastBrowserUrl != self.url() && (lastBrowserUrl = self.url(), 
            forEach(urlChangeListeners, function(listener) {
                listener(self.url());
            }));
        }
        var self = this, rawDocument = document[0], location = window.location, history = window.history, setTimeout = window.setTimeout, clearTimeout = window.clearTimeout, pendingDeferIds = {};
        self.isMock = !1;
        var outstandingRequestCount = 0, outstandingRequestCallbacks = [];
        self.$$completeOutstandingRequest = completeOutstandingRequest, self.$$incOutstandingRequestCount = function() {
            outstandingRequestCount++;
        }, self.notifyWhenNoOutstandingRequests = function(callback) {
            forEach(pollFns, function(pollFn) {
                pollFn();
            }), 0 === outstandingRequestCount ? callback() : outstandingRequestCallbacks.push(callback);
        };
        var pollTimeout, pollFns = [];
        self.addPollFn = function(fn) {
            return isUndefined(pollTimeout) && startPoller(100, setTimeout), pollFns.push(fn), 
            fn;
        };
        var lastBrowserUrl = location.href, baseElement = document.find("base"), newLocation = null;
        self.url = function(url, replace) {
            if (location !== window.location && (location = window.location), history !== window.history && (history = window.history), 
            url) {
                if (lastBrowserUrl == url) return;
                return lastBrowserUrl = url, $sniffer.history ? replace ? history.replaceState(null, "", url) : (history.pushState(null, "", url), 
                baseElement.attr("href", baseElement.attr("href"))) : (newLocation = url, replace ? location.replace(url) : location.href = url), 
                self;
            }
            return newLocation || location.href.replace(/%27/g, "'");
        };
        var urlChangeListeners = [], urlChangeInit = !1;
        self.onUrlChange = function(callback) {
            return urlChangeInit || ($sniffer.history && jqLite(window).on("popstate", fireUrlChange), 
            $sniffer.hashchange ? jqLite(window).on("hashchange", fireUrlChange) : self.addPollFn(fireUrlChange), 
            urlChangeInit = !0), urlChangeListeners.push(callback), callback;
        }, self.baseHref = function() {
            var href = baseElement.attr("href");
            return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, "") : "";
        };
        var lastCookies = {}, lastCookieString = "", cookiePath = self.baseHref();
        self.cookies = function(name, value) {
            var cookieLength, cookieArray, cookie, i, index;
            if (!name) {
                if (rawDocument.cookie !== lastCookieString) for (lastCookieString = rawDocument.cookie, 
                cookieArray = lastCookieString.split("; "), lastCookies = {}, i = 0; i < cookieArray.length; i++) cookie = cookieArray[i], 
                index = cookie.indexOf("="), index > 0 && (name = unescape(cookie.substring(0, index)), 
                lastCookies[name] === undefined && (lastCookies[name] = unescape(cookie.substring(index + 1))));
                return lastCookies;
            }
            value === undefined ? rawDocument.cookie = escape(name) + "=;path=" + cookiePath + ";expires=Thu, 01 Jan 1970 00:00:00 GMT" : isString(value) && (cookieLength = (rawDocument.cookie = escape(name) + "=" + escape(value) + ";path=" + cookiePath).length + 1, 
            cookieLength > 4096 && $log.warn("Cookie '" + name + "' possibly not set or overflowed because it was too large (" + cookieLength + " > 4096 bytes)!"));
        }, self.defer = function(fn, delay) {
            var timeoutId;
            return outstandingRequestCount++, timeoutId = setTimeout(function() {
                delete pendingDeferIds[timeoutId], completeOutstandingRequest(fn);
            }, delay || 0), pendingDeferIds[timeoutId] = !0, timeoutId;
        }, self.defer.cancel = function(deferId) {
            return pendingDeferIds[deferId] ? (delete pendingDeferIds[deferId], clearTimeout(deferId), 
            completeOutstandingRequest(noop), !0) : !1;
        };
    }
    function $BrowserProvider() {
        this.$get = [ "$window", "$log", "$sniffer", "$document", function($window, $log, $sniffer, $document) {
            return new Browser($window, $document, $log, $sniffer);
        } ];
    }
    function $CacheFactoryProvider() {
        this.$get = function() {
            function cacheFactory(cacheId, options) {
                function refresh(entry) {
                    entry != freshEnd && (staleEnd ? staleEnd == entry && (staleEnd = entry.n) : staleEnd = entry, 
                    link(entry.n, entry.p), link(entry, freshEnd), freshEnd = entry, freshEnd.n = null);
                }
                function link(nextEntry, prevEntry) {
                    nextEntry != prevEntry && (nextEntry && (nextEntry.p = prevEntry), prevEntry && (prevEntry.n = nextEntry));
                }
                if (cacheId in caches) throw minErr("$cacheFactory")("iid", "CacheId '{0}' is already taken!", cacheId);
                var size = 0, stats = extend({}, options, {
                    id: cacheId
                }), data = {}, capacity = options && options.capacity || Number.MAX_VALUE, lruHash = {}, freshEnd = null, staleEnd = null;
                return caches[cacheId] = {
                    put: function(key, value) {
                        if (capacity < Number.MAX_VALUE) {
                            var lruEntry = lruHash[key] || (lruHash[key] = {
                                key: key
                            });
                            refresh(lruEntry);
                        }
                        if (!isUndefined(value)) return key in data || size++, data[key] = value, size > capacity && this.remove(staleEnd.key), 
                        value;
                    },
                    get: function(key) {
                        if (capacity < Number.MAX_VALUE) {
                            var lruEntry = lruHash[key];
                            if (!lruEntry) return;
                            refresh(lruEntry);
                        }
                        return data[key];
                    },
                    remove: function(key) {
                        if (capacity < Number.MAX_VALUE) {
                            var lruEntry = lruHash[key];
                            if (!lruEntry) return;
                            lruEntry == freshEnd && (freshEnd = lruEntry.p), lruEntry == staleEnd && (staleEnd = lruEntry.n), 
                            link(lruEntry.n, lruEntry.p), delete lruHash[key];
                        }
                        delete data[key], size--;
                    },
                    removeAll: function() {
                        data = {}, size = 0, lruHash = {}, freshEnd = staleEnd = null;
                    },
                    destroy: function() {
                        data = null, stats = null, lruHash = null, delete caches[cacheId];
                    },
                    info: function() {
                        return extend({}, stats, {
                            size: size
                        });
                    }
                };
            }
            var caches = {};
            return cacheFactory.info = function() {
                var info = {};
                return forEach(caches, function(cache, cacheId) {
                    info[cacheId] = cache.info();
                }), info;
            }, cacheFactory.get = function(cacheId) {
                return caches[cacheId];
            }, cacheFactory;
        };
    }
    function $TemplateCacheProvider() {
        this.$get = [ "$cacheFactory", function($cacheFactory) {
            return $cacheFactory("templates");
        } ];
    }
    function $CompileProvider($provide, $$sanitizeUriProvider) {
        var hasDirectives = {}, Suffix = "Directive", COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\d\w\-_]+)\s+(.*)$/, CLASS_DIRECTIVE_REGEXP = /(([\d\w\-_]+)(?:\:([^;]+))?;?)/, EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;
        this.directive = function registerDirective(name, directiveFactory) {
            return assertNotHasOwnProperty(name, "directive"), isString(name) ? (assertArg(directiveFactory, "directiveFactory"), 
            hasDirectives.hasOwnProperty(name) || (hasDirectives[name] = [], $provide.factory(name + Suffix, [ "$injector", "$exceptionHandler", function($injector, $exceptionHandler) {
                var directives = [];
                return forEach(hasDirectives[name], function(directiveFactory, index) {
                    try {
                        var directive = $injector.invoke(directiveFactory);
                        isFunction(directive) ? directive = {
                            compile: valueFn(directive)
                        } : !directive.compile && directive.link && (directive.compile = valueFn(directive.link)), 
                        directive.priority = directive.priority || 0, directive.index = index, directive.name = directive.name || name, 
                        directive.require = directive.require || directive.controller && directive.name, 
                        directive.restrict = directive.restrict || "A", directives.push(directive);
                    } catch (e) {
                        $exceptionHandler(e);
                    }
                }), directives;
            } ])), hasDirectives[name].push(directiveFactory)) : forEach(name, reverseParams(registerDirective)), 
            this;
        }, this.aHrefSanitizationWhitelist = function(regexp) {
            return isDefined(regexp) ? ($$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp), 
            this) : $$sanitizeUriProvider.aHrefSanitizationWhitelist();
        }, this.imgSrcSanitizationWhitelist = function(regexp) {
            return isDefined(regexp) ? ($$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp), 
            this) : $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
        }, this.$get = [ "$injector", "$interpolate", "$exceptionHandler", "$http", "$templateCache", "$parse", "$controller", "$rootScope", "$document", "$sce", "$animate", "$$sanitizeUri", function($injector, $interpolate, $exceptionHandler, $http, $templateCache, $parse, $controller, $rootScope, $document, $sce, $animate, $$sanitizeUri) {
            function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
                $compileNodes instanceof jqLite || ($compileNodes = jqLite($compileNodes)), forEach($compileNodes, function(node, index) {
                    3 == node.nodeType && node.nodeValue.match(/\S+/) && ($compileNodes[index] = node = jqLite(node).wrap("<span></span>").parent()[0]);
                });
                var compositeLinkFn = compileNodes($compileNodes, transcludeFn, $compileNodes, maxPriority, ignoreDirective, previousCompileContext);
                return safeAddClass($compileNodes, "ng-scope"), function(scope, cloneConnectFn, transcludeControllers) {
                    assertArg(scope, "scope");
                    var $linkNode = cloneConnectFn ? JQLitePrototype.clone.call($compileNodes) : $compileNodes;
                    forEach(transcludeControllers, function(instance, name) {
                        $linkNode.data("$" + name + "Controller", instance);
                    });
                    for (var i = 0, ii = $linkNode.length; ii > i; i++) {
                        var node = $linkNode[i], nodeType = node.nodeType;
                        (1 === nodeType || 9 === nodeType) && $linkNode.eq(i).data("$scope", scope);
                    }
                    return cloneConnectFn && cloneConnectFn($linkNode, scope), compositeLinkFn && compositeLinkFn(scope, $linkNode, $linkNode), 
                    $linkNode;
                };
            }
            function safeAddClass($element, className) {
                try {
                    $element.addClass(className);
                } catch (e) {}
            }
            function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective, previousCompileContext) {
                function compositeLinkFn(scope, nodeList, $rootElement, boundTranscludeFn) {
                    var nodeLinkFn, childLinkFn, node, $node, childScope, childTranscludeFn, i, ii, n, nodeListLength = nodeList.length, stableNodeList = new Array(nodeListLength);
                    for (i = 0; nodeListLength > i; i++) stableNodeList[i] = nodeList[i];
                    for (i = 0, n = 0, ii = linkFns.length; ii > i; n++) node = stableNodeList[n], nodeLinkFn = linkFns[i++], 
                    childLinkFn = linkFns[i++], $node = jqLite(node), nodeLinkFn ? (nodeLinkFn.scope ? (childScope = scope.$new(), 
                    $node.data("$scope", childScope)) : childScope = scope, childTranscludeFn = nodeLinkFn.transclude, 
                    childTranscludeFn || !boundTranscludeFn && transcludeFn ? nodeLinkFn(childLinkFn, childScope, node, $rootElement, createBoundTranscludeFn(scope, childTranscludeFn || transcludeFn)) : nodeLinkFn(childLinkFn, childScope, node, $rootElement, boundTranscludeFn)) : childLinkFn && childLinkFn(scope, node.childNodes, undefined, boundTranscludeFn);
                }
                for (var attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, linkFns = [], i = 0; i < nodeList.length; i++) attrs = new Attributes(), 
                directives = collectDirectives(nodeList[i], [], attrs, 0 === i ? maxPriority : undefined, ignoreDirective), 
                nodeLinkFn = directives.length ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement, null, [], [], previousCompileContext) : null, 
                nodeLinkFn && nodeLinkFn.scope && safeAddClass(jqLite(nodeList[i]), "ng-scope"), 
                childLinkFn = nodeLinkFn && nodeLinkFn.terminal || !(childNodes = nodeList[i].childNodes) || !childNodes.length ? null : compileNodes(childNodes, nodeLinkFn ? nodeLinkFn.transclude : transcludeFn), 
                linkFns.push(nodeLinkFn, childLinkFn), linkFnFound = linkFnFound || nodeLinkFn || childLinkFn, 
                previousCompileContext = null;
                return linkFnFound ? compositeLinkFn : null;
            }
            function createBoundTranscludeFn(scope, transcludeFn) {
                return function(transcludedScope, cloneFn, controllers) {
                    var scopeCreated = !1;
                    transcludedScope || (transcludedScope = scope.$new(), transcludedScope.$$transcluded = !0, 
                    scopeCreated = !0);
                    var clone = transcludeFn(transcludedScope, cloneFn, controllers);
                    return scopeCreated && clone.on("$destroy", bind(transcludedScope, transcludedScope.$destroy)), 
                    clone;
                };
            }
            function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
                var match, className, nodeType = node.nodeType, attrsMap = attrs.$attr;
                switch (nodeType) {
                  case 1:
                    addDirective(directives, directiveNormalize(nodeName_(node).toLowerCase()), "E", maxPriority, ignoreDirective);
                    for (var attr, name, nName, ngAttrName, value, nAttrs = node.attributes, j = 0, jj = nAttrs && nAttrs.length; jj > j; j++) {
                        var attrStartName = !1, attrEndName = !1;
                        if (attr = nAttrs[j], !msie || msie >= 8 || attr.specified) {
                            name = attr.name, ngAttrName = directiveNormalize(name), NG_ATTR_BINDING.test(ngAttrName) && (name = snake_case(ngAttrName.substr(6), "-"));
                            var directiveNName = ngAttrName.replace(/(Start|End)$/, "");
                            ngAttrName === directiveNName + "Start" && (attrStartName = name, attrEndName = name.substr(0, name.length - 5) + "end", 
                            name = name.substr(0, name.length - 6)), nName = directiveNormalize(name.toLowerCase()), 
                            attrsMap[nName] = name, attrs[nName] = value = trim(attr.value), getBooleanAttrName(node, nName) && (attrs[nName] = !0), 
                            addAttrInterpolateDirective(node, directives, value, nName), addDirective(directives, nName, "A", maxPriority, ignoreDirective, attrStartName, attrEndName);
                        }
                    }
                    if (className = node.className, isString(className) && "" !== className) for (;match = CLASS_DIRECTIVE_REGEXP.exec(className); ) nName = directiveNormalize(match[2]), 
                    addDirective(directives, nName, "C", maxPriority, ignoreDirective) && (attrs[nName] = trim(match[3])), 
                    className = className.substr(match.index + match[0].length);
                    break;

                  case 3:
                    addTextInterpolateDirective(directives, node.nodeValue);
                    break;

                  case 8:
                    try {
                        match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue), match && (nName = directiveNormalize(match[1]), 
                        addDirective(directives, nName, "M", maxPriority, ignoreDirective) && (attrs[nName] = trim(match[2])));
                    } catch (e) {}
                }
                return directives.sort(byPriority), directives;
            }
            function groupScan(node, attrStart, attrEnd) {
                var nodes = [], depth = 0;
                if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
                    do {
                        if (!node) throw $compileMinErr("uterdir", "Unterminated attribute, found '{0}' but no matching '{1}' found.", attrStart, attrEnd);
                        1 == node.nodeType && (node.hasAttribute(attrStart) && depth++, node.hasAttribute(attrEnd) && depth--), 
                        nodes.push(node), node = node.nextSibling;
                    } while (depth > 0);
                } else nodes.push(node);
                return jqLite(nodes);
            }
            function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
                return function(scope, element, attrs, controllers, transcludeFn) {
                    return element = groupScan(element[0], attrStart, attrEnd), linkFn(scope, element, attrs, controllers, transcludeFn);
                };
            }
            function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn, jqCollection, originalReplaceDirective, preLinkFns, postLinkFns, previousCompileContext) {
                function addLinkFns(pre, post, attrStart, attrEnd) {
                    pre && (attrStart && (pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd)), 
                    pre.require = directive.require, (newIsolateScopeDirective === directive || directive.$$isolateScope) && (pre = cloneAndAnnotateFn(pre, {
                        isolateScope: !0
                    })), preLinkFns.push(pre)), post && (attrStart && (post = groupElementsLinkFnWrapper(post, attrStart, attrEnd)), 
                    post.require = directive.require, (newIsolateScopeDirective === directive || directive.$$isolateScope) && (post = cloneAndAnnotateFn(post, {
                        isolateScope: !0
                    })), postLinkFns.push(post));
                }
                function getControllers(require, $element, elementControllers) {
                    var value, retrievalMethod = "data", optional = !1;
                    if (isString(require)) {
                        for (;"^" == (value = require.charAt(0)) || "?" == value; ) require = require.substr(1), 
                        "^" == value && (retrievalMethod = "inheritedData"), optional = optional || "?" == value;
                        if (value = null, elementControllers && "data" === retrievalMethod && (value = elementControllers[require]), 
                        value = value || $element[retrievalMethod]("$" + require + "Controller"), !value && !optional) throw $compileMinErr("ctreq", "Controller '{0}', required by directive '{1}', can't be found!", require, directiveName);
                        return value;
                    }
                    return isArray(require) && (value = [], forEach(require, function(require) {
                        value.push(getControllers(require, $element, elementControllers));
                    })), value;
                }
                function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
                    function controllersBoundTransclude(scope, cloneAttachFn) {
                        var transcludeControllers;
                        return arguments.length < 2 && (cloneAttachFn = scope, scope = undefined), hasElementTranscludeDirective && (transcludeControllers = elementControllers), 
                        boundTranscludeFn(scope, cloneAttachFn, transcludeControllers);
                    }
                    var attrs, $element, i, ii, linkFn, controller, isolateScope, transcludeFn, elementControllers = {};
                    if (attrs = compileNode === linkNode ? templateAttrs : shallowCopy(templateAttrs, new Attributes(jqLite(linkNode), templateAttrs.$attr)), 
                    $element = attrs.$$element, newIsolateScopeDirective) {
                        var LOCAL_REGEXP = /^\s*([@=&])(\??)\s*(\w*)\s*$/, $linkNode = jqLite(linkNode);
                        isolateScope = scope.$new(!0), templateDirective && templateDirective === newIsolateScopeDirective.$$originalDirective ? $linkNode.data("$isolateScope", isolateScope) : $linkNode.data("$isolateScopeNoTemplate", isolateScope), 
                        safeAddClass($linkNode, "ng-isolate-scope"), forEach(newIsolateScopeDirective.scope, function(definition, scopeName) {
                            var lastValue, parentGet, parentSet, compare, match = definition.match(LOCAL_REGEXP) || [], attrName = match[3] || scopeName, optional = "?" == match[2], mode = match[1];
                            switch (isolateScope.$$isolateBindings[scopeName] = mode + attrName, mode) {
                              case "@":
                                attrs.$observe(attrName, function(value) {
                                    isolateScope[scopeName] = value;
                                }), attrs.$$observers[attrName].$$scope = scope, attrs[attrName] && (isolateScope[scopeName] = $interpolate(attrs[attrName])(scope));
                                break;

                              case "=":
                                if (optional && !attrs[attrName]) return;
                                parentGet = $parse(attrs[attrName]), compare = parentGet.literal ? equals : function(a, b) {
                                    return a === b;
                                }, parentSet = parentGet.assign || function() {
                                    throw lastValue = isolateScope[scopeName] = parentGet(scope), $compileMinErr("nonassign", "Expression '{0}' used with directive '{1}' is non-assignable!", attrs[attrName], newIsolateScopeDirective.name);
                                }, lastValue = isolateScope[scopeName] = parentGet(scope), isolateScope.$watch(function() {
                                    var parentValue = parentGet(scope);
                                    return compare(parentValue, isolateScope[scopeName]) || (compare(parentValue, lastValue) ? parentSet(scope, parentValue = isolateScope[scopeName]) : isolateScope[scopeName] = parentValue), 
                                    lastValue = parentValue;
                                }, null, parentGet.literal);
                                break;

                              case "&":
                                parentGet = $parse(attrs[attrName]), isolateScope[scopeName] = function(locals) {
                                    return parentGet(scope, locals);
                                };
                                break;

                              default:
                                throw $compileMinErr("iscp", "Invalid isolate scope definition for directive '{0}'. Definition: {... {1}: '{2}' ...}", newIsolateScopeDirective.name, scopeName, definition);
                            }
                        });
                    }
                    for (transcludeFn = boundTranscludeFn && controllersBoundTransclude, controllerDirectives && forEach(controllerDirectives, function(directive) {
                        var controllerInstance, locals = {
                            $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
                            $element: $element,
                            $attrs: attrs,
                            $transclude: transcludeFn
                        };
                        controller = directive.controller, "@" == controller && (controller = attrs[directive.name]), 
                        controllerInstance = $controller(controller, locals), elementControllers[directive.name] = controllerInstance, 
                        hasElementTranscludeDirective || $element.data("$" + directive.name + "Controller", controllerInstance), 
                        directive.controllerAs && (locals.$scope[directive.controllerAs] = controllerInstance);
                    }), i = 0, ii = preLinkFns.length; ii > i; i++) try {
                        linkFn = preLinkFns[i], linkFn(linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.require, $element, elementControllers), transcludeFn);
                    } catch (e) {
                        $exceptionHandler(e, startingTag($element));
                    }
                    var scopeToChild = scope;
                    for (newIsolateScopeDirective && (newIsolateScopeDirective.template || null === newIsolateScopeDirective.templateUrl) && (scopeToChild = isolateScope), 
                    childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn), 
                    i = postLinkFns.length - 1; i >= 0; i--) try {
                        linkFn = postLinkFns[i], linkFn(linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.require, $element, elementControllers), transcludeFn);
                    } catch (e) {
                        $exceptionHandler(e, startingTag($element));
                    }
                }
                previousCompileContext = previousCompileContext || {};
                for (var newScopeDirective, directive, directiveName, $template, linkFn, directiveValue, terminalPriority = -Number.MAX_VALUE, controllerDirectives = previousCompileContext.controllerDirectives, newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective, templateDirective = previousCompileContext.templateDirective, nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective, hasTranscludeDirective = !1, hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective, $compileNode = templateAttrs.$$element = jqLite(compileNode), replaceDirective = originalReplaceDirective, childTranscludeFn = transcludeFn, i = 0, ii = directives.length; ii > i; i++) {
                    directive = directives[i];
                    var attrStart = directive.$$start, attrEnd = directive.$$end;
                    if (attrStart && ($compileNode = groupScan(compileNode, attrStart, attrEnd)), $template = undefined, 
                    terminalPriority > directive.priority) break;
                    if ((directiveValue = directive.scope) && (newScopeDirective = newScopeDirective || directive, 
                    directive.templateUrl || (assertNoDuplicate("new/isolated scope", newIsolateScopeDirective, directive, $compileNode), 
                    isObject(directiveValue) && (newIsolateScopeDirective = directive))), directiveName = directive.name, 
                    !directive.templateUrl && directive.controller && (directiveValue = directive.controller, 
                    controllerDirectives = controllerDirectives || {}, assertNoDuplicate("'" + directiveName + "' controller", controllerDirectives[directiveName], directive, $compileNode), 
                    controllerDirectives[directiveName] = directive), (directiveValue = directive.transclude) && (hasTranscludeDirective = !0, 
                    directive.$$tlb || (assertNoDuplicate("transclusion", nonTlbTranscludeDirective, directive, $compileNode), 
                    nonTlbTranscludeDirective = directive), "element" == directiveValue ? (hasElementTranscludeDirective = !0, 
                    terminalPriority = directive.priority, $template = groupScan(compileNode, attrStart, attrEnd), 
                    $compileNode = templateAttrs.$$element = jqLite(document.createComment(" " + directiveName + ": " + templateAttrs[directiveName] + " ")), 
                    compileNode = $compileNode[0], replaceWith(jqCollection, jqLite(sliceArgs($template)), compileNode), 
                    childTranscludeFn = compile($template, transcludeFn, terminalPriority, replaceDirective && replaceDirective.name, {
                        nonTlbTranscludeDirective: nonTlbTranscludeDirective
                    })) : ($template = jqLite(jqLiteClone(compileNode)).contents(), $compileNode.empty(), 
                    childTranscludeFn = compile($template, transcludeFn))), directive.template) if (assertNoDuplicate("template", templateDirective, directive, $compileNode), 
                    templateDirective = directive, directiveValue = isFunction(directive.template) ? directive.template($compileNode, templateAttrs) : directive.template, 
                    directiveValue = denormalizeTemplate(directiveValue), directive.replace) {
                        if (replaceDirective = directive, $template = jqLiteIsTextNode(directiveValue) ? [] : jqLite(trim(directiveValue)), 
                        compileNode = $template[0], 1 != $template.length || 1 !== compileNode.nodeType) throw $compileMinErr("tplrt", "Template for directive '{0}' must have exactly one root element. {1}", directiveName, "");
                        replaceWith(jqCollection, $compileNode, compileNode);
                        var newTemplateAttrs = {
                            $attr: {}
                        }, templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs), unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));
                        newIsolateScopeDirective && markDirectivesAsIsolate(templateDirectives), directives = directives.concat(templateDirectives).concat(unprocessedDirectives), 
                        mergeTemplateAttributes(templateAttrs, newTemplateAttrs), ii = directives.length;
                    } else $compileNode.html(directiveValue);
                    if (directive.templateUrl) assertNoDuplicate("template", templateDirective, directive, $compileNode), 
                    templateDirective = directive, directive.replace && (replaceDirective = directive), 
                    nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode, templateAttrs, jqCollection, childTranscludeFn, preLinkFns, postLinkFns, {
                        controllerDirectives: controllerDirectives,
                        newIsolateScopeDirective: newIsolateScopeDirective,
                        templateDirective: templateDirective,
                        nonTlbTranscludeDirective: nonTlbTranscludeDirective
                    }), ii = directives.length; else if (directive.compile) try {
                        linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn), isFunction(linkFn) ? addLinkFns(null, linkFn, attrStart, attrEnd) : linkFn && addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
                    } catch (e) {
                        $exceptionHandler(e, startingTag($compileNode));
                    }
                    directive.terminal && (nodeLinkFn.terminal = !0, terminalPriority = Math.max(terminalPriority, directive.priority));
                }
                return nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === !0, nodeLinkFn.transclude = hasTranscludeDirective && childTranscludeFn, 
                previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective, 
                nodeLinkFn;
            }
            function markDirectivesAsIsolate(directives) {
                for (var j = 0, jj = directives.length; jj > j; j++) directives[j] = inherit(directives[j], {
                    $$isolateScope: !0
                });
            }
            function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName, endAttrName) {
                if (name === ignoreDirective) return null;
                var match = null;
                if (hasDirectives.hasOwnProperty(name)) for (var directive, directives = $injector.get(name + Suffix), i = 0, ii = directives.length; ii > i; i++) try {
                    directive = directives[i], (maxPriority === undefined || maxPriority > directive.priority) && -1 != directive.restrict.indexOf(location) && (startAttrName && (directive = inherit(directive, {
                        $$start: startAttrName,
                        $$end: endAttrName
                    })), tDirectives.push(directive), match = directive);
                } catch (e) {
                    $exceptionHandler(e);
                }
                return match;
            }
            function mergeTemplateAttributes(dst, src) {
                var srcAttr = src.$attr, dstAttr = dst.$attr, $element = dst.$$element;
                forEach(dst, function(value, key) {
                    "$" != key.charAt(0) && (src[key] && (value += ("style" === key ? ";" : " ") + src[key]), 
                    dst.$set(key, value, !0, srcAttr[key]));
                }), forEach(src, function(value, key) {
                    "class" == key ? (safeAddClass($element, value), dst["class"] = (dst["class"] ? dst["class"] + " " : "") + value) : "style" == key ? ($element.attr("style", $element.attr("style") + ";" + value), 
                    dst.style = (dst.style ? dst.style + ";" : "") + value) : "$" == key.charAt(0) || dst.hasOwnProperty(key) || (dst[key] = value, 
                    dstAttr[key] = srcAttr[key]);
                });
            }
            function compileTemplateUrl(directives, $compileNode, tAttrs, $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
                var afterTemplateNodeLinkFn, afterTemplateChildLinkFn, linkQueue = [], beforeTemplateCompileNode = $compileNode[0], origAsyncDirective = directives.shift(), derivedSyncDirective = extend({}, origAsyncDirective, {
                    templateUrl: null,
                    transclude: null,
                    replace: null,
                    $$originalDirective: origAsyncDirective
                }), templateUrl = isFunction(origAsyncDirective.templateUrl) ? origAsyncDirective.templateUrl($compileNode, tAttrs) : origAsyncDirective.templateUrl;
                return $compileNode.empty(), $http.get($sce.getTrustedResourceUrl(templateUrl), {
                    cache: $templateCache
                }).success(function(content) {
                    var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;
                    if (content = denormalizeTemplate(content), origAsyncDirective.replace) {
                        if ($template = jqLiteIsTextNode(content) ? [] : jqLite(trim(content)), compileNode = $template[0], 
                        1 != $template.length || 1 !== compileNode.nodeType) throw $compileMinErr("tplrt", "Template for directive '{0}' must have exactly one root element. {1}", origAsyncDirective.name, templateUrl);
                        tempTemplateAttrs = {
                            $attr: {}
                        }, replaceWith($rootElement, $compileNode, compileNode);
                        var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);
                        isObject(origAsyncDirective.scope) && markDirectivesAsIsolate(templateDirectives), 
                        directives = templateDirectives.concat(directives), mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
                    } else compileNode = beforeTemplateCompileNode, $compileNode.html(content);
                    for (directives.unshift(derivedSyncDirective), afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs, childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns, previousCompileContext), 
                    forEach($rootElement, function(node, i) {
                        node == compileNode && ($rootElement[i] = $compileNode[0]);
                    }), afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn); linkQueue.length; ) {
                        var scope = linkQueue.shift(), beforeTemplateLinkNode = linkQueue.shift(), linkRootElement = linkQueue.shift(), boundTranscludeFn = linkQueue.shift(), linkNode = $compileNode[0];
                        if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
                            var oldClasses = beforeTemplateLinkNode.className;
                            previousCompileContext.hasElementTranscludeDirective && origAsyncDirective.replace || (linkNode = jqLiteClone(compileNode)), 
                            replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode), safeAddClass(jqLite(linkNode), oldClasses);
                        }
                        childBoundTranscludeFn = afterTemplateNodeLinkFn.transclude ? createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude) : boundTranscludeFn, 
                        afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement, childBoundTranscludeFn);
                    }
                    linkQueue = null;
                }).error(function(response, code, headers, config) {
                    throw $compileMinErr("tpload", "Failed to load template: {0}", config.url);
                }), function(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
                    linkQueue ? (linkQueue.push(scope), linkQueue.push(node), linkQueue.push(rootElement), 
                    linkQueue.push(boundTranscludeFn)) : afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, boundTranscludeFn);
                };
            }
            function byPriority(a, b) {
                var diff = b.priority - a.priority;
                return 0 !== diff ? diff : a.name !== b.name ? a.name < b.name ? -1 : 1 : a.index - b.index;
            }
            function assertNoDuplicate(what, previousDirective, directive, element) {
                if (previousDirective) throw $compileMinErr("multidir", "Multiple directives [{0}, {1}] asking for {2} on: {3}", previousDirective.name, directive.name, what, startingTag(element));
            }
            function addTextInterpolateDirective(directives, text) {
                var interpolateFn = $interpolate(text, !0);
                interpolateFn && directives.push({
                    priority: 0,
                    compile: valueFn(function(scope, node) {
                        var parent = node.parent(), bindings = parent.data("$binding") || [];
                        bindings.push(interpolateFn), safeAddClass(parent.data("$binding", bindings), "ng-binding"), 
                        scope.$watch(interpolateFn, function(value) {
                            node[0].nodeValue = value;
                        });
                    })
                });
            }
            function getTrustedContext(node, attrNormalizedName) {
                if ("srcdoc" == attrNormalizedName) return $sce.HTML;
                var tag = nodeName_(node);
                return "xlinkHref" == attrNormalizedName || "FORM" == tag && "action" == attrNormalizedName || "IMG" != tag && ("src" == attrNormalizedName || "ngSrc" == attrNormalizedName) ? $sce.RESOURCE_URL : void 0;
            }
            function addAttrInterpolateDirective(node, directives, value, name) {
                var interpolateFn = $interpolate(value, !0);
                if (interpolateFn) {
                    if ("multiple" === name && "SELECT" === nodeName_(node)) throw $compileMinErr("selmulti", "Binding to the 'multiple' attribute is not supported. Element: {0}", startingTag(node));
                    directives.push({
                        priority: 100,
                        compile: function() {
                            return {
                                pre: function(scope, element, attr) {
                                    var $$observers = attr.$$observers || (attr.$$observers = {});
                                    if (EVENT_HANDLER_ATTR_REGEXP.test(name)) throw $compileMinErr("nodomevents", "Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");
                                    interpolateFn = $interpolate(attr[name], !0, getTrustedContext(node, name)), interpolateFn && (attr[name] = interpolateFn(scope), 
                                    ($$observers[name] || ($$observers[name] = [])).$$inter = !0, (attr.$$observers && attr.$$observers[name].$$scope || scope).$watch(interpolateFn, function(newValue, oldValue) {
                                        "class" === name && newValue != oldValue ? attr.$updateClass(newValue, oldValue) : attr.$set(name, newValue);
                                    }));
                                }
                            };
                        }
                    });
                }
            }
            function replaceWith($rootElement, elementsToRemove, newNode) {
                var i, ii, firstElementToRemove = elementsToRemove[0], removeCount = elementsToRemove.length, parent = firstElementToRemove.parentNode;
                if ($rootElement) for (i = 0, ii = $rootElement.length; ii > i; i++) if ($rootElement[i] == firstElementToRemove) {
                    $rootElement[i++] = newNode;
                    for (var j = i, j2 = j + removeCount - 1, jj = $rootElement.length; jj > j; j++, 
                    j2++) jj > j2 ? $rootElement[j] = $rootElement[j2] : delete $rootElement[j];
                    $rootElement.length -= removeCount - 1;
                    break;
                }
                parent && parent.replaceChild(newNode, firstElementToRemove);
                var fragment = document.createDocumentFragment();
                fragment.appendChild(firstElementToRemove), newNode[jqLite.expando] = firstElementToRemove[jqLite.expando];
                for (var k = 1, kk = elementsToRemove.length; kk > k; k++) {
                    var element = elementsToRemove[k];
                    jqLite(element).remove(), fragment.appendChild(element), delete elementsToRemove[k];
                }
                elementsToRemove[0] = newNode, elementsToRemove.length = 1;
            }
            function cloneAndAnnotateFn(fn, annotation) {
                return extend(function() {
                    return fn.apply(null, arguments);
                }, fn, annotation);
            }
            var Attributes = function(element, attr) {
                this.$$element = element, this.$attr = attr || {};
            };
            Attributes.prototype = {
                $normalize: directiveNormalize,
                $addClass: function(classVal) {
                    classVal && classVal.length > 0 && $animate.addClass(this.$$element, classVal);
                },
                $removeClass: function(classVal) {
                    classVal && classVal.length > 0 && $animate.removeClass(this.$$element, classVal);
                },
                $updateClass: function(newClasses, oldClasses) {
                    var toAdd = tokenDifference(newClasses, oldClasses), toRemove = tokenDifference(oldClasses, newClasses);
                    0 === toAdd.length ? $animate.removeClass(this.$$element, toRemove) : 0 === toRemove.length ? $animate.addClass(this.$$element, toAdd) : $animate.setClass(this.$$element, toAdd, toRemove);
                },
                $set: function(key, value, writeAttr, attrName) {
                    var nodeName, booleanKey = getBooleanAttrName(this.$$element[0], key);
                    booleanKey && (this.$$element.prop(key, value), attrName = booleanKey), this[key] = value, 
                    attrName ? this.$attr[key] = attrName : (attrName = this.$attr[key], attrName || (this.$attr[key] = attrName = snake_case(key, "-"))), 
                    nodeName = nodeName_(this.$$element), ("A" === nodeName && "href" === key || "IMG" === nodeName && "src" === key) && (this[key] = value = $$sanitizeUri(value, "src" === key)), 
                    writeAttr !== !1 && (null === value || value === undefined ? this.$$element.removeAttr(attrName) : this.$$element.attr(attrName, value));
                    var $$observers = this.$$observers;
                    $$observers && forEach($$observers[key], function(fn) {
                        try {
                            fn(value);
                        } catch (e) {
                            $exceptionHandler(e);
                        }
                    });
                },
                $observe: function(key, fn) {
                    var attrs = this, $$observers = attrs.$$observers || (attrs.$$observers = {}), listeners = $$observers[key] || ($$observers[key] = []);
                    return listeners.push(fn), $rootScope.$evalAsync(function() {
                        listeners.$$inter || fn(attrs[key]);
                    }), function() {
                        arrayRemove(listeners, fn);
                    };
                }
            };
            var startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), denormalizeTemplate = "{{" == startSymbol || "}}" == endSymbol ? identity : function(template) {
                return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
            }, NG_ATTR_BINDING = /^ngAttr[A-Z]/;
            return compile;
        } ];
    }
    function directiveNormalize(name) {
        return camelCase(name.replace(PREFIX_REGEXP, ""));
    }
    function tokenDifference(str1, str2) {
        var values = "", tokens1 = str1.split(/\s+/), tokens2 = str2.split(/\s+/);
        outer: for (var i = 0; i < tokens1.length; i++) {
            for (var token = tokens1[i], j = 0; j < tokens2.length; j++) if (token == tokens2[j]) continue outer;
            values += (values.length > 0 ? " " : "") + token;
        }
        return values;
    }
    function $ControllerProvider() {
        var controllers = {}, CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;
        this.register = function(name, constructor) {
            assertNotHasOwnProperty(name, "controller"), isObject(name) ? extend(controllers, name) : controllers[name] = constructor;
        }, this.$get = [ "$injector", "$window", function($injector, $window) {
            return function(expression, locals) {
                var instance, match, constructor, identifier;
                if (isString(expression) && (match = expression.match(CNTRL_REG), constructor = match[1], 
                identifier = match[3], expression = controllers.hasOwnProperty(constructor) ? controllers[constructor] : getter(locals.$scope, constructor, !0) || getter($window, constructor, !0), 
                assertArgFn(expression, constructor, !0)), instance = $injector.instantiate(expression, locals, constructor), 
                identifier) {
                    if (!locals || "object" != typeof locals.$scope) throw minErr("$controller")("noscp", "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.", constructor || expression.name, identifier);
                    locals.$scope[identifier] = instance;
                }
                return instance;
            };
        } ];
    }
    function $DocumentProvider() {
        this.$get = [ "$window", function(window) {
            return jqLite(window.document);
        } ];
    }
    function $ExceptionHandlerProvider() {
        this.$get = [ "$log", function($log) {
            return function() {
                $log.error.apply($log, arguments);
            };
        } ];
    }
    function parseHeaders(headers) {
        var key, val, i, parsed = {};
        return headers ? (forEach(headers.split("\n"), function(line) {
            i = line.indexOf(":"), key = lowercase(trim(line.substr(0, i))), val = trim(line.substr(i + 1)), 
            key && (parsed[key] ? parsed[key] += ", " + val : parsed[key] = val);
        }), parsed) : parsed;
    }
    function headersGetter(headers) {
        var headersObj = isObject(headers) ? headers : undefined;
        return function(name) {
            return headersObj || (headersObj = parseHeaders(headers)), name ? headersObj[lowercase(name)] || null : headersObj;
        };
    }
    function transformData(data, headers, fns) {
        return isFunction(fns) ? fns(data, headers) : (forEach(fns, function(fn) {
            data = fn(data, headers);
        }), data);
    }
    function isSuccess(status) {
        return status >= 200 && 300 > status;
    }
    function $HttpProvider() {
        var JSON_START = /^\s*(\[|\{[^\{])/, JSON_END = /[\}\]]\s*$/, PROTECTION_PREFIX = /^\)\]\}',?\n/, CONTENT_TYPE_APPLICATION_JSON = {
            "Content-Type": "application/json;charset=utf-8"
        }, defaults = this.defaults = {
            transformResponse: [ function(data) {
                return isString(data) && (data = data.replace(PROTECTION_PREFIX, ""), JSON_START.test(data) && JSON_END.test(data) && (data = fromJson(data))), 
                data;
            } ],
            transformRequest: [ function(d) {
                return !isObject(d) || isFile(d) || isBlob(d) ? d : toJson(d);
            } ],
            headers: {
                common: {
                    Accept: "application/json, text/plain, */*"
                },
                post: copy(CONTENT_TYPE_APPLICATION_JSON),
                put: copy(CONTENT_TYPE_APPLICATION_JSON),
                patch: copy(CONTENT_TYPE_APPLICATION_JSON)
            },
            xsrfCookieName: "XSRF-TOKEN",
            xsrfHeaderName: "X-XSRF-TOKEN"
        }, interceptorFactories = this.interceptors = [], responseInterceptorFactories = this.responseInterceptors = [];
        this.$get = [ "$httpBackend", "$browser", "$cacheFactory", "$rootScope", "$q", "$injector", function($httpBackend, $browser, $cacheFactory, $rootScope, $q, $injector) {
            function $http(requestConfig) {
                function transformResponse(response) {
                    var resp = extend({}, response, {
                        data: transformData(response.data, response.headers, config.transformResponse)
                    });
                    return isSuccess(response.status) ? resp : $q.reject(resp);
                }
                function mergeHeaders(config) {
                    function execHeaders(headers) {
                        var headerContent;
                        forEach(headers, function(headerFn, header) {
                            isFunction(headerFn) && (headerContent = headerFn(), null != headerContent ? headers[header] = headerContent : delete headers[header]);
                        });
                    }
                    var defHeaderName, lowercaseDefHeaderName, reqHeaderName, defHeaders = defaults.headers, reqHeaders = extend({}, config.headers);
                    defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]), 
                    execHeaders(defHeaders), execHeaders(reqHeaders);
                    defaultHeadersIteration: for (defHeaderName in defHeaders) {
                        lowercaseDefHeaderName = lowercase(defHeaderName);
                        for (reqHeaderName in reqHeaders) if (lowercase(reqHeaderName) === lowercaseDefHeaderName) continue defaultHeadersIteration;
                        reqHeaders[defHeaderName] = defHeaders[defHeaderName];
                    }
                    return reqHeaders;
                }
                var config = {
                    method: "get",
                    transformRequest: defaults.transformRequest,
                    transformResponse: defaults.transformResponse
                }, headers = mergeHeaders(requestConfig);
                extend(config, requestConfig), config.headers = headers, config.method = uppercase(config.method);
                var xsrfValue = urlIsSameOrigin(config.url) ? $browser.cookies()[config.xsrfCookieName || defaults.xsrfCookieName] : undefined;
                xsrfValue && (headers[config.xsrfHeaderName || defaults.xsrfHeaderName] = xsrfValue);
                var serverRequest = function(config) {
                    headers = config.headers;
                    var reqData = transformData(config.data, headersGetter(headers), config.transformRequest);
                    return isUndefined(config.data) && forEach(headers, function(value, header) {
                        "content-type" === lowercase(header) && delete headers[header];
                    }), isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials) && (config.withCredentials = defaults.withCredentials), 
                    sendReq(config, reqData, headers).then(transformResponse, transformResponse);
                }, chain = [ serverRequest, undefined ], promise = $q.when(config);
                for (forEach(reversedInterceptors, function(interceptor) {
                    (interceptor.request || interceptor.requestError) && chain.unshift(interceptor.request, interceptor.requestError), 
                    (interceptor.response || interceptor.responseError) && chain.push(interceptor.response, interceptor.responseError);
                }); chain.length; ) {
                    var thenFn = chain.shift(), rejectFn = chain.shift();
                    promise = promise.then(thenFn, rejectFn);
                }
                return promise.success = function(fn) {
                    return promise.then(function(response) {
                        fn(response.data, response.status, response.headers, config);
                    }), promise;
                }, promise.error = function(fn) {
                    return promise.then(null, function(response) {
                        fn(response.data, response.status, response.headers, config);
                    }), promise;
                }, promise;
            }
            function createShortMethods() {
                forEach(arguments, function(name) {
                    $http[name] = function(url, config) {
                        return $http(extend(config || {}, {
                            method: name,
                            url: url
                        }));
                    };
                });
            }
            function createShortMethodsWithData() {
                forEach(arguments, function(name) {
                    $http[name] = function(url, data, config) {
                        return $http(extend(config || {}, {
                            method: name,
                            url: url,
                            data: data
                        }));
                    };
                });
            }
            function sendReq(config, reqData, reqHeaders) {
                function done(status, response, headersString, statusText) {
                    cache && (isSuccess(status) ? cache.put(url, [ status, response, parseHeaders(headersString), statusText ]) : cache.remove(url)), 
                    resolvePromise(response, status, headersString, statusText), $rootScope.$$phase || $rootScope.$apply();
                }
                function resolvePromise(response, status, headers, statusText) {
                    status = Math.max(status, 0), (isSuccess(status) ? deferred.resolve : deferred.reject)({
                        data: response,
                        status: status,
                        headers: headersGetter(headers),
                        config: config,
                        statusText: statusText
                    });
                }
                function removePendingReq() {
                    var idx = indexOf($http.pendingRequests, config);
                    -1 !== idx && $http.pendingRequests.splice(idx, 1);
                }
                var cache, cachedResp, deferred = $q.defer(), promise = deferred.promise, url = buildUrl(config.url, config.params);
                if ($http.pendingRequests.push(config), promise.then(removePendingReq, removePendingReq), 
                (config.cache || defaults.cache) && config.cache !== !1 && "GET" == config.method && (cache = isObject(config.cache) ? config.cache : isObject(defaults.cache) ? defaults.cache : defaultCache), 
                cache) if (cachedResp = cache.get(url), isDefined(cachedResp)) {
                    if (cachedResp.then) return cachedResp.then(removePendingReq, removePendingReq), 
                    cachedResp;
                    isArray(cachedResp) ? resolvePromise(cachedResp[1], cachedResp[0], copy(cachedResp[2]), cachedResp[3]) : resolvePromise(cachedResp, 200, {}, "OK");
                } else cache.put(url, promise);
                return isUndefined(cachedResp) && $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout, config.withCredentials, config.responseType), 
                promise;
            }
            function buildUrl(url, params) {
                if (!params) return url;
                var parts = [];
                return forEachSorted(params, function(value, key) {
                    null === value || isUndefined(value) || (isArray(value) || (value = [ value ]), 
                    forEach(value, function(v) {
                        isObject(v) && (v = toJson(v)), parts.push(encodeUriQuery(key) + "=" + encodeUriQuery(v));
                    }));
                }), parts.length > 0 && (url += (-1 == url.indexOf("?") ? "?" : "&") + parts.join("&")), 
                url;
            }
            var defaultCache = $cacheFactory("$http"), reversedInterceptors = [];
            return forEach(interceptorFactories, function(interceptorFactory) {
                reversedInterceptors.unshift(isString(interceptorFactory) ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
            }), forEach(responseInterceptorFactories, function(interceptorFactory, index) {
                var responseFn = isString(interceptorFactory) ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory);
                reversedInterceptors.splice(index, 0, {
                    response: function(response) {
                        return responseFn($q.when(response));
                    },
                    responseError: function(response) {
                        return responseFn($q.reject(response));
                    }
                });
            }), $http.pendingRequests = [], createShortMethods("get", "delete", "head", "jsonp"), 
            createShortMethodsWithData("post", "put"), $http.defaults = defaults, $http;
        } ];
    }
    function createXhr(method) {
        if (8 >= msie && (!method.match(/^(get|post|head|put|delete|options)$/i) || !window.XMLHttpRequest)) return new window.ActiveXObject("Microsoft.XMLHTTP");
        if (window.XMLHttpRequest) return new window.XMLHttpRequest();
        throw minErr("$httpBackend")("noxhr", "This browser does not support XMLHttpRequest.");
    }
    function $HttpBackendProvider() {
        this.$get = [ "$browser", "$window", "$document", function($browser, $window, $document) {
            return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);
        } ];
    }
    function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
        function jsonpReq(url, callbackId, done) {
            var script = rawDocument.createElement("script"), callback = null;
            return script.type = "text/javascript", script.src = url, script.async = !0, callback = function(event) {
                removeEventListenerFn(script, "load", callback), removeEventListenerFn(script, "error", callback), 
                rawDocument.body.removeChild(script), script = null;
                var status = -1, text = "unknown";
                event && ("load" !== event.type || callbacks[callbackId].called || (event = {
                    type: "error"
                }), text = event.type, status = "error" === event.type ? 404 : 200), done && done(status, text);
            }, addEventListenerFn(script, "load", callback), addEventListenerFn(script, "error", callback), 
            rawDocument.body.appendChild(script), callback;
        }
        var ABORTED = -1;
        return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {
            function timeoutRequest() {
                status = ABORTED, jsonpDone && jsonpDone(), xhr && xhr.abort();
            }
            function completeRequest(callback, status, response, headersString, statusText) {
                timeoutId && $browserDefer.cancel(timeoutId), jsonpDone = xhr = null, 0 === status && (status = response ? 200 : "file" == urlResolve(url).protocol ? 404 : 0), 
                status = 1223 === status ? 204 : status, statusText = statusText || "", callback(status, response, headersString, statusText), 
                $browser.$$completeOutstandingRequest(noop);
            }
            var status;
            if ($browser.$$incOutstandingRequestCount(), url = url || $browser.url(), "jsonp" == lowercase(method)) {
                var callbackId = "_" + (callbacks.counter++).toString(36);
                callbacks[callbackId] = function(data) {
                    callbacks[callbackId].data = data, callbacks[callbackId].called = !0;
                };
                var jsonpDone = jsonpReq(url.replace("JSON_CALLBACK", "angular.callbacks." + callbackId), callbackId, function(status, text) {
                    completeRequest(callback, status, callbacks[callbackId].data, "", text), callbacks[callbackId] = noop;
                });
            } else {
                var xhr = createXhr(method);
                if (xhr.open(method, url, !0), forEach(headers, function(value, key) {
                    isDefined(value) && xhr.setRequestHeader(key, value);
                }), xhr.onreadystatechange = function() {
                    if (xhr && 4 == xhr.readyState) {
                        var responseHeaders = null, response = null;
                        status !== ABORTED && (responseHeaders = xhr.getAllResponseHeaders(), response = "response" in xhr ? xhr.response : xhr.responseText), 
                        completeRequest(callback, status || xhr.status, response, responseHeaders, xhr.statusText || "");
                    }
                }, withCredentials && (xhr.withCredentials = !0), responseType) try {
                    xhr.responseType = responseType;
                } catch (e) {
                    if ("json" !== responseType) throw e;
                }
                xhr.send(post || null);
            }
            if (timeout > 0) var timeoutId = $browserDefer(timeoutRequest, timeout); else timeout && timeout.then && timeout.then(timeoutRequest);
        };
    }
    function $InterpolateProvider() {
        var startSymbol = "{{", endSymbol = "}}";
        this.startSymbol = function(value) {
            return value ? (startSymbol = value, this) : startSymbol;
        }, this.endSymbol = function(value) {
            return value ? (endSymbol = value, this) : endSymbol;
        }, this.$get = [ "$parse", "$exceptionHandler", "$sce", function($parse, $exceptionHandler, $sce) {
            function $interpolate(text, mustHaveExpression, trustedContext) {
                for (var startIndex, endIndex, fn, exp, index = 0, parts = [], length = text.length, hasInterpolation = !1, concat = []; length > index; ) -1 != (startIndex = text.indexOf(startSymbol, index)) && -1 != (endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) ? (index != startIndex && parts.push(text.substring(index, startIndex)), 
                parts.push(fn = $parse(exp = text.substring(startIndex + startSymbolLength, endIndex))), 
                fn.exp = exp, index = endIndex + endSymbolLength, hasInterpolation = !0) : (index != length && parts.push(text.substring(index)), 
                index = length);
                if ((length = parts.length) || (parts.push(""), length = 1), trustedContext && parts.length > 1) throw $interpolateMinErr("noconcat", "Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce", text);
                return !mustHaveExpression || hasInterpolation ? (concat.length = length, fn = function(context) {
                    try {
                        for (var part, i = 0, ii = length; ii > i; i++) "function" == typeof (part = parts[i]) && (part = part(context), 
                        part = trustedContext ? $sce.getTrusted(trustedContext, part) : $sce.valueOf(part), 
                        null === part || isUndefined(part) ? part = "" : "string" != typeof part && (part = toJson(part))), 
                        concat[i] = part;
                        return concat.join("");
                    } catch (err) {
                        var newErr = $interpolateMinErr("interr", "Can't interpolate: {0}\n{1}", text, err.toString());
                        $exceptionHandler(newErr);
                    }
                }, fn.exp = text, fn.parts = parts, fn) : void 0;
            }
            var startSymbolLength = startSymbol.length, endSymbolLength = endSymbol.length;
            return $interpolate.startSymbol = function() {
                return startSymbol;
            }, $interpolate.endSymbol = function() {
                return endSymbol;
            }, $interpolate;
        } ];
    }
    function $IntervalProvider() {
        this.$get = [ "$rootScope", "$window", "$q", function($rootScope, $window, $q) {
            function interval(fn, delay, count, invokeApply) {
                var setInterval = $window.setInterval, clearInterval = $window.clearInterval, deferred = $q.defer(), promise = deferred.promise, iteration = 0, skipApply = isDefined(invokeApply) && !invokeApply;
                return count = isDefined(count) ? count : 0, promise.then(null, null, fn), promise.$$intervalId = setInterval(function() {
                    deferred.notify(iteration++), count > 0 && iteration >= count && (deferred.resolve(iteration), 
                    clearInterval(promise.$$intervalId), delete intervals[promise.$$intervalId]), skipApply || $rootScope.$apply();
                }, delay), intervals[promise.$$intervalId] = deferred, promise;
            }
            var intervals = {};
            return interval.cancel = function(promise) {
                return promise && promise.$$intervalId in intervals ? (intervals[promise.$$intervalId].reject("canceled"), 
                clearInterval(promise.$$intervalId), delete intervals[promise.$$intervalId], !0) : !1;
            }, interval;
        } ];
    }
    function $LocaleProvider() {
        this.$get = function() {
            return {
                id: "en-us",
                NUMBER_FORMATS: {
                    DECIMAL_SEP: ".",
                    GROUP_SEP: ",",
                    PATTERNS: [ {
                        minInt: 1,
                        minFrac: 0,
                        maxFrac: 3,
                        posPre: "",
                        posSuf: "",
                        negPre: "-",
                        negSuf: "",
                        gSize: 3,
                        lgSize: 3
                    }, {
                        minInt: 1,
                        minFrac: 2,
                        maxFrac: 2,
                        posPre: "¤",
                        posSuf: "",
                        negPre: "(¤",
                        negSuf: ")",
                        gSize: 3,
                        lgSize: 3
                    } ],
                    CURRENCY_SYM: "$"
                },
                DATETIME_FORMATS: {
                    MONTH: "January,February,March,April,May,June,July,August,September,October,November,December".split(","),
                    SHORTMONTH: "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),
                    DAY: "Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),
                    SHORTDAY: "Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(","),
                    AMPMS: [ "AM", "PM" ],
                    medium: "MMM d, y h:mm:ss a",
                    "short": "M/d/yy h:mm a",
                    fullDate: "EEEE, MMMM d, y",
                    longDate: "MMMM d, y",
                    mediumDate: "MMM d, y",
                    shortDate: "M/d/yy",
                    mediumTime: "h:mm:ss a",
                    shortTime: "h:mm a"
                },
                pluralCat: function(num) {
                    return 1 === num ? "one" : "other";
                }
            };
        };
    }
    function encodePath(path) {
        for (var segments = path.split("/"), i = segments.length; i--; ) segments[i] = encodeUriSegment(segments[i]);
        return segments.join("/");
    }
    function parseAbsoluteUrl(absoluteUrl, locationObj, appBase) {
        var parsedUrl = urlResolve(absoluteUrl, appBase);
        locationObj.$$protocol = parsedUrl.protocol, locationObj.$$host = parsedUrl.hostname, 
        locationObj.$$port = int(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
    }
    function parseAppUrl(relativeUrl, locationObj, appBase) {
        var prefixed = "/" !== relativeUrl.charAt(0);
        prefixed && (relativeUrl = "/" + relativeUrl);
        var match = urlResolve(relativeUrl, appBase);
        locationObj.$$path = decodeURIComponent(prefixed && "/" === match.pathname.charAt(0) ? match.pathname.substring(1) : match.pathname), 
        locationObj.$$search = parseKeyValue(match.search), locationObj.$$hash = decodeURIComponent(match.hash), 
        locationObj.$$path && "/" != locationObj.$$path.charAt(0) && (locationObj.$$path = "/" + locationObj.$$path);
    }
    function beginsWith(begin, whole) {
        return 0 === whole.indexOf(begin) ? whole.substr(begin.length) : void 0;
    }
    function stripHash(url) {
        var index = url.indexOf("#");
        return -1 == index ? url : url.substr(0, index);
    }
    function stripFile(url) {
        return url.substr(0, stripHash(url).lastIndexOf("/") + 1);
    }
    function serverBase(url) {
        return url.substring(0, url.indexOf("/", url.indexOf("//") + 2));
    }
    function LocationHtml5Url(appBase, basePrefix) {
        this.$$html5 = !0, basePrefix = basePrefix || "";
        var appBaseNoFile = stripFile(appBase);
        parseAbsoluteUrl(appBase, this, appBase), this.$$parse = function(url) {
            var pathUrl = beginsWith(appBaseNoFile, url);
            if (!isString(pathUrl)) throw $locationMinErr("ipthprfx", 'Invalid url "{0}", missing path prefix "{1}".', url, appBaseNoFile);
            parseAppUrl(pathUrl, this, appBase), this.$$path || (this.$$path = "/"), this.$$compose();
        }, this.$$compose = function() {
            var search = toKeyValue(this.$$search), hash = this.$$hash ? "#" + encodeUriSegment(this.$$hash) : "";
            this.$$url = encodePath(this.$$path) + (search ? "?" + search : "") + hash, this.$$absUrl = appBaseNoFile + this.$$url.substr(1);
        }, this.$$rewrite = function(url) {
            var appUrl, prevAppUrl;
            return (appUrl = beginsWith(appBase, url)) !== undefined ? (prevAppUrl = appUrl, 
            (appUrl = beginsWith(basePrefix, appUrl)) !== undefined ? appBaseNoFile + (beginsWith("/", appUrl) || appUrl) : appBase + prevAppUrl) : (appUrl = beginsWith(appBaseNoFile, url)) !== undefined ? appBaseNoFile + appUrl : appBaseNoFile == url + "/" ? appBaseNoFile : void 0;
        };
    }
    function LocationHashbangUrl(appBase, hashPrefix) {
        var appBaseNoFile = stripFile(appBase);
        parseAbsoluteUrl(appBase, this, appBase), this.$$parse = function(url) {
            function removeWindowsDriveName(path, url, base) {
                var firstPathSegmentMatch, windowsFilePathExp = /^\/?.*?:(\/.*)/;
                return 0 === url.indexOf(base) && (url = url.replace(base, "")), windowsFilePathExp.exec(url) ? path : (firstPathSegmentMatch = windowsFilePathExp.exec(path), 
                firstPathSegmentMatch ? firstPathSegmentMatch[1] : path);
            }
            var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url), withoutHashUrl = "#" == withoutBaseUrl.charAt(0) ? beginsWith(hashPrefix, withoutBaseUrl) : this.$$html5 ? withoutBaseUrl : "";
            if (!isString(withoutHashUrl)) throw $locationMinErr("ihshprfx", 'Invalid url "{0}", missing hash prefix "{1}".', url, hashPrefix);
            parseAppUrl(withoutHashUrl, this, appBase), this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase), 
            this.$$compose();
        }, this.$$compose = function() {
            var search = toKeyValue(this.$$search), hash = this.$$hash ? "#" + encodeUriSegment(this.$$hash) : "";
            this.$$url = encodePath(this.$$path) + (search ? "?" + search : "") + hash, this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : "");
        }, this.$$rewrite = function(url) {
            return stripHash(appBase) == stripHash(url) ? url : void 0;
        };
    }
    function LocationHashbangInHtml5Url(appBase, hashPrefix) {
        this.$$html5 = !0, LocationHashbangUrl.apply(this, arguments);
        var appBaseNoFile = stripFile(appBase);
        this.$$rewrite = function(url) {
            var appUrl;
            return appBase == stripHash(url) ? url : (appUrl = beginsWith(appBaseNoFile, url)) ? appBase + hashPrefix + appUrl : appBaseNoFile === url + "/" ? appBaseNoFile : void 0;
        };
    }
    function locationGetter(property) {
        return function() {
            return this[property];
        };
    }
    function locationGetterSetter(property, preprocess) {
        return function(value) {
            return isUndefined(value) ? this[property] : (this[property] = preprocess(value), 
            this.$$compose(), this);
        };
    }
    function $LocationProvider() {
        var hashPrefix = "", html5Mode = !1;
        this.hashPrefix = function(prefix) {
            return isDefined(prefix) ? (hashPrefix = prefix, this) : hashPrefix;
        }, this.html5Mode = function(mode) {
            return isDefined(mode) ? (html5Mode = mode, this) : html5Mode;
        }, this.$get = [ "$rootScope", "$browser", "$sniffer", "$rootElement", function($rootScope, $browser, $sniffer, $rootElement) {
            function afterLocationChange(oldUrl) {
                $rootScope.$broadcast("$locationChangeSuccess", $location.absUrl(), oldUrl);
            }
            var $location, LocationMode, appBase, baseHref = $browser.baseHref(), initialUrl = $browser.url();
            html5Mode ? (appBase = serverBase(initialUrl) + (baseHref || "/"), LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url) : (appBase = stripHash(initialUrl), 
            LocationMode = LocationHashbangUrl), $location = new LocationMode(appBase, "#" + hashPrefix), 
            $location.$$parse($location.$$rewrite(initialUrl)), $rootElement.on("click", function(event) {
                if (!event.ctrlKey && !event.metaKey && 2 != event.which) {
                    for (var elm = jqLite(event.target); "a" !== lowercase(elm[0].nodeName); ) if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
                    var absHref = elm.prop("href");
                    isObject(absHref) && "[object SVGAnimatedString]" === absHref.toString() && (absHref = urlResolve(absHref.animVal).href);
                    var rewrittenUrl = $location.$$rewrite(absHref);
                    absHref && !elm.attr("target") && rewrittenUrl && !event.isDefaultPrevented() && (event.preventDefault(), 
                    rewrittenUrl != $browser.url() && ($location.$$parse(rewrittenUrl), $rootScope.$apply(), 
                    window.angular["ff-684208-preventDefault"] = !0));
                }
            }), $location.absUrl() != initialUrl && $browser.url($location.absUrl(), !0), $browser.onUrlChange(function(newUrl) {
                $location.absUrl() != newUrl && ($rootScope.$evalAsync(function() {
                    var oldUrl = $location.absUrl();
                    $location.$$parse(newUrl), $rootScope.$broadcast("$locationChangeStart", newUrl, oldUrl).defaultPrevented ? ($location.$$parse(oldUrl), 
                    $browser.url(oldUrl)) : afterLocationChange(oldUrl);
                }), $rootScope.$$phase || $rootScope.$digest());
            });
            var changeCounter = 0;
            return $rootScope.$watch(function() {
                var oldUrl = $browser.url(), currentReplace = $location.$$replace;
                return changeCounter && oldUrl == $location.absUrl() || (changeCounter++, $rootScope.$evalAsync(function() {
                    $rootScope.$broadcast("$locationChangeStart", $location.absUrl(), oldUrl).defaultPrevented ? $location.$$parse(oldUrl) : ($browser.url($location.absUrl(), currentReplace), 
                    afterLocationChange(oldUrl));
                })), $location.$$replace = !1, changeCounter;
            }), $location;
        } ];
    }
    function $LogProvider() {
        var debug = !0, self = this;
        this.debugEnabled = function(flag) {
            return isDefined(flag) ? (debug = flag, this) : debug;
        }, this.$get = [ "$window", function($window) {
            function formatError(arg) {
                return arg instanceof Error && (arg.stack ? arg = arg.message && -1 === arg.stack.indexOf(arg.message) ? "Error: " + arg.message + "\n" + arg.stack : arg.stack : arg.sourceURL && (arg = arg.message + "\n" + arg.sourceURL + ":" + arg.line)), 
                arg;
            }
            function consoleLog(type) {
                var console = $window.console || {}, logFn = console[type] || console.log || noop, hasApply = !1;
                try {
                    hasApply = !!logFn.apply;
                } catch (e) {}
                return hasApply ? function() {
                    var args = [];
                    return forEach(arguments, function(arg) {
                        args.push(formatError(arg));
                    }), logFn.apply(console, args);
                } : function(arg1, arg2) {
                    logFn(arg1, null == arg2 ? "" : arg2);
                };
            }
            return {
                log: consoleLog("log"),
                info: consoleLog("info"),
                warn: consoleLog("warn"),
                error: consoleLog("error"),
                debug: function() {
                    var fn = consoleLog("debug");
                    return function() {
                        debug && fn.apply(self, arguments);
                    };
                }()
            };
        } ];
    }
    function ensureSafeMemberName(name, fullExpression) {
        if ("constructor" === name) throw $parseMinErr("isecfld", 'Referencing "constructor" field in Angular expressions is disallowed! Expression: {0}', fullExpression);
        return name;
    }
    function ensureSafeObject(obj, fullExpression) {
        if (obj) {
            if (obj.constructor === obj) throw $parseMinErr("isecfn", "Referencing Function in Angular expressions is disallowed! Expression: {0}", fullExpression);
            if (obj.document && obj.location && obj.alert && obj.setInterval) throw $parseMinErr("isecwindow", "Referencing the Window in Angular expressions is disallowed! Expression: {0}", fullExpression);
            if (obj.children && (obj.nodeName || obj.prop && obj.attr && obj.find)) throw $parseMinErr("isecdom", "Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}", fullExpression);
        }
        return obj;
    }
    function setter(obj, path, setValue, fullExp, options) {
        options = options || {};
        for (var key, element = path.split("."), i = 0; element.length > 1; i++) {
            key = ensureSafeMemberName(element.shift(), fullExp);
            var propertyObj = obj[key];
            propertyObj || (propertyObj = {}, obj[key] = propertyObj), obj = propertyObj, obj.then && options.unwrapPromises && (promiseWarning(fullExp), 
            "$$v" in obj || !function(promise) {
                promise.then(function(val) {
                    promise.$$v = val;
                });
            }(obj), obj.$$v === undefined && (obj.$$v = {}), obj = obj.$$v);
        }
        return key = ensureSafeMemberName(element.shift(), fullExp), obj[key] = setValue, 
        setValue;
    }
    function cspSafeGetterFn(key0, key1, key2, key3, key4, fullExp, options) {
        return ensureSafeMemberName(key0, fullExp), ensureSafeMemberName(key1, fullExp), 
        ensureSafeMemberName(key2, fullExp), ensureSafeMemberName(key3, fullExp), ensureSafeMemberName(key4, fullExp), 
        options.unwrapPromises ? function(scope, locals) {
            var promise, pathVal = locals && locals.hasOwnProperty(key0) ? locals : scope;
            return null == pathVal ? pathVal : (pathVal = pathVal[key0], pathVal && pathVal.then && (promiseWarning(fullExp), 
            "$$v" in pathVal || (promise = pathVal, promise.$$v = undefined, promise.then(function(val) {
                promise.$$v = val;
            })), pathVal = pathVal.$$v), key1 ? null == pathVal ? undefined : (pathVal = pathVal[key1], 
            pathVal && pathVal.then && (promiseWarning(fullExp), "$$v" in pathVal || (promise = pathVal, 
            promise.$$v = undefined, promise.then(function(val) {
                promise.$$v = val;
            })), pathVal = pathVal.$$v), key2 ? null == pathVal ? undefined : (pathVal = pathVal[key2], 
            pathVal && pathVal.then && (promiseWarning(fullExp), "$$v" in pathVal || (promise = pathVal, 
            promise.$$v = undefined, promise.then(function(val) {
                promise.$$v = val;
            })), pathVal = pathVal.$$v), key3 ? null == pathVal ? undefined : (pathVal = pathVal[key3], 
            pathVal && pathVal.then && (promiseWarning(fullExp), "$$v" in pathVal || (promise = pathVal, 
            promise.$$v = undefined, promise.then(function(val) {
                promise.$$v = val;
            })), pathVal = pathVal.$$v), key4 ? null == pathVal ? undefined : (pathVal = pathVal[key4], 
            pathVal && pathVal.then && (promiseWarning(fullExp), "$$v" in pathVal || (promise = pathVal, 
            promise.$$v = undefined, promise.then(function(val) {
                promise.$$v = val;
            })), pathVal = pathVal.$$v), pathVal) : pathVal) : pathVal) : pathVal) : pathVal);
        } : function(scope, locals) {
            var pathVal = locals && locals.hasOwnProperty(key0) ? locals : scope;
            return null == pathVal ? pathVal : (pathVal = pathVal[key0], key1 ? null == pathVal ? undefined : (pathVal = pathVal[key1], 
            key2 ? null == pathVal ? undefined : (pathVal = pathVal[key2], key3 ? null == pathVal ? undefined : (pathVal = pathVal[key3], 
            key4 ? null == pathVal ? undefined : pathVal = pathVal[key4] : pathVal) : pathVal) : pathVal) : pathVal);
        };
    }
    function simpleGetterFn1(key0, fullExp) {
        return ensureSafeMemberName(key0, fullExp), function(scope, locals) {
            return null == scope ? undefined : (locals && locals.hasOwnProperty(key0) ? locals : scope)[key0];
        };
    }
    function simpleGetterFn2(key0, key1, fullExp) {
        return ensureSafeMemberName(key0, fullExp), ensureSafeMemberName(key1, fullExp), 
        function(scope, locals) {
            return null == scope ? undefined : (scope = (locals && locals.hasOwnProperty(key0) ? locals : scope)[key0], 
            null == scope ? undefined : scope[key1]);
        };
    }
    function getterFn(path, options, fullExp) {
        if (getterFnCache.hasOwnProperty(path)) return getterFnCache[path];
        var fn, pathKeys = path.split("."), pathKeysLength = pathKeys.length;
        if (options.unwrapPromises || 1 !== pathKeysLength) if (options.unwrapPromises || 2 !== pathKeysLength) if (options.csp) fn = 6 > pathKeysLength ? cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4], fullExp, options) : function(scope, locals) {
            var val, i = 0;
            do val = cspSafeGetterFn(pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++], fullExp, options)(scope, locals), 
            locals = undefined, scope = val; while (pathKeysLength > i);
            return val;
        }; else {
            var code = "var p;\n";
            forEach(pathKeys, function(key, index) {
                ensureSafeMemberName(key, fullExp), code += "if(s == null) return undefined;\ns=" + (index ? "s" : '((k&&k.hasOwnProperty("' + key + '"))?k:s)') + '["' + key + '"];\n' + (options.unwrapPromises ? 'if (s && s.then) {\n pw("' + fullExp.replace(/(["\r\n])/g, "\\$1") + '");\n if (!("$$v" in s)) {\n p=s;\n p.$$v = undefined;\n p.then(function(v) {p.$$v=v;});\n}\n s=s.$$v\n}\n' : "");
            }), code += "return s;";
            var evaledFnGetter = new Function("s", "k", "pw", code);
            evaledFnGetter.toString = valueFn(code), fn = options.unwrapPromises ? function(scope, locals) {
                return evaledFnGetter(scope, locals, promiseWarning);
            } : evaledFnGetter;
        } else fn = simpleGetterFn2(pathKeys[0], pathKeys[1], fullExp); else fn = simpleGetterFn1(pathKeys[0], fullExp);
        return "hasOwnProperty" !== path && (getterFnCache[path] = fn), fn;
    }
    function $ParseProvider() {
        var cache = {}, $parseOptions = {
            csp: !1,
            unwrapPromises: !1,
            logPromiseWarnings: !0
        };
        this.unwrapPromises = function(value) {
            return isDefined(value) ? ($parseOptions.unwrapPromises = !!value, this) : $parseOptions.unwrapPromises;
        }, this.logPromiseWarnings = function(value) {
            return isDefined(value) ? ($parseOptions.logPromiseWarnings = value, this) : $parseOptions.logPromiseWarnings;
        }, this.$get = [ "$filter", "$sniffer", "$log", function($filter, $sniffer, $log) {
            return $parseOptions.csp = $sniffer.csp, promiseWarning = function(fullExp) {
                $parseOptions.logPromiseWarnings && !promiseWarningCache.hasOwnProperty(fullExp) && (promiseWarningCache[fullExp] = !0, 
                $log.warn("[$parse] Promise found in the expression `" + fullExp + "`. Automatic unwrapping of promises in Angular expressions is deprecated."));
            }, function(exp) {
                var parsedExpression;
                switch (typeof exp) {
                  case "string":
                    if (cache.hasOwnProperty(exp)) return cache[exp];
                    var lexer = new Lexer($parseOptions), parser = new Parser(lexer, $filter, $parseOptions);
                    return parsedExpression = parser.parse(exp, !1), "hasOwnProperty" !== exp && (cache[exp] = parsedExpression), 
                    parsedExpression;

                  case "function":
                    return exp;

                  default:
                    return noop;
                }
            };
        } ];
    }
    function $QProvider() {
        this.$get = [ "$rootScope", "$exceptionHandler", function($rootScope, $exceptionHandler) {
            return qFactory(function(callback) {
                $rootScope.$evalAsync(callback);
            }, $exceptionHandler);
        } ];
    }
    function qFactory(nextTick, exceptionHandler) {
        function defaultCallback(value) {
            return value;
        }
        function defaultErrback(reason) {
            return reject(reason);
        }
        function all(promises) {
            var deferred = defer(), counter = 0, results = isArray(promises) ? [] : {};
            return forEach(promises, function(promise, key) {
                counter++, ref(promise).then(function(value) {
                    results.hasOwnProperty(key) || (results[key] = value, --counter || deferred.resolve(results));
                }, function(reason) {
                    results.hasOwnProperty(key) || deferred.reject(reason);
                });
            }), 0 === counter && deferred.resolve(results), deferred.promise;
        }
        var defer = function() {
            var value, deferred, pending = [];
            return deferred = {
                resolve: function(val) {
                    if (pending) {
                        var callbacks = pending;
                        pending = undefined, value = ref(val), callbacks.length && nextTick(function() {
                            for (var callback, i = 0, ii = callbacks.length; ii > i; i++) callback = callbacks[i], 
                            value.then(callback[0], callback[1], callback[2]);
                        });
                    }
                },
                reject: function(reason) {
                    deferred.resolve(createInternalRejectedPromise(reason));
                },
                notify: function(progress) {
                    if (pending) {
                        var callbacks = pending;
                        pending.length && nextTick(function() {
                            for (var callback, i = 0, ii = callbacks.length; ii > i; i++) callback = callbacks[i], 
                            callback[2](progress);
                        });
                    }
                },
                promise: {
                    then: function(callback, errback, progressback) {
                        var result = defer(), wrappedCallback = function(value) {
                            try {
                                result.resolve((isFunction(callback) ? callback : defaultCallback)(value));
                            } catch (e) {
                                result.reject(e), exceptionHandler(e);
                            }
                        }, wrappedErrback = function(reason) {
                            try {
                                result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));
                            } catch (e) {
                                result.reject(e), exceptionHandler(e);
                            }
                        }, wrappedProgressback = function(progress) {
                            try {
                                result.notify((isFunction(progressback) ? progressback : defaultCallback)(progress));
                            } catch (e) {
                                exceptionHandler(e);
                            }
                        };
                        return pending ? pending.push([ wrappedCallback, wrappedErrback, wrappedProgressback ]) : value.then(wrappedCallback, wrappedErrback, wrappedProgressback), 
                        result.promise;
                    },
                    "catch": function(callback) {
                        return this.then(null, callback);
                    },
                    "finally": function(callback) {
                        function makePromise(value, resolved) {
                            var result = defer();
                            return resolved ? result.resolve(value) : result.reject(value), result.promise;
                        }
                        function handleCallback(value, isResolved) {
                            var callbackOutput = null;
                            try {
                                callbackOutput = (callback || defaultCallback)();
                            } catch (e) {
                                return makePromise(e, !1);
                            }
                            return callbackOutput && isFunction(callbackOutput.then) ? callbackOutput.then(function() {
                                return makePromise(value, isResolved);
                            }, function(error) {
                                return makePromise(error, !1);
                            }) : makePromise(value, isResolved);
                        }
                        return this.then(function(value) {
                            return handleCallback(value, !0);
                        }, function(error) {
                            return handleCallback(error, !1);
                        });
                    }
                }
            };
        }, ref = function(value) {
            return value && isFunction(value.then) ? value : {
                then: function(callback) {
                    var result = defer();
                    return nextTick(function() {
                        result.resolve(callback(value));
                    }), result.promise;
                }
            };
        }, reject = function(reason) {
            var result = defer();
            return result.reject(reason), result.promise;
        }, createInternalRejectedPromise = function(reason) {
            return {
                then: function(callback, errback) {
                    var result = defer();
                    return nextTick(function() {
                        try {
                            result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));
                        } catch (e) {
                            result.reject(e), exceptionHandler(e);
                        }
                    }), result.promise;
                }
            };
        }, when = function(value, callback, errback, progressback) {
            var done, result = defer(), wrappedCallback = function(value) {
                try {
                    return (isFunction(callback) ? callback : defaultCallback)(value);
                } catch (e) {
                    return exceptionHandler(e), reject(e);
                }
            }, wrappedErrback = function(reason) {
                try {
                    return (isFunction(errback) ? errback : defaultErrback)(reason);
                } catch (e) {
                    return exceptionHandler(e), reject(e);
                }
            }, wrappedProgressback = function(progress) {
                try {
                    return (isFunction(progressback) ? progressback : defaultCallback)(progress);
                } catch (e) {
                    exceptionHandler(e);
                }
            };
            return nextTick(function() {
                ref(value).then(function(value) {
                    done || (done = !0, result.resolve(ref(value).then(wrappedCallback, wrappedErrback, wrappedProgressback)));
                }, function(reason) {
                    done || (done = !0, result.resolve(wrappedErrback(reason)));
                }, function(progress) {
                    done || result.notify(wrappedProgressback(progress));
                });
            }), result.promise;
        };
        return {
            defer: defer,
            reject: reject,
            when: when,
            all: all
        };
    }
    function $$RAFProvider() {
        this.$get = [ "$window", "$timeout", function($window, $timeout) {
            var requestAnimationFrame = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame, cancelAnimationFrame = $window.cancelAnimationFrame || $window.webkitCancelAnimationFrame || $window.mozCancelAnimationFrame || $window.webkitCancelRequestAnimationFrame, rafSupported = !!requestAnimationFrame, raf = rafSupported ? function(fn) {
                var id = requestAnimationFrame(fn);
                return function() {
                    cancelAnimationFrame(id);
                };
            } : function(fn) {
                var timer = $timeout(fn, 16.66, !1);
                return function() {
                    $timeout.cancel(timer);
                };
            };
            return raf.supported = rafSupported, raf;
        } ];
    }
    function $RootScopeProvider() {
        var TTL = 10, $rootScopeMinErr = minErr("$rootScope"), lastDirtyWatch = null;
        this.digestTtl = function(value) {
            return arguments.length && (TTL = value), TTL;
        }, this.$get = [ "$injector", "$exceptionHandler", "$parse", "$browser", function($injector, $exceptionHandler, $parse, $browser) {
            function Scope() {
                this.$id = nextUid(), this.$$phase = this.$parent = this.$$watchers = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null, 
                this["this"] = this.$root = this, this.$$destroyed = !1, this.$$asyncQueue = [], 
                this.$$postDigestQueue = [], this.$$listeners = {}, this.$$listenerCount = {}, this.$$isolateBindings = {};
            }
            function beginPhase(phase) {
                if ($rootScope.$$phase) throw $rootScopeMinErr("inprog", "{0} already in progress", $rootScope.$$phase);
                $rootScope.$$phase = phase;
            }
            function clearPhase() {
                $rootScope.$$phase = null;
            }
            function compileToFn(exp, name) {
                var fn = $parse(exp);
                return assertArgFn(fn, name), fn;
            }
            function decrementListenerCount(current, count, name) {
                do current.$$listenerCount[name] -= count, 0 === current.$$listenerCount[name] && delete current.$$listenerCount[name]; while (current = current.$parent);
            }
            function initWatchVal() {}
            Scope.prototype = {
                constructor: Scope,
                $new: function(isolate) {
                    var ChildScope, child;
                    return isolate ? (child = new Scope(), child.$root = this.$root, child.$$asyncQueue = this.$$asyncQueue, 
                    child.$$postDigestQueue = this.$$postDigestQueue) : (ChildScope = function() {}, 
                    ChildScope.prototype = this, child = new ChildScope(), child.$id = nextUid()), child["this"] = child, 
                    child.$$listeners = {}, child.$$listenerCount = {}, child.$parent = this, child.$$watchers = child.$$nextSibling = child.$$childHead = child.$$childTail = null, 
                    child.$$prevSibling = this.$$childTail, this.$$childHead ? (this.$$childTail.$$nextSibling = child, 
                    this.$$childTail = child) : this.$$childHead = this.$$childTail = child, child;
                },
                $watch: function(watchExp, listener, objectEquality) {
                    var scope = this, get = compileToFn(watchExp, "watch"), array = scope.$$watchers, watcher = {
                        fn: listener,
                        last: initWatchVal,
                        get: get,
                        exp: watchExp,
                        eq: !!objectEquality
                    };
                    if (lastDirtyWatch = null, !isFunction(listener)) {
                        var listenFn = compileToFn(listener || noop, "listener");
                        watcher.fn = function(newVal, oldVal, scope) {
                            listenFn(scope);
                        };
                    }
                    if ("string" == typeof watchExp && get.constant) {
                        var originalFn = watcher.fn;
                        watcher.fn = function(newVal, oldVal, scope) {
                            originalFn.call(this, newVal, oldVal, scope), arrayRemove(array, watcher);
                        };
                    }
                    return array || (array = scope.$$watchers = []), array.unshift(watcher), function() {
                        arrayRemove(array, watcher), lastDirtyWatch = null;
                    };
                },
                $watchCollection: function(obj, listener) {
                    function $watchCollectionWatch() {
                        newValue = objGetter(self);
                        var newLength, key;
                        if (isObject(newValue)) if (isArrayLike(newValue)) {
                            oldValue !== internalArray && (oldValue = internalArray, oldLength = oldValue.length = 0, 
                            changeDetected++), newLength = newValue.length, oldLength !== newLength && (changeDetected++, 
                            oldValue.length = oldLength = newLength);
                            for (var i = 0; newLength > i; i++) {
                                var bothNaN = oldValue[i] !== oldValue[i] && newValue[i] !== newValue[i];
                                bothNaN || oldValue[i] === newValue[i] || (changeDetected++, oldValue[i] = newValue[i]);
                            }
                        } else {
                            oldValue !== internalObject && (oldValue = internalObject = {}, oldLength = 0, changeDetected++), 
                            newLength = 0;
                            for (key in newValue) newValue.hasOwnProperty(key) && (newLength++, oldValue.hasOwnProperty(key) ? oldValue[key] !== newValue[key] && (changeDetected++, 
                            oldValue[key] = newValue[key]) : (oldLength++, oldValue[key] = newValue[key], changeDetected++));
                            if (oldLength > newLength) {
                                changeDetected++;
                                for (key in oldValue) oldValue.hasOwnProperty(key) && !newValue.hasOwnProperty(key) && (oldLength--, 
                                delete oldValue[key]);
                            }
                        } else oldValue !== newValue && (oldValue = newValue, changeDetected++);
                        return changeDetected;
                    }
                    function $watchCollectionAction() {
                        if (initRun ? (initRun = !1, listener(newValue, newValue, self)) : listener(newValue, veryOldValue, self), 
                        trackVeryOldValue) if (isObject(newValue)) if (isArrayLike(newValue)) {
                            veryOldValue = new Array(newValue.length);
                            for (var i = 0; i < newValue.length; i++) veryOldValue[i] = newValue[i];
                        } else {
                            veryOldValue = {};
                            for (var key in newValue) hasOwnProperty.call(newValue, key) && (veryOldValue[key] = newValue[key]);
                        } else veryOldValue = newValue;
                    }
                    var newValue, oldValue, veryOldValue, self = this, trackVeryOldValue = listener.length > 1, changeDetected = 0, objGetter = $parse(obj), internalArray = [], internalObject = {}, initRun = !0, oldLength = 0;
                    return this.$watch($watchCollectionWatch, $watchCollectionAction);
                },
                $digest: function() {
                    var watch, value, last, watchers, length, dirty, next, current, logIdx, logMsg, asyncTask, asyncQueue = this.$$asyncQueue, postDigestQueue = this.$$postDigestQueue, ttl = TTL, target = this, watchLog = [];
                    beginPhase("$digest"), lastDirtyWatch = null;
                    do {
                        for (dirty = !1, current = target; asyncQueue.length; ) {
                            try {
                                asyncTask = asyncQueue.shift(), asyncTask.scope.$eval(asyncTask.expression);
                            } catch (e) {
                                clearPhase(), $exceptionHandler(e);
                            }
                            lastDirtyWatch = null;
                        }
                        traverseScopesLoop: do {
                            if (watchers = current.$$watchers) for (length = watchers.length; length--; ) try {
                                if (watch = watchers[length]) if ((value = watch.get(current)) === (last = watch.last) || (watch.eq ? equals(value, last) : "number" == typeof value && "number" == typeof last && isNaN(value) && isNaN(last))) {
                                    if (watch === lastDirtyWatch) {
                                        dirty = !1;
                                        break traverseScopesLoop;
                                    }
                                } else dirty = !0, lastDirtyWatch = watch, watch.last = watch.eq ? copy(value) : value, 
                                watch.fn(value, last === initWatchVal ? value : last, current), 5 > ttl && (logIdx = 4 - ttl, 
                                watchLog[logIdx] || (watchLog[logIdx] = []), logMsg = isFunction(watch.exp) ? "fn: " + (watch.exp.name || watch.exp.toString()) : watch.exp, 
                                logMsg += "; newVal: " + toJson(value) + "; oldVal: " + toJson(last), watchLog[logIdx].push(logMsg));
                            } catch (e) {
                                clearPhase(), $exceptionHandler(e);
                            }
                            if (!(next = current.$$childHead || current !== target && current.$$nextSibling)) for (;current !== target && !(next = current.$$nextSibling); ) current = current.$parent;
                        } while (current = next);
                        if ((dirty || asyncQueue.length) && !ttl--) throw clearPhase(), $rootScopeMinErr("infdig", "{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}", TTL, toJson(watchLog));
                    } while (dirty || asyncQueue.length);
                    for (clearPhase(); postDigestQueue.length; ) try {
                        postDigestQueue.shift()();
                    } catch (e) {
                        $exceptionHandler(e);
                    }
                },
                $destroy: function() {
                    if (!this.$$destroyed) {
                        var parent = this.$parent;
                        this.$broadcast("$destroy"), this.$$destroyed = !0, this !== $rootScope && (forEach(this.$$listenerCount, bind(null, decrementListenerCount, this)), 
                        parent.$$childHead == this && (parent.$$childHead = this.$$nextSibling), parent.$$childTail == this && (parent.$$childTail = this.$$prevSibling), 
                        this.$$prevSibling && (this.$$prevSibling.$$nextSibling = this.$$nextSibling), this.$$nextSibling && (this.$$nextSibling.$$prevSibling = this.$$prevSibling), 
                        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = this.$root = null, 
                        this.$$listeners = {}, this.$$watchers = this.$$asyncQueue = this.$$postDigestQueue = [], 
                        this.$destroy = this.$digest = this.$apply = noop, this.$on = this.$watch = function() {
                            return noop;
                        });
                    }
                },
                $eval: function(expr, locals) {
                    return $parse(expr)(this, locals);
                },
                $evalAsync: function(expr) {
                    $rootScope.$$phase || $rootScope.$$asyncQueue.length || $browser.defer(function() {
                        $rootScope.$$asyncQueue.length && $rootScope.$digest();
                    }), this.$$asyncQueue.push({
                        scope: this,
                        expression: expr
                    });
                },
                $$postDigest: function(fn) {
                    this.$$postDigestQueue.push(fn);
                },
                $apply: function(expr) {
                    try {
                        return beginPhase("$apply"), this.$eval(expr);
                    } catch (e) {
                        $exceptionHandler(e);
                    } finally {
                        clearPhase();
                        try {
                            $rootScope.$digest();
                        } catch (e) {
                            throw $exceptionHandler(e), e;
                        }
                    }
                },
                $on: function(name, listener) {
                    var namedListeners = this.$$listeners[name];
                    namedListeners || (this.$$listeners[name] = namedListeners = []), namedListeners.push(listener);
                    var current = this;
                    do current.$$listenerCount[name] || (current.$$listenerCount[name] = 0), current.$$listenerCount[name]++; while (current = current.$parent);
                    var self = this;
                    return function() {
                        namedListeners[indexOf(namedListeners, listener)] = null, decrementListenerCount(self, 1, name);
                    };
                },
                $emit: function(name) {
                    var namedListeners, i, length, empty = [], scope = this, stopPropagation = !1, event = {
                        name: name,
                        targetScope: scope,
                        stopPropagation: function() {
                            stopPropagation = !0;
                        },
                        preventDefault: function() {
                            event.defaultPrevented = !0;
                        },
                        defaultPrevented: !1
                    }, listenerArgs = concat([ event ], arguments, 1);
                    do {
                        for (namedListeners = scope.$$listeners[name] || empty, event.currentScope = scope, 
                        i = 0, length = namedListeners.length; length > i; i++) if (namedListeners[i]) try {
                            namedListeners[i].apply(null, listenerArgs);
                        } catch (e) {
                            $exceptionHandler(e);
                        } else namedListeners.splice(i, 1), i--, length--;
                        if (stopPropagation) return event;
                        scope = scope.$parent;
                    } while (scope);
                    return event;
                },
                $broadcast: function(name) {
                    for (var listeners, i, length, target = this, current = target, next = target, event = {
                        name: name,
                        targetScope: target,
                        preventDefault: function() {
                            event.defaultPrevented = !0;
                        },
                        defaultPrevented: !1
                    }, listenerArgs = concat([ event ], arguments, 1); current = next; ) {
                        for (event.currentScope = current, listeners = current.$$listeners[name] || [], 
                        i = 0, length = listeners.length; length > i; i++) if (listeners[i]) try {
                            listeners[i].apply(null, listenerArgs);
                        } catch (e) {
                            $exceptionHandler(e);
                        } else listeners.splice(i, 1), i--, length--;
                        if (!(next = current.$$listenerCount[name] && current.$$childHead || current !== target && current.$$nextSibling)) for (;current !== target && !(next = current.$$nextSibling); ) current = current.$parent;
                    }
                    return event;
                }
            };
            var $rootScope = new Scope();
            return $rootScope;
        } ];
    }
    function $$SanitizeUriProvider() {
        var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/, imgSrcSanitizationWhitelist = /^\s*(https?|ftp|file|blob):|data:image\//;
        this.aHrefSanitizationWhitelist = function(regexp) {
            return isDefined(regexp) ? (aHrefSanitizationWhitelist = regexp, this) : aHrefSanitizationWhitelist;
        }, this.imgSrcSanitizationWhitelist = function(regexp) {
            return isDefined(regexp) ? (imgSrcSanitizationWhitelist = regexp, this) : imgSrcSanitizationWhitelist;
        }, this.$get = function() {
            return function(uri, isImage) {
                var normalizedVal, regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
                return msie && !(msie >= 8) || (normalizedVal = urlResolve(uri).href, "" === normalizedVal || normalizedVal.match(regex)) ? uri : "unsafe:" + normalizedVal;
            };
        };
    }
    function escapeForRegexp(s) {
        return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
    }
    function adjustMatcher(matcher) {
        if ("self" === matcher) return matcher;
        if (isString(matcher)) {
            if (matcher.indexOf("***") > -1) throw $sceMinErr("iwcard", "Illegal sequence *** in string matcher.  String: {0}", matcher);
            return matcher = escapeForRegexp(matcher).replace("\\*\\*", ".*").replace("\\*", "[^:/.?&;]*"), 
            new RegExp("^" + matcher + "$");
        }
        if (isRegExp(matcher)) return new RegExp("^" + matcher.source + "$");
        throw $sceMinErr("imatcher", 'Matchers may only be "self", string patterns or RegExp objects');
    }
    function adjustMatchers(matchers) {
        var adjustedMatchers = [];
        return isDefined(matchers) && forEach(matchers, function(matcher) {
            adjustedMatchers.push(adjustMatcher(matcher));
        }), adjustedMatchers;
    }
    function $SceDelegateProvider() {
        this.SCE_CONTEXTS = SCE_CONTEXTS;
        var resourceUrlWhitelist = [ "self" ], resourceUrlBlacklist = [];
        this.resourceUrlWhitelist = function(value) {
            return arguments.length && (resourceUrlWhitelist = adjustMatchers(value)), resourceUrlWhitelist;
        }, this.resourceUrlBlacklist = function(value) {
            return arguments.length && (resourceUrlBlacklist = adjustMatchers(value)), resourceUrlBlacklist;
        }, this.$get = [ "$injector", function($injector) {
            function matchUrl(matcher, parsedUrl) {
                return "self" === matcher ? urlIsSameOrigin(parsedUrl) : !!matcher.exec(parsedUrl.href);
            }
            function isResourceUrlAllowedByPolicy(url) {
                var i, n, parsedUrl = urlResolve(url.toString()), allowed = !1;
                for (i = 0, n = resourceUrlWhitelist.length; n > i; i++) if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
                    allowed = !0;
                    break;
                }
                if (allowed) for (i = 0, n = resourceUrlBlacklist.length; n > i; i++) if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
                    allowed = !1;
                    break;
                }
                return allowed;
            }
            function generateHolderType(Base) {
                var holderType = function(trustedValue) {
                    this.$$unwrapTrustedValue = function() {
                        return trustedValue;
                    };
                };
                return Base && (holderType.prototype = new Base()), holderType.prototype.valueOf = function() {
                    return this.$$unwrapTrustedValue();
                }, holderType.prototype.toString = function() {
                    return this.$$unwrapTrustedValue().toString();
                }, holderType;
            }
            function trustAs(type, trustedValue) {
                var Constructor = byType.hasOwnProperty(type) ? byType[type] : null;
                if (!Constructor) throw $sceMinErr("icontext", "Attempted to trust a value in invalid context. Context: {0}; Value: {1}", type, trustedValue);
                if (null === trustedValue || trustedValue === undefined || "" === trustedValue) return trustedValue;
                if ("string" != typeof trustedValue) throw $sceMinErr("itype", "Attempted to trust a non-string value in a content requiring a string: Context: {0}", type);
                return new Constructor(trustedValue);
            }
            function valueOf(maybeTrusted) {
                return maybeTrusted instanceof trustedValueHolderBase ? maybeTrusted.$$unwrapTrustedValue() : maybeTrusted;
            }
            function getTrusted(type, maybeTrusted) {
                if (null === maybeTrusted || maybeTrusted === undefined || "" === maybeTrusted) return maybeTrusted;
                var constructor = byType.hasOwnProperty(type) ? byType[type] : null;
                if (constructor && maybeTrusted instanceof constructor) return maybeTrusted.$$unwrapTrustedValue();
                if (type === SCE_CONTEXTS.RESOURCE_URL) {
                    if (isResourceUrlAllowedByPolicy(maybeTrusted)) return maybeTrusted;
                    throw $sceMinErr("insecurl", "Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}", maybeTrusted.toString());
                }
                if (type === SCE_CONTEXTS.HTML) return htmlSanitizer(maybeTrusted);
                throw $sceMinErr("unsafe", "Attempting to use an unsafe value in a safe context.");
            }
            var htmlSanitizer = function() {
                throw $sceMinErr("unsafe", "Attempting to use an unsafe value in a safe context.");
            };
            $injector.has("$sanitize") && (htmlSanitizer = $injector.get("$sanitize"));
            var trustedValueHolderBase = generateHolderType(), byType = {};
            return byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase), byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase), 
            byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase), byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase), 
            byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]), 
            {
                trustAs: trustAs,
                getTrusted: getTrusted,
                valueOf: valueOf
            };
        } ];
    }
    function $SceProvider() {
        var enabled = !0;
        this.enabled = function(value) {
            return arguments.length && (enabled = !!value), enabled;
        }, this.$get = [ "$parse", "$sniffer", "$sceDelegate", function($parse, $sniffer, $sceDelegate) {
            if (enabled && $sniffer.msie && $sniffer.msieDocumentMode < 8) throw $sceMinErr("iequirks", "Strict Contextual Escaping does not support Internet Explorer version < 9 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");
            var sce = copy(SCE_CONTEXTS);
            sce.isEnabled = function() {
                return enabled;
            }, sce.trustAs = $sceDelegate.trustAs, sce.getTrusted = $sceDelegate.getTrusted, 
            sce.valueOf = $sceDelegate.valueOf, enabled || (sce.trustAs = sce.getTrusted = function(type, value) {
                return value;
            }, sce.valueOf = identity), sce.parseAs = function(type, expr) {
                var parsed = $parse(expr);
                return parsed.literal && parsed.constant ? parsed : function(self, locals) {
                    return sce.getTrusted(type, parsed(self, locals));
                };
            };
            var parse = sce.parseAs, getTrusted = sce.getTrusted, trustAs = sce.trustAs;
            return forEach(SCE_CONTEXTS, function(enumValue, name) {
                var lName = lowercase(name);
                sce[camelCase("parse_as_" + lName)] = function(expr) {
                    return parse(enumValue, expr);
                }, sce[camelCase("get_trusted_" + lName)] = function(value) {
                    return getTrusted(enumValue, value);
                }, sce[camelCase("trust_as_" + lName)] = function(value) {
                    return trustAs(enumValue, value);
                };
            }), sce;
        } ];
    }
    function $SnifferProvider() {
        this.$get = [ "$window", "$document", function($window, $document) {
            var vendorPrefix, match, eventSupport = {}, android = int((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]), boxee = /Boxee/i.test(($window.navigator || {}).userAgent), document = $document[0] || {}, documentMode = document.documentMode, vendorRegex = /^(Moz|webkit|O|ms)(?=[A-Z])/, bodyStyle = document.body && document.body.style, transitions = !1, animations = !1;
            if (bodyStyle) {
                for (var prop in bodyStyle) if (match = vendorRegex.exec(prop)) {
                    vendorPrefix = match[0], vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
                    break;
                }
                vendorPrefix || (vendorPrefix = "WebkitOpacity" in bodyStyle && "webkit"), transitions = !!("transition" in bodyStyle || vendorPrefix + "Transition" in bodyStyle), 
                animations = !!("animation" in bodyStyle || vendorPrefix + "Animation" in bodyStyle), 
                !android || transitions && animations || (transitions = isString(document.body.style.webkitTransition), 
                animations = isString(document.body.style.webkitAnimation));
            }
            return {
                history: !(!$window.history || !$window.history.pushState || 4 > android || boxee),
                hashchange: "onhashchange" in $window && (!documentMode || documentMode > 7),
                hasEvent: function(event) {
                    if ("input" == event && 9 == msie) return !1;
                    if (isUndefined(eventSupport[event])) {
                        var divElm = document.createElement("div");
                        eventSupport[event] = "on" + event in divElm;
                    }
                    return eventSupport[event];
                },
                csp: csp(),
                vendorPrefix: vendorPrefix,
                transitions: transitions,
                animations: animations,
                android: android,
                msie: msie,
                msieDocumentMode: documentMode
            };
        } ];
    }
    function $TimeoutProvider() {
        this.$get = [ "$rootScope", "$browser", "$q", "$exceptionHandler", function($rootScope, $browser, $q, $exceptionHandler) {
            function timeout(fn, delay, invokeApply) {
                var timeoutId, deferred = $q.defer(), promise = deferred.promise, skipApply = isDefined(invokeApply) && !invokeApply;
                return timeoutId = $browser.defer(function() {
                    try {
                        deferred.resolve(fn());
                    } catch (e) {
                        deferred.reject(e), $exceptionHandler(e);
                    } finally {
                        delete deferreds[promise.$$timeoutId];
                    }
                    skipApply || $rootScope.$apply();
                }, delay), promise.$$timeoutId = timeoutId, deferreds[timeoutId] = deferred, promise;
            }
            var deferreds = {};
            return timeout.cancel = function(promise) {
                return promise && promise.$$timeoutId in deferreds ? (deferreds[promise.$$timeoutId].reject("canceled"), 
                delete deferreds[promise.$$timeoutId], $browser.defer.cancel(promise.$$timeoutId)) : !1;
            }, timeout;
        } ];
    }
    function urlResolve(url) {
        var href = url;
        return msie && (urlParsingNode.setAttribute("href", href), href = urlParsingNode.href), 
        urlParsingNode.setAttribute("href", href), {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: "/" === urlParsingNode.pathname.charAt(0) ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
    }
    function urlIsSameOrigin(requestUrl) {
        var parsed = isString(requestUrl) ? urlResolve(requestUrl) : requestUrl;
        return parsed.protocol === originUrl.protocol && parsed.host === originUrl.host;
    }
    function $WindowProvider() {
        this.$get = valueFn(window);
    }
    function $FilterProvider($provide) {
        function register(name, factory) {
            if (isObject(name)) {
                var filters = {};
                return forEach(name, function(filter, key) {
                    filters[key] = register(key, filter);
                }), filters;
            }
            return $provide.factory(name + suffix, factory);
        }
        var suffix = "Filter";
        this.register = register, this.$get = [ "$injector", function($injector) {
            return function(name) {
                return $injector.get(name + suffix);
            };
        } ], register("currency", currencyFilter), register("date", dateFilter), register("filter", filterFilter), 
        register("json", jsonFilter), register("limitTo", limitToFilter), register("lowercase", lowercaseFilter), 
        register("number", numberFilter), register("orderBy", orderByFilter), register("uppercase", uppercaseFilter);
    }
    function filterFilter() {
        return function(array, expression, comparator) {
            if (!isArray(array)) return array;
            var comparatorType = typeof comparator, predicates = [];
            predicates.check = function(value) {
                for (var j = 0; j < predicates.length; j++) if (!predicates[j](value)) return !1;
                return !0;
            }, "function" !== comparatorType && (comparator = "boolean" === comparatorType && comparator ? function(obj, text) {
                return angular.equals(obj, text);
            } : function(obj, text) {
                if (obj && text && "object" == typeof obj && "object" == typeof text) {
                    for (var objKey in obj) if ("$" !== objKey.charAt(0) && hasOwnProperty.call(obj, objKey) && comparator(obj[objKey], text[objKey])) return !0;
                    return !1;
                }
                return text = ("" + text).toLowerCase(), ("" + obj).toLowerCase().indexOf(text) > -1;
            });
            var search = function(obj, text) {
                if ("string" == typeof text && "!" === text.charAt(0)) return !search(obj, text.substr(1));
                switch (typeof obj) {
                  case "boolean":
                  case "number":
                  case "string":
                    return comparator(obj, text);

                  case "object":
                    switch (typeof text) {
                      case "object":
                        return comparator(obj, text);

                      default:
                        for (var objKey in obj) if ("$" !== objKey.charAt(0) && search(obj[objKey], text)) return !0;
                    }
                    return !1;

                  case "array":
                    for (var i = 0; i < obj.length; i++) if (search(obj[i], text)) return !0;
                    return !1;

                  default:
                    return !1;
                }
            };
            switch (typeof expression) {
              case "boolean":
              case "number":
              case "string":
                expression = {
                    $: expression
                };

              case "object":
                for (var key in expression) !function(path) {
                    "undefined" != typeof expression[path] && predicates.push(function(value) {
                        return search("$" == path ? value : value && value[path], expression[path]);
                    });
                }(key);
                break;

              case "function":
                predicates.push(expression);
                break;

              default:
                return array;
            }
            for (var filtered = [], j = 0; j < array.length; j++) {
                var value = array[j];
                predicates.check(value) && filtered.push(value);
            }
            return filtered;
        };
    }
    function currencyFilter($locale) {
        var formats = $locale.NUMBER_FORMATS;
        return function(amount, currencySymbol) {
            return isUndefined(currencySymbol) && (currencySymbol = formats.CURRENCY_SYM), formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, 2).replace(/\u00A4/g, currencySymbol);
        };
    }
    function numberFilter($locale) {
        var formats = $locale.NUMBER_FORMATS;
        return function(number, fractionSize) {
            return formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize);
        };
    }
    function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
        if (null == number || !isFinite(number) || isObject(number)) return "";
        var isNegative = 0 > number;
        number = Math.abs(number);
        var numStr = number + "", formatedText = "", parts = [], hasExponent = !1;
        if (-1 !== numStr.indexOf("e")) {
            var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
            match && "-" == match[2] && match[3] > fractionSize + 1 ? numStr = "0" : (formatedText = numStr, 
            hasExponent = !0);
        }
        if (hasExponent) fractionSize > 0 && number > -1 && 1 > number && (formatedText = number.toFixed(fractionSize)); else {
            var fractionLen = (numStr.split(DECIMAL_SEP)[1] || "").length;
            isUndefined(fractionSize) && (fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac));
            var pow = Math.pow(10, fractionSize);
            number = Math.round(number * pow) / pow;
            var fraction = ("" + number).split(DECIMAL_SEP), whole = fraction[0];
            fraction = fraction[1] || "";
            var i, pos = 0, lgroup = pattern.lgSize, group = pattern.gSize;
            if (whole.length >= lgroup + group) for (pos = whole.length - lgroup, i = 0; pos > i; i++) (pos - i) % group === 0 && 0 !== i && (formatedText += groupSep), 
            formatedText += whole.charAt(i);
            for (i = pos; i < whole.length; i++) (whole.length - i) % lgroup === 0 && 0 !== i && (formatedText += groupSep), 
            formatedText += whole.charAt(i);
            for (;fraction.length < fractionSize; ) fraction += "0";
            fractionSize && "0" !== fractionSize && (formatedText += decimalSep + fraction.substr(0, fractionSize));
        }
        return parts.push(isNegative ? pattern.negPre : pattern.posPre), parts.push(formatedText), 
        parts.push(isNegative ? pattern.negSuf : pattern.posSuf), parts.join("");
    }
    function padNumber(num, digits, trim) {
        var neg = "";
        for (0 > num && (neg = "-", num = -num), num = "" + num; num.length < digits; ) num = "0" + num;
        return trim && (num = num.substr(num.length - digits)), neg + num;
    }
    function dateGetter(name, size, offset, trim) {
        return offset = offset || 0, function(date) {
            var value = date["get" + name]();
            return (offset > 0 || value > -offset) && (value += offset), 0 === value && -12 == offset && (value = 12), 
            padNumber(value, size, trim);
        };
    }
    function dateStrGetter(name, shortForm) {
        return function(date, formats) {
            var value = date["get" + name](), get = uppercase(shortForm ? "SHORT" + name : name);
            return formats[get][value];
        };
    }
    function timeZoneGetter(date) {
        var zone = -1 * date.getTimezoneOffset(), paddedZone = zone >= 0 ? "+" : "";
        return paddedZone += padNumber(Math[zone > 0 ? "floor" : "ceil"](zone / 60), 2) + padNumber(Math.abs(zone % 60), 2);
    }
    function getFirstThursdayOfYear(year) {
        var dayOfWeekOnFirst = new Date(year, 0, 1).getDay();
        return new Date(year, 0, (4 >= dayOfWeekOnFirst ? 5 : 12) - dayOfWeekOnFirst);
    }
    function getThursdayThisWeek(datetime) {
        return new Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (4 - datetime.getDay()));
    }
    function weekGetter(size) {
        return function(date) {
            var firstThurs = getFirstThursdayOfYear(date.getFullYear()), thisThurs = getThursdayThisWeek(date), diff = +thisThurs - +firstThurs, result = 1 + Math.round(diff / 6048e5);
            return padNumber(result, size);
        };
    }
    function ampmGetter(date, formats) {
        return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
    }
    function dateFilter($locale) {
        function jsonStringToDate(string) {
            var match;
            if (match = string.match(R_ISO8601_STR)) {
                var date = new Date(0), tzHour = 0, tzMin = 0, dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear, timeSetter = match[8] ? date.setUTCHours : date.setHours;
                match[9] && (tzHour = int(match[9] + match[10]), tzMin = int(match[9] + match[11])), 
                dateSetter.call(date, int(match[1]), int(match[2]) - 1, int(match[3]));
                var h = int(match[4] || 0) - tzHour, m = int(match[5] || 0) - tzMin, s = int(match[6] || 0), ms = Math.round(1e3 * parseFloat("0." + (match[7] || 0)));
                return timeSetter.call(date, h, m, s, ms), date;
            }
            return string;
        }
        var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
        return function(date, format) {
            var fn, match, text = "", parts = [];
            if (format = format || "mediumDate", format = $locale.DATETIME_FORMATS[format] || format, 
            isString(date) && (date = NUMBER_STRING.test(date) ? int(date) : jsonStringToDate(date)), 
            isNumber(date) && (date = new Date(date)), !isDate(date)) return date;
            for (;format; ) match = DATE_FORMATS_SPLIT.exec(format), match ? (parts = concat(parts, match, 1), 
            format = parts.pop()) : (parts.push(format), format = null);
            return forEach(parts, function(value) {
                fn = DATE_FORMATS[value], text += fn ? fn(date, $locale.DATETIME_FORMATS) : value.replace(/(^'|'$)/g, "").replace(/''/g, "'");
            }), text;
        };
    }
    function jsonFilter() {
        return function(object) {
            return toJson(object, !0);
        };
    }
    function limitToFilter() {
        return function(input, limit) {
            if (!isArray(input) && !isString(input)) return input;
            if (limit = int(limit), isString(input)) return limit ? limit >= 0 ? input.slice(0, limit) : input.slice(limit, input.length) : "";
            var i, n, out = [];
            for (limit > input.length ? limit = input.length : limit < -input.length && (limit = -input.length), 
            limit > 0 ? (i = 0, n = limit) : (i = input.length + limit, n = input.length); n > i; i++) out.push(input[i]);
            return out;
        };
    }
    function orderByFilter($parse) {
        return function(array, sortPredicate, reverseOrder) {
            function comparator(o1, o2) {
                for (var i = 0; i < sortPredicate.length; i++) {
                    var comp = sortPredicate[i](o1, o2);
                    if (0 !== comp) return comp;
                }
                return 0;
            }
            function reverseComparator(comp, descending) {
                return toBoolean(descending) ? function(a, b) {
                    return comp(b, a);
                } : comp;
            }
            function compare(v1, v2) {
                var t1 = typeof v1, t2 = typeof v2;
                return t1 == t2 ? ("string" == t1 && (v1 = v1.toLowerCase(), v2 = v2.toLowerCase()), 
                v1 === v2 ? 0 : v2 > v1 ? -1 : 1) : t2 > t1 ? -1 : 1;
            }
            if (!isArray(array)) return array;
            if (!sortPredicate) return array;
            sortPredicate = isArray(sortPredicate) ? sortPredicate : [ sortPredicate ], sortPredicate = map(sortPredicate, function(predicate) {
                var descending = !1, get = predicate || identity;
                if (isString(predicate) && (("+" == predicate.charAt(0) || "-" == predicate.charAt(0)) && (descending = "-" == predicate.charAt(0), 
                predicate = predicate.substring(1)), get = $parse(predicate), get.constant)) {
                    var key = get();
                    return reverseComparator(function(a, b) {
                        return compare(a[key], b[key]);
                    }, descending);
                }
                return reverseComparator(function(a, b) {
                    return compare(get(a), get(b));
                }, descending);
            });
            for (var arrayCopy = [], i = 0; i < array.length; i++) arrayCopy.push(array[i]);
            return arrayCopy.sort(reverseComparator(comparator, reverseOrder));
        };
    }
    function ngDirective(directive) {
        return isFunction(directive) && (directive = {
            link: directive
        }), directive.restrict = directive.restrict || "AC", valueFn(directive);
    }
    function FormController(element, attrs, $scope, $animate) {
        function toggleValidCss(isValid, validationErrorKey) {
            validationErrorKey = validationErrorKey ? "-" + snake_case(validationErrorKey, "-") : "", 
            $animate.removeClass(element, (isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey), 
            $animate.addClass(element, (isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);
        }
        var form = this, parentForm = element.parent().controller("form") || nullFormCtrl, invalidCount = 0, errors = form.$error = {}, controls = [];
        form.$name = attrs.name || attrs.ngForm, form.$dirty = !1, form.$pristine = !0, 
        form.$valid = !0, form.$invalid = !1, parentForm.$addControl(form), element.addClass(PRISTINE_CLASS), 
        toggleValidCss(!0), form.$addControl = function(control) {
            assertNotHasOwnProperty(control.$name, "input"), controls.push(control), control.$name && (form[control.$name] = control);
        }, form.$removeControl = function(control) {
            control.$name && form[control.$name] === control && delete form[control.$name], 
            forEach(errors, function(queue, validationToken) {
                form.$setValidity(validationToken, !0, control);
            }), arrayRemove(controls, control);
        }, form.$setValidity = function(validationToken, isValid, control) {
            var queue = errors[validationToken];
            if (isValid) queue && (arrayRemove(queue, control), queue.length || (invalidCount--, 
            invalidCount || (toggleValidCss(isValid), form.$valid = !0, form.$invalid = !1), 
            errors[validationToken] = !1, toggleValidCss(!0, validationToken), parentForm.$setValidity(validationToken, !0, form))); else {
                if (invalidCount || toggleValidCss(isValid), queue) {
                    if (includes(queue, control)) return;
                } else errors[validationToken] = queue = [], invalidCount++, toggleValidCss(!1, validationToken), 
                parentForm.$setValidity(validationToken, !1, form);
                queue.push(control), form.$valid = !1, form.$invalid = !0;
            }
        }, form.$setDirty = function() {
            $animate.removeClass(element, PRISTINE_CLASS), $animate.addClass(element, DIRTY_CLASS), 
            form.$dirty = !0, form.$pristine = !1, parentForm.$setDirty();
        }, form.$setPristine = function() {
            $animate.removeClass(element, DIRTY_CLASS), $animate.addClass(element, PRISTINE_CLASS), 
            form.$dirty = !1, form.$pristine = !0, forEach(controls, function(control) {
                control.$setPristine();
            });
        };
    }
    function validate(ctrl, validatorName, validity, value) {
        return ctrl.$setValidity(validatorName, validity), validity ? value : undefined;
    }
    function addNativeHtml5Validators(ctrl, validatorName, element) {
        var validity = element.prop("validity");
        if (isObject(validity)) {
            var validator = function(value) {
                return ctrl.$error[validatorName] || !(validity.badInput || validity.customError || validity.typeMismatch) || validity.valueMissing ? value : void ctrl.$setValidity(validatorName, !1);
            };
            ctrl.$parsers.push(validator);
        }
    }
    function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        var validity = element.prop("validity");
        if (!$sniffer.android) {
            var composing = !1;
            element.on("compositionstart", function() {
                composing = !0;
            }), element.on("compositionend", function() {
                composing = !1, listener();
            });
        }
        var listener = function(ev) {
            if (!composing) {
                var value = element.val(), event = ev && ev.type;
                toBoolean(attr.ngTrim || "T") && (value = trim(value)), (ctrl.$viewValue !== value || validity && "" === value && !validity.valueMissing) && (scope.$$phase ? ctrl.$setViewValue(value, event) : scope.$apply(function() {
                    ctrl.$setViewValue(value, event);
                }));
            }
        };
        if (ctrl.$options && ctrl.$options.updateOn && element.on(ctrl.$options.updateOn, listener), 
        !ctrl.$options || ctrl.$options.updateOnDefault) {
            if ($sniffer.hasEvent("input")) element.on("input", listener); else {
                var timeout, deferListener = function(ev) {
                    timeout || (timeout = $browser.defer(function() {
                        listener(ev), timeout = null;
                    }));
                };
                element.on("keydown", function(event) {
                    var key = event.keyCode;
                    91 === key || key > 15 && 19 > key || key >= 37 && 40 >= key || deferListener(event);
                }), $sniffer.hasEvent("paste") && element.on("paste cut", deferListener);
            }
            element.on("change", listener);
        }
        ctrl.$render = function() {
            element.val(ctrl.$isEmpty(ctrl.$viewValue) ? "" : ctrl.$viewValue);
        };
        var patternValidator, match, pattern = attr.ngPattern;
        if (pattern) {
            var validateRegex = function(regexp, value) {
                return validate(ctrl, "pattern", ctrl.$isEmpty(value) || regexp.test(value), value);
            };
            match = pattern.match(/^\/(.*)\/([gim]*)$/), match ? (pattern = new RegExp(match[1], match[2]), 
            patternValidator = function(value) {
                return validateRegex(pattern, value);
            }) : patternValidator = function(value) {
                var patternObj = scope.$eval(pattern);
                if (!patternObj || !patternObj.test) throw minErr("ngPattern")("noregexp", "Expected {0} to be a RegExp but was {1}. Element: {2}", pattern, patternObj, startingTag(element));
                return validateRegex(patternObj, value);
            }, ctrl.$formatters.push(patternValidator), ctrl.$parsers.push(patternValidator);
        }
        if (attr.ngMinlength) {
            var minlength = int(attr.ngMinlength), minLengthValidator = function(value) {
                return validate(ctrl, "minlength", ctrl.$isEmpty(value) || value.length >= minlength, value);
            };
            ctrl.$parsers.push(minLengthValidator), ctrl.$formatters.push(minLengthValidator);
        }
        if (attr.ngMaxlength) {
            var maxlength = int(attr.ngMaxlength), maxLengthValidator = function(value) {
                return validate(ctrl, "maxlength", ctrl.$isEmpty(value) || value.length <= maxlength, value);
            };
            ctrl.$parsers.push(maxLengthValidator), ctrl.$formatters.push(maxLengthValidator);
        }
    }
    function weekParser(isoWeek) {
        if (isDate(isoWeek)) return isoWeek;
        if (isString(isoWeek)) {
            WEEK_REGEXP.lastIndex = 0;
            var parts = WEEK_REGEXP.exec(isoWeek);
            if (parts) {
                var year = +parts[1], week = +parts[2], firstThurs = getFirstThursdayOfYear(year), addDays = 7 * (week - 1);
                return new Date(year, 0, firstThurs.getDate() + addDays);
            }
        }
        return 0/0;
    }
    function createDateParser(regexp, mapping) {
        return function(iso) {
            var parts, map;
            return isDate(iso) ? iso : isString(iso) && (regexp.lastIndex = 0, parts = regexp.exec(iso)) ? (parts.shift(), 
            map = {
                yyyy: 0,
                MM: 1,
                dd: 1,
                HH: 0,
                mm: 0
            }, forEach(parts, function(part, index) {
                index < mapping.length && (map[mapping[index]] = +part);
            }), new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm)) : 0/0;
        };
    }
    function createDateInputType(type, regexp, parseDate, format) {
        return function(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
            if (textInputType(scope, element, attr, ctrl, $sniffer, $browser), ctrl.$parsers.push(function(value) {
                return ctrl.$isEmpty(value) ? (ctrl.$setValidity(type, !0), null) : regexp.test(value) ? (ctrl.$setValidity(type, !0), 
                parseDate(value)) : (ctrl.$setValidity(type, !1), undefined);
            }), ctrl.$formatters.push(function(value) {
                return isDate(value) ? $filter("date")(value, format) : "";
            }), attr.min) {
                var minValidator = function(value) {
                    var valid = ctrl.$isEmpty(value) || parseDate(value) >= parseDate(attr.min);
                    return ctrl.$setValidity("min", valid), valid ? value : undefined;
                };
                ctrl.$parsers.push(minValidator), ctrl.$formatters.push(minValidator);
            }
            if (attr.max) {
                var maxValidator = function(value) {
                    var valid = ctrl.$isEmpty(value) || parseDate(value) <= parseDate(attr.max);
                    return ctrl.$setValidity("max", valid), valid ? value : undefined;
                };
                ctrl.$parsers.push(maxValidator), ctrl.$formatters.push(maxValidator);
            }
        };
    }
    function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        if (textInputType(scope, element, attr, ctrl, $sniffer, $browser), ctrl.$parsers.push(function(value) {
            var empty = ctrl.$isEmpty(value);
            return empty || NUMBER_REGEXP.test(value) ? (ctrl.$setValidity("number", !0), "" === value ? null : empty ? value : parseFloat(value)) : (ctrl.$setValidity("number", !1), 
            undefined);
        }), addNativeHtml5Validators(ctrl, "number", element), ctrl.$formatters.push(function(value) {
            return ctrl.$isEmpty(value) ? "" : "" + value;
        }), attr.min) {
            var minValidator = function(value) {
                var min = parseFloat(attr.min);
                return validate(ctrl, "min", ctrl.$isEmpty(value) || value >= min, value);
            };
            ctrl.$parsers.push(minValidator), ctrl.$formatters.push(minValidator);
        }
        if (attr.max) {
            var maxValidator = function(value) {
                var max = parseFloat(attr.max);
                return validate(ctrl, "max", ctrl.$isEmpty(value) || max >= value, value);
            };
            ctrl.$parsers.push(maxValidator), ctrl.$formatters.push(maxValidator);
        }
        ctrl.$formatters.push(function(value) {
            return validate(ctrl, "number", ctrl.$isEmpty(value) || isNumber(value), value);
        });
    }
    function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        textInputType(scope, element, attr, ctrl, $sniffer, $browser);
        var urlValidator = function(value) {
            return validate(ctrl, "url", ctrl.$isEmpty(value) || URL_REGEXP.test(value), value);
        };
        ctrl.$formatters.push(urlValidator), ctrl.$parsers.push(urlValidator);
    }
    function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        textInputType(scope, element, attr, ctrl, $sniffer, $browser);
        var emailValidator = function(value) {
            return validate(ctrl, "email", ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value), value);
        };
        ctrl.$formatters.push(emailValidator), ctrl.$parsers.push(emailValidator);
    }
    function radioInputType(scope, element, attr, ctrl) {
        isUndefined(attr.name) && element.attr("name", nextUid());
        var listener = function(ev) {
            element[0].checked && scope.$apply(function() {
                ctrl.$setViewValue(attr.value, ev && ev.type);
            });
        };
        ctrl.$options && ctrl.$options.updateOn && element.on(ctrl.$options.updateOn, listener), 
        (!ctrl.$options || ctrl.$options.updateOnDefault) && element.on("click", listener), 
        ctrl.$render = function() {
            var value = attr.value;
            element[0].checked = value == ctrl.$viewValue;
        }, attr.$observe("value", ctrl.$render);
    }
    function checkboxInputType(scope, element, attr, ctrl) {
        var trueValue = attr.ngTrueValue, falseValue = attr.ngFalseValue;
        isString(trueValue) || (trueValue = !0), isString(falseValue) || (falseValue = !1);
        var listener = function(ev) {
            scope.$apply(function() {
                ctrl.$setViewValue(element[0].checked, ev && ev.type);
            });
        };
        ctrl.$options && ctrl.$options.updateOn && element.on(ctrl.$options.updateOn, listener), 
        (!ctrl.$options || ctrl.$options.updateOnDefault) && element.on("click", listener), 
        ctrl.$render = function() {
            element[0].checked = ctrl.$viewValue;
        }, ctrl.$isEmpty = function(value) {
            return value !== trueValue;
        }, ctrl.$formatters.push(function(value) {
            return value === trueValue;
        }), ctrl.$parsers.push(function(value) {
            return value ? trueValue : falseValue;
        });
    }
    function classDirective(name, selector) {
        return name = "ngClass" + name, [ "$animate", function($animate) {
            function arrayDifference(tokens1, tokens2) {
                var values = [];
                outer: for (var i = 0; i < tokens1.length; i++) {
                    for (var token = tokens1[i], j = 0; j < tokens2.length; j++) if (token == tokens2[j]) continue outer;
                    values.push(token);
                }
                return values;
            }
            function arrayClasses(classVal) {
                if (isArray(classVal)) return classVal;
                if (isString(classVal)) return classVal.split(" ");
                if (isObject(classVal)) {
                    var classes = [];
                    return forEach(classVal, function(v, k) {
                        v && classes.push(k);
                    }), classes;
                }
                return classVal;
            }
            return {
                restrict: "AC",
                link: function(scope, element, attr) {
                    function addClasses(classes) {
                        var newClasses = digestClassCounts(classes, 1);
                        attr.$addClass(newClasses);
                    }
                    function removeClasses(classes) {
                        var newClasses = digestClassCounts(classes, -1);
                        attr.$removeClass(newClasses);
                    }
                    function digestClassCounts(classes, count) {
                        var classCounts = element.data("$classCounts") || {}, classesToUpdate = [];
                        return forEach(classes, function(className) {
                            (count > 0 || classCounts[className]) && (classCounts[className] = (classCounts[className] || 0) + count, 
                            classCounts[className] === +(count > 0) && classesToUpdate.push(className));
                        }), element.data("$classCounts", classCounts), classesToUpdate.join(" ");
                    }
                    function updateClasses(oldClasses, newClasses) {
                        var toAdd = arrayDifference(newClasses, oldClasses), toRemove = arrayDifference(oldClasses, newClasses);
                        toRemove = digestClassCounts(toRemove, -1), toAdd = digestClassCounts(toAdd, 1), 
                        0 === toAdd.length ? $animate.removeClass(element, toRemove) : 0 === toRemove.length ? $animate.addClass(element, toAdd) : $animate.setClass(element, toAdd, toRemove);
                    }
                    function ngClassWatchAction(newVal) {
                        if (selector === !0 || scope.$index % 2 === selector) {
                            var newClasses = arrayClasses(newVal || []);
                            if (oldVal) {
                                if (!equals(newVal, oldVal)) {
                                    var oldClasses = arrayClasses(oldVal);
                                    updateClasses(oldClasses, newClasses);
                                }
                            } else addClasses(newClasses);
                        }
                        oldVal = copy(newVal);
                    }
                    var oldVal;
                    scope.$watch(attr[name], ngClassWatchAction, !0), attr.$observe("class", function() {
                        ngClassWatchAction(scope.$eval(attr[name]));
                    }), "ngClass" !== name && scope.$watch("$index", function($index, old$index) {
                        var mod = 1 & $index;
                        if (mod !== old$index & 1) {
                            var classes = arrayClasses(scope.$eval(attr[name]));
                            mod === selector ? addClasses(classes) : removeClasses(classes);
                        }
                    });
                }
            };
        } ];
    }
    var lowercase = function(string) {
        return isString(string) ? string.toLowerCase() : string;
    }, hasOwnProperty = Object.prototype.hasOwnProperty, uppercase = function(string) {
        return isString(string) ? string.toUpperCase() : string;
    }, manualLowercase = function(s) {
        return isString(s) ? s.replace(/[A-Z]/g, function(ch) {
            return String.fromCharCode(32 | ch.charCodeAt(0));
        }) : s;
    }, manualUppercase = function(s) {
        return isString(s) ? s.replace(/[a-z]/g, function(ch) {
            return String.fromCharCode(-33 & ch.charCodeAt(0));
        }) : s;
    };
    "i" !== "I".toLowerCase() && (lowercase = manualLowercase, uppercase = manualUppercase);
    var msie, jqLite, jQuery, angularModule, nodeName_, slice = [].slice, push = [].push, toString = Object.prototype.toString, ngMinErr = minErr("ng"), angular = (window.angular, 
    window.angular || (window.angular = {})), uid = [ "0", "0", "0" ];
    msie = int((/msie (\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]), isNaN(msie) && (msie = int((/trident\/.*; rv:(\d+)/.exec(lowercase(navigator.userAgent)) || [])[1])), 
    noop.$inject = [], identity.$inject = [];
    var trim = function() {
        return String.prototype.trim ? function(value) {
            return isString(value) ? value.trim() : value;
        } : function(value) {
            return isString(value) ? value.replace(/^\s\s*/, "").replace(/\s\s*$/, "") : value;
        };
    }();
    nodeName_ = 9 > msie ? function(element) {
        return element = element.nodeName ? element : element[0], element.scopeName && "HTML" != element.scopeName ? uppercase(element.scopeName + ":" + element.nodeName) : element.nodeName;
    } : function(element) {
        return element.nodeName ? element.nodeName : element[0].nodeName;
    };
    var ngAttrPrefixes = [ "ng-", "data-ng-", "ng:", "x-ng-" ], SNAKE_CASE_REGEXP = /[A-Z]/g, version = {
        full: "1.3.0-local+sha.dba0162",
        major: 1,
        minor: 3,
        dot: 0,
        codeName: "snapshot"
    }, jqCache = JQLite.cache = {}, jqName = JQLite.expando = "ng-" + new Date().getTime(), jqId = 1, addEventListenerFn = window.document.addEventListener ? function(element, type, fn) {
        element.addEventListener(type, fn, !1);
    } : function(element, type, fn) {
        element.attachEvent("on" + type, fn);
    }, removeEventListenerFn = window.document.removeEventListener ? function(element, type, fn) {
        element.removeEventListener(type, fn, !1);
    } : function(element, type, fn) {
        element.detachEvent("on" + type, fn);
    }, SPECIAL_CHARS_REGEXP = (JQLite._data = function(node) {
        return this.cache[node[this.expando]] || {};
    }, /([\:\-\_]+(.))/g), MOZ_HACK_REGEXP = /^moz([A-Z])/, jqLiteMinErr = minErr("jqLite"), SINGLE_TAG_REGEXP = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, HTML_REGEXP = /<|&#?\w+;/, TAG_NAME_REGEXP = /<([\w:]+)/, XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, wrapMap = {
        option: [ 1, '<select multiple="multiple">', "</select>" ],
        thead: [ 1, "<table>", "</table>" ],
        col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: [ 0, "", "" ]
    };
    wrapMap.optgroup = wrapMap.option, wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead, 
    wrapMap.th = wrapMap.td;
    var JQLitePrototype = JQLite.prototype = {
        ready: function(fn) {
            function trigger() {
                fired || (fired = !0, fn());
            }
            var fired = !1;
            "complete" === document.readyState ? setTimeout(trigger) : (this.on("DOMContentLoaded", trigger), 
            JQLite(window).on("load", trigger));
        },
        toString: function() {
            var value = [];
            return forEach(this, function(e) {
                value.push("" + e);
            }), "[" + value.join(", ") + "]";
        },
        eq: function(index) {
            return jqLite(index >= 0 ? this[index] : this[this.length + index]);
        },
        length: 0,
        push: push,
        sort: [].sort,
        splice: [].splice
    }, BOOLEAN_ATTR = {};
    forEach("multiple,selected,checked,disabled,readOnly,required,open".split(","), function(value) {
        BOOLEAN_ATTR[lowercase(value)] = value;
    });
    var BOOLEAN_ELEMENTS = {};
    forEach("input,select,option,textarea,button,form,details".split(","), function(value) {
        BOOLEAN_ELEMENTS[uppercase(value)] = !0;
    }), forEach({
        data: jqLiteData,
        inheritedData: jqLiteInheritedData,
        scope: function(element) {
            return jqLite(element).data("$scope") || jqLiteInheritedData(element.parentNode || element, [ "$isolateScope", "$scope" ]);
        },
        isolateScope: function(element) {
            return jqLite(element).data("$isolateScope") || jqLite(element).data("$isolateScopeNoTemplate");
        },
        controller: jqLiteController,
        injector: function(element) {
            return jqLiteInheritedData(element, "$injector");
        },
        removeAttr: function(element, name) {
            element.removeAttribute(name);
        },
        hasClass: jqLiteHasClass,
        css: function(element, name, value) {
            if (name = camelCase(name), !isDefined(value)) {
                var val;
                return 8 >= msie && (val = element.currentStyle && element.currentStyle[name], "" === val && (val = "auto")), 
                val = val || element.style[name], 8 >= msie && (val = "" === val ? undefined : val), 
                val;
            }
            element.style[name] = value;
        },
        attr: function(element, name, value) {
            var lowercasedName = lowercase(name);
            if (BOOLEAN_ATTR[lowercasedName]) {
                if (!isDefined(value)) return element[name] || (element.attributes.getNamedItem(name) || noop).specified ? lowercasedName : undefined;
                value ? (element[name] = !0, element.setAttribute(name, lowercasedName)) : (element[name] = !1, 
                element.removeAttribute(lowercasedName));
            } else if (isDefined(value)) element.setAttribute(name, value); else if (element.getAttribute) {
                var ret = element.getAttribute(name, 2);
                return null === ret ? undefined : ret;
            }
        },
        prop: function(element, name, value) {
            return isDefined(value) ? void (element[name] = value) : element[name];
        },
        text: function() {
            function getText(element, value) {
                var textProp = NODE_TYPE_TEXT_PROPERTY[element.nodeType];
                return isUndefined(value) ? textProp ? element[textProp] : "" : void (element[textProp] = value);
            }
            var NODE_TYPE_TEXT_PROPERTY = [];
            return 9 > msie ? (NODE_TYPE_TEXT_PROPERTY[1] = "innerText", NODE_TYPE_TEXT_PROPERTY[3] = "nodeValue") : NODE_TYPE_TEXT_PROPERTY[1] = NODE_TYPE_TEXT_PROPERTY[3] = "textContent", 
            getText.$dv = "", getText;
        }(),
        val: function(element, value) {
            if (isUndefined(value)) {
                if ("SELECT" === nodeName_(element) && element.multiple) {
                    var result = [];
                    return forEach(element.options, function(option) {
                        option.selected && result.push(option.value || option.text);
                    }), 0 === result.length ? null : result;
                }
                return element.value;
            }
            element.value = value;
        },
        html: function(element, value) {
            if (isUndefined(value)) return element.innerHTML;
            for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) jqLiteDealoc(childNodes[i]);
            element.innerHTML = value;
        },
        empty: jqLiteEmpty
    }, function(fn, name) {
        JQLite.prototype[name] = function(arg1, arg2) {
            var i, key;
            if (fn !== jqLiteEmpty && (2 == fn.length && fn !== jqLiteHasClass && fn !== jqLiteController ? arg1 : arg2) === undefined) {
                if (isObject(arg1)) {
                    for (i = 0; i < this.length; i++) if (fn === jqLiteData) fn(this[i], arg1); else for (key in arg1) fn(this[i], key, arg1[key]);
                    return this;
                }
                for (var value = fn.$dv, jj = value === undefined ? Math.min(this.length, 1) : this.length, j = 0; jj > j; j++) {
                    var nodeValue = fn(this[j], arg1, arg2);
                    value = value ? value + nodeValue : nodeValue;
                }
                return value;
            }
            for (i = 0; i < this.length; i++) fn(this[i], arg1, arg2);
            return this;
        };
    }), forEach({
        removeData: jqLiteRemoveData,
        dealoc: jqLiteDealoc,
        on: function onFn(element, type, fn, unsupported) {
            if (isDefined(unsupported)) throw jqLiteMinErr("onargs", "jqLite#on() does not support the `selector` or `eventData` parameters");
            var events = jqLiteExpandoStore(element, "events"), handle = jqLiteExpandoStore(element, "handle");
            events || jqLiteExpandoStore(element, "events", events = {}), handle || jqLiteExpandoStore(element, "handle", handle = createEventHandler(element, events)), 
            forEach(type.split(" "), function(type) {
                var eventFns = events[type];
                if (!eventFns) {
                    if ("mouseenter" == type || "mouseleave" == type) {
                        var contains = document.body.contains || document.body.compareDocumentPosition ? function(a, b) {
                            var adown = 9 === a.nodeType ? a.documentElement : a, bup = b && b.parentNode;
                            return a === bup || !(!bup || 1 !== bup.nodeType || !(adown.contains ? adown.contains(bup) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(bup)));
                        } : function(a, b) {
                            if (b) for (;b = b.parentNode; ) if (b === a) return !0;
                            return !1;
                        };
                        events[type] = [];
                        var eventmap = {
                            mouseleave: "mouseout",
                            mouseenter: "mouseover"
                        };
                        onFn(element, eventmap[type], function(event) {
                            var target = this, related = event.relatedTarget;
                            (!related || related !== target && !contains(target, related)) && handle(event, type);
                        });
                    } else addEventListenerFn(element, type, handle), events[type] = [];
                    eventFns = events[type];
                }
                eventFns.push(fn);
            });
        },
        off: jqLiteOff,
        one: function(element, type, fn) {
            element = jqLite(element), element.on(type, function onFn() {
                element.off(type, fn), element.off(type, onFn);
            }), element.on(type, fn);
        },
        replaceWith: function(element, replaceNode) {
            var index, parent = element.parentNode;
            jqLiteDealoc(element), forEach(new JQLite(replaceNode), function(node) {
                index ? parent.insertBefore(node, index.nextSibling) : parent.replaceChild(node, element), 
                index = node;
            });
        },
        children: function(element) {
            var children = [];
            return forEach(element.childNodes, function(element) {
                1 === element.nodeType && children.push(element);
            }), children;
        },
        contents: function(element) {
            return element.contentDocument || element.childNodes || [];
        },
        append: function(element, node) {
            forEach(new JQLite(node), function(child) {
                (1 === element.nodeType || 11 === element.nodeType) && element.appendChild(child);
            });
        },
        prepend: function(element, node) {
            if (1 === element.nodeType) {
                var index = element.firstChild;
                forEach(new JQLite(node), function(child) {
                    element.insertBefore(child, index);
                });
            }
        },
        wrap: function(element, wrapNode) {
            wrapNode = jqLite(wrapNode)[0];
            var parent = element.parentNode;
            parent && parent.replaceChild(wrapNode, element), wrapNode.appendChild(element);
        },
        remove: function(element) {
            jqLiteDealoc(element);
            var parent = element.parentNode;
            parent && parent.removeChild(element);
        },
        after: function(element, newElement) {
            var index = element, parent = element.parentNode;
            forEach(new JQLite(newElement), function(node) {
                parent.insertBefore(node, index.nextSibling), index = node;
            });
        },
        addClass: jqLiteAddClass,
        removeClass: jqLiteRemoveClass,
        toggleClass: function(element, selector, condition) {
            selector && forEach(selector.split(" "), function(className) {
                var classCondition = condition;
                isUndefined(classCondition) && (classCondition = !jqLiteHasClass(element, className)), 
                (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
            });
        },
        parent: function(element) {
            var parent = element.parentNode;
            return parent && 11 !== parent.nodeType ? parent : null;
        },
        next: function(element) {
            if (element.nextElementSibling) return element.nextElementSibling;
            for (var elm = element.nextSibling; null != elm && 1 !== elm.nodeType; ) elm = elm.nextSibling;
            return elm;
        },
        find: function(element, selector) {
            return element.getElementsByTagName ? element.getElementsByTagName(selector) : [];
        },
        clone: jqLiteClone,
        triggerHandler: function(element, eventName, eventData) {
            var eventFns = (jqLiteExpandoStore(element, "events") || {})[eventName];
            eventData = eventData || [];
            var event = [ {
                preventDefault: noop,
                stopPropagation: noop
            } ];
            forEach(eventFns, function(fn) {
                fn.apply(element, event.concat(eventData));
            });
        }
    }, function(fn, name) {
        JQLite.prototype[name] = function(arg1, arg2, arg3) {
            for (var value, i = 0; i < this.length; i++) isUndefined(value) ? (value = fn(this[i], arg1, arg2, arg3), 
            isDefined(value) && (value = jqLite(value))) : jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
            return isDefined(value) ? value : this;
        }, JQLite.prototype.bind = JQLite.prototype.on, JQLite.prototype.unbind = JQLite.prototype.off;
    }), HashMap.prototype = {
        put: function(key, value) {
            this[hashKey(key)] = value;
        },
        get: function(key) {
            return this[hashKey(key)];
        },
        remove: function(key) {
            var value = this[key = hashKey(key)];
            return delete this[key], value;
        }
    };
    var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m, FN_ARG_SPLIT = /,/, FN_ARG = /^\s*(_?)(\S+?)\1\s*$/, STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm, $injectorMinErr = minErr("$injector");
    createInjector.$$annotate = annotate;
    var $animateMinErr = minErr("$animate"), $AnimateProvider = [ "$provide", function($provide) {
        this.$$selectors = {}, this.register = function(name, factory) {
            var key = name + "-animation";
            if (name && "." != name.charAt(0)) throw $animateMinErr("notcsel", "Expecting class selector starting with '.' got '{0}'.", name);
            this.$$selectors[name.substr(1)] = key, $provide.factory(key, factory);
        }, this.classNameFilter = function(expression) {
            return 1 === arguments.length && (this.$$classNameFilter = expression instanceof RegExp ? expression : null), 
            this.$$classNameFilter;
        }, this.$get = [ "$timeout", "$$asyncCallback", function($timeout, $$asyncCallback) {
            function async(fn) {
                fn && $$asyncCallback(fn);
            }
            return {
                enter: function(element, parent, after, done) {
                    after ? after.after(element) : parent.prepend(element), async(done);
                },
                leave: function(element, done) {
                    element.remove(), async(done);
                },
                move: function(element, parent, after, done) {
                    this.enter(element, parent, after, done);
                },
                addClass: function(element, className, done) {
                    className = isString(className) ? className : isArray(className) ? className.join(" ") : "", 
                    forEach(element, function(element) {
                        jqLiteAddClass(element, className);
                    }), async(done);
                },
                removeClass: function(element, className, done) {
                    className = isString(className) ? className : isArray(className) ? className.join(" ") : "", 
                    forEach(element, function(element) {
                        jqLiteRemoveClass(element, className);
                    }), async(done);
                },
                setClass: function(element, add, remove, done) {
                    forEach(element, function(element) {
                        jqLiteAddClass(element, add), jqLiteRemoveClass(element, remove);
                    }), async(done);
                },
                enabled: noop
            };
        } ];
    } ], $compileMinErr = minErr("$compile");
    $CompileProvider.$inject = [ "$provide", "$$sanitizeUriProvider" ];
    var PREFIX_REGEXP = /^(x[\:\-_]|data[\:\-_])/i, $interpolateMinErr = minErr("$interpolate"), PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/, DEFAULT_PORTS = {
        http: 80,
        https: 443,
        ftp: 21
    }, $locationMinErr = minErr("$location");
    LocationHashbangInHtml5Url.prototype = LocationHashbangUrl.prototype = LocationHtml5Url.prototype = {
        $$html5: !1,
        $$replace: !1,
        absUrl: locationGetter("$$absUrl"),
        url: function(url, replace) {
            if (isUndefined(url)) return this.$$url;
            var match = PATH_MATCH.exec(url);
            return match[1] && this.path(decodeURIComponent(match[1])), (match[2] || match[1]) && this.search(match[3] || ""), 
            this.hash(match[5] || "", replace), this;
        },
        protocol: locationGetter("$$protocol"),
        host: locationGetter("$$host"),
        port: locationGetter("$$port"),
        path: locationGetterSetter("$$path", function(path) {
            return "/" == path.charAt(0) ? path : "/" + path;
        }),
        search: function(search, paramValue) {
            switch (arguments.length) {
              case 0:
                return this.$$search;

              case 1:
                if (isString(search)) this.$$search = parseKeyValue(search); else {
                    if (!isObject(search)) throw $locationMinErr("isrcharg", "The first argument of the `$location#search()` call must be a string or an object.");
                    this.$$search = search;
                }
                break;

              default:
                isUndefined(paramValue) || null === paramValue ? delete this.$$search[search] : this.$$search[search] = paramValue;
            }
            return this.$$compose(), this;
        },
        hash: locationGetterSetter("$$hash", identity),
        replace: function() {
            return this.$$replace = !0, this;
        }
    };
    var promiseWarning, $parseMinErr = minErr("$parse"), promiseWarningCache = {}, OPERATORS = {
        "null": function() {
            return null;
        },
        "true": function() {
            return !0;
        },
        "false": function() {
            return !1;
        },
        undefined: noop,
        "+": function(self, locals, a, b) {
            return a = a(self, locals), b = b(self, locals), isDefined(a) ? isDefined(b) ? a + b : a : isDefined(b) ? b : undefined;
        },
        "-": function(self, locals, a, b) {
            return a = a(self, locals), b = b(self, locals), (isDefined(a) ? a : 0) - (isDefined(b) ? b : 0);
        },
        "*": function(self, locals, a, b) {
            return a(self, locals) * b(self, locals);
        },
        "/": function(self, locals, a, b) {
            return a(self, locals) / b(self, locals);
        },
        "%": function(self, locals, a, b) {
            return a(self, locals) % b(self, locals);
        },
        "^": function(self, locals, a, b) {
            return a(self, locals) ^ b(self, locals);
        },
        "=": noop,
        "===": function(self, locals, a, b) {
            return a(self, locals) === b(self, locals);
        },
        "!==": function(self, locals, a, b) {
            return a(self, locals) !== b(self, locals);
        },
        "==": function(self, locals, a, b) {
            return a(self, locals) == b(self, locals);
        },
        "!=": function(self, locals, a, b) {
            return a(self, locals) != b(self, locals);
        },
        "<": function(self, locals, a, b) {
            return a(self, locals) < b(self, locals);
        },
        ">": function(self, locals, a, b) {
            return a(self, locals) > b(self, locals);
        },
        "<=": function(self, locals, a, b) {
            return a(self, locals) <= b(self, locals);
        },
        ">=": function(self, locals, a, b) {
            return a(self, locals) >= b(self, locals);
        },
        "&&": function(self, locals, a, b) {
            return a(self, locals) && b(self, locals);
        },
        "||": function(self, locals, a, b) {
            return a(self, locals) || b(self, locals);
        },
        "&": function(self, locals, a, b) {
            return a(self, locals) & b(self, locals);
        },
        "|": function(self, locals, a, b) {
            return b(self, locals)(self, locals, a(self, locals));
        },
        "!": function(self, locals, a) {
            return !a(self, locals);
        }
    }, ESCAPE = {
        n: "\n",
        f: "\f",
        r: "\r",
        t: "	",
        v: "",
        "'": "'",
        '"': '"'
    }, Lexer = function(options) {
        this.options = options;
    };
    Lexer.prototype = {
        constructor: Lexer,
        lex: function(text) {
            this.text = text, this.index = 0, this.ch = undefined, this.lastCh = ":", this.tokens = [];
            for (var token, json = []; this.index < this.text.length; ) {
                if (this.ch = this.text.charAt(this.index), this.is("\"'")) this.readString(this.ch); else if (this.isNumber(this.ch) || this.is(".") && this.isNumber(this.peek())) this.readNumber(); else if (this.isIdent(this.ch)) this.readIdent(), 
                this.was("{,") && "{" === json[0] && (token = this.tokens[this.tokens.length - 1]) && (token.json = -1 === token.text.indexOf(".")); else if (this.is("(){}[].,;:?")) this.tokens.push({
                    index: this.index,
                    text: this.ch,
                    json: this.was(":[,") && this.is("{[") || this.is("}]:,")
                }), this.is("{[") && json.unshift(this.ch), this.is("}]") && json.shift(), this.index++; else {
                    if (this.isWhitespace(this.ch)) {
                        this.index++;
                        continue;
                    }
                    var ch2 = this.ch + this.peek(), ch3 = ch2 + this.peek(2), fn = OPERATORS[this.ch], fn2 = OPERATORS[ch2], fn3 = OPERATORS[ch3];
                    fn3 ? (this.tokens.push({
                        index: this.index,
                        text: ch3,
                        fn: fn3
                    }), this.index += 3) : fn2 ? (this.tokens.push({
                        index: this.index,
                        text: ch2,
                        fn: fn2
                    }), this.index += 2) : fn ? (this.tokens.push({
                        index: this.index,
                        text: this.ch,
                        fn: fn,
                        json: this.was("[,:") && this.is("+-")
                    }), this.index += 1) : this.throwError("Unexpected next character ", this.index, this.index + 1);
                }
                this.lastCh = this.ch;
            }
            return this.tokens;
        },
        is: function(chars) {
            return -1 !== chars.indexOf(this.ch);
        },
        was: function(chars) {
            return -1 !== chars.indexOf(this.lastCh);
        },
        peek: function(i) {
            var num = i || 1;
            return this.index + num < this.text.length ? this.text.charAt(this.index + num) : !1;
        },
        isNumber: function(ch) {
            return ch >= "0" && "9" >= ch;
        },
        isWhitespace: function(ch) {
            return " " === ch || "\r" === ch || "	" === ch || "\n" === ch || "" === ch || " " === ch;
        },
        isIdent: function(ch) {
            return ch >= "a" && "z" >= ch || ch >= "A" && "Z" >= ch || "_" === ch || "$" === ch;
        },
        isExpOperator: function(ch) {
            return "-" === ch || "+" === ch || this.isNumber(ch);
        },
        throwError: function(error, start, end) {
            end = end || this.index;
            var colStr = isDefined(start) ? "s " + start + "-" + this.index + " [" + this.text.substring(start, end) + "]" : " " + end;
            throw $parseMinErr("lexerr", "Lexer Error: {0} at column{1} in expression [{2}].", error, colStr, this.text);
        },
        readNumber: function() {
            for (var number = "", start = this.index; this.index < this.text.length; ) {
                var ch = lowercase(this.text.charAt(this.index));
                if ("." == ch || this.isNumber(ch)) number += ch; else {
                    var peekCh = this.peek();
                    if ("e" == ch && this.isExpOperator(peekCh)) number += ch; else if (this.isExpOperator(ch) && peekCh && this.isNumber(peekCh) && "e" == number.charAt(number.length - 1)) number += ch; else {
                        if (!this.isExpOperator(ch) || peekCh && this.isNumber(peekCh) || "e" != number.charAt(number.length - 1)) break;
                        this.throwError("Invalid exponent");
                    }
                }
                this.index++;
            }
            number = 1 * number, this.tokens.push({
                index: start,
                text: number,
                json: !0,
                fn: function() {
                    return number;
                }
            });
        },
        readIdent: function() {
            for (var lastDot, peekIndex, methodName, ch, parser = this, ident = "", start = this.index; this.index < this.text.length && (ch = this.text.charAt(this.index), 
            "." === ch || this.isIdent(ch) || this.isNumber(ch)); ) "." === ch && (lastDot = this.index), 
            ident += ch, this.index++;
            if (lastDot) for (peekIndex = this.index; peekIndex < this.text.length; ) {
                if (ch = this.text.charAt(peekIndex), "(" === ch) {
                    methodName = ident.substr(lastDot - start + 1), ident = ident.substr(0, lastDot - start), 
                    this.index = peekIndex;
                    break;
                }
                if (!this.isWhitespace(ch)) break;
                peekIndex++;
            }
            var token = {
                index: start,
                text: ident
            };
            if (OPERATORS.hasOwnProperty(ident)) token.fn = OPERATORS[ident], token.json = OPERATORS[ident]; else {
                var getter = getterFn(ident, this.options, this.text);
                token.fn = extend(function(self, locals) {
                    return getter(self, locals);
                }, {
                    assign: function(self, value) {
                        return setter(self, ident, value, parser.text, parser.options);
                    }
                });
            }
            this.tokens.push(token), methodName && (this.tokens.push({
                index: lastDot,
                text: ".",
                json: !1
            }), this.tokens.push({
                index: lastDot + 1,
                text: methodName,
                json: !1
            }));
        },
        readString: function(quote) {
            var start = this.index;
            this.index++;
            for (var string = "", rawString = quote, escape = !1; this.index < this.text.length; ) {
                var ch = this.text.charAt(this.index);
                if (rawString += ch, escape) {
                    if ("u" === ch) {
                        var hex = this.text.substring(this.index + 1, this.index + 5);
                        hex.match(/[\da-f]{4}/i) || this.throwError("Invalid unicode escape [\\u" + hex + "]"), 
                        this.index += 4, string += String.fromCharCode(parseInt(hex, 16));
                    } else {
                        var rep = ESCAPE[ch];
                        string += rep ? rep : ch;
                    }
                    escape = !1;
                } else if ("\\" === ch) escape = !0; else {
                    if (ch === quote) return this.index++, void this.tokens.push({
                        index: start,
                        text: rawString,
                        string: string,
                        json: !0,
                        fn: function() {
                            return string;
                        }
                    });
                    string += ch;
                }
                this.index++;
            }
            this.throwError("Unterminated quote", start);
        }
    };
    var Parser = function(lexer, $filter, options) {
        this.lexer = lexer, this.$filter = $filter, this.options = options;
    };
    Parser.ZERO = extend(function() {
        return 0;
    }, {
        constant: !0
    }), Parser.prototype = {
        constructor: Parser,
        parse: function(text, json) {
            this.text = text, this.json = json, this.tokens = this.lexer.lex(text), json && (this.assignment = this.logicalOR, 
            this.functionCall = this.fieldAccess = this.objectIndex = this.filterChain = function() {
                this.throwError("is not valid json", {
                    text: text,
                    index: 0
                });
            });
            var value = json ? this.primary() : this.statements();
            return 0 !== this.tokens.length && this.throwError("is an unexpected token", this.tokens[0]), 
            value.literal = !!value.literal, value.constant = !!value.constant, value;
        },
        primary: function() {
            var primary;
            if (this.expect("(")) primary = this.filterChain(), this.consume(")"); else if (this.expect("[")) primary = this.arrayDeclaration(); else if (this.expect("{")) primary = this.object(); else {
                var token = this.expect();
                primary = token.fn, primary || this.throwError("not a primary expression", token), 
                token.json && (primary.constant = !0, primary.literal = !0);
            }
            for (var next, context; next = this.expect("(", "[", "."); ) "(" === next.text ? (primary = this.functionCall(primary, context), 
            context = null) : "[" === next.text ? (context = primary, primary = this.objectIndex(primary)) : "." === next.text ? (context = primary, 
            primary = this.fieldAccess(primary)) : this.throwError("IMPOSSIBLE");
            return primary;
        },
        throwError: function(msg, token) {
            throw $parseMinErr("syntax", "Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].", token.text, msg, token.index + 1, this.text, this.text.substring(token.index));
        },
        peekToken: function() {
            if (0 === this.tokens.length) throw $parseMinErr("ueoe", "Unexpected end of expression: {0}", this.text);
            return this.tokens[0];
        },
        peek: function(e1, e2, e3, e4) {
            if (this.tokens.length > 0) {
                var token = this.tokens[0], t = token.text;
                if (t === e1 || t === e2 || t === e3 || t === e4 || !e1 && !e2 && !e3 && !e4) return token;
            }
            return !1;
        },
        expect: function(e1, e2, e3, e4) {
            var token = this.peek(e1, e2, e3, e4);
            return token ? (this.json && !token.json && this.throwError("is not valid json", token), 
            this.tokens.shift(), token) : !1;
        },
        consume: function(e1) {
            this.expect(e1) || this.throwError("is unexpected, expecting [" + e1 + "]", this.peek());
        },
        unaryFn: function(fn, right) {
            return extend(function(self, locals) {
                return fn(self, locals, right);
            }, {
                constant: right.constant
            });
        },
        ternaryFn: function(left, middle, right) {
            return extend(function(self, locals) {
                return left(self, locals) ? middle(self, locals) : right(self, locals);
            }, {
                constant: left.constant && middle.constant && right.constant
            });
        },
        binaryFn: function(left, fn, right) {
            return extend(function(self, locals) {
                return fn(self, locals, left, right);
            }, {
                constant: left.constant && right.constant
            });
        },
        statements: function() {
            for (var statements = []; ;) if (this.tokens.length > 0 && !this.peek("}", ")", ";", "]") && statements.push(this.filterChain()), 
            !this.expect(";")) return 1 === statements.length ? statements[0] : function(self, locals) {
                for (var value, i = 0; i < statements.length; i++) {
                    var statement = statements[i];
                    statement && (value = statement(self, locals));
                }
                return value;
            };
        },
        filterChain: function() {
            for (var token, left = this.expression(); ;) {
                if (!(token = this.expect("|"))) return left;
                left = this.binaryFn(left, token.fn, this.filter());
            }
        },
        filter: function() {
            for (var token = this.expect(), fn = this.$filter(token.text), argsFn = []; ;) {
                if (!(token = this.expect(":"))) {
                    var fnInvoke = function(self, locals, input) {
                        for (var args = [ input ], i = 0; i < argsFn.length; i++) args.push(argsFn[i](self, locals));
                        return fn.apply(self, args);
                    };
                    return function() {
                        return fnInvoke;
                    };
                }
                argsFn.push(this.expression());
            }
        },
        expression: function() {
            return this.assignment();
        },
        assignment: function() {
            var right, token, left = this.ternary();
            return (token = this.expect("=")) ? (left.assign || this.throwError("implies assignment but [" + this.text.substring(0, token.index) + "] can not be assigned to", token), 
            right = this.ternary(), function(scope, locals) {
                return left.assign(scope, right(scope, locals), locals);
            }) : left;
        },
        ternary: function() {
            var middle, token, left = this.logicalOR();
            return (token = this.expect("?")) ? (middle = this.ternary(), (token = this.expect(":")) ? this.ternaryFn(left, middle, this.ternary()) : void this.throwError("expected :", token)) : left;
        },
        logicalOR: function() {
            for (var token, left = this.logicalAND(); ;) {
                if (!(token = this.expect("||"))) return left;
                left = this.binaryFn(left, token.fn, this.logicalAND());
            }
        },
        logicalAND: function() {
            var token, left = this.equality();
            return (token = this.expect("&&")) && (left = this.binaryFn(left, token.fn, this.logicalAND())), 
            left;
        },
        equality: function() {
            var token, left = this.relational();
            return (token = this.expect("==", "!=", "===", "!==")) && (left = this.binaryFn(left, token.fn, this.equality())), 
            left;
        },
        relational: function() {
            var token, left = this.additive();
            return (token = this.expect("<", ">", "<=", ">=")) && (left = this.binaryFn(left, token.fn, this.relational())), 
            left;
        },
        additive: function() {
            for (var token, left = this.multiplicative(); token = this.expect("+", "-"); ) left = this.binaryFn(left, token.fn, this.multiplicative());
            return left;
        },
        multiplicative: function() {
            for (var token, left = this.unary(); token = this.expect("*", "/", "%"); ) left = this.binaryFn(left, token.fn, this.unary());
            return left;
        },
        unary: function() {
            var token;
            return this.expect("+") ? this.primary() : (token = this.expect("-")) ? this.binaryFn(Parser.ZERO, token.fn, this.unary()) : (token = this.expect("!")) ? this.unaryFn(token.fn, this.unary()) : this.primary();
        },
        fieldAccess: function(object) {
            var parser = this, field = this.expect().text, getter = getterFn(field, this.options, this.text);
            return extend(function(scope, locals, self) {
                return getter(self || object(scope, locals));
            }, {
                assign: function(scope, value, locals) {
                    return setter(object(scope, locals), field, value, parser.text, parser.options);
                }
            });
        },
        objectIndex: function(obj) {
            var parser = this, indexFn = this.expression();
            return this.consume("]"), extend(function(self, locals) {
                var v, p, o = obj(self, locals), i = indexFn(self, locals);
                return o ? (v = ensureSafeObject(o[i], parser.text), v && v.then && parser.options.unwrapPromises && (p = v, 
                "$$v" in v || (p.$$v = undefined, p.then(function(val) {
                    p.$$v = val;
                })), v = v.$$v), v) : undefined;
            }, {
                assign: function(self, value, locals) {
                    var key = indexFn(self, locals), safe = ensureSafeObject(obj(self, locals), parser.text);
                    return safe[key] = value;
                }
            });
        },
        functionCall: function(fn, contextGetter) {
            var argsFn = [];
            if (")" !== this.peekToken().text) do argsFn.push(this.expression()); while (this.expect(","));
            this.consume(")");
            var parser = this;
            return function(scope, locals) {
                for (var args = [], context = contextGetter ? contextGetter(scope, locals) : scope, i = 0; i < argsFn.length; i++) args.push(argsFn[i](scope, locals));
                var fnPtr = fn(scope, locals, context) || noop;
                ensureSafeObject(context, parser.text), ensureSafeObject(fnPtr, parser.text);
                var v = fnPtr.apply ? fnPtr.apply(context, args) : fnPtr(args[0], args[1], args[2], args[3], args[4]);
                return ensureSafeObject(v, parser.text);
            };
        },
        arrayDeclaration: function() {
            var elementFns = [], allConstant = !0;
            if ("]" !== this.peekToken().text) do {
                if (this.peek("]")) break;
                var elementFn = this.expression();
                elementFns.push(elementFn), elementFn.constant || (allConstant = !1);
            } while (this.expect(","));
            return this.consume("]"), extend(function(self, locals) {
                for (var array = [], i = 0; i < elementFns.length; i++) array.push(elementFns[i](self, locals));
                return array;
            }, {
                literal: !0,
                constant: allConstant
            });
        },
        object: function() {
            var keyValues = [], allConstant = !0;
            if ("}" !== this.peekToken().text) do {
                if (this.peek("}")) break;
                var token = this.expect(), key = token.string || token.text;
                this.consume(":");
                var value = this.expression();
                keyValues.push({
                    key: key,
                    value: value
                }), value.constant || (allConstant = !1);
            } while (this.expect(","));
            return this.consume("}"), extend(function(self, locals) {
                for (var object = {}, i = 0; i < keyValues.length; i++) {
                    var keyValue = keyValues[i];
                    object[keyValue.key] = keyValue.value(self, locals);
                }
                return object;
            }, {
                literal: !0,
                constant: allConstant
            });
        }
    };
    var getterFnCache = {}, $sceMinErr = minErr("$sce"), SCE_CONTEXTS = {
        HTML: "html",
        CSS: "css",
        URL: "url",
        RESOURCE_URL: "resourceUrl",
        JS: "js"
    }, urlParsingNode = document.createElement("a"), originUrl = urlResolve(window.location.href, !0);
    $FilterProvider.$inject = [ "$provide" ], currencyFilter.$inject = [ "$locale" ], 
    numberFilter.$inject = [ "$locale" ];
    var DECIMAL_SEP = ".", DATE_FORMATS = {
        yyyy: dateGetter("FullYear", 4),
        yy: dateGetter("FullYear", 2, 0, !0),
        y: dateGetter("FullYear", 1),
        MMMM: dateStrGetter("Month"),
        MMM: dateStrGetter("Month", !0),
        MM: dateGetter("Month", 2, 1),
        M: dateGetter("Month", 1, 1),
        dd: dateGetter("Date", 2),
        d: dateGetter("Date", 1),
        HH: dateGetter("Hours", 2),
        H: dateGetter("Hours", 1),
        hh: dateGetter("Hours", 2, -12),
        h: dateGetter("Hours", 1, -12),
        mm: dateGetter("Minutes", 2),
        m: dateGetter("Minutes", 1),
        ss: dateGetter("Seconds", 2),
        s: dateGetter("Seconds", 1),
        sss: dateGetter("Milliseconds", 3),
        EEEE: dateStrGetter("Day"),
        EEE: dateStrGetter("Day", !0),
        a: ampmGetter,
        Z: timeZoneGetter,
        ww: weekGetter(2),
        w: weekGetter(1)
    }, DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEw']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|w+))(.*)/, NUMBER_STRING = /^\-?\d+$/;
    dateFilter.$inject = [ "$locale" ];
    var lowercaseFilter = valueFn(lowercase), uppercaseFilter = valueFn(uppercase);
    orderByFilter.$inject = [ "$parse" ];
    var htmlAnchorDirective = valueFn({
        restrict: "E",
        compile: function(element, attr) {
            return 8 >= msie && (attr.href || attr.name || attr.$set("href", ""), element.append(document.createComment("IE fix"))), 
            attr.href || attr.xlinkHref || attr.name ? void 0 : function(scope, element) {
                var href = "[object SVGAnimatedString]" === toString.call(element.prop("href")) ? "xlink:href" : "href";
                element.on("click", function(event) {
                    element.attr(href) || event.preventDefault();
                });
            };
        }
    }), ngAttributeAliasDirectives = {};
    forEach(BOOLEAN_ATTR, function(propName, attrName) {
        if ("multiple" != propName) {
            var normalized = directiveNormalize("ng-" + attrName);
            ngAttributeAliasDirectives[normalized] = function() {
                return {
                    priority: 100,
                    link: function(scope, element, attr) {
                        scope.$watch(attr[normalized], function(value) {
                            attr.$set(attrName, !!value);
                        });
                    }
                };
            };
        }
    }), forEach([ "src", "srcset", "href" ], function(attrName) {
        var normalized = directiveNormalize("ng-" + attrName);
        ngAttributeAliasDirectives[normalized] = function() {
            return {
                priority: 99,
                link: function(scope, element, attr) {
                    var propName = attrName, name = attrName;
                    "href" === attrName && "[object SVGAnimatedString]" === toString.call(element.prop("href")) && (name = "xlinkHref", 
                    attr.$attr[name] = "xlink:href", propName = null), attr.$observe(normalized, function(value) {
                        value && (attr.$set(name, value), msie && propName && element.prop(propName, attr[name]));
                    });
                }
            };
        };
    });
    var nullFormCtrl = {
        $addControl: noop,
        $removeControl: noop,
        $setValidity: noop,
        $setDirty: noop,
        $setPristine: noop
    };
    FormController.$inject = [ "$element", "$attrs", "$scope", "$animate" ];
    var formDirectiveFactory = function(isNgForm) {
        return [ "$timeout", function($timeout) {
            var formDirective = {
                name: "form",
                restrict: isNgForm ? "EAC" : "E",
                controller: FormController,
                compile: function() {
                    return {
                        pre: function(scope, formElement, attr, controller) {
                            if (!attr.action) {
                                var preventDefaultListener = function(event) {
                                    event.preventDefault ? event.preventDefault() : event.returnValue = !1;
                                };
                                addEventListenerFn(formElement[0], "submit", preventDefaultListener), formElement.on("$destroy", function() {
                                    $timeout(function() {
                                        removeEventListenerFn(formElement[0], "submit", preventDefaultListener);
                                    }, 0, !1);
                                });
                            }
                            var parentFormCtrl = formElement.parent().controller("form"), alias = attr.name || attr.ngForm;
                            alias && setter(scope, alias, controller, alias), parentFormCtrl && formElement.on("$destroy", function() {
                                parentFormCtrl.$removeControl(controller), alias && setter(scope, alias, undefined, alias), 
                                extend(controller, nullFormCtrl);
                            });
                        }
                    };
                }
            };
            return formDirective;
        } ];
    }, formDirective = formDirectiveFactory(), ngFormDirective = formDirectiveFactory(!0), URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/, EMAIL_REGEXP = /^[a-z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-z0-9-]+(\.[a-z0-9-]+)*$/i, NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/, DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/, DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)$/, WEEK_REGEXP = /^(\d{4})-W(\d\d)$/, MONTH_REGEXP = /^(\d{4})-(\d\d)$/, TIME_REGEXP = /^(\d\d):(\d\d)$/, DEFAULT_REGEXP = /(\b|^)default(\b|$)/, inputType = {
        text: textInputType,
        date: createDateInputType("date", DATE_REGEXP, createDateParser(DATE_REGEXP, [ "yyyy", "MM", "dd" ]), "yyyy-MM-dd"),
        "datetime-local": createDateInputType("datetimelocal", DATETIMELOCAL_REGEXP, createDateParser(DATETIMELOCAL_REGEXP, [ "yyyy", "MM", "dd", "HH", "mm" ]), "yyyy-MM-ddTHH:mm"),
        time: createDateInputType("time", TIME_REGEXP, createDateParser(TIME_REGEXP, [ "HH", "mm" ]), "HH:mm"),
        week: createDateInputType("week", WEEK_REGEXP, weekParser, "yyyy-Www"),
        month: createDateInputType("month", MONTH_REGEXP, createDateParser(MONTH_REGEXP, [ "yyyy", "MM" ]), "yyyy-MM"),
        number: numberInputType,
        url: urlInputType,
        email: emailInputType,
        radio: radioInputType,
        checkbox: checkboxInputType,
        hidden: noop,
        button: noop,
        submit: noop,
        reset: noop,
        file: noop
    }, inputDirective = [ "$browser", "$sniffer", "$filter", function($browser, $sniffer, $filter) {
        return {
            restrict: "E",
            require: [ "?ngModel" ],
            link: function(scope, element, attr, ctrls) {
                ctrls[0] && (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer, $browser, $filter);
            }
        };
    } ], VALID_CLASS = "ng-valid", INVALID_CLASS = "ng-invalid", PRISTINE_CLASS = "ng-pristine", DIRTY_CLASS = "ng-dirty", NgModelController = [ "$scope", "$exceptionHandler", "$attrs", "$element", "$parse", "$animate", "$timeout", function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout) {
        function toggleValidCss(isValid, validationErrorKey) {
            validationErrorKey = validationErrorKey ? "-" + snake_case(validationErrorKey, "-") : "", 
            $animate.removeClass($element, (isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey), 
            $animate.addClass($element, (isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);
        }
        this.$viewValue = Number.NaN, this.$modelValue = Number.NaN, this.$parsers = [], 
        this.$formatters = [], this.$viewChangeListeners = [], this.$pristine = !0, this.$dirty = !1, 
        this.$valid = !0, this.$invalid = !1, this.$name = $attr.name;
        var ngModelGet = $parse($attr.ngModel), ngModelSet = ngModelGet.assign, pendingDebounce = null, ctrl = this;
        if (!ngModelSet) throw minErr("ngModel")("nonassign", "Expression '{0}' is non-assignable. Element: {1}", $attr.ngModel, startingTag($element));
        this.$render = noop, this.$isEmpty = function(value) {
            return isUndefined(value) || "" === value || null === value || value !== value;
        };
        var parentForm = $element.inheritedData("$formController") || nullFormCtrl, invalidCount = 0, $error = this.$error = {};
        $element.addClass(PRISTINE_CLASS), toggleValidCss(!0), this.$setValidity = function(validationErrorKey, isValid) {
            $error[validationErrorKey] !== !isValid && (isValid ? ($error[validationErrorKey] && invalidCount--, 
            invalidCount || (toggleValidCss(!0), ctrl.$valid = !0, ctrl.$invalid = !1)) : (toggleValidCss(!1), 
            ctrl.$invalid = !0, ctrl.$valid = !1, invalidCount++), $error[validationErrorKey] = !isValid, 
            toggleValidCss(isValid, validationErrorKey), parentForm.$setValidity(validationErrorKey, isValid, ctrl));
        }, this.$setPristine = function() {
            ctrl.$dirty = !1, ctrl.$pristine = !0, $animate.removeClass($element, DIRTY_CLASS), 
            $animate.addClass($element, PRISTINE_CLASS);
        }, this.$cancelUpdate = function() {
            $timeout.cancel(pendingDebounce), ctrl.$render();
        }, this.$$realSetViewValue = function(value) {
            ctrl.$viewValue = value, ctrl.$pristine && (ctrl.$dirty = !0, ctrl.$pristine = !1, 
            $animate.removeClass($element, PRISTINE_CLASS), $animate.addClass($element, DIRTY_CLASS), 
            parentForm.$setDirty()), forEach(ctrl.$parsers, function(fn) {
                value = fn(value);
            }), ctrl.$modelValue !== value && (ctrl.$modelValue = value, ngModelSet($scope, value), 
            forEach(ctrl.$viewChangeListeners, function(listener) {
                try {
                    listener();
                } catch (e) {
                    $exceptionHandler(e);
                }
            }));
        }, this.$setViewValue = function(value, trigger) {
            var debounceDelay = ctrl.$options && (isObject(ctrl.$options.debounce) ? ctrl.$options.debounce[trigger] || ctrl.$options.debounce["default"] || 0 : ctrl.$options.debounce) || 0;
            $timeout.cancel(pendingDebounce), debounceDelay ? pendingDebounce = $timeout(function() {
                ctrl.$$realSetViewValue(value);
            }, debounceDelay) : ctrl.$$realSetViewValue(value);
        }, $scope.$watch(function() {
            var value = ngModelGet($scope);
            if (ctrl.$modelValue !== value) {
                var formatters = ctrl.$formatters, idx = formatters.length;
                for (ctrl.$modelValue = value; idx--; ) value = formatters[idx](value);
                ctrl.$viewValue !== value && (ctrl.$viewValue = value, ctrl.$render());
            }
            return value;
        });
    } ], ngModelDirective = function() {
        return {
            require: [ "ngModel", "^?form", "^?ngModelOptions" ],
            controller: NgModelController,
            link: function(scope, element, attr, ctrls) {
                var modelCtrl = ctrls[0], formCtrl = ctrls[1] || nullFormCtrl;
                formCtrl.$addControl(modelCtrl), ctrls[2] && (modelCtrl.$options = ctrls[2].$options), 
                scope.$on("$destroy", function() {
                    formCtrl.$removeControl(modelCtrl);
                });
            }
        };
    }, ngChangeDirective = valueFn({
        require: "ngModel",
        link: function(scope, element, attr, ctrl) {
            ctrl.$viewChangeListeners.push(function() {
                scope.$eval(attr.ngChange);
            });
        }
    }), requiredDirective = function() {
        return {
            require: "?ngModel",
            link: function(scope, elm, attr, ctrl) {
                if (ctrl) {
                    attr.required = !0;
                    var validator = function(value) {
                        return attr.required && ctrl.$isEmpty(value) ? void ctrl.$setValidity("required", !1) : (ctrl.$setValidity("required", !0), 
                        value);
                    };
                    ctrl.$formatters.push(validator), ctrl.$parsers.unshift(validator), attr.$observe("required", function() {
                        validator(ctrl.$viewValue);
                    });
                }
            }
        };
    }, ngListDirective = function() {
        return {
            require: "ngModel",
            link: function(scope, element, attr, ctrl) {
                var match = /\/(.*)\//.exec(attr.ngList), separator = match && new RegExp(match[1]) || attr.ngList || ",", parse = function(viewValue) {
                    if (!isUndefined(viewValue)) {
                        var list = [];
                        return viewValue && forEach(viewValue.split(separator), function(value) {
                            value && list.push(trim(value));
                        }), list;
                    }
                };
                ctrl.$parsers.push(parse), ctrl.$formatters.push(function(value) {
                    return isArray(value) ? value.join(", ") : undefined;
                }), ctrl.$isEmpty = function(value) {
                    return !value || !value.length;
                };
            }
        };
    }, CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/, ngValueDirective = function() {
        return {
            priority: 100,
            compile: function(tpl, tplAttr) {
                return CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue) ? function(scope, elm, attr) {
                    attr.$set("value", scope.$eval(attr.ngValue));
                } : function(scope, elm, attr) {
                    scope.$watch(attr.ngValue, function(value) {
                        attr.$set("value", value);
                    });
                };
            }
        };
    }, ngModelOptionsDirective = function() {
        return {
            controller: [ "$scope", "$attrs", function($scope, $attrs) {
                var that = this;
                this.$options = $scope.$eval($attrs.ngModelOptions), this.$options.updateOn ? (this.$options.updateOnDefault = !1, 
                this.$options.updateOn = this.$options.updateOn.replace(DEFAULT_REGEXP, function() {
                    return that.$options.updateOnDefault = !0, " ";
                })) : this.$options.updateOnDefault = !0;
            } ]
        };
    }, ngBindDirective = ngDirective(function(scope, element, attr) {
        element.addClass("ng-binding").data("$binding", attr.ngBind), scope.$watch(attr.ngBind, function(value) {
            element.text(value == undefined ? "" : value);
        });
    }), ngBindTemplateDirective = [ "$interpolate", function($interpolate) {
        return function(scope, element, attr) {
            var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
            element.addClass("ng-binding").data("$binding", interpolateFn), attr.$observe("ngBindTemplate", function(value) {
                element.text(value);
            });
        };
    } ], ngBindHtmlDirective = [ "$sce", "$parse", function($sce, $parse) {
        return function(scope, element, attr) {
            function getStringValue() {
                return (parsed(scope) || "").toString();
            }
            element.addClass("ng-binding").data("$binding", attr.ngBindHtml);
            var parsed = $parse(attr.ngBindHtml);
            scope.$watch(getStringValue, function() {
                element.html($sce.getTrustedHtml(parsed(scope)) || "");
            });
        };
    } ], ngClassDirective = classDirective("", !0), ngClassOddDirective = classDirective("Odd", 0), ngClassEvenDirective = classDirective("Even", 1), ngCloakDirective = ngDirective({
        compile: function(element, attr) {
            attr.$set("ngCloak", undefined), element.removeClass("ng-cloak");
        }
    }), ngControllerDirective = [ function() {
        return {
            scope: !0,
            controller: "@",
            priority: 500
        };
    } ], ngEventDirectives = {};
    forEach("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "), function(name) {
        var directiveName = directiveNormalize("ng-" + name);
        ngEventDirectives[directiveName] = [ "$parse", function($parse) {
            return {
                compile: function($element, attr) {
                    var fn = $parse(attr[directiveName]);
                    return function(scope, element) {
                        element.on(lowercase(name), function(event) {
                            scope.$apply(function() {
                                fn(scope, {
                                    $event: event
                                });
                            });
                        });
                    };
                }
            };
        } ];
    });
    var ngIfDirective = [ "$animate", function($animate) {
        return {
            transclude: "element",
            priority: 600,
            terminal: !0,
            restrict: "A",
            $$tlb: !0,
            link: function($scope, $element, $attr, ctrl, $transclude) {
                var block, childScope, previousElements;
                $scope.$watch($attr.ngIf, function(value) {
                    toBoolean(value) ? childScope || (childScope = $scope.$new(), $transclude(childScope, function(clone) {
                        clone[clone.length++] = document.createComment(" end ngIf: " + $attr.ngIf + " "), 
                        block = {
                            clone: clone
                        }, $animate.enter(clone, $element.parent(), $element);
                    })) : (previousElements && (previousElements.remove(), previousElements = null), 
                    childScope && (childScope.$destroy(), childScope = null), block && (previousElements = getBlockElements(block.clone), 
                    $animate.leave(previousElements, function() {
                        previousElements = null;
                    }), block = null));
                });
            }
        };
    } ], ngIncludeDirective = [ "$http", "$templateCache", "$anchorScroll", "$animate", "$sce", function($http, $templateCache, $anchorScroll, $animate, $sce) {
        return {
            restrict: "ECA",
            priority: 400,
            terminal: !0,
            transclude: "element",
            controller: angular.noop,
            compile: function(element, attr) {
                var srcExp = attr.ngInclude || attr.src, onloadExp = attr.onload || "", autoScrollExp = attr.autoscroll;
                return function(scope, $element, $attr, ctrl, $transclude) {
                    var currentScope, previousElement, currentElement, changeCounter = 0, cleanupLastIncludeContent = function() {
                        previousElement && (previousElement.remove(), previousElement = null), currentScope && (currentScope.$destroy(), 
                        currentScope = null), currentElement && ($animate.leave(currentElement, function() {
                            previousElement = null;
                        }), previousElement = currentElement, currentElement = null);
                    };
                    scope.$watch($sce.parseAsResourceUrl(srcExp), function(src) {
                        var afterAnimation = function() {
                            !isDefined(autoScrollExp) || autoScrollExp && !scope.$eval(autoScrollExp) || $anchorScroll();
                        }, thisChangeId = ++changeCounter;
                        src ? ($http.get(src, {
                            cache: $templateCache
                        }).success(function(response) {
                            if (thisChangeId === changeCounter) {
                                var newScope = scope.$new();
                                ctrl.template = response;
                                var clone = $transclude(newScope, function(clone) {
                                    cleanupLastIncludeContent(), $animate.enter(clone, null, $element, afterAnimation);
                                });
                                currentScope = newScope, currentElement = clone, currentScope.$emit("$includeContentLoaded"), 
                                scope.$eval(onloadExp);
                            }
                        }).error(function() {
                            thisChangeId === changeCounter && cleanupLastIncludeContent();
                        }), scope.$emit("$includeContentRequested")) : (cleanupLastIncludeContent(), ctrl.template = null);
                    });
                };
            }
        };
    } ], ngIncludeFillContentDirective = [ "$compile", function($compile) {
        return {
            restrict: "ECA",
            priority: -400,
            require: "ngInclude",
            link: function(scope, $element, $attr, ctrl) {
                $element.html(ctrl.template), $compile($element.contents())(scope);
            }
        };
    } ], ngInitDirective = ngDirective({
        priority: 450,
        compile: function() {
            return {
                pre: function(scope, element, attrs) {
                    scope.$eval(attrs.ngInit);
                }
            };
        }
    }), ngNonBindableDirective = ngDirective({
        terminal: !0,
        priority: 1e3
    }), ngPluralizeDirective = [ "$locale", "$interpolate", function($locale, $interpolate) {
        var BRACE = /{}/g;
        return {
            restrict: "EA",
            link: function(scope, element, attr) {
                var numberExp = attr.count, whenExp = attr.$attr.when && element.attr(attr.$attr.when), offset = attr.offset || 0, whens = scope.$eval(whenExp) || {}, whensExpFns = {}, startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), isWhen = /^when(Minus)?(.+)$/;
                forEach(attr, function(expression, attributeName) {
                    isWhen.test(attributeName) && (whens[lowercase(attributeName.replace("when", "").replace("Minus", "-"))] = element.attr(attr.$attr[attributeName]));
                }), forEach(whens, function(expression, key) {
                    whensExpFns[key] = $interpolate(expression.replace(BRACE, startSymbol + numberExp + "-" + offset + endSymbol));
                }), scope.$watch(function() {
                    var value = parseFloat(scope.$eval(numberExp));
                    return isNaN(value) ? "" : (value in whens || (value = $locale.pluralCat(value - offset)), 
                    whensExpFns[value](scope, element, !0));
                }, function(newVal) {
                    element.text(newVal);
                });
            }
        };
    } ], ngRepeatDirective = [ "$parse", "$animate", function($parse, $animate) {
        function getBlockStart(block) {
            return block.clone[0];
        }
        function getBlockEnd(block) {
            return block.clone[block.clone.length - 1];
        }
        var NG_REMOVED = "$$NG_REMOVED", ngRepeatMinErr = minErr("ngRepeat");
        return {
            transclude: "element",
            priority: 1e3,
            terminal: !0,
            $$tlb: !0,
            link: function($scope, $element, $attr, ctrl, $transclude) {
                var trackByExp, trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn, lhs, rhs, valueIdentifier, keyIdentifier, expression = $attr.ngRepeat, match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/), hashFnLocals = {
                    $id: hashKey
                };
                if (!match) throw ngRepeatMinErr("iexp", "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.", expression);
                if (lhs = match[1], rhs = match[2], trackByExp = match[3], trackByExp ? (trackByExpGetter = $parse(trackByExp), 
                trackByIdExpFn = function(key, value, index) {
                    return keyIdentifier && (hashFnLocals[keyIdentifier] = key), hashFnLocals[valueIdentifier] = value, 
                    hashFnLocals.$index = index, trackByExpGetter($scope, hashFnLocals);
                }) : (trackByIdArrayFn = function(key, value) {
                    return hashKey(value);
                }, trackByIdObjFn = function(key) {
                    return key;
                }), match = lhs.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/), !match) throw ngRepeatMinErr("iidexp", "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.", lhs);
                valueIdentifier = match[3] || match[1], keyIdentifier = match[2];
                var lastBlockMap = {};
                $scope.$watchCollection(rhs, function(collection) {
                    var index, length, nextNode, arrayLength, childScope, key, value, trackById, trackByIdFn, collectionKeys, block, elementsToRemove, previousNode = $element[0], nextBlockMap = {}, nextBlockOrder = [];
                    if (isArrayLike(collection)) collectionKeys = collection, trackByIdFn = trackByIdExpFn || trackByIdArrayFn; else {
                        trackByIdFn = trackByIdExpFn || trackByIdObjFn, collectionKeys = [];
                        for (key in collection) collection.hasOwnProperty(key) && "$" != key.charAt(0) && collectionKeys.push(key);
                        collectionKeys.sort();
                    }
                    for (arrayLength = collectionKeys.length, length = nextBlockOrder.length = collectionKeys.length, 
                    index = 0; length > index; index++) if (key = collection === collectionKeys ? index : collectionKeys[index], 
                    value = collection[key], trackById = trackByIdFn(key, value, index), assertNotHasOwnProperty(trackById, "`track by` id"), 
                    lastBlockMap.hasOwnProperty(trackById)) block = lastBlockMap[trackById], delete lastBlockMap[trackById], 
                    nextBlockMap[trackById] = block, nextBlockOrder[index] = block; else {
                        if (nextBlockMap.hasOwnProperty(trackById)) throw forEach(nextBlockOrder, function(block) {
                            block && block.scope && (lastBlockMap[block.id] = block);
                        }), ngRepeatMinErr("dupes", "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}", expression, trackById);
                        nextBlockOrder[index] = {
                            id: trackById
                        }, nextBlockMap[trackById] = !1;
                    }
                    for (key in lastBlockMap) lastBlockMap.hasOwnProperty(key) && (block = lastBlockMap[key], 
                    elementsToRemove = getBlockElements(block.clone), $animate.leave(elementsToRemove), 
                    forEach(elementsToRemove, function(element) {
                        element[NG_REMOVED] = !0;
                    }), block.scope.$destroy());
                    for (index = 0, length = collectionKeys.length; length > index; index++) {
                        if (key = collection === collectionKeys ? index : collectionKeys[index], value = collection[key], 
                        block = nextBlockOrder[index], nextBlockOrder[index - 1] && (previousNode = getBlockEnd(nextBlockOrder[index - 1])), 
                        block.scope) {
                            childScope = block.scope, nextNode = previousNode;
                            do nextNode = nextNode.nextSibling; while (nextNode && nextNode[NG_REMOVED]);
                            getBlockStart(block) != nextNode && $animate.move(getBlockElements(block.clone), null, jqLite(previousNode)), 
                            previousNode = getBlockEnd(block);
                        } else childScope = $scope.$new();
                        childScope[valueIdentifier] = value, keyIdentifier && (childScope[keyIdentifier] = key), 
                        childScope.$index = index, childScope.$first = 0 === index, childScope.$last = index === arrayLength - 1, 
                        childScope.$middle = !(childScope.$first || childScope.$last), childScope.$odd = !(childScope.$even = 0 === (1 & index)), 
                        block.scope || $transclude(childScope, function(clone) {
                            clone[clone.length++] = document.createComment(" end ngRepeat: " + expression + " "), 
                            $animate.enter(clone, null, jqLite(previousNode)), previousNode = clone, block.scope = childScope, 
                            block.clone = clone, nextBlockMap[block.id] = block;
                        });
                    }
                    lastBlockMap = nextBlockMap;
                });
            }
        };
    } ], ngShowDirective = [ "$animate", function($animate) {
        return function(scope, element, attr) {
            scope.$watch(attr.ngShow, function(value) {
                $animate[toBoolean(value) ? "removeClass" : "addClass"](element, "ng-hide");
            });
        };
    } ], ngHideDirective = [ "$animate", function($animate) {
        return function(scope, element, attr) {
            scope.$watch(attr.ngHide, function(value) {
                $animate[toBoolean(value) ? "addClass" : "removeClass"](element, "ng-hide");
            });
        };
    } ], ngStyleDirective = ngDirective(function(scope, element, attr) {
        scope.$watch(attr.ngStyle, function(newStyles, oldStyles) {
            oldStyles && newStyles !== oldStyles && forEach(oldStyles, function(val, style) {
                element.css(style, "");
            }), newStyles && element.css(newStyles);
        }, !0);
    }), ngSwitchDirective = [ "$animate", function($animate) {
        return {
            restrict: "EA",
            require: "ngSwitch",
            controller: [ "$scope", function() {
                this.cases = {};
            } ],
            link: function(scope, element, attr, ngSwitchController) {
                var selectedTranscludes, selectedElements, previousElements, watchExpr = attr.ngSwitch || attr.on, selectedScopes = [];
                scope.$watch(watchExpr, function(value) {
                    var i, ii = selectedScopes.length;
                    if (ii > 0) {
                        if (previousElements) {
                            for (i = 0; ii > i; i++) previousElements[i].remove();
                            previousElements = null;
                        }
                        for (previousElements = [], i = 0; ii > i; i++) {
                            var selected = selectedElements[i];
                            selectedScopes[i].$destroy(), previousElements[i] = selected, $animate.leave(selected, function() {
                                previousElements.splice(i, 1), 0 === previousElements.length && (previousElements = null);
                            });
                        }
                    }
                    selectedElements = [], selectedScopes = [], (selectedTranscludes = ngSwitchController.cases["!" + value] || ngSwitchController.cases["?"]) && (scope.$eval(attr.change), 
                    forEach(selectedTranscludes, function(selectedTransclude) {
                        var selectedScope = scope.$new();
                        selectedScopes.push(selectedScope), selectedTransclude.transclude(selectedScope, function(caseElement) {
                            var anchor = selectedTransclude.element;
                            selectedElements.push(caseElement), $animate.enter(caseElement, anchor.parent(), anchor);
                        });
                    }));
                });
            }
        };
    } ], ngSwitchWhenDirective = ngDirective({
        transclude: "element",
        priority: 800,
        require: "^ngSwitch",
        link: function(scope, element, attrs, ctrl, $transclude) {
            ctrl.cases["!" + attrs.ngSwitchWhen] = ctrl.cases["!" + attrs.ngSwitchWhen] || [], 
            ctrl.cases["!" + attrs.ngSwitchWhen].push({
                transclude: $transclude,
                element: element
            });
        }
    }), ngSwitchDefaultDirective = ngDirective({
        transclude: "element",
        priority: 800,
        require: "^ngSwitch",
        link: function(scope, element, attr, ctrl, $transclude) {
            ctrl.cases["?"] = ctrl.cases["?"] || [], ctrl.cases["?"].push({
                transclude: $transclude,
                element: element
            });
        }
    }), ngTranscludeDirective = ngDirective({
        link: function($scope, $element, $attrs, controller, $transclude) {
            if (!$transclude) throw minErr("ngTransclude")("orphan", "Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}", startingTag($element));
            $transclude(function(clone) {
                $element.empty(), $element.append(clone);
            });
        }
    }), scriptDirective = [ "$templateCache", function($templateCache) {
        return {
            restrict: "E",
            terminal: !0,
            compile: function(element, attr) {
                if ("text/ng-template" == attr.type) {
                    var templateUrl = attr.id, text = element[0].text;
                    $templateCache.put(templateUrl, text);
                }
            }
        };
    } ], ngOptionsMinErr = minErr("ngOptions"), ngOptionsDirective = valueFn({
        terminal: !0
    }), selectDirective = [ "$compile", "$parse", function($compile, $parse) {
        var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/, nullModelCtrl = {
            $setViewValue: noop
        };
        return {
            restrict: "E",
            require: [ "select", "?ngModel" ],
            controller: [ "$element", "$scope", "$attrs", function($element, $scope, $attrs) {
                var nullOption, unknownOption, self = this, optionsMap = {}, ngModelCtrl = nullModelCtrl;
                self.databound = $attrs.ngModel, self.init = function(ngModelCtrl_, nullOption_, unknownOption_) {
                    ngModelCtrl = ngModelCtrl_, nullOption = nullOption_, unknownOption = unknownOption_;
                }, self.addOption = function(value) {
                    assertNotHasOwnProperty(value, '"option value"'), optionsMap[value] = !0, ngModelCtrl.$viewValue == value && ($element.val(value), 
                    unknownOption.parent() && unknownOption.remove());
                }, self.removeOption = function(value) {
                    this.hasOption(value) && (delete optionsMap[value], ngModelCtrl.$viewValue == value && this.renderUnknownOption(value));
                }, self.renderUnknownOption = function(val) {
                    var unknownVal = "? " + hashKey(val) + " ?";
                    unknownOption.val(unknownVal), $element.prepend(unknownOption), $element.val(unknownVal), 
                    unknownOption.prop("selected", !0);
                }, self.hasOption = function(value) {
                    return optionsMap.hasOwnProperty(value);
                }, $scope.$on("$destroy", function() {
                    self.renderUnknownOption = noop;
                });
            } ],
            link: function(scope, element, attr, ctrls) {
                function setupAsSingle(scope, selectElement, ngModelCtrl, selectCtrl) {
                    ngModelCtrl.$render = function() {
                        var viewValue = ngModelCtrl.$viewValue;
                        selectCtrl.hasOption(viewValue) ? (unknownOption.parent() && unknownOption.remove(), 
                        selectElement.val(viewValue), "" === viewValue && emptyOption.prop("selected", !0)) : isUndefined(viewValue) && emptyOption ? selectElement.val("") : selectCtrl.renderUnknownOption(viewValue);
                    }, selectElement.on("change", function() {
                        scope.$apply(function() {
                            unknownOption.parent() && unknownOption.remove(), ngModelCtrl.$setViewValue(selectElement.val());
                        });
                    });
                }
                function setupAsMultiple(scope, selectElement, ctrl) {
                    var lastView;
                    ctrl.$render = function() {
                        var items = new HashMap(ctrl.$viewValue);
                        forEach(selectElement.find("option"), function(option) {
                            option.selected = isDefined(items.get(option.value));
                        });
                    }, scope.$watch(function() {
                        equals(lastView, ctrl.$viewValue) || (lastView = copy(ctrl.$viewValue), ctrl.$render());
                    }), selectElement.on("change", function() {
                        scope.$apply(function() {
                            var array = [];
                            forEach(selectElement.find("option"), function(option) {
                                option.selected && array.push(option.value);
                            }), ctrl.$setViewValue(array);
                        });
                    });
                }
                function setupAsOptions(scope, selectElement, ctrl) {
                    function render() {
                        var optionGroupName, optionGroup, option, existingParent, existingOptions, existingOption, key, groupLength, length, groupIndex, index, selected, lastElement, element, label, optionGroups = {
                            "": []
                        }, optionGroupNames = [ "" ], modelValue = ctrl.$modelValue, values = valuesFn(scope) || [], keys = keyName ? sortedKeys(values) : values, locals = {}, selectedSet = !1;
                        if (multiple) if (trackFn && isArray(modelValue)) {
                            selectedSet = new HashMap([]);
                            for (var trackIndex = 0; trackIndex < modelValue.length; trackIndex++) locals[valueName] = modelValue[trackIndex], 
                            selectedSet.put(trackFn(scope, locals), modelValue[trackIndex]);
                        } else selectedSet = new HashMap(modelValue);
                        for (index = 0; length = keys.length, length > index; index++) {
                            if (key = index, keyName) {
                                if (key = keys[index], "$" === key.charAt(0)) continue;
                                locals[keyName] = key;
                            }
                            if (locals[valueName] = values[key], optionGroupName = groupByFn(scope, locals) || "", 
                            (optionGroup = optionGroups[optionGroupName]) || (optionGroup = optionGroups[optionGroupName] = [], 
                            optionGroupNames.push(optionGroupName)), multiple) selected = isDefined(selectedSet.remove(trackFn ? trackFn(scope, locals) : valueFn(scope, locals))); else {
                                if (trackFn) {
                                    var modelCast = {};
                                    modelCast[valueName] = modelValue, selected = trackFn(scope, modelCast) === trackFn(scope, locals);
                                } else selected = modelValue === valueFn(scope, locals);
                                selectedSet = selectedSet || selected;
                            }
                            label = displayFn(scope, locals), label = isDefined(label) ? label : "", optionGroup.push({
                                id: trackFn ? trackFn(scope, locals) : keyName ? keys[index] : index,
                                label: label,
                                selected: selected
                            });
                        }
                        for (multiple || (nullOption || null === modelValue ? optionGroups[""].unshift({
                            id: "",
                            label: "",
                            selected: !selectedSet
                        }) : selectedSet || optionGroups[""].unshift({
                            id: "?",
                            label: "",
                            selected: !0
                        })), groupIndex = 0, groupLength = optionGroupNames.length; groupLength > groupIndex; groupIndex++) {
                            for (optionGroupName = optionGroupNames[groupIndex], optionGroup = optionGroups[optionGroupName], 
                            optionGroupsCache.length <= groupIndex ? (existingParent = {
                                element: optGroupTemplate.clone().attr("label", optionGroupName),
                                label: optionGroup.label
                            }, existingOptions = [ existingParent ], optionGroupsCache.push(existingOptions), 
                            selectElement.append(existingParent.element)) : (existingOptions = optionGroupsCache[groupIndex], 
                            existingParent = existingOptions[0], existingParent.label != optionGroupName && existingParent.element.attr("label", existingParent.label = optionGroupName)), 
                            lastElement = null, index = 0, length = optionGroup.length; length > index; index++) option = optionGroup[index], 
                            (existingOption = existingOptions[index + 1]) ? (lastElement = existingOption.element, 
                            existingOption.label !== option.label && lastElement.text(existingOption.label = option.label), 
                            existingOption.id !== option.id && lastElement.val(existingOption.id = option.id), 
                            existingOption.selected !== option.selected && lastElement.prop("selected", existingOption.selected = option.selected)) : ("" === option.id && nullOption ? element = nullOption : (element = optionTemplate.clone()).val(option.id).attr("selected", option.selected).text(option.label), 
                            existingOptions.push(existingOption = {
                                element: element,
                                label: option.label,
                                id: option.id,
                                selected: option.selected
                            }), lastElement ? lastElement.after(element) : existingParent.element.append(element), 
                            lastElement = element);
                            for (index++; existingOptions.length > index; ) existingOptions.pop().element.remove();
                        }
                        for (;optionGroupsCache.length > groupIndex; ) optionGroupsCache.pop()[0].element.remove();
                    }
                    var match;
                    if (!(match = optionsExp.match(NG_OPTIONS_REGEXP))) throw ngOptionsMinErr("iexp", "Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}", optionsExp, startingTag(selectElement));
                    var displayFn = $parse(match[2] || match[1]), valueName = match[4] || match[6], keyName = match[5], groupByFn = $parse(match[3] || ""), valueFn = $parse(match[2] ? match[1] : valueName), valuesFn = $parse(match[7]), track = match[8], trackFn = track ? $parse(match[8]) : null, optionGroupsCache = [ [ {
                        element: selectElement,
                        label: ""
                    } ] ];
                    nullOption && ($compile(nullOption)(scope), nullOption.removeClass("ng-scope"), 
                    nullOption.remove()), selectElement.empty(), selectElement.on("change", function() {
                        scope.$apply(function() {
                            var optionGroup, key, value, optionElement, index, groupIndex, length, groupLength, trackIndex, collection = valuesFn(scope) || [], locals = {};
                            if (multiple) {
                                for (value = [], groupIndex = 0, groupLength = optionGroupsCache.length; groupLength > groupIndex; groupIndex++) for (optionGroup = optionGroupsCache[groupIndex], 
                                index = 1, length = optionGroup.length; length > index; index++) if ((optionElement = optionGroup[index].element)[0].selected) {
                                    if (key = optionElement.val(), keyName && (locals[keyName] = key), trackFn) for (trackIndex = 0; trackIndex < collection.length && (locals[valueName] = collection[trackIndex], 
                                    trackFn(scope, locals) != key); trackIndex++) ; else locals[valueName] = collection[key];
                                    value.push(valueFn(scope, locals));
                                }
                            } else {
                                if (key = selectElement.val(), "?" == key) value = undefined; else if ("" === key) value = null; else if (trackFn) {
                                    for (trackIndex = 0; trackIndex < collection.length; trackIndex++) if (locals[valueName] = collection[trackIndex], 
                                    trackFn(scope, locals) == key) {
                                        value = valueFn(scope, locals);
                                        break;
                                    }
                                } else locals[valueName] = collection[key], keyName && (locals[keyName] = key), 
                                value = valueFn(scope, locals);
                                optionGroupsCache[0].length > 1 && optionGroupsCache[0][1].id !== key && (optionGroupsCache[0][1].selected = !1);
                            }
                            ctrl.$setViewValue(value);
                        });
                    }), ctrl.$render = render, scope.$watch(render);
                }
                if (ctrls[1]) {
                    for (var emptyOption, selectCtrl = ctrls[0], ngModelCtrl = ctrls[1], multiple = attr.multiple, optionsExp = attr.ngOptions, nullOption = !1, optionTemplate = jqLite(document.createElement("option")), optGroupTemplate = jqLite(document.createElement("optgroup")), unknownOption = optionTemplate.clone(), i = 0, children = element.children(), ii = children.length; ii > i; i++) if ("" === children[i].value) {
                        emptyOption = nullOption = children.eq(i);
                        break;
                    }
                    selectCtrl.init(ngModelCtrl, nullOption, unknownOption), multiple && (ngModelCtrl.$isEmpty = function(value) {
                        return !value || 0 === value.length;
                    }), optionsExp ? setupAsOptions(scope, element, ngModelCtrl) : multiple ? setupAsMultiple(scope, element, ngModelCtrl) : setupAsSingle(scope, element, ngModelCtrl, selectCtrl);
                }
            }
        };
    } ], optionDirective = [ "$interpolate", function($interpolate) {
        var nullSelectCtrl = {
            addOption: noop,
            removeOption: noop
        };
        return {
            restrict: "E",
            priority: 100,
            compile: function(element, attr) {
                if (isUndefined(attr.value)) {
                    var interpolateFn = $interpolate(element.text(), !0);
                    interpolateFn || attr.$set("value", element.text());
                }
                return function(scope, element, attr) {
                    var selectCtrlName = "$selectController", parent = element.parent(), selectCtrl = parent.data(selectCtrlName) || parent.parent().data(selectCtrlName);
                    selectCtrl && selectCtrl.databound ? element.prop("selected", !1) : selectCtrl = nullSelectCtrl, 
                    interpolateFn ? scope.$watch(interpolateFn, function(newVal, oldVal) {
                        attr.$set("value", newVal), newVal !== oldVal && selectCtrl.removeOption(oldVal), 
                        selectCtrl.addOption(newVal);
                    }) : selectCtrl.addOption(attr.value), element.on("$destroy", function() {
                        selectCtrl.removeOption(attr.value);
                    });
                };
            }
        };
    } ], styleDirective = valueFn({
        restrict: "E",
        terminal: !1
    });
    return window.angular.bootstrap ? void console.log("WARNING: Tried to load angular more than once.") : (bindJQuery(), 
    publishExternalAPI(angular), void jqLite(document).ready(function() {
        angularInit(document, bootstrap);
    }));
}(window, document), !angular.$$csp() && angular.element(document).find("head").prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}</style>'), 
function(window, angular) {
    "use strict";
    function makeSwipeDirective(directiveName, direction, eventName) {
        ngTouch.directive(directiveName, [ "$parse", "$swipe", function($parse, $swipe) {
            var MAX_VERTICAL_DISTANCE = 75, MAX_VERTICAL_RATIO = .3, MIN_HORIZONTAL_DISTANCE = 30;
            return function(scope, element, attr) {
                function validSwipe(coords) {
                    if (!startCoords) return !1;
                    var deltaY = Math.abs(coords.y - startCoords.y), deltaX = (coords.x - startCoords.x) * direction;
                    return valid && MAX_VERTICAL_DISTANCE > deltaY && deltaX > 0 && deltaX > MIN_HORIZONTAL_DISTANCE && MAX_VERTICAL_RATIO > deltaY / deltaX;
                }
                var startCoords, valid, swipeHandler = $parse(attr[directiveName]);
                $swipe.bind(element, {
                    start: function(coords) {
                        startCoords = coords, valid = !0;
                    },
                    cancel: function() {
                        valid = !1;
                    },
                    end: function(coords, event) {
                        validSwipe(coords) && scope.$apply(function() {
                            element.triggerHandler(eventName), swipeHandler(scope, {
                                $event: event
                            });
                        });
                    }
                });
            };
        } ]);
    }
    var ngTouch = angular.module("ngTouch", []);
    ngTouch.factory("$swipe", [ function() {
        function getCoordinates(event) {
            var touches = event.touches && event.touches.length ? event.touches : [ event ], e = event.changedTouches && event.changedTouches[0] || event.originalEvent && event.originalEvent.changedTouches && event.originalEvent.changedTouches[0] || touches[0].originalEvent || touches[0];
            return {
                x: e.clientX,
                y: e.clientY
            };
        }
        var MOVE_BUFFER_RADIUS = 10;
        return {
            bind: function(element, eventHandlers) {
                var totalX, totalY, startCoords, lastPos, active = !1;
                element.on("touchstart mousedown", function(event) {
                    startCoords = getCoordinates(event), active = !0, totalX = 0, totalY = 0, lastPos = startCoords, 
                    eventHandlers.start && eventHandlers.start(startCoords, event);
                }), element.on("touchcancel", function(event) {
                    active = !1, eventHandlers.cancel && eventHandlers.cancel(event);
                }), element.on("touchmove mousemove", function(event) {
                    if (active && startCoords) {
                        var coords = getCoordinates(event);
                        if (totalX += Math.abs(coords.x - lastPos.x), totalY += Math.abs(coords.y - lastPos.y), 
                        lastPos = coords, !(MOVE_BUFFER_RADIUS > totalX && MOVE_BUFFER_RADIUS > totalY)) return totalY > totalX ? (active = !1, 
                        void (eventHandlers.cancel && eventHandlers.cancel(event))) : (event.preventDefault(), 
                        void (eventHandlers.move && eventHandlers.move(coords, event)));
                    }
                }), element.on("touchend mouseup", function(event) {
                    active && (active = !1, eventHandlers.end && eventHandlers.end(getCoordinates(event), event));
                });
            }
        };
    } ]), ngTouch.config([ "$provide", function($provide) {
        $provide.decorator("ngClickDirective", [ "$delegate", function($delegate) {
            return $delegate.shift(), $delegate;
        } ]);
    } ]), ngTouch.directive("ngClick", [ "$parse", "$timeout", "$rootElement", function($parse, $timeout, $rootElement) {
        function hit(x1, y1, x2, y2) {
            return Math.abs(x1 - x2) < CLICKBUSTER_THRESHOLD && Math.abs(y1 - y2) < CLICKBUSTER_THRESHOLD;
        }
        function checkAllowableRegions(touchCoordinates, x, y) {
            for (var i = 0; i < touchCoordinates.length; i += 2) if (hit(touchCoordinates[i], touchCoordinates[i + 1], x, y)) return touchCoordinates.splice(i, i + 2), 
            !0;
            return !1;
        }
        function onClick(event) {
            if (!(Date.now() - lastPreventedTime > PREVENT_DURATION)) {
                var touches = event.touches && event.touches.length ? event.touches : [ event ], x = touches[0].clientX, y = touches[0].clientY;
                1 > x && 1 > y || lastLabelClickCoordinates && lastLabelClickCoordinates[0] === x && lastLabelClickCoordinates[1] === y || (lastLabelClickCoordinates && (lastLabelClickCoordinates = null), 
                "label" === event.target.tagName.toLowerCase() && (lastLabelClickCoordinates = [ x, y ]), 
                checkAllowableRegions(touchCoordinates, x, y) || (event.stopPropagation(), event.preventDefault(), 
                event.target && event.target.blur()));
            }
        }
        function onTouchStart(event) {
            var touches = event.touches && event.touches.length ? event.touches : [ event ], x = touches[0].clientX, y = touches[0].clientY;
            touchCoordinates.push(x, y), $timeout(function() {
                for (var i = 0; i < touchCoordinates.length; i += 2) if (touchCoordinates[i] == x && touchCoordinates[i + 1] == y) return void touchCoordinates.splice(i, i + 2);
            }, PREVENT_DURATION, !1);
        }
        function preventGhostClick(x, y) {
            touchCoordinates || ($rootElement[0].addEventListener("click", onClick, !0), $rootElement[0].addEventListener("touchstart", onTouchStart, !0), 
            touchCoordinates = []), lastPreventedTime = Date.now(), checkAllowableRegions(touchCoordinates, x, y);
        }
        var lastPreventedTime, touchCoordinates, lastLabelClickCoordinates, TAP_DURATION = 750, MOVE_TOLERANCE = 12, PREVENT_DURATION = 2500, CLICKBUSTER_THRESHOLD = 25, ACTIVE_CLASS_NAME = "ng-click-active";
        return function(scope, element, attr) {
            function resetState() {
                tapping = !1, element.removeClass(ACTIVE_CLASS_NAME);
            }
            var tapElement, startTime, touchStartX, touchStartY, clickHandler = $parse(attr.ngClick), tapping = !1;
            element.on("touchstart", function(event) {
                tapping = !0, tapElement = event.target ? event.target : event.srcElement, 3 == tapElement.nodeType && (tapElement = tapElement.parentNode), 
                element.addClass(ACTIVE_CLASS_NAME), startTime = Date.now();
                var touches = event.touches && event.touches.length ? event.touches : [ event ], e = touches[0].originalEvent || touches[0];
                touchStartX = e.clientX, touchStartY = e.clientY;
            }), element.on("touchmove", function() {
                resetState();
            }), element.on("touchcancel", function() {
                resetState();
            }), element.on("touchend", function(event) {
                var diff = Date.now() - startTime, touches = event.changedTouches && event.changedTouches.length ? event.changedTouches : event.touches && event.touches.length ? event.touches : [ event ], e = touches[0].originalEvent || touches[0], x = e.clientX, y = e.clientY, dist = Math.sqrt(Math.pow(x - touchStartX, 2) + Math.pow(y - touchStartY, 2));
                tapping && TAP_DURATION > diff && MOVE_TOLERANCE > dist && (preventGhostClick(x, y), 
                tapElement && tapElement.blur(), angular.isDefined(attr.disabled) && attr.disabled !== !1 || element.triggerHandler("click", [ event ])), 
                resetState();
            }), element.onclick = function() {}, element.on("click", function(event, touchend) {
                scope.$apply(function() {
                    clickHandler(scope, {
                        $event: touchend || event
                    });
                });
            }), element.on("mousedown", function() {
                element.addClass(ACTIVE_CLASS_NAME);
            }), element.on("mousemove mouseup", function() {
                element.removeClass(ACTIVE_CLASS_NAME);
            });
        };
    } ]), makeSwipeDirective("ngSwipeLeft", -1, "swipeleft"), makeSwipeDirective("ngSwipeRight", 1, "swiperight");
}(window, window.angular), function(window, angular, undefined) {
    "use strict";
    angular.module("ngAnimate", [ "ng" ]).factory("$$animateReflow", [ "$$rAF", "$document", function($$rAF, $document) {
        var bod = $document[0].body;
        return function(fn) {
            return $$rAF(function() {
                bod.offsetWidth + 1;
                fn();
            });
        };
    } ]).config([ "$provide", "$animateProvider", function($provide, $animateProvider) {
        function extractElementNode(element) {
            for (var i = 0; i < element.length; i++) {
                var elm = element[i];
                if (elm.nodeType == ELEMENT_NODE) return elm;
            }
        }
        function stripCommentsFromElement(element) {
            return angular.element(extractElementNode(element));
        }
        function isMatchingElement(elm1, elm2) {
            return extractElementNode(elm1) == extractElementNode(elm2);
        }
        var noop = angular.noop, forEach = angular.forEach, selectors = $animateProvider.$$selectors, ELEMENT_NODE = 1, NG_ANIMATE_STATE = "$$ngAnimateState", NG_ANIMATE_CLASS_NAME = "ng-animate", rootAnimateState = {
            running: !0
        };
        $provide.decorator("$animate", [ "$delegate", "$injector", "$sniffer", "$rootElement", "$$asyncCallback", "$rootScope", "$document", function($delegate, $injector, $sniffer, $rootElement, $$asyncCallback, $rootScope) {
            function lookup(name) {
                if (name) {
                    var matches = [], flagMap = {}, classes = name.substr(1).split(".");
                    ($sniffer.transitions || $sniffer.animations) && matches.push($injector.get(selectors[""]));
                    for (var i = 0; i < classes.length; i++) {
                        var klass = classes[i], selectorFactoryName = selectors[klass];
                        selectorFactoryName && !flagMap[klass] && (matches.push($injector.get(selectorFactoryName)), 
                        flagMap[klass] = !0);
                    }
                    return matches;
                }
            }
            function animationRunner(element, animationEvent, className) {
                function registerAnimation(animationFactory, event) {
                    var afterFn = animationFactory[event], beforeFn = animationFactory["before" + event.charAt(0).toUpperCase() + event.substr(1)];
                    return afterFn || beforeFn ? ("leave" == event && (beforeFn = afterFn, afterFn = null), 
                    after.push({
                        event: event,
                        fn: afterFn
                    }), before.push({
                        event: event,
                        fn: beforeFn
                    }), !0) : void 0;
                }
                function run(fns, cancellations, allCompleteFn) {
                    function afterAnimationComplete(index) {
                        if (cancellations) {
                            if ((cancellations[index] || noop)(), ++count < animations.length) return;
                            cancellations = null;
                        }
                        allCompleteFn();
                    }
                    var animations = [];
                    forEach(fns, function(animation) {
                        animation.fn && animations.push(animation);
                    });
                    var count = 0;
                    forEach(animations, function(animation, index) {
                        var progress = function() {
                            afterAnimationComplete(index);
                        };
                        switch (animation.event) {
                          case "setClass":
                            cancellations.push(animation.fn(element, classNameAdd, classNameRemove, progress));
                            break;

                          case "addClass":
                            cancellations.push(animation.fn(element, classNameAdd || className, progress));
                            break;

                          case "removeClass":
                            cancellations.push(animation.fn(element, classNameRemove || className, progress));
                            break;

                          default:
                            cancellations.push(animation.fn(element, progress));
                        }
                    }), cancellations && 0 === cancellations.length && allCompleteFn();
                }
                var node = element[0];
                if (node) {
                    var classNameAdd, classNameRemove, isSetClassOperation = "setClass" == animationEvent, isClassBased = isSetClassOperation || "addClass" == animationEvent || "removeClass" == animationEvent;
                    angular.isArray(className) && (classNameAdd = className[0], classNameRemove = className[1], 
                    className = classNameAdd + " " + classNameRemove);
                    var currentClassName = element.attr("class"), classes = currentClassName + " " + className;
                    if (isAnimatableClassName(classes)) {
                        var beforeComplete = noop, beforeCancel = [], before = [], afterComplete = noop, afterCancel = [], after = [], animationLookup = (" " + classes).replace(/\s+/g, ".");
                        return forEach(lookup(animationLookup), function(animationFactory) {
                            var created = registerAnimation(animationFactory, animationEvent);
                            !created && isSetClassOperation && (registerAnimation(animationFactory, "addClass"), 
                            registerAnimation(animationFactory, "removeClass"));
                        }), {
                            node: node,
                            event: animationEvent,
                            className: className,
                            isClassBased: isClassBased,
                            isSetClassOperation: isSetClassOperation,
                            before: function(allCompleteFn) {
                                beforeComplete = allCompleteFn, run(before, beforeCancel, function() {
                                    beforeComplete = noop, allCompleteFn();
                                });
                            },
                            after: function(allCompleteFn) {
                                afterComplete = allCompleteFn, run(after, afterCancel, function() {
                                    afterComplete = noop, allCompleteFn();
                                });
                            },
                            cancel: function() {
                                beforeCancel && (forEach(beforeCancel, function(cancelFn) {
                                    (cancelFn || noop)(!0);
                                }), beforeComplete(!0)), afterCancel && (forEach(afterCancel, function(cancelFn) {
                                    (cancelFn || noop)(!0);
                                }), afterComplete(!0));
                            }
                        };
                    }
                }
            }
            function performAnimation(animationEvent, className, element, parentElement, afterElement, domOperation, doneCallback) {
                function fireDOMCallback(animationPhase) {
                    var eventName = "$animate:" + animationPhase;
                    elementEvents && elementEvents[eventName] && elementEvents[eventName].length > 0 && $$asyncCallback(function() {
                        element.triggerHandler(eventName, {
                            event: animationEvent,
                            className: className
                        });
                    });
                }
                function fireBeforeCallbackAsync() {
                    fireDOMCallback("before");
                }
                function fireAfterCallbackAsync() {
                    fireDOMCallback("after");
                }
                function fireDoneCallbackAsync() {
                    fireDOMCallback("close"), doneCallback && $$asyncCallback(function() {
                        doneCallback();
                    });
                }
                function fireDOMOperation() {
                    fireDOMOperation.hasBeenRun || (fireDOMOperation.hasBeenRun = !0, domOperation());
                }
                function closeAnimation() {
                    if (!closeAnimation.hasBeenRun) {
                        closeAnimation.hasBeenRun = !0;
                        var data = element.data(NG_ANIMATE_STATE);
                        data && (runner && runner.isClassBased ? cleanup(element, className) : ($$asyncCallback(function() {
                            var data = element.data(NG_ANIMATE_STATE) || {};
                            localAnimationCount == data.index && cleanup(element, className, animationEvent);
                        }), element.data(NG_ANIMATE_STATE, data))), fireDoneCallbackAsync();
                    }
                }
                var runner = animationRunner(element, animationEvent, className);
                if (!runner) return fireDOMOperation(), fireBeforeCallbackAsync(), fireAfterCallbackAsync(), 
                void closeAnimation();
                className = runner.className;
                var elementEvents = angular.element._data(runner.node);
                elementEvents = elementEvents && elementEvents.events, parentElement || (parentElement = afterElement ? afterElement.parent() : element.parent());
                var ngAnimateState = element.data(NG_ANIMATE_STATE) || {}, runningAnimations = ngAnimateState.active || {}, totalActiveAnimations = ngAnimateState.totalActive || 0, lastAnimation = ngAnimateState.last, skipAnimations = runner.isClassBased ? ngAnimateState.disabled || lastAnimation && !lastAnimation.isClassBased : !1;
                if (skipAnimations || animationsDisabled(element, parentElement)) return fireDOMOperation(), 
                fireBeforeCallbackAsync(), fireAfterCallbackAsync(), void closeAnimation();
                var skipAnimation = !1;
                if (totalActiveAnimations > 0) {
                    var animationsToCancel = [];
                    if (runner.isClassBased) {
                        if ("setClass" == lastAnimation.event) animationsToCancel.push(lastAnimation), cleanup(element, className); else if (runningAnimations[className]) {
                            var current = runningAnimations[className];
                            current.event == animationEvent ? skipAnimation = !0 : (animationsToCancel.push(current), 
                            cleanup(element, className));
                        }
                    } else if ("leave" == animationEvent && runningAnimations["ng-leave"]) skipAnimation = !0; else {
                        for (var klass in runningAnimations) animationsToCancel.push(runningAnimations[klass]), 
                        cleanup(element, klass);
                        runningAnimations = {}, totalActiveAnimations = 0;
                    }
                    animationsToCancel.length > 0 && forEach(animationsToCancel, function(operation) {
                        operation.cancel();
                    });
                }
                if (!runner.isClassBased || runner.isSetClassOperation || skipAnimation || (skipAnimation = "addClass" == animationEvent == element.hasClass(className)), 
                skipAnimation) return fireDOMOperation(), fireBeforeCallbackAsync(), fireAfterCallbackAsync(), 
                void fireDoneCallbackAsync();
                "leave" == animationEvent && element.one("$destroy", function() {
                    var element = angular.element(this), state = element.data(NG_ANIMATE_STATE);
                    if (state) {
                        var activeLeaveAnimation = state.active["ng-leave"];
                        activeLeaveAnimation && (activeLeaveAnimation.cancel(), cleanup(element, "ng-leave"));
                    }
                }), element.addClass(NG_ANIMATE_CLASS_NAME);
                var localAnimationCount = globalAnimationCounter++;
                totalActiveAnimations++, runningAnimations[className] = runner, element.data(NG_ANIMATE_STATE, {
                    last: runner,
                    active: runningAnimations,
                    index: localAnimationCount,
                    totalActive: totalActiveAnimations
                }), fireBeforeCallbackAsync(), runner.before(function(cancelled) {
                    var data = element.data(NG_ANIMATE_STATE);
                    cancelled = cancelled || !data || !data.active[className] || runner.isClassBased && data.active[className].event != animationEvent, 
                    fireDOMOperation(), cancelled === !0 ? closeAnimation() : (fireAfterCallbackAsync(), 
                    runner.after(closeAnimation));
                });
            }
            function cancelChildAnimations(element) {
                var node = extractElementNode(element);
                if (node) {
                    var nodes = angular.isFunction(node.getElementsByClassName) ? node.getElementsByClassName(NG_ANIMATE_CLASS_NAME) : node.querySelectorAll("." + NG_ANIMATE_CLASS_NAME);
                    forEach(nodes, function(element) {
                        element = angular.element(element);
                        var data = element.data(NG_ANIMATE_STATE);
                        data && data.active && forEach(data.active, function(runner) {
                            runner.cancel();
                        });
                    });
                }
            }
            function cleanup(element, className) {
                if (isMatchingElement(element, $rootElement)) rootAnimateState.disabled || (rootAnimateState.running = !1, 
                rootAnimateState.structural = !1); else if (className) {
                    var data = element.data(NG_ANIMATE_STATE) || {}, removeAnimations = className === !0;
                    !removeAnimations && data.active && data.active[className] && (data.totalActive--, 
                    delete data.active[className]), (removeAnimations || !data.totalActive) && (element.removeClass(NG_ANIMATE_CLASS_NAME), 
                    element.removeData(NG_ANIMATE_STATE));
                }
            }
            function animationsDisabled(element, parentElement) {
                if (rootAnimateState.disabled) return !0;
                if (isMatchingElement(element, $rootElement)) return rootAnimateState.disabled || rootAnimateState.running;
                do {
                    if (0 === parentElement.length) break;
                    var isRoot = isMatchingElement(parentElement, $rootElement), state = isRoot ? rootAnimateState : parentElement.data(NG_ANIMATE_STATE) || {}, result = state.disabled || state.running ? !0 : state.last && !state.last.isClassBased;
                    if (isRoot || result) return result;
                    if (isRoot) return !0;
                } while (parentElement = parentElement.parent());
                return !0;
            }
            var globalAnimationCounter = 0;
            $rootElement.data(NG_ANIMATE_STATE, rootAnimateState), $rootScope.$$postDigest(function() {
                $rootScope.$$postDigest(function() {
                    rootAnimateState.running = !1;
                });
            });
            var classNameFilter = $animateProvider.classNameFilter(), isAnimatableClassName = classNameFilter ? function(className) {
                return classNameFilter.test(className);
            } : function() {
                return !0;
            };
            return {
                enter: function(element, parentElement, afterElement, doneCallback) {
                    this.enabled(!1, element), $delegate.enter(element, parentElement, afterElement), 
                    $rootScope.$$postDigest(function() {
                        element = stripCommentsFromElement(element), performAnimation("enter", "ng-enter", element, parentElement, afterElement, noop, doneCallback);
                    });
                },
                leave: function(element, doneCallback) {
                    cancelChildAnimations(element), this.enabled(!1, element), $rootScope.$$postDigest(function() {
                        performAnimation("leave", "ng-leave", stripCommentsFromElement(element), null, null, function() {
                            $delegate.leave(element);
                        }, doneCallback);
                    });
                },
                move: function(element, parentElement, afterElement, doneCallback) {
                    cancelChildAnimations(element), this.enabled(!1, element), $delegate.move(element, parentElement, afterElement), 
                    $rootScope.$$postDigest(function() {
                        element = stripCommentsFromElement(element), performAnimation("move", "ng-move", element, parentElement, afterElement, noop, doneCallback);
                    });
                },
                addClass: function(element, className, doneCallback) {
                    element = stripCommentsFromElement(element), performAnimation("addClass", className, element, null, null, function() {
                        $delegate.addClass(element, className);
                    }, doneCallback);
                },
                removeClass: function(element, className, doneCallback) {
                    element = stripCommentsFromElement(element), performAnimation("removeClass", className, element, null, null, function() {
                        $delegate.removeClass(element, className);
                    }, doneCallback);
                },
                setClass: function(element, add, remove, doneCallback) {
                    element = stripCommentsFromElement(element), performAnimation("setClass", [ add, remove ], element, null, null, function() {
                        $delegate.setClass(element, add, remove);
                    }, doneCallback);
                },
                enabled: function(value, element) {
                    switch (arguments.length) {
                      case 2:
                        if (value) cleanup(element); else {
                            var data = element.data(NG_ANIMATE_STATE) || {};
                            data.disabled = !0, element.data(NG_ANIMATE_STATE, data);
                        }
                        break;

                      case 1:
                        rootAnimateState.disabled = !value;
                        break;

                      default:
                        value = !rootAnimateState.disabled;
                    }
                    return !!value;
                }
            };
        } ]), $animateProvider.register("", [ "$window", "$sniffer", "$timeout", "$$animateReflow", function($window, $sniffer, $timeout, $$animateReflow) {
            function afterReflow(element, callback) {
                cancelAnimationReflow && cancelAnimationReflow(), animationReflowQueue.push(callback), 
                cancelAnimationReflow = $$animateReflow(function() {
                    forEach(animationReflowQueue, function(fn) {
                        fn();
                    }), animationReflowQueue = [], cancelAnimationReflow = null, lookupCache = {};
                });
            }
            function animationCloseHandler(element, totalTime) {
                var node = extractElementNode(element);
                element = angular.element(node), animationElementQueue.push(element);
                var futureTimestamp = Date.now() + totalTime;
                closingTimestamp >= futureTimestamp || ($timeout.cancel(closingTimer), closingTimestamp = futureTimestamp, 
                closingTimer = $timeout(function() {
                    closeAllAnimations(animationElementQueue), animationElementQueue = [];
                }, totalTime, !1));
            }
            function closeAllAnimations(elements) {
                forEach(elements, function(element) {
                    var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);
                    elementData && (elementData.closeAnimationFn || noop)();
                });
            }
            function getElementAnimationDetails(element, cacheKey) {
                var data = cacheKey ? lookupCache[cacheKey] : null;
                if (!data) {
                    var transitionDelayStyle, animationDelayStyle, transitionDurationStyle, transitionPropertyStyle, transitionDuration = 0, transitionDelay = 0, animationDuration = 0, animationDelay = 0;
                    forEach(element, function(element) {
                        if (element.nodeType == ELEMENT_NODE) {
                            var elementStyles = $window.getComputedStyle(element) || {};
                            transitionDurationStyle = elementStyles[TRANSITION_PROP + DURATION_KEY], transitionDuration = Math.max(parseMaxTime(transitionDurationStyle), transitionDuration), 
                            transitionPropertyStyle = elementStyles[TRANSITION_PROP + PROPERTY_KEY], transitionDelayStyle = elementStyles[TRANSITION_PROP + DELAY_KEY], 
                            transitionDelay = Math.max(parseMaxTime(transitionDelayStyle), transitionDelay), 
                            animationDelayStyle = elementStyles[ANIMATION_PROP + DELAY_KEY], animationDelay = Math.max(parseMaxTime(animationDelayStyle), animationDelay);
                            var aDuration = parseMaxTime(elementStyles[ANIMATION_PROP + DURATION_KEY]);
                            aDuration > 0 && (aDuration *= parseInt(elementStyles[ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY], 10) || 1), 
                            animationDuration = Math.max(aDuration, animationDuration);
                        }
                    }), data = {
                        total: 0,
                        transitionPropertyStyle: transitionPropertyStyle,
                        transitionDurationStyle: transitionDurationStyle,
                        transitionDelayStyle: transitionDelayStyle,
                        transitionDelay: transitionDelay,
                        transitionDuration: transitionDuration,
                        animationDelayStyle: animationDelayStyle,
                        animationDelay: animationDelay,
                        animationDuration: animationDuration
                    }, cacheKey && (lookupCache[cacheKey] = data);
                }
                return data;
            }
            function parseMaxTime(str) {
                var maxValue = 0, values = angular.isString(str) ? str.split(/\s*,\s*/) : [];
                return forEach(values, function(value) {
                    maxValue = Math.max(parseFloat(value) || 0, maxValue);
                }), maxValue;
            }
            function getCacheKey(element) {
                var parentElement = element.parent(), parentID = parentElement.data(NG_ANIMATE_PARENT_KEY);
                return parentID || (parentElement.data(NG_ANIMATE_PARENT_KEY, ++parentCounter), 
                parentID = parentCounter), parentID + "-" + extractElementNode(element).getAttribute("class");
            }
            function animateSetup(animationEvent, element, className) {
                var structural = [ "ng-enter", "ng-leave", "ng-move" ].indexOf(className) >= 0, cacheKey = getCacheKey(element), eventCacheKey = cacheKey + " " + className, itemIndex = lookupCache[eventCacheKey] ? ++lookupCache[eventCacheKey].total : 0, stagger = {};
                if (itemIndex > 0) {
                    var staggerClassName = className + "-stagger", staggerCacheKey = cacheKey + " " + staggerClassName, applyClasses = !lookupCache[staggerCacheKey];
                    applyClasses && element.addClass(staggerClassName), stagger = getElementAnimationDetails(element, staggerCacheKey), 
                    applyClasses && element.removeClass(staggerClassName);
                }
                element.addClass(className);
                var formerData = element.data(NG_ANIMATE_CSS_DATA_KEY) || {}, timings = getElementAnimationDetails(element, eventCacheKey), transitionDuration = timings.transitionDuration, animationDuration = timings.animationDuration;
                if (structural && 0 === transitionDuration && 0 === animationDuration) return element.removeClass(className), 
                !1;
                var blockTransition = structural && transitionDuration > 0, blockAnimation = animationDuration > 0 && stagger.animationDelay > 0 && 0 === stagger.animationDuration;
                element.data(NG_ANIMATE_CSS_DATA_KEY, {
                    stagger: stagger,
                    cacheKey: eventCacheKey,
                    running: formerData.running || 0,
                    itemIndex: itemIndex,
                    blockTransition: blockTransition,
                    blockAnimation: blockAnimation,
                    closeAnimationFn: noop
                });
                var node = extractElementNode(element);
                return blockTransition && (node.style[TRANSITION_PROP + PROPERTY_KEY] = "none"), 
                blockAnimation && (node.style[ANIMATION_PROP] = "none 0s"), !0;
            }
            function animateRun(animationEvent, element, className, activeAnimationComplete) {
                function onEnd() {
                    element.off(css3AnimationEvents, onAnimationProgress), element.removeClass(activeClassName), 
                    animateClose(element, className);
                    var node = extractElementNode(element);
                    for (var i in appliedStyles) node.style.removeProperty(appliedStyles[i]);
                }
                function onAnimationProgress(event) {
                    event.stopPropagation();
                    var ev = event.originalEvent || event, timeStamp = ev.$manualTimeStamp || ev.timeStamp || Date.now(), elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));
                    Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration && activeAnimationComplete();
                }
                var node = extractElementNode(element), elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);
                if (-1 == node.getAttribute("class").indexOf(className) || !elementData) return void activeAnimationComplete();
                elementData.blockTransition && (node.style[TRANSITION_PROP + PROPERTY_KEY] = ""), 
                elementData.blockAnimation && (node.style[ANIMATION_PROP] = "");
                var activeClassName = "";
                forEach(className.split(" "), function(klass, i) {
                    activeClassName += (i > 0 ? " " : "") + klass + "-active";
                }), element.addClass(activeClassName);
                var eventCacheKey = elementData.eventCacheKey + " " + activeClassName, timings = getElementAnimationDetails(element, eventCacheKey), maxDuration = Math.max(timings.transitionDuration, timings.animationDuration);
                if (0 === maxDuration) return element.removeClass(activeClassName), animateClose(element, className), 
                void activeAnimationComplete();
                var maxDelay = Math.max(timings.transitionDelay, timings.animationDelay), stagger = elementData.stagger, itemIndex = elementData.itemIndex, maxDelayTime = maxDelay * ONE_SECOND, style = "", appliedStyles = [];
                if (timings.transitionDuration > 0) {
                    var propertyStyle = timings.transitionPropertyStyle;
                    -1 == propertyStyle.indexOf("all") && (style += CSS_PREFIX + "transition-property: " + propertyStyle + ";", 
                    style += CSS_PREFIX + "transition-duration: " + timings.transitionDurationStyle + ";", 
                    appliedStyles.push(CSS_PREFIX + "transition-property"), appliedStyles.push(CSS_PREFIX + "transition-duration"));
                }
                if (itemIndex > 0) {
                    if (stagger.transitionDelay > 0 && 0 === stagger.transitionDuration) {
                        var delayStyle = timings.transitionDelayStyle;
                        style += CSS_PREFIX + "transition-delay: " + prepareStaggerDelay(delayStyle, stagger.transitionDelay, itemIndex) + "; ", 
                        appliedStyles.push(CSS_PREFIX + "transition-delay");
                    }
                    stagger.animationDelay > 0 && 0 === stagger.animationDuration && (style += CSS_PREFIX + "animation-delay: " + prepareStaggerDelay(timings.animationDelayStyle, stagger.animationDelay, itemIndex) + "; ", 
                    appliedStyles.push(CSS_PREFIX + "animation-delay"));
                }
                if (appliedStyles.length > 0) {
                    var oldStyle = node.getAttribute("style") || "";
                    node.setAttribute("style", oldStyle + " " + style);
                }
                var startTime = Date.now(), css3AnimationEvents = ANIMATIONEND_EVENT + " " + TRANSITIONEND_EVENT;
                element.on(css3AnimationEvents, onAnimationProgress), elementData.closeAnimationFn = function() {
                    onEnd(), activeAnimationComplete();
                };
                var staggerTime = itemIndex * (Math.max(stagger.animationDelay, stagger.transitionDelay) || 0), animationTime = (maxDelay + maxDuration) * CLOSING_TIME_BUFFER, totalTime = (staggerTime + animationTime) * ONE_SECOND;
                return elementData.running++, animationCloseHandler(element, totalTime), onEnd;
            }
            function prepareStaggerDelay(delayStyle, staggerDelay, index) {
                var style = "";
                return forEach(delayStyle.split(","), function(val, i) {
                    style += (i > 0 ? "," : "") + (index * staggerDelay + parseInt(val, 10)) + "s";
                }), style;
            }
            function animateBefore(animationEvent, element, className, calculationDecorator) {
                return animateSetup(animationEvent, element, className, calculationDecorator) ? function(cancelled) {
                    cancelled && animateClose(element, className);
                } : void 0;
            }
            function animateAfter(animationEvent, element, className, afterAnimationComplete) {
                return element.data(NG_ANIMATE_CSS_DATA_KEY) ? animateRun(animationEvent, element, className, afterAnimationComplete) : (animateClose(element, className), 
                void afterAnimationComplete());
            }
            function animate(animationEvent, element, className, animationComplete) {
                var preReflowCancellation = animateBefore(animationEvent, element, className);
                if (!preReflowCancellation) return void animationComplete();
                var cancel = preReflowCancellation;
                return afterReflow(element, function() {
                    cancel = animateAfter(animationEvent, element, className, animationComplete);
                }), function(cancelled) {
                    (cancel || noop)(cancelled);
                };
            }
            function animateClose(element, className) {
                element.removeClass(className);
                var data = element.data(NG_ANIMATE_CSS_DATA_KEY);
                data && (data.running && data.running--, data.running && 0 !== data.running || element.removeData(NG_ANIMATE_CSS_DATA_KEY));
            }
            function suffixClasses(classes, suffix) {
                var className = "";
                return classes = angular.isArray(classes) ? classes : classes.split(/\s+/), forEach(classes, function(klass, i) {
                    klass && klass.length > 0 && (className += (i > 0 ? " " : "") + klass + suffix);
                }), className;
            }
            var TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT, CSS_PREFIX = "";
            window.ontransitionend === undefined && window.onwebkittransitionend !== undefined ? (CSS_PREFIX = "-webkit-", 
            TRANSITION_PROP = "WebkitTransition", TRANSITIONEND_EVENT = "webkitTransitionEnd transitionend") : (TRANSITION_PROP = "transition", 
            TRANSITIONEND_EVENT = "transitionend"), window.onanimationend === undefined && window.onwebkitanimationend !== undefined ? (CSS_PREFIX = "-webkit-", 
            ANIMATION_PROP = "WebkitAnimation", ANIMATIONEND_EVENT = "webkitAnimationEnd animationend") : (ANIMATION_PROP = "animation", 
            ANIMATIONEND_EVENT = "animationend");
            var cancelAnimationReflow, DURATION_KEY = "Duration", PROPERTY_KEY = "Property", DELAY_KEY = "Delay", ANIMATION_ITERATION_COUNT_KEY = "IterationCount", NG_ANIMATE_PARENT_KEY = "$$ngAnimateKey", NG_ANIMATE_CSS_DATA_KEY = "$$ngAnimateCSS3Data", ELAPSED_TIME_MAX_DECIMAL_PLACES = 3, CLOSING_TIME_BUFFER = 1.5, ONE_SECOND = 1e3, lookupCache = {}, parentCounter = 0, animationReflowQueue = [], closingTimer = null, closingTimestamp = 0, animationElementQueue = [];
            return {
                enter: function(element, animationCompleted) {
                    return animate("enter", element, "ng-enter", animationCompleted);
                },
                leave: function(element, animationCompleted) {
                    return animate("leave", element, "ng-leave", animationCompleted);
                },
                move: function(element, animationCompleted) {
                    return animate("move", element, "ng-move", animationCompleted);
                },
                beforeSetClass: function(element, add, remove, animationCompleted) {
                    var className = suffixClasses(remove, "-remove") + " " + suffixClasses(add, "-add"), cancellationMethod = animateBefore("setClass", element, className);
                    return cancellationMethod ? (afterReflow(element, animationCompleted), cancellationMethod) : void animationCompleted();
                },
                beforeAddClass: function(element, className, animationCompleted) {
                    var cancellationMethod = animateBefore("addClass", element, suffixClasses(className, "-add"));
                    return cancellationMethod ? (afterReflow(element, animationCompleted), cancellationMethod) : void animationCompleted();
                },
                beforeRemoveClass: function(element, className, animationCompleted) {
                    var cancellationMethod = animateBefore("removeClass", element, suffixClasses(className, "-remove"));
                    return cancellationMethod ? (afterReflow(element, animationCompleted), cancellationMethod) : void animationCompleted();
                },
                setClass: function(element, add, remove, animationCompleted) {
                    remove = suffixClasses(remove, "-remove"), add = suffixClasses(add, "-add");
                    var className = remove + " " + add;
                    return animateAfter("setClass", element, className, animationCompleted);
                },
                addClass: function(element, className, animationCompleted) {
                    return animateAfter("addClass", element, suffixClasses(className, "-add"), animationCompleted);
                },
                removeClass: function(element, className, animationCompleted) {
                    return animateAfter("removeClass", element, suffixClasses(className, "-remove"), animationCompleted);
                }
            };
        } ]);
    } ]);
}(window, window.angular), function(window, angular) {
    "use strict";
    function $SanitizeProvider() {
        this.$get = [ "$$sanitizeUri", function($$sanitizeUri) {
            return function(html) {
                var buf = [];
                return htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {
                    return !/^unsafe/.test($$sanitizeUri(uri, isImage));
                })), buf.join("");
            };
        } ];
    }
    function sanitizeText(chars) {
        var buf = [], writer = htmlSanitizeWriter(buf, angular.noop);
        return writer.chars(chars), buf.join("");
    }
    function makeMap(str) {
        var i, obj = {}, items = str.split(",");
        for (i = 0; i < items.length; i++) obj[items[i]] = !0;
        return obj;
    }
    function htmlParser(html, handler) {
        function parseStartTag(tag, tagName, rest, unary) {
            if (tagName = angular.lowercase(tagName), blockElements[tagName]) for (;stack.last() && inlineElements[stack.last()]; ) parseEndTag("", stack.last());
            optionalEndTagElements[tagName] && stack.last() == tagName && parseEndTag("", tagName), 
            unary = voidElements[tagName] || !!unary, unary || stack.push(tagName);
            var attrs = {};
            rest.replace(ATTR_REGEXP, function(match, name, doubleQuotedValue, singleQuotedValue, unquotedValue) {
                var value = doubleQuotedValue || singleQuotedValue || unquotedValue || "";
                attrs[name] = decodeEntities(value);
            }), handler.start && handler.start(tagName, attrs, unary);
        }
        function parseEndTag(tag, tagName) {
            var i, pos = 0;
            if (tagName = angular.lowercase(tagName)) for (pos = stack.length - 1; pos >= 0 && stack[pos] != tagName; pos--) ;
            if (pos >= 0) {
                for (i = stack.length - 1; i >= pos; i--) handler.end && handler.end(stack[i]);
                stack.length = pos;
            }
        }
        var index, chars, match, stack = [], last = html;
        for (stack.last = function() {
            return stack[stack.length - 1];
        }; html; ) {
            if (chars = !0, stack.last() && specialElements[stack.last()]) html = html.replace(new RegExp("(.*)<\\s*\\/\\s*" + stack.last() + "[^>]*>", "i"), function(all, text) {
                return text = text.replace(COMMENT_REGEXP, "$1").replace(CDATA_REGEXP, "$1"), handler.chars && handler.chars(decodeEntities(text)), 
                "";
            }), parseEndTag("", stack.last()); else if (0 === html.indexOf("<!--") ? (index = html.indexOf("--", 4), 
            index >= 0 && html.lastIndexOf("-->", index) === index && (handler.comment && handler.comment(html.substring(4, index)), 
            html = html.substring(index + 3), chars = !1)) : DOCTYPE_REGEXP.test(html) ? (match = html.match(DOCTYPE_REGEXP), 
            match && (html = html.replace(match[0], ""), chars = !1)) : BEGING_END_TAGE_REGEXP.test(html) ? (match = html.match(END_TAG_REGEXP), 
            match && (html = html.substring(match[0].length), match[0].replace(END_TAG_REGEXP, parseEndTag), 
            chars = !1)) : BEGIN_TAG_REGEXP.test(html) && (match = html.match(START_TAG_REGEXP), 
            match && (html = html.substring(match[0].length), match[0].replace(START_TAG_REGEXP, parseStartTag), 
            chars = !1)), chars) {
                index = html.indexOf("<");
                var text = 0 > index ? html : html.substring(0, index);
                html = 0 > index ? "" : html.substring(index), handler.chars && handler.chars(decodeEntities(text));
            }
            if (html == last) throw $sanitizeMinErr("badparse", "The sanitizer was unable to parse the following block of html: {0}", html);
            last = html;
        }
        parseEndTag();
    }
    function decodeEntities(value) {
        if (!value) return "";
        var parts = spaceRe.exec(value), spaceBefore = parts[1], spaceAfter = parts[3], content = parts[2];
        return content && (hiddenPre.innerHTML = content.replace(/</g, "&lt;"), content = "textContent" in hiddenPre ? hiddenPre.textContent : hiddenPre.innerText), 
        spaceBefore + content + spaceAfter;
    }
    function encodeEntities(value) {
        return value.replace(/&/g, "&amp;").replace(NON_ALPHANUMERIC_REGEXP, function(value) {
            return "&#" + value.charCodeAt(0) + ";";
        }).replace(/</g, "&lt;").replace(/>/g, "&gt;");
    }
    function htmlSanitizeWriter(buf, uriValidator) {
        var ignore = !1, out = angular.bind(buf, buf.push);
        return {
            start: function(tag, attrs, unary) {
                tag = angular.lowercase(tag), !ignore && specialElements[tag] && (ignore = tag), 
                ignore || validElements[tag] !== !0 || (out("<"), out(tag), angular.forEach(attrs, function(value, key) {
                    var lkey = angular.lowercase(key), isImage = "img" === tag && "src" === lkey || "background" === lkey;
                    validAttrs[lkey] !== !0 || uriAttrs[lkey] === !0 && !uriValidator(value, isImage) || (out(" "), 
                    out(key), out('="'), out(encodeEntities(value)), out('"'));
                }), out(unary ? "/>" : ">"));
            },
            end: function(tag) {
                tag = angular.lowercase(tag), ignore || validElements[tag] !== !0 || (out("</"), 
                out(tag), out(">")), tag == ignore && (ignore = !1);
            },
            chars: function(chars) {
                ignore || out(encodeEntities(chars));
            }
        };
    }
    var $sanitizeMinErr = angular.$$minErr("$sanitize"), START_TAG_REGEXP = /^<\s*([\w:-]+)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*>/, END_TAG_REGEXP = /^<\s*\/\s*([\w:-]+)[^>]*>/, ATTR_REGEXP = /([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g, BEGIN_TAG_REGEXP = /^</, BEGING_END_TAGE_REGEXP = /^<\s*\//, COMMENT_REGEXP = /<!--(.*?)-->/g, DOCTYPE_REGEXP = /<!DOCTYPE([^>]*?)>/i, CDATA_REGEXP = /<!\[CDATA\[(.*?)]]>/g, NON_ALPHANUMERIC_REGEXP = /([^\#-~| |!])/g, voidElements = makeMap("area,br,col,hr,img,wbr"), optionalEndTagBlockElements = makeMap("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"), optionalEndTagInlineElements = makeMap("rp,rt"), optionalEndTagElements = angular.extend({}, optionalEndTagInlineElements, optionalEndTagBlockElements), blockElements = angular.extend({}, optionalEndTagBlockElements, makeMap("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul")), inlineElements = angular.extend({}, optionalEndTagInlineElements, makeMap("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")), specialElements = makeMap("script,style"), validElements = angular.extend({}, voidElements, blockElements, inlineElements, optionalEndTagElements), uriAttrs = makeMap("background,cite,href,longdesc,src,usemap"), validAttrs = angular.extend({}, uriAttrs, makeMap("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,target,title,type,valign,value,vspace,width")), hiddenPre = document.createElement("pre"), spaceRe = /^(\s*)([\s\S]*?)(\s*)$/;
    angular.module("ngSanitize", []).provider("$sanitize", $SanitizeProvider), angular.module("ngSanitize").filter("linky", [ "$sanitize", function($sanitize) {
        var LINKY_URL_REGEXP = /((ftp|https?):\/\/|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>]/, MAILTO_REGEXP = /^mailto:/;
        return function(text, target) {
            function addText(text) {
                text && html.push(sanitizeText(text));
            }
            function addLink(url, text) {
                html.push("<a "), angular.isDefined(target) && (html.push('target="'), html.push(target), 
                html.push('" ')), html.push('href="'), html.push(url), html.push('">'), addText(text), 
                html.push("</a>");
            }
            if (!text) return text;
            for (var match, url, i, raw = text, html = []; match = raw.match(LINKY_URL_REGEXP); ) url = match[0], 
            match[2] == match[3] && (url = "mailto:" + url), i = match.index, addText(raw.substr(0, i)), 
            addLink(url, match[0].replace(MAILTO_REGEXP, "")), raw = raw.substring(i + match[0].length);
            return addText(raw), $sanitize(html.join(""));
        };
    } ]);
}(window, window.angular), function(window, angular, undefined) {
    "use strict";
    function isValidDottedPath(path) {
        return null != path && "" !== path && "hasOwnProperty" !== path && MEMBER_NAME_REGEX.test("." + path);
    }
    function lookupDottedPath(obj, path) {
        if (!isValidDottedPath(path)) throw $resourceMinErr("badmember", 'Dotted member path "@{0}" is invalid.', path);
        for (var keys = path.split("."), i = 0, ii = keys.length; ii > i && obj !== undefined; i++) {
            var key = keys[i];
            obj = null !== obj ? obj[key] : undefined;
        }
        return obj;
    }
    function shallowClearAndCopy(src, dst) {
        dst = dst || {}, angular.forEach(dst, function(value, key) {
            delete dst[key];
        });
        for (var key in src) !src.hasOwnProperty(key) || "$" === key.charAt(0) && "$" === key.charAt(1) || (dst[key] = src[key]);
        return dst;
    }
    var $resourceMinErr = angular.$$minErr("$resource"), MEMBER_NAME_REGEX = /^(\.[a-zA-Z_$][0-9a-zA-Z_$]*)+$/;
    angular.module("ngResource", [ "ng" ]).provider("$resource", function() {
        var provider = this;
        this.defaults = {
            stripTrailingSlashes: !0,
            actions: {
                get: {
                    method: "GET"
                },
                save: {
                    method: "POST"
                },
                query: {
                    method: "GET",
                    isArray: !0
                },
                remove: {
                    method: "DELETE"
                },
                "delete": {
                    method: "DELETE"
                }
            }
        }, this.$get = [ "$http", "$q", function($http, $q) {
            function encodeUriSegment(val) {
                return encodeUriQuery(val, !0).replace(/%26/gi, "&").replace(/%3D/gi, "=").replace(/%2B/gi, "+");
            }
            function encodeUriQuery(val, pctEncodeSpaces) {
                return encodeURIComponent(val).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, pctEncodeSpaces ? "%20" : "+");
            }
            function Route(template, defaults) {
                this.template = template, this.defaults = extend({}, provider.defaults, defaults), 
                this.urlParams = {};
            }
            function resourceFactory(url, paramDefaults, actions, options) {
                function extractParams(data, actionParams) {
                    var ids = {};
                    return actionParams = extend({}, paramDefaults, actionParams), forEach(actionParams, function(value, key) {
                        isFunction(value) && (value = value()), ids[key] = value && value.charAt && "@" == value.charAt(0) ? lookupDottedPath(data, value.substr(1)) : value;
                    }), ids;
                }
                function defaultResponseInterceptor(response) {
                    return response.resource;
                }
                function Resource(value) {
                    shallowClearAndCopy(value || {}, this);
                }
                var route = new Route(url, options);
                return actions = extend({}, provider.defaults.actions, actions), forEach(actions, function(action, name) {
                    var hasBody = /^(POST|PUT|PATCH)$/i.test(action.method);
                    Resource[name] = function(a1, a2, a3, a4) {
                        var data, success, error, params = {};
                        switch (arguments.length) {
                          case 4:
                            error = a4, success = a3;

                          case 3:
                          case 2:
                            if (!isFunction(a2)) {
                                params = a1, data = a2, success = a3;
                                break;
                            }
                            if (isFunction(a1)) {
                                success = a1, error = a2;
                                break;
                            }
                            success = a2, error = a3;

                          case 1:
                            isFunction(a1) ? success = a1 : hasBody ? data = a1 : params = a1;
                            break;

                          case 0:
                            break;

                          default:
                            throw $resourceMinErr("badargs", "Expected up to 4 arguments [params, data, success, error], got {0} arguments", arguments.length);
                        }
                        var isInstanceCall = this instanceof Resource, value = isInstanceCall ? data : action.isArray ? [] : new Resource(data), httpConfig = {}, responseInterceptor = action.interceptor && action.interceptor.response || defaultResponseInterceptor, responseErrorInterceptor = action.interceptor && action.interceptor.responseError || undefined;
                        forEach(action, function(value, key) {
                            "params" != key && "isArray" != key && "interceptor" != key && (httpConfig[key] = copy(value));
                        }), hasBody && (httpConfig.data = data), route.setUrlParams(httpConfig, extend({}, extractParams(data, action.params || {}), params), action.url);
                        var promise = $http(httpConfig).then(function(response) {
                            var data = response.data, promise = value.$promise;
                            if (data) {
                                if (angular.isArray(data) !== !!action.isArray) throw $resourceMinErr("badcfg", "Error in resource configuration. Expected response to contain an {0} but got an {1}", action.isArray ? "array" : "object", angular.isArray(data) ? "array" : "object");
                                action.isArray ? (value.length = 0, forEach(data, function(item) {
                                    value.push(new Resource(item));
                                })) : (shallowClearAndCopy(data, value), value.$promise = promise);
                            }
                            return value.$resolved = !0, response.resource = value, response;
                        }, function(response) {
                            return value.$resolved = !0, (error || noop)(response), $q.reject(response);
                        });
                        return promise = promise.then(function(response) {
                            var value = responseInterceptor(response);
                            return (success || noop)(value, response.headers), value;
                        }, responseErrorInterceptor), isInstanceCall ? promise : (value.$promise = promise, 
                        value.$resolved = !1, value);
                    }, Resource.prototype["$" + name] = function(params, success, error) {
                        isFunction(params) && (error = success, success = params, params = {});
                        var result = Resource[name].call(this, params, this, success, error);
                        return result.$promise || result;
                    };
                }), Resource.bind = function(additionalParamDefaults) {
                    return resourceFactory(url, extend({}, paramDefaults, additionalParamDefaults), actions);
                }, Resource;
            }
            var noop = angular.noop, forEach = angular.forEach, extend = angular.extend, copy = angular.copy, isFunction = angular.isFunction;
            return Route.prototype = {
                setUrlParams: function(config, params, actionUrl) {
                    var val, encodedVal, self = this, url = actionUrl || self.template, urlParams = self.urlParams = {};
                    forEach(url.split(/\W/), function(param) {
                        if ("hasOwnProperty" === param) throw $resourceMinErr("badname", "hasOwnProperty is not a valid parameter name.");
                        !new RegExp("^\\d+$").test(param) && param && new RegExp("(^|[^\\\\]):" + param + "(\\W|$)").test(url) && (urlParams[param] = !0);
                    }), url = url.replace(/\\:/g, ":"), params = params || {}, forEach(self.urlParams, function(_, urlParam) {
                        val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam], 
                        angular.isDefined(val) && null !== val ? (encodedVal = encodeUriSegment(val), url = url.replace(new RegExp(":" + urlParam + "(\\W|$)", "g"), function(match, p1) {
                            return encodedVal + p1;
                        })) : url = url.replace(new RegExp("(/?):" + urlParam + "(\\W|$)", "g"), function(match, leadingSlashes, tail) {
                            return "/" == tail.charAt(0) ? tail : leadingSlashes + tail;
                        });
                    }), self.defaults.stripTrailingSlashes && (url = url.replace(/\/+$/, "") || "/"), 
                    url = url.replace(/\/\.(?=\w+($|\?))/, "."), config.url = url.replace(/\/\\\./, "/."), 
                    forEach(params, function(value, key) {
                        self.urlParams[key] || (config.params = config.params || {}, config.params[key] = value);
                    });
                }
            }, resourceFactory;
        } ];
    });
}(window, window.angular), angular.module("ui.bootstrap", [ "ui.bootstrap.tpls", "ui.bootstrap.transition", "ui.bootstrap.collapse", "ui.bootstrap.accordion", "ui.bootstrap.alert", "ui.bootstrap.bindHtml", "ui.bootstrap.buttons", "ui.bootstrap.carousel", "ui.bootstrap.position", "ui.bootstrap.datepicker", "ui.bootstrap.dropdown", "ui.bootstrap.modal", "ui.bootstrap.pagination", "ui.bootstrap.tooltip", "ui.bootstrap.popover", "ui.bootstrap.progressbar", "ui.bootstrap.rating", "ui.bootstrap.tabs", "ui.bootstrap.timepicker", "ui.bootstrap.typeahead" ]), 
angular.module("ui.bootstrap.tpls", [ "template/accordion/accordion-group.html", "template/accordion/accordion.html", "template/alert/alert.html", "template/carousel/carousel.html", "template/carousel/slide.html", "template/datepicker/datepicker.html", "template/datepicker/day.html", "template/datepicker/month.html", "template/datepicker/popup.html", "template/datepicker/year.html", "template/modal/backdrop.html", "template/modal/window.html", "template/pagination/pager.html", "template/pagination/pagination.html", "template/tooltip/tooltip-html-unsafe-popup.html", "template/tooltip/tooltip-popup.html", "template/popover/popover.html", "template/progressbar/bar.html", "template/progressbar/progress.html", "template/progressbar/progressbar.html", "template/rating/rating.html", "template/tabs/tab.html", "template/tabs/tabset.html", "template/timepicker/timepicker.html", "template/typeahead/typeahead-match.html", "template/typeahead/typeahead-popup.html" ]), 
angular.module("ui.bootstrap.transition", []).factory("$transition", [ "$q", "$timeout", "$rootScope", function($q, $timeout, $rootScope) {
    function findEndEventName(endEventNames) {
        for (var name in endEventNames) if (void 0 !== transElement.style[name]) return endEventNames[name];
    }
    var $transition = function(element, trigger, options) {
        options = options || {};
        var deferred = $q.defer(), endEventName = $transition[options.animation ? "animationEndEventName" : "transitionEndEventName"], transitionEndHandler = function() {
            $rootScope.$apply(function() {
                element.unbind(endEventName, transitionEndHandler), deferred.resolve(element);
            });
        };
        return endEventName && element.bind(endEventName, transitionEndHandler), $timeout(function() {
            angular.isString(trigger) ? element.addClass(trigger) : angular.isFunction(trigger) ? trigger(element) : angular.isObject(trigger) && element.css(trigger), 
            endEventName || deferred.resolve(element);
        }), deferred.promise.cancel = function() {
            endEventName && element.unbind(endEventName, transitionEndHandler), deferred.reject("Transition cancelled");
        }, deferred.promise;
    }, transElement = document.createElement("trans"), transitionEndEventNames = {
        WebkitTransition: "webkitTransitionEnd",
        MozTransition: "transitionend",
        OTransition: "oTransitionEnd",
        transition: "transitionend"
    }, animationEndEventNames = {
        WebkitTransition: "webkitAnimationEnd",
        MozTransition: "animationend",
        OTransition: "oAnimationEnd",
        transition: "animationend"
    };
    return $transition.transitionEndEventName = findEndEventName(transitionEndEventNames), 
    $transition.animationEndEventName = findEndEventName(animationEndEventNames), $transition;
} ]), angular.module("ui.bootstrap.collapse", [ "ui.bootstrap.transition" ]).directive("collapse", [ "$transition", function($transition) {
    return {
        link: function(scope, element, attrs) {
            function doTransition(change) {
                function newTransitionDone() {
                    currentTransition === newTransition && (currentTransition = void 0);
                }
                var newTransition = $transition(element, change);
                return currentTransition && currentTransition.cancel(), currentTransition = newTransition, 
                newTransition.then(newTransitionDone, newTransitionDone), newTransition;
            }
            function expand() {
                initialAnimSkip ? (initialAnimSkip = !1, expandDone()) : (element.removeClass("collapse").addClass("collapsing"), 
                doTransition({
                    height: element[0].scrollHeight + "px"
                }).then(expandDone));
            }
            function expandDone() {
                element.removeClass("collapsing"), element.addClass("collapse in"), element.css({
                    height: "auto"
                });
            }
            function collapse() {
                if (initialAnimSkip) initialAnimSkip = !1, collapseDone(), element.css({
                    height: 0
                }); else {
                    element.css({
                        height: element[0].scrollHeight + "px"
                    });
                    {
                        element[0].offsetWidth;
                    }
                    element.removeClass("collapse in").addClass("collapsing"), doTransition({
                        height: 0
                    }).then(collapseDone);
                }
            }
            function collapseDone() {
                element.removeClass("collapsing"), element.addClass("collapse");
            }
            var currentTransition, initialAnimSkip = !0;
            scope.$watch(attrs.collapse, function(shouldCollapse) {
                shouldCollapse ? collapse() : expand();
            });
        }
    };
} ]), angular.module("ui.bootstrap.accordion", [ "ui.bootstrap.collapse" ]).constant("accordionConfig", {
    closeOthers: !0
}).controller("AccordionController", [ "$scope", "$attrs", "accordionConfig", function($scope, $attrs, accordionConfig) {
    this.groups = [], this.closeOthers = function(openGroup) {
        var closeOthers = angular.isDefined($attrs.closeOthers) ? $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;
        closeOthers && angular.forEach(this.groups, function(group) {
            group !== openGroup && (group.isOpen = !1);
        });
    }, this.addGroup = function(groupScope) {
        var that = this;
        this.groups.push(groupScope), groupScope.$on("$destroy", function() {
            that.removeGroup(groupScope);
        });
    }, this.removeGroup = function(group) {
        var index = this.groups.indexOf(group);
        -1 !== index && this.groups.splice(index, 1);
    };
} ]).directive("accordion", function() {
    return {
        restrict: "EA",
        controller: "AccordionController",
        transclude: !0,
        replace: !1,
        templateUrl: "template/accordion/accordion.html"
    };
}).directive("accordionGroup", function() {
    return {
        require: "^accordion",
        restrict: "EA",
        transclude: !0,
        replace: !0,
        templateUrl: "template/accordion/accordion-group.html",
        scope: {
            heading: "@",
            isOpen: "=?",
            isDisabled: "=?"
        },
        controller: function() {
            this.setHeading = function(element) {
                this.heading = element;
            };
        },
        link: function(scope, element, attrs, accordionCtrl) {
            accordionCtrl.addGroup(scope), scope.$watch("isOpen", function(value) {
                value && accordionCtrl.closeOthers(scope);
            }), scope.toggleOpen = function() {
                scope.isDisabled || (scope.isOpen = !scope.isOpen);
            };
        }
    };
}).directive("accordionHeading", function() {
    return {
        restrict: "EA",
        transclude: !0,
        template: "",
        replace: !0,
        require: "^accordionGroup",
        link: function(scope, element, attr, accordionGroupCtrl, transclude) {
            accordionGroupCtrl.setHeading(transclude(scope, function() {}));
        }
    };
}).directive("accordionTransclude", function() {
    return {
        require: "^accordionGroup",
        link: function(scope, element, attr, controller) {
            scope.$watch(function() {
                return controller[attr.accordionTransclude];
            }, function(heading) {
                heading && (element.html(""), element.append(heading));
            });
        }
    };
}), angular.module("ui.bootstrap.alert", []).controller("AlertController", [ "$scope", "$attrs", function($scope, $attrs) {
    $scope.closeable = "close" in $attrs;
} ]).directive("alert", function() {
    return {
        restrict: "EA",
        controller: "AlertController",
        templateUrl: "template/alert/alert.html",
        transclude: !0,
        replace: !0,
        scope: {
            type: "@",
            close: "&"
        }
    };
}), angular.module("ui.bootstrap.bindHtml", []).directive("bindHtmlUnsafe", function() {
    return function(scope, element, attr) {
        element.addClass("ng-binding").data("$binding", attr.bindHtmlUnsafe), scope.$watch(attr.bindHtmlUnsafe, function(value) {
            element.html(value || "");
        });
    };
}), angular.module("ui.bootstrap.buttons", []).constant("buttonConfig", {
    activeClass: "active",
    toggleEvent: "click"
}).controller("ButtonsController", [ "buttonConfig", function(buttonConfig) {
    this.activeClass = buttonConfig.activeClass || "active", this.toggleEvent = buttonConfig.toggleEvent || "click";
} ]).directive("btnRadio", function() {
    return {
        require: [ "btnRadio", "ngModel" ],
        controller: "ButtonsController",
        link: function(scope, element, attrs, ctrls) {
            var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            ngModelCtrl.$render = function() {
                element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.btnRadio)));
            }, element.bind(buttonsCtrl.toggleEvent, function() {
                element.hasClass(buttonsCtrl.activeClass) || scope.$apply(function() {
                    ngModelCtrl.$setViewValue(scope.$eval(attrs.btnRadio)), ngModelCtrl.$render();
                });
            });
        }
    };
}).directive("btnCheckbox", function() {
    return {
        require: [ "btnCheckbox", "ngModel" ],
        controller: "ButtonsController",
        link: function(scope, element, attrs, ctrls) {
            function getTrueValue() {
                return getCheckboxValue(attrs.btnCheckboxTrue, !0);
            }
            function getFalseValue() {
                return getCheckboxValue(attrs.btnCheckboxFalse, !1);
            }
            function getCheckboxValue(attributeValue, defaultValue) {
                var val = scope.$eval(attributeValue);
                return angular.isDefined(val) ? val : defaultValue;
            }
            var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            ngModelCtrl.$render = function() {
                element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));
            }, element.bind(buttonsCtrl.toggleEvent, function() {
                scope.$apply(function() {
                    ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue()), 
                    ngModelCtrl.$render();
                });
            });
        }
    };
}), angular.module("ui.bootstrap.carousel", [ "ui.bootstrap.transition" ]).controller("CarouselController", [ "$scope", "$timeout", "$transition", function($scope, $timeout, $transition) {
    function restartTimer() {
        resetTimer();
        var interval = +$scope.interval;
        !isNaN(interval) && interval >= 0 && (currentTimeout = $timeout(timerFn, interval));
    }
    function resetTimer() {
        currentTimeout && ($timeout.cancel(currentTimeout), currentTimeout = null);
    }
    function timerFn() {
        isPlaying ? ($scope.next(), restartTimer()) : $scope.pause();
    }
    var currentTimeout, isPlaying, self = this, slides = self.slides = $scope.slides = [], currentIndex = -1;
    self.currentSlide = null;
    var destroyed = !1;
    self.select = $scope.select = function(nextSlide, direction) {
        function goNext() {
            if (!destroyed) {
                if (self.currentSlide && angular.isString(direction) && !$scope.noTransition && nextSlide.$element) {
                    nextSlide.$element.addClass(direction);
                    {
                        nextSlide.$element[0].offsetWidth;
                    }
                    angular.forEach(slides, function(slide) {
                        angular.extend(slide, {
                            direction: "",
                            entering: !1,
                            leaving: !1,
                            active: !1
                        });
                    }), angular.extend(nextSlide, {
                        direction: direction,
                        active: !0,
                        entering: !0
                    }), angular.extend(self.currentSlide || {}, {
                        direction: direction,
                        leaving: !0
                    }), $scope.$currentTransition = $transition(nextSlide.$element, {}), function(next, current) {
                        $scope.$currentTransition.then(function() {
                            transitionDone(next, current);
                        }, function() {
                            transitionDone(next, current);
                        });
                    }(nextSlide, self.currentSlide);
                } else transitionDone(nextSlide, self.currentSlide);
                self.currentSlide = nextSlide, currentIndex = nextIndex, restartTimer();
            }
        }
        function transitionDone(next, current) {
            angular.extend(next, {
                direction: "",
                active: !0,
                leaving: !1,
                entering: !1
            }), angular.extend(current || {}, {
                direction: "",
                active: !1,
                leaving: !1,
                entering: !1
            }), $scope.$currentTransition = null;
        }
        var nextIndex = slides.indexOf(nextSlide);
        void 0 === direction && (direction = nextIndex > currentIndex ? "next" : "prev"), 
        nextSlide && nextSlide !== self.currentSlide && ($scope.$currentTransition ? ($scope.$currentTransition.cancel(), 
        $timeout(goNext)) : goNext());
    }, $scope.$on("$destroy", function() {
        destroyed = !0;
    }), self.indexOfSlide = function(slide) {
        return slides.indexOf(slide);
    }, $scope.next = function() {
        var newIndex = (currentIndex + 1) % slides.length;
        return $scope.$currentTransition ? void 0 : self.select(slides[newIndex], "next");
    }, $scope.prev = function() {
        var newIndex = 0 > currentIndex - 1 ? slides.length - 1 : currentIndex - 1;
        return $scope.$currentTransition ? void 0 : self.select(slides[newIndex], "prev");
    }, $scope.isActive = function(slide) {
        return self.currentSlide === slide;
    }, $scope.$watch("interval", restartTimer), $scope.$on("$destroy", resetTimer), 
    $scope.play = function() {
        isPlaying || (isPlaying = !0, restartTimer());
    }, $scope.pause = function() {
        $scope.noPause || (isPlaying = !1, resetTimer());
    }, self.addSlide = function(slide, element) {
        slide.$element = element, slides.push(slide), 1 === slides.length || slide.active ? (self.select(slides[slides.length - 1]), 
        1 == slides.length && $scope.play()) : slide.active = !1;
    }, self.removeSlide = function(slide) {
        var index = slides.indexOf(slide);
        slides.splice(index, 1), slides.length > 0 && slide.active ? self.select(index >= slides.length ? slides[index - 1] : slides[index]) : currentIndex > index && currentIndex--;
    };
} ]).directive("carousel", [ function() {
    return {
        restrict: "EA",
        transclude: !0,
        replace: !0,
        controller: "CarouselController",
        require: "carousel",
        templateUrl: "template/carousel/carousel.html",
        scope: {
            interval: "=",
            noTransition: "=",
            noPause: "="
        }
    };
} ]).directive("slide", function() {
    return {
        require: "^carousel",
        restrict: "EA",
        transclude: !0,
        replace: !0,
        templateUrl: "template/carousel/slide.html",
        scope: {
            active: "=?"
        },
        link: function(scope, element, attrs, carouselCtrl) {
            carouselCtrl.addSlide(scope, element), scope.$on("$destroy", function() {
                carouselCtrl.removeSlide(scope);
            }), scope.$watch("active", function(active) {
                active && carouselCtrl.select(scope);
            });
        }
    };
}), angular.module("ui.bootstrap.position", []).factory("$position", [ "$document", "$window", function($document, $window) {
    function getStyle(el, cssprop) {
        return el.currentStyle ? el.currentStyle[cssprop] : $window.getComputedStyle ? $window.getComputedStyle(el)[cssprop] : el.style[cssprop];
    }
    function isStaticPositioned(element) {
        return "static" === (getStyle(element, "position") || "static");
    }
    var parentOffsetEl = function(element) {
        for (var docDomEl = $document[0], offsetParent = element.offsetParent || docDomEl; offsetParent && offsetParent !== docDomEl && isStaticPositioned(offsetParent); ) offsetParent = offsetParent.offsetParent;
        return offsetParent || docDomEl;
    };
    return {
        position: function(element) {
            var elBCR = this.offset(element), offsetParentBCR = {
                top: 0,
                left: 0
            }, offsetParentEl = parentOffsetEl(element[0]);
            offsetParentEl != $document[0] && (offsetParentBCR = this.offset(angular.element(offsetParentEl)), 
            offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop, offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft);
            var boundingClientRect = element[0].getBoundingClientRect();
            return {
                width: boundingClientRect.width || element.prop("offsetWidth"),
                height: boundingClientRect.height || element.prop("offsetHeight"),
                top: elBCR.top - offsetParentBCR.top,
                left: elBCR.left - offsetParentBCR.left
            };
        },
        offset: function(element) {
            var boundingClientRect = element[0].getBoundingClientRect();
            return {
                width: boundingClientRect.width || element.prop("offsetWidth"),
                height: boundingClientRect.height || element.prop("offsetHeight"),
                top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
                left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
            };
        },
        positionElements: function(hostEl, targetEl, positionStr, appendToBody) {
            var hostElPos, targetElWidth, targetElHeight, targetElPos, positionStrParts = positionStr.split("-"), pos0 = positionStrParts[0], pos1 = positionStrParts[1] || "center";
            hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl), targetElWidth = targetEl.prop("offsetWidth"), 
            targetElHeight = targetEl.prop("offsetHeight");
            var shiftWidth = {
                center: function() {
                    return hostElPos.left + hostElPos.width / 2 - targetElWidth / 2;
                },
                left: function() {
                    return hostElPos.left;
                },
                right: function() {
                    return hostElPos.left + hostElPos.width;
                }
            }, shiftHeight = {
                center: function() {
                    return hostElPos.top + hostElPos.height / 2 - targetElHeight / 2;
                },
                top: function() {
                    return hostElPos.top;
                },
                bottom: function() {
                    return hostElPos.top + hostElPos.height;
                }
            };
            switch (pos0) {
              case "right":
                targetElPos = {
                    top: shiftHeight[pos1](),
                    left: shiftWidth[pos0]()
                };
                break;

              case "left":
                targetElPos = {
                    top: shiftHeight[pos1](),
                    left: hostElPos.left - targetElWidth
                };
                break;

              case "bottom":
                targetElPos = {
                    top: shiftHeight[pos0](),
                    left: shiftWidth[pos1]()
                };
                break;

              default:
                targetElPos = {
                    top: hostElPos.top - targetElHeight,
                    left: shiftWidth[pos1]()
                };
            }
            return targetElPos;
        }
    };
} ]), angular.module("ui.bootstrap.datepicker", [ "ui.bootstrap.position" ]).constant("datepickerConfig", {
    formatDay: "dd",
    formatMonth: "MMMM",
    formatYear: "yyyy",
    formatDayHeader: "EEE",
    formatDayTitle: "MMMM yyyy",
    formatMonthTitle: "yyyy",
    datepickerMode: "day",
    minMode: "day",
    maxMode: "year",
    showWeeks: !0,
    startingDay: 0,
    yearRange: 20,
    minDate: null,
    maxDate: null
}).controller("DatepickerController", [ "$scope", "$attrs", "$parse", "$interpolate", "$log", "dateFilter", "datepickerConfig", function($scope, $attrs, $parse, $interpolate, $log, dateFilter, datepickerConfig) {
    var self = this, ngModelCtrl = {
        $setViewValue: angular.noop
    };
    angular.forEach([ "formatDay", "formatMonth", "formatYear", "formatDayHeader", "formatDayTitle", "formatMonthTitle", "minMode", "maxMode", "showWeeks", "startingDay", "yearRange" ], function(key, index) {
        self[key] = angular.isDefined($attrs[key]) ? 8 > index ? $interpolate($attrs[key])($scope.$parent) : $scope.$parent.$eval($attrs[key]) : datepickerConfig[key];
    }), angular.forEach([ "minDate", "maxDate" ], function(key) {
        $attrs[key] ? $scope.$parent.$watch($parse($attrs[key]), function(value) {
            self[key] = value ? new Date(value) : null, self.refreshView();
        }) : self[key] = datepickerConfig[key] ? new Date(datepickerConfig[key]) : null;
    }), $scope.datepickerMode = $scope.datepickerMode || datepickerConfig.datepickerMode, 
    this.currentCalendarDate = angular.isDefined($attrs.initDate) ? $scope.$parent.$eval($attrs.initDate) : new Date(), 
    this.init = function(ngModelCtrl_) {
        ngModelCtrl = ngModelCtrl_, ngModelCtrl.$render = function() {
            self.render();
        };
    }, this.render = function() {
        if (ngModelCtrl.$modelValue) {
            var date = new Date(ngModelCtrl.$modelValue), isValid = !isNaN(date);
            isValid ? this.currentCalendarDate = date : $log.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.'), 
            ngModelCtrl.$setValidity("date", isValid);
        }
        this.refreshView();
    }, this.refreshView = function() {
        if (this.mode) {
            this._refreshView();
            var date = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : null;
            ngModelCtrl.$setValidity("date-disabled", !date || this.mode && !this.isDisabled(date));
        }
    }, this.createDateObject = function(date, format) {
        var model = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : null;
        return {
            date: date,
            label: dateFilter(date, format),
            selected: model && 0 === this.compare(date, model),
            disabled: this.isDisabled(date),
            current: 0 === this.compare(date, new Date())
        };
    }, this.isDisabled = function(date) {
        return this.minDate && this.compare(date, this.minDate) < 0 || this.maxDate && this.compare(date, this.maxDate) > 0 || $scope.dateDisabled && $scope.dateDisabled({
            date: date,
            mode: $scope.datepickerMode
        });
    }, this.split = function(arr, size) {
        for (var arrays = []; arr.length > 0; ) arrays.push(arr.splice(0, size));
        return arrays;
    }, $scope.select = function(date) {
        if ($scope.datepickerMode === self.minMode) {
            var dt = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : new Date(0, 0, 0, 0, 0, 0, 0);
            dt.setFullYear(date.getFullYear(), date.getMonth(), date.getDate()), ngModelCtrl.$setViewValue(dt), 
            ngModelCtrl.$render();
        } else self.currentCalendarDate = date, $scope.datepickerMode = self.mode.previous;
    }, $scope.move = function(direction) {
        var year = self.currentCalendarDate.getFullYear() + direction * (self.mode.step.years || 0), month = self.currentCalendarDate.getMonth() + direction * (self.mode.step.months || 0);
        self.currentCalendarDate.setFullYear(year, month, 1), self.refreshView();
    }, $scope.toggleMode = function() {
        $scope.datepickerMode = $scope.datepickerMode === self.maxMode ? self.minMode : self.mode.next;
    };
} ]).directive("daypicker", [ "dateFilter", function(dateFilter) {
    return {
        restrict: "EA",
        replace: !0,
        templateUrl: "template/datepicker/day.html",
        require: "^datepicker",
        link: function(scope, element, attrs, ctrl) {
            function getDaysInMonth(year, month) {
                return new Date(year, month, 0).getDate();
            }
            function getDates(startDate, n) {
                var dates = new Array(n), current = new Date(startDate), i = 0;
                for (current.setHours(12); n > i; ) dates[i++] = new Date(current), current.setDate(current.getDate() + 1);
                return dates;
            }
            function getISO8601WeekNumber(date) {
                var checkDate = new Date(date);
                checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
                var time = checkDate.getTime();
                return checkDate.setMonth(0), checkDate.setDate(1), Math.floor(Math.round((time - checkDate) / 864e5) / 7) + 1;
            }
            scope.showWeeks = ctrl.showWeeks, ctrl.mode = {
                step: {
                    months: 1
                },
                next: "month"
            }, ctrl._refreshView = function() {
                var year = ctrl.currentCalendarDate.getFullYear(), month = ctrl.currentCalendarDate.getMonth(), firstDayOfMonth = new Date(year, month, 1), difference = ctrl.startingDay - firstDayOfMonth.getDay(), numDisplayedFromPreviousMonth = difference > 0 ? 7 - difference : -difference, firstDate = new Date(firstDayOfMonth), numDates = 0;
                numDisplayedFromPreviousMonth > 0 && (firstDate.setDate(-numDisplayedFromPreviousMonth + 1), 
                numDates += numDisplayedFromPreviousMonth), numDates += getDaysInMonth(year, month + 1), 
                numDates += (7 - numDates % 7) % 7;
                for (var days = getDates(firstDate, numDates), i = 0; numDates > i; i++) days[i] = angular.extend(ctrl.createDateObject(days[i], ctrl.formatDay), {
                    secondary: days[i].getMonth() !== month
                });
                scope.labels = new Array(7);
                for (var j = 0; 7 > j; j++) scope.labels[j] = dateFilter(days[j].date, ctrl.formatDayHeader);
                if (scope.title = dateFilter(ctrl.currentCalendarDate, ctrl.formatDayTitle), scope.rows = ctrl.split(days, 7), 
                scope.showWeeks) {
                    scope.weekNumbers = [];
                    for (var weekNumber = getISO8601WeekNumber(scope.rows[0][0].date), numWeeks = scope.rows.length; scope.weekNumbers.push(weekNumber++) < numWeeks; ) ;
                }
            }, ctrl.compare = function(date1, date2) {
                return new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()) - new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
            }, ctrl.refreshView();
        }
    };
} ]).directive("monthpicker", [ "dateFilter", function(dateFilter) {
    return {
        restrict: "EA",
        replace: !0,
        templateUrl: "template/datepicker/month.html",
        require: "^datepicker",
        link: function(scope, element, attrs, ctrl) {
            ctrl.mode = {
                step: {
                    years: 1
                },
                previous: "day",
                next: "year"
            }, ctrl._refreshView = function() {
                for (var months = new Array(12), year = ctrl.currentCalendarDate.getFullYear(), i = 0; 12 > i; i++) months[i] = ctrl.createDateObject(new Date(year, i, 1), ctrl.formatMonth);
                scope.title = dateFilter(ctrl.currentCalendarDate, ctrl.formatMonthTitle), scope.rows = ctrl.split(months, 3);
            }, ctrl.compare = function(date1, date2) {
                return new Date(date1.getFullYear(), date1.getMonth()) - new Date(date2.getFullYear(), date2.getMonth());
            }, ctrl.refreshView();
        }
    };
} ]).directive("yearpicker", [ "dateFilter", function() {
    return {
        restrict: "EA",
        replace: !0,
        templateUrl: "template/datepicker/year.html",
        require: "^datepicker",
        link: function(scope, element, attrs, ctrl) {
            ctrl.mode = {
                step: {
                    years: ctrl.yearRange
                },
                previous: "month"
            }, ctrl._refreshView = function() {
                for (var range = this.mode.step.years, years = new Array(range), start = parseInt((ctrl.currentCalendarDate.getFullYear() - 1) / range, 10) * range + 1, i = 0; range > i; i++) years[i] = ctrl.createDateObject(new Date(start + i, 0, 1), ctrl.formatYear);
                scope.title = [ years[0].label, years[range - 1].label ].join(" - "), scope.rows = ctrl.split(years, 5);
            }, ctrl.compare = function(date1, date2) {
                return date1.getFullYear() - date2.getFullYear();
            }, ctrl.refreshView();
        }
    };
} ]).directive("datepicker", function() {
    return {
        restrict: "EA",
        replace: !0,
        templateUrl: "template/datepicker/datepicker.html",
        scope: {
            datepickerMode: "=?",
            dateDisabled: "&"
        },
        require: [ "datepicker", "?^ngModel" ],
        controller: "DatepickerController",
        link: function(scope, element, attrs, ctrls) {
            var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            ngModelCtrl && datepickerCtrl.init(ngModelCtrl);
        }
    };
}).constant("datepickerPopupConfig", {
    datepickerPopup: "yyyy-MM-dd",
    currentText: "Today",
    clearText: "Clear",
    closeText: "Done",
    closeOnDateSelection: !0,
    appendToBody: !1,
    showButtonBar: !0
}).directive("datepickerPopup", [ "$compile", "$parse", "$document", "$position", "dateFilter", "datepickerPopupConfig", function($compile, $parse, $document, $position, dateFilter, datepickerPopupConfig) {
    return {
        restrict: "EA",
        require: "ngModel",
        scope: {
            isOpen: "=?",
            currentText: "@",
            clearText: "@",
            closeText: "@"
        },
        link: function(scope, element, attrs, ngModel) {
            function cameltoDash(string) {
                return string.replace(/([A-Z])/g, function($1) {
                    return "-" + $1.toLowerCase();
                });
            }
            function parseDate(viewValue) {
                if (viewValue) {
                    if (angular.isDate(viewValue) && !isNaN(viewValue)) return ngModel.$setValidity("date", !0), 
                    viewValue;
                    if (angular.isString(viewValue)) {
                        var date = new Date(viewValue);
                        return isNaN(date) ? void ngModel.$setValidity("date", !1) : (ngModel.$setValidity("date", !0), 
                        date);
                    }
                    return void ngModel.$setValidity("date", !1);
                }
                return ngModel.$setValidity("date", !0), null;
            }
            var dateFormat, closeOnDateSelection = angular.isDefined(attrs.closeOnDateSelection) ? scope.$parent.$eval(attrs.closeOnDateSelection) : datepickerPopupConfig.closeOnDateSelection, appendToBody = angular.isDefined(attrs.datepickerAppendToBody) ? scope.$parent.$eval(attrs.datepickerAppendToBody) : datepickerPopupConfig.appendToBody;
            scope.showButtonBar = angular.isDefined(attrs.showButtonBar) ? scope.$parent.$eval(attrs.showButtonBar) : datepickerPopupConfig.showButtonBar, 
            scope.getText = function(key) {
                return scope[key + "Text"] || datepickerPopupConfig[key + "Text"];
            }, attrs.$observe("datepickerPopup", function(value) {
                dateFormat = value || datepickerPopupConfig.datepickerPopup, ngModel.$render();
            });
            var popupEl = angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");
            popupEl.attr({
                "ng-model": "date",
                "ng-change": "dateSelection()"
            });
            var datepickerEl = angular.element(popupEl.children()[0]);
            attrs.datepickerOptions && angular.forEach(scope.$parent.$eval(attrs.datepickerOptions), function(value, option) {
                datepickerEl.attr(cameltoDash(option), value);
            }), angular.forEach([ "minDate", "maxDate" ], function(key) {
                attrs[key] && (scope.$parent.$watch($parse(attrs[key]), function(value) {
                    scope[key] = value;
                }), datepickerEl.attr(cameltoDash(key), key));
            }), attrs.dateDisabled && datepickerEl.attr("date-disabled", attrs.dateDisabled), 
            ngModel.$parsers.unshift(parseDate), scope.dateSelection = function(dt) {
                angular.isDefined(dt) && (scope.date = dt), ngModel.$setViewValue(scope.date), ngModel.$render(), 
                closeOnDateSelection && (scope.isOpen = !1);
            }, element.bind("input change keyup", function() {
                scope.$apply(function() {
                    scope.date = ngModel.$modelValue;
                });
            }), ngModel.$render = function() {
                var date = ngModel.$viewValue ? dateFilter(ngModel.$viewValue, dateFormat) : "";
                element.val(date), scope.date = parseDate(ngModel.$modelValue);
            };
            var documentClickBind = function(event) {
                scope.isOpen && event.target !== element[0] && scope.$apply(function() {
                    scope.isOpen = !1;
                });
            }, openCalendar = function() {
                scope.$apply(function() {
                    scope.isOpen = !0;
                });
            };
            scope.$watch("isOpen", function(value) {
                value ? (scope.position = appendToBody ? $position.offset(element) : $position.position(element), 
                scope.position.top = scope.position.top + element.prop("offsetHeight"), $document.bind("click", documentClickBind), 
                element.unbind("focus", openCalendar), element[0].focus()) : ($document.unbind("click", documentClickBind), 
                element.bind("focus", openCalendar));
            }), scope.select = function(date) {
                if ("today" === date) {
                    var today = new Date();
                    angular.isDate(ngModel.$modelValue) ? (date = new Date(ngModel.$modelValue), date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate())) : date = new Date(today.setHours(0, 0, 0, 0));
                }
                scope.dateSelection(date);
            };
            var $popup = $compile(popupEl)(scope);
            appendToBody ? $document.find("body").append($popup) : element.after($popup), scope.$on("$destroy", function() {
                $popup.remove(), element.unbind("focus", openCalendar), $document.unbind("click", documentClickBind);
            });
        }
    };
} ]).directive("datepickerPopupWrap", function() {
    return {
        restrict: "EA",
        replace: !0,
        transclude: !0,
        templateUrl: "template/datepicker/popup.html",
        link: function(scope, element) {
            element.bind("click", function(event) {
                event.preventDefault(), event.stopPropagation();
            });
        }
    };
}), angular.module("ui.bootstrap.dropdown", []).constant("dropdownConfig", {
    openClass: "open"
}).service("dropdownService", [ "$document", function($document) {
    var openScope = null;
    this.open = function(dropdownScope) {
        openScope || ($document.bind("click", closeDropdown), $document.bind("keydown", escapeKeyBind)), 
        openScope && openScope !== dropdownScope && (openScope.isOpen = !1), openScope = dropdownScope;
    }, this.close = function(dropdownScope) {
        openScope === dropdownScope && (openScope = null, $document.unbind("click", closeDropdown), 
        $document.unbind("keydown", escapeKeyBind));
    };
    var closeDropdown = function() {
        openScope.$apply(function() {
            openScope.isOpen = !1;
        });
    }, escapeKeyBind = function(evt) {
        27 === evt.which && (openScope.focusToggleElement(), closeDropdown());
    };
} ]).controller("DropdownController", [ "$scope", "$attrs", "$parse", "dropdownConfig", "dropdownService", "$animate", function($scope, $attrs, $parse, dropdownConfig, dropdownService, $animate) {
    var getIsOpen, self = this, scope = $scope.$new(), openClass = dropdownConfig.openClass, setIsOpen = angular.noop, toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop;
    this.init = function(element) {
        self.$element = element, $attrs.isOpen && (getIsOpen = $parse($attrs.isOpen), setIsOpen = getIsOpen.assign, 
        $scope.$watch(getIsOpen, function(value) {
            scope.isOpen = !!value;
        }));
    }, this.toggle = function(open) {
        return scope.isOpen = arguments.length ? !!open : !scope.isOpen;
    }, this.isOpen = function() {
        return scope.isOpen;
    }, scope.focusToggleElement = function() {
        self.toggleElement && self.toggleElement[0].focus();
    }, scope.$watch("isOpen", function(isOpen) {
        $animate[isOpen ? "addClass" : "removeClass"](self.$element, openClass), isOpen ? (scope.focusToggleElement(), 
        dropdownService.open(scope)) : dropdownService.close(scope), setIsOpen($scope, isOpen), 
        toggleInvoker($scope, {
            open: !!isOpen
        });
    }), $scope.$on("$locationChangeSuccess", function() {
        scope.isOpen = !1;
    }), $scope.$on("$destroy", function() {
        scope.$destroy();
    });
} ]).directive("dropdown", function() {
    return {
        restrict: "CA",
        controller: "DropdownController",
        link: function(scope, element, attrs, dropdownCtrl) {
            dropdownCtrl.init(element);
        }
    };
}).directive("dropdownToggle", function() {
    return {
        restrict: "CA",
        require: "?^dropdown",
        link: function(scope, element, attrs, dropdownCtrl) {
            if (dropdownCtrl) {
                dropdownCtrl.toggleElement = element;
                var toggleDropdown = function(event) {
                    event.preventDefault(), event.stopPropagation(), element.hasClass("disabled") || attrs.disabled || scope.$apply(function() {
                        dropdownCtrl.toggle();
                    });
                };
                element.bind("click", toggleDropdown), element.attr({
                    "aria-haspopup": !0,
                    "aria-expanded": !1
                }), scope.$watch(dropdownCtrl.isOpen, function(isOpen) {
                    element.attr("aria-expanded", !!isOpen);
                }), scope.$on("$destroy", function() {
                    element.unbind("click", toggleDropdown);
                });
            }
        }
    };
}), angular.module("ui.bootstrap.modal", [ "ui.bootstrap.transition" ]).factory("$$stackedMap", function() {
    return {
        createNew: function() {
            var stack = [];
            return {
                add: function(key, value) {
                    stack.push({
                        key: key,
                        value: value
                    });
                },
                get: function(key) {
                    for (var i = 0; i < stack.length; i++) if (key == stack[i].key) return stack[i];
                },
                keys: function() {
                    for (var keys = [], i = 0; i < stack.length; i++) keys.push(stack[i].key);
                    return keys;
                },
                top: function() {
                    return stack[stack.length - 1];
                },
                remove: function(key) {
                    for (var idx = -1, i = 0; i < stack.length; i++) if (key == stack[i].key) {
                        idx = i;
                        break;
                    }
                    return stack.splice(idx, 1)[0];
                },
                removeTop: function() {
                    return stack.splice(stack.length - 1, 1)[0];
                },
                length: function() {
                    return stack.length;
                }
            };
        }
    };
}).directive("modalBackdrop", [ "$timeout", function($timeout) {
    return {
        restrict: "EA",
        replace: !0,
        templateUrl: "template/modal/backdrop.html",
        link: function(scope) {
            scope.animate = !1, $timeout(function() {
                scope.animate = !0;
            });
        }
    };
} ]).directive("modalWindow", [ "$modalStack", "$timeout", function($modalStack, $timeout) {
    return {
        restrict: "EA",
        scope: {
            index: "@",
            animate: "="
        },
        replace: !0,
        transclude: !0,
        templateUrl: "template/modal/window.html",
        link: function(scope, element, attrs) {
            scope.windowClass = attrs.windowClass || "", $timeout(function() {
                scope.animate = !0, element[0].focus();
            }), scope.close = function(evt) {
                var modal = $modalStack.getTop();
                modal && modal.value.backdrop && "static" != modal.value.backdrop && evt.target === evt.currentTarget && (evt.preventDefault(), 
                evt.stopPropagation(), $modalStack.dismiss(modal.key, "backdrop click"));
            };
        }
    };
} ]).factory("$modalStack", [ "$transition", "$timeout", "$document", "$compile", "$rootScope", "$$stackedMap", function($transition, $timeout, $document, $compile, $rootScope, $$stackedMap) {
    function backdropIndex() {
        for (var topBackdropIndex = -1, opened = openedWindows.keys(), i = 0; i < opened.length; i++) openedWindows.get(opened[i]).value.backdrop && (topBackdropIndex = i);
        return topBackdropIndex;
    }
    function removeModalWindow(modalInstance) {
        var body = $document.find("body").eq(0), modalWindow = openedWindows.get(modalInstance).value;
        openedWindows.remove(modalInstance), removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, 300, function() {
            modalWindow.modalScope.$destroy(), body.toggleClass(OPENED_MODAL_CLASS, openedWindows.length() > 0), 
            checkRemoveBackdrop();
        });
    }
    function checkRemoveBackdrop() {
        if (backdropDomEl && -1 == backdropIndex()) {
            var backdropScopeRef = backdropScope;
            removeAfterAnimate(backdropDomEl, backdropScope, 150, function() {
                backdropScopeRef.$destroy(), backdropScopeRef = null;
            }), backdropDomEl = void 0, backdropScope = void 0;
        }
    }
    function removeAfterAnimate(domEl, scope, emulateTime, done) {
        function afterAnimating() {
            afterAnimating.done || (afterAnimating.done = !0, domEl.remove(), done && done());
        }
        scope.animate = !1;
        var transitionEndEventName = $transition.transitionEndEventName;
        if (transitionEndEventName) {
            var timeout = $timeout(afterAnimating, emulateTime);
            domEl.bind(transitionEndEventName, function() {
                $timeout.cancel(timeout), afterAnimating(), scope.$apply();
            });
        } else $timeout(afterAnimating, 0);
    }
    var backdropDomEl, backdropScope, OPENED_MODAL_CLASS = "modal-open", openedWindows = $$stackedMap.createNew(), $modalStack = {};
    return $rootScope.$watch(backdropIndex, function(newBackdropIndex) {
        backdropScope && (backdropScope.index = newBackdropIndex);
    }), $document.bind("keydown", function(evt) {
        var modal;
        27 === evt.which && (modal = openedWindows.top(), modal && modal.value.keyboard && $rootScope.$apply(function() {
            $modalStack.dismiss(modal.key);
        }));
    }), $modalStack.open = function(modalInstance, modal) {
        openedWindows.add(modalInstance, {
            deferred: modal.deferred,
            modalScope: modal.scope,
            backdrop: modal.backdrop,
            keyboard: modal.keyboard
        });
        var body = $document.find("body").eq(0), currBackdropIndex = backdropIndex();
        currBackdropIndex >= 0 && !backdropDomEl && (backdropScope = $rootScope.$new(!0), 
        backdropScope.index = currBackdropIndex, backdropDomEl = $compile("<div modal-backdrop></div>")(backdropScope), 
        body.append(backdropDomEl));
        var angularDomEl = angular.element("<div modal-window></div>");
        angularDomEl.attr("window-class", modal.windowClass), angularDomEl.attr("index", openedWindows.length() - 1), 
        angularDomEl.attr("animate", "animate"), angularDomEl.html(modal.content);
        var modalDomEl = $compile(angularDomEl)(modal.scope);
        openedWindows.top().value.modalDomEl = modalDomEl, body.append(modalDomEl), body.addClass(OPENED_MODAL_CLASS);
    }, $modalStack.close = function(modalInstance, result) {
        var modalWindow = openedWindows.get(modalInstance).value;
        modalWindow && (modalWindow.deferred.resolve(result), removeModalWindow(modalInstance));
    }, $modalStack.dismiss = function(modalInstance, reason) {
        var modalWindow = openedWindows.get(modalInstance).value;
        modalWindow && (modalWindow.deferred.reject(reason), removeModalWindow(modalInstance));
    }, $modalStack.dismissAll = function(reason) {
        for (var topModal = this.getTop(); topModal; ) this.dismiss(topModal.key, reason), 
        topModal = this.getTop();
    }, $modalStack.getTop = function() {
        return openedWindows.top();
    }, $modalStack;
} ]).provider("$modal", function() {
    var $modalProvider = {
        options: {
            backdrop: !0,
            keyboard: !0
        },
        $get: [ "$injector", "$rootScope", "$q", "$http", "$templateCache", "$controller", "$modalStack", function($injector, $rootScope, $q, $http, $templateCache, $controller, $modalStack) {
            function getTemplatePromise(options) {
                return options.template ? $q.when(options.template) : $http.get(options.templateUrl, {
                    cache: $templateCache
                }).then(function(result) {
                    return result.data;
                });
            }
            function getResolvePromises(resolves) {
                var promisesArr = [];
                return angular.forEach(resolves, function(value) {
                    (angular.isFunction(value) || angular.isArray(value)) && promisesArr.push($q.when($injector.invoke(value)));
                }), promisesArr;
            }
            var $modal = {};
            return $modal.open = function(modalOptions) {
                var modalResultDeferred = $q.defer(), modalOpenedDeferred = $q.defer(), modalInstance = {
                    result: modalResultDeferred.promise,
                    opened: modalOpenedDeferred.promise,
                    close: function(result) {
                        $modalStack.close(modalInstance, result);
                    },
                    dismiss: function(reason) {
                        $modalStack.dismiss(modalInstance, reason);
                    }
                };
                if (modalOptions = angular.extend({}, $modalProvider.options, modalOptions), modalOptions.resolve = modalOptions.resolve || {}, 
                !modalOptions.template && !modalOptions.templateUrl) throw new Error("One of template or templateUrl options is required.");
                var templateAndResolvePromise = $q.all([ getTemplatePromise(modalOptions) ].concat(getResolvePromises(modalOptions.resolve)));
                return templateAndResolvePromise.then(function(tplAndVars) {
                    var modalScope = (modalOptions.scope || $rootScope).$new();
                    modalScope.$close = modalInstance.close, modalScope.$dismiss = modalInstance.dismiss;
                    var ctrlInstance, ctrlLocals = {}, resolveIter = 1;
                    modalOptions.controller && (ctrlLocals.$scope = modalScope, ctrlLocals.$modalInstance = modalInstance, 
                    angular.forEach(modalOptions.resolve, function(value, key) {
                        ctrlLocals[key] = tplAndVars[resolveIter++];
                    }), ctrlInstance = $controller(modalOptions.controller, ctrlLocals)), $modalStack.open(modalInstance, {
                        scope: modalScope,
                        deferred: modalResultDeferred,
                        content: tplAndVars[0],
                        backdrop: modalOptions.backdrop,
                        keyboard: modalOptions.keyboard,
                        windowClass: modalOptions.windowClass
                    });
                }, function(reason) {
                    modalResultDeferred.reject(reason);
                }), templateAndResolvePromise.then(function() {
                    modalOpenedDeferred.resolve(!0);
                }, function() {
                    modalOpenedDeferred.reject(!1);
                }), modalInstance;
            }, $modal;
        } ]
    };
    return $modalProvider;
}), angular.module("ui.bootstrap.pagination", []).controller("PaginationController", [ "$scope", "$attrs", "$parse", function($scope, $attrs, $parse) {
    var self = this, ngModelCtrl = {
        $setViewValue: angular.noop
    }, setNumPages = $attrs.numPages ? $parse($attrs.numPages).assign : angular.noop;
    this.init = function(ngModelCtrl_, config) {
        ngModelCtrl = ngModelCtrl_, this.config = config, ngModelCtrl.$render = function() {
            self.render();
        }, $attrs.itemsPerPage ? $scope.$parent.$watch($parse($attrs.itemsPerPage), function(value) {
            self.itemsPerPage = parseInt(value, 10), $scope.totalPages = self.calculateTotalPages();
        }) : this.itemsPerPage = config.itemsPerPage;
    }, this.calculateTotalPages = function() {
        var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / this.itemsPerPage);
        return Math.max(totalPages || 0, 1);
    }, this.render = function() {
        $scope.page = parseInt(ngModelCtrl.$viewValue, 10) || 1;
    }, $scope.selectPage = function(page) {
        $scope.page !== page && page > 0 && page <= $scope.totalPages && (ngModelCtrl.$setViewValue(page), 
        ngModelCtrl.$render());
    }, $scope.getText = function(key) {
        return $scope[key + "Text"] || self.config[key + "Text"];
    }, $scope.noPrevious = function() {
        return 1 === $scope.page;
    }, $scope.noNext = function() {
        return $scope.page === $scope.totalPages;
    }, $scope.$watch("totalItems", function() {
        $scope.totalPages = self.calculateTotalPages();
    }), $scope.$watch("totalPages", function(value) {
        setNumPages($scope.$parent, value), $scope.page > value ? $scope.selectPage(value) : ngModelCtrl.$render();
    });
} ]).constant("paginationConfig", {
    itemsPerPage: 10,
    boundaryLinks: !1,
    directionLinks: !0,
    firstText: "First",
    previousText: "Previous",
    nextText: "Next",
    lastText: "Last",
    rotate: !0
}).directive("pagination", [ "$parse", "paginationConfig", function($parse, paginationConfig) {
    return {
        restrict: "EA",
        scope: {
            totalItems: "=",
            firstText: "@",
            previousText: "@",
            nextText: "@",
            lastText: "@"
        },
        require: [ "pagination", "?ngModel" ],
        controller: "PaginationController",
        templateUrl: "template/pagination/pagination.html",
        replace: !0,
        link: function(scope, element, attrs, ctrls) {
            function makePage(number, text, isActive) {
                return {
                    number: number,
                    text: text,
                    active: isActive
                };
            }
            function getPages(currentPage, totalPages) {
                var pages = [], startPage = 1, endPage = totalPages, isMaxSized = angular.isDefined(maxSize) && totalPages > maxSize;
                isMaxSized && (rotate ? (startPage = Math.max(currentPage - Math.floor(maxSize / 2), 1), 
                endPage = startPage + maxSize - 1, endPage > totalPages && (endPage = totalPages, 
                startPage = endPage - maxSize + 1)) : (startPage = (Math.ceil(currentPage / maxSize) - 1) * maxSize + 1, 
                endPage = Math.min(startPage + maxSize - 1, totalPages)));
                for (var number = startPage; endPage >= number; number++) {
                    var page = makePage(number, number, number === currentPage);
                    pages.push(page);
                }
                if (isMaxSized && !rotate) {
                    if (startPage > 1) {
                        var previousPageSet = makePage(startPage - 1, "...", !1);
                        pages.unshift(previousPageSet);
                    }
                    if (totalPages > endPage) {
                        var nextPageSet = makePage(endPage + 1, "...", !1);
                        pages.push(nextPageSet);
                    }
                }
                return pages;
            }
            var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            if (ngModelCtrl) {
                var maxSize = angular.isDefined(attrs.maxSize) ? scope.$parent.$eval(attrs.maxSize) : paginationConfig.maxSize, rotate = angular.isDefined(attrs.rotate) ? scope.$parent.$eval(attrs.rotate) : paginationConfig.rotate;
                scope.boundaryLinks = angular.isDefined(attrs.boundaryLinks) ? scope.$parent.$eval(attrs.boundaryLinks) : paginationConfig.boundaryLinks, 
                scope.directionLinks = angular.isDefined(attrs.directionLinks) ? scope.$parent.$eval(attrs.directionLinks) : paginationConfig.directionLinks, 
                paginationCtrl.init(ngModelCtrl, paginationConfig), attrs.maxSize && scope.$parent.$watch($parse(attrs.maxSize), function(value) {
                    maxSize = parseInt(value, 10), paginationCtrl.render();
                });
                var originalRender = paginationCtrl.render;
                paginationCtrl.render = function() {
                    originalRender(), scope.page > 0 && scope.page <= scope.totalPages && (scope.pages = getPages(scope.page, scope.totalPages));
                };
            }
        }
    };
} ]).constant("pagerConfig", {
    itemsPerPage: 10,
    previousText: "« Previous",
    nextText: "Next »",
    align: !0
}).directive("pager", [ "pagerConfig", function(pagerConfig) {
    return {
        restrict: "EA",
        scope: {
            totalItems: "=",
            previousText: "@",
            nextText: "@"
        },
        require: [ "pager", "?ngModel" ],
        controller: "PaginationController",
        templateUrl: "template/pagination/pager.html",
        replace: !0,
        link: function(scope, element, attrs, ctrls) {
            var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            ngModelCtrl && (scope.align = angular.isDefined(attrs.align) ? scope.$parent.$eval(attrs.align) : pagerConfig.align, 
            paginationCtrl.init(ngModelCtrl, pagerConfig));
        }
    };
} ]), angular.module("ui.bootstrap.tooltip", [ "ui.bootstrap.position", "ui.bootstrap.bindHtml" ]).provider("$tooltip", function() {
    function snake_case(name) {
        var regexp = /[A-Z]/g, separator = "-";
        return name.replace(regexp, function(letter, pos) {
            return (pos ? separator : "") + letter.toLowerCase();
        });
    }
    var defaultOptions = {
        placement: "top",
        animation: !0,
        popupDelay: 0
    }, triggerMap = {
        mouseenter: "mouseleave",
        click: "click",
        focus: "blur"
    }, globalOptions = {};
    this.options = function(value) {
        angular.extend(globalOptions, value);
    }, this.setTriggers = function(triggers) {
        angular.extend(triggerMap, triggers);
    }, this.$get = [ "$window", "$compile", "$timeout", "$parse", "$document", "$position", "$interpolate", function($window, $compile, $timeout, $parse, $document, $position, $interpolate) {
        return function(type, prefix, defaultTriggerShow) {
            function getTriggers(trigger) {
                var show = trigger || options.trigger || defaultTriggerShow, hide = triggerMap[show] || show;
                return {
                    show: show,
                    hide: hide
                };
            }
            var options = angular.extend({}, defaultOptions, globalOptions), directiveName = snake_case(type), startSym = $interpolate.startSymbol(), endSym = $interpolate.endSymbol(), template = "<div " + directiveName + '-popup title="' + startSym + "tt_title" + endSym + '" content="' + startSym + "tt_content" + endSym + '" placement="' + startSym + "tt_placement" + endSym + '" animation="tt_animation" is-open="tt_isOpen"></div>';
            return {
                restrict: "EA",
                scope: !0,
                compile: function() {
                    var tooltipLinker = $compile(template);
                    return function(scope, element, attrs) {
                        function toggleTooltipBind() {
                            scope.tt_isOpen ? hideTooltipBind() : showTooltipBind();
                        }
                        function showTooltipBind() {
                            (!hasEnableExp || scope.$eval(attrs[prefix + "Enable"])) && (scope.tt_popupDelay ? (popupTimeout = $timeout(show, scope.tt_popupDelay, !1), 
                            popupTimeout.then(function(reposition) {
                                reposition();
                            })) : show()());
                        }
                        function hideTooltipBind() {
                            scope.$apply(function() {
                                hide();
                            });
                        }
                        function show() {
                            return scope.tt_content ? (createTooltip(), transitionTimeout && $timeout.cancel(transitionTimeout), 
                            tooltip.css({
                                top: 0,
                                left: 0,
                                display: "block"
                            }), appendToBody ? $document.find("body").append(tooltip) : element.after(tooltip), 
                            positionTooltip(), scope.tt_isOpen = !0, scope.$digest(), positionTooltip) : angular.noop;
                        }
                        function hide() {
                            scope.tt_isOpen = !1, $timeout.cancel(popupTimeout), scope.tt_animation ? transitionTimeout = $timeout(removeTooltip, 500) : removeTooltip();
                        }
                        function createTooltip() {
                            tooltip && removeTooltip(), tooltip = tooltipLinker(scope, function() {}), scope.$digest();
                        }
                        function removeTooltip() {
                            tooltip && (tooltip.remove(), tooltip = null);
                        }
                        var tooltip, transitionTimeout, popupTimeout, appendToBody = angular.isDefined(options.appendToBody) ? options.appendToBody : !1, triggers = getTriggers(void 0), hasEnableExp = angular.isDefined(attrs[prefix + "Enable"]), positionTooltip = function() {
                            var ttPosition = $position.positionElements(element, tooltip, scope.tt_placement, appendToBody);
                            ttPosition.top += "px", ttPosition.left += "px", tooltip.css(ttPosition);
                        };
                        scope.tt_isOpen = !1, attrs.$observe(type, function(val) {
                            scope.tt_content = val, !val && scope.tt_isOpen && hide();
                        }), attrs.$observe(prefix + "Title", function(val) {
                            scope.tt_title = val;
                        }), attrs.$observe(prefix + "Placement", function(val) {
                            scope.tt_placement = angular.isDefined(val) ? val : options.placement;
                        }), attrs.$observe(prefix + "PopupDelay", function(val) {
                            var delay = parseInt(val, 10);
                            scope.tt_popupDelay = isNaN(delay) ? options.popupDelay : delay;
                        });
                        var unregisterTriggers = function() {
                            element.unbind(triggers.show, showTooltipBind), element.unbind(triggers.hide, hideTooltipBind);
                        };
                        attrs.$observe(prefix + "Trigger", function(val) {
                            unregisterTriggers(), triggers = getTriggers(val), triggers.show === triggers.hide ? element.bind(triggers.show, toggleTooltipBind) : (element.bind(triggers.show, showTooltipBind), 
                            element.bind(triggers.hide, hideTooltipBind));
                        });
                        var animation = scope.$eval(attrs[prefix + "Animation"]);
                        scope.tt_animation = angular.isDefined(animation) ? !!animation : options.animation, 
                        attrs.$observe(prefix + "AppendToBody", function(val) {
                            appendToBody = angular.isDefined(val) ? $parse(val)(scope) : appendToBody;
                        }), appendToBody && scope.$on("$locationChangeSuccess", function() {
                            scope.tt_isOpen && hide();
                        }), scope.$on("$destroy", function() {
                            $timeout.cancel(transitionTimeout), $timeout.cancel(popupTimeout), unregisterTriggers(), 
                            removeTooltip();
                        });
                    };
                }
            };
        };
    } ];
}).directive("tooltipPopup", function() {
    return {
        restrict: "EA",
        replace: !0,
        scope: {
            content: "@",
            placement: "@",
            animation: "&",
            isOpen: "&"
        },
        templateUrl: "template/tooltip/tooltip-popup.html"
    };
}).directive("tooltip", [ "$tooltip", function($tooltip) {
    return $tooltip("tooltip", "tooltip", "mouseenter");
} ]).directive("tooltipHtmlUnsafePopup", function() {
    return {
        restrict: "EA",
        replace: !0,
        scope: {
            content: "@",
            placement: "@",
            animation: "&",
            isOpen: "&"
        },
        templateUrl: "template/tooltip/tooltip-html-unsafe-popup.html"
    };
}).directive("tooltipHtmlUnsafe", [ "$tooltip", function($tooltip) {
    return $tooltip("tooltipHtmlUnsafe", "tooltip", "mouseenter");
} ]), angular.module("ui.bootstrap.popover", [ "ui.bootstrap.tooltip" ]).directive("popoverPopup", function() {
    return {
        restrict: "EA",
        replace: !0,
        scope: {
            title: "@",
            content: "@",
            placement: "@",
            animation: "&",
            isOpen: "&"
        },
        templateUrl: "template/popover/popover.html"
    };
}).directive("popover", [ "$tooltip", function($tooltip) {
    return $tooltip("popover", "popover", "click");
} ]), angular.module("ui.bootstrap.progressbar", []).constant("progressConfig", {
    animate: !0,
    max: 100
}).controller("ProgressController", [ "$scope", "$attrs", "progressConfig", function($scope, $attrs, progressConfig) {
    var self = this, animate = angular.isDefined($attrs.animate) ? $scope.$parent.$eval($attrs.animate) : progressConfig.animate;
    this.bars = [], $scope.max = angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : progressConfig.max, 
    this.addBar = function(bar, element) {
        animate || element.css({
            transition: "none"
        }), this.bars.push(bar), bar.$watch("value", function(value) {
            bar.percent = +(100 * value / $scope.max).toFixed(2);
        }), bar.$on("$destroy", function() {
            element = null, self.removeBar(bar);
        });
    }, this.removeBar = function(bar) {
        this.bars.splice(this.bars.indexOf(bar), 1);
    };
} ]).directive("progress", function() {
    return {
        restrict: "EA",
        replace: !0,
        transclude: !0,
        controller: "ProgressController",
        require: "progress",
        scope: {},
        templateUrl: "template/progressbar/progress.html"
    };
}).directive("bar", function() {
    return {
        restrict: "EA",
        replace: !0,
        transclude: !0,
        require: "^progress",
        scope: {
            value: "=",
            type: "@"
        },
        templateUrl: "template/progressbar/bar.html",
        link: function(scope, element, attrs, progressCtrl) {
            progressCtrl.addBar(scope, element);
        }
    };
}).directive("progressbar", function() {
    return {
        restrict: "EA",
        replace: !0,
        transclude: !0,
        controller: "ProgressController",
        scope: {
            value: "=",
            type: "@"
        },
        templateUrl: "template/progressbar/progressbar.html",
        link: function(scope, element, attrs, progressCtrl) {
            progressCtrl.addBar(scope, angular.element(element.children()[0]));
        }
    };
}), angular.module("ui.bootstrap.rating", []).constant("ratingConfig", {
    max: 5,
    stateOn: null,
    stateOff: null
}).controller("RatingController", [ "$scope", "$attrs", "ratingConfig", function($scope, $attrs, ratingConfig) {
    var ngModelCtrl = {
        $setViewValue: angular.noop
    };
    this.init = function(ngModelCtrl_) {
        ngModelCtrl = ngModelCtrl_, ngModelCtrl.$render = this.render, this.stateOn = angular.isDefined($attrs.stateOn) ? $scope.$parent.$eval($attrs.stateOn) : ratingConfig.stateOn, 
        this.stateOff = angular.isDefined($attrs.stateOff) ? $scope.$parent.$eval($attrs.stateOff) : ratingConfig.stateOff;
        var ratingStates = angular.isDefined($attrs.ratingStates) ? $scope.$parent.$eval($attrs.ratingStates) : new Array(angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max);
        $scope.range = this.buildTemplateObjects(ratingStates);
    }, this.buildTemplateObjects = function(states) {
        for (var i = 0, n = states.length; n > i; i++) states[i] = angular.extend({
            index: i
        }, {
            stateOn: this.stateOn,
            stateOff: this.stateOff
        }, states[i]);
        return states;
    }, $scope.rate = function(value) {
        !$scope.readonly && value >= 0 && value <= $scope.range.length && (ngModelCtrl.$setViewValue(value), 
        ngModelCtrl.$render());
    }, $scope.enter = function(value) {
        $scope.readonly || ($scope.value = value), $scope.onHover({
            value: value
        });
    }, $scope.reset = function() {
        $scope.value = ngModelCtrl.$viewValue, $scope.onLeave();
    }, $scope.onKeydown = function(evt) {
        /(37|38|39|40)/.test(evt.which) && (evt.preventDefault(), evt.stopPropagation(), 
        $scope.rate($scope.value + (38 === evt.which || 39 === evt.which ? 1 : -1)));
    }, this.render = function() {
        $scope.value = ngModelCtrl.$viewValue;
    };
} ]).directive("rating", function() {
    return {
        restrict: "EA",
        require: [ "rating", "ngModel" ],
        scope: {
            readonly: "=?",
            onHover: "&",
            onLeave: "&"
        },
        controller: "RatingController",
        templateUrl: "template/rating/rating.html",
        replace: !0,
        link: function(scope, element, attrs, ctrls) {
            var ratingCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            ngModelCtrl && ratingCtrl.init(ngModelCtrl);
        }
    };
}), angular.module("ui.bootstrap.tabs", []).controller("TabsetController", [ "$scope", function($scope) {
    var ctrl = this, tabs = ctrl.tabs = $scope.tabs = [];
    ctrl.select = function(selectedTab) {
        angular.forEach(tabs, function(tab) {
            tab.active && tab !== selectedTab && (tab.active = !1, tab.onDeselect());
        }), selectedTab.active = !0, selectedTab.onSelect();
    }, ctrl.addTab = function(tab) {
        tabs.push(tab), 1 === tabs.length ? tab.active = !0 : tab.active && ctrl.select(tab);
    }, ctrl.removeTab = function(tab) {
        var index = tabs.indexOf(tab);
        if (tab.active && tabs.length > 1) {
            var newActiveIndex = index == tabs.length - 1 ? index - 1 : index + 1;
            ctrl.select(tabs[newActiveIndex]);
        }
        tabs.splice(index, 1);
    };
} ]).directive("tabset", function() {
    return {
        restrict: "EA",
        transclude: !0,
        replace: !0,
        scope: {
            type: "@"
        },
        controller: "TabsetController",
        templateUrl: "template/tabs/tabset.html",
        link: function(scope, element, attrs) {
            scope.vertical = angular.isDefined(attrs.vertical) ? scope.$parent.$eval(attrs.vertical) : !1, 
            scope.justified = angular.isDefined(attrs.justified) ? scope.$parent.$eval(attrs.justified) : !1;
        }
    };
}).directive("tab", [ "$parse", function($parse) {
    return {
        require: "^tabset",
        restrict: "EA",
        replace: !0,
        templateUrl: "template/tabs/tab.html",
        transclude: !0,
        scope: {
            active: "=?",
            heading: "@",
            onSelect: "&select",
            onDeselect: "&deselect"
        },
        controller: function() {},
        compile: function(elm, attrs, transclude) {
            return function(scope, elm, attrs, tabsetCtrl) {
                scope.$watch("active", function(active) {
                    active && tabsetCtrl.select(scope);
                }), scope.disabled = !1, attrs.disabled && scope.$parent.$watch($parse(attrs.disabled), function(value) {
                    scope.disabled = !!value;
                }), scope.select = function() {
                    scope.disabled || (scope.active = !0);
                }, tabsetCtrl.addTab(scope), scope.$on("$destroy", function() {
                    tabsetCtrl.removeTab(scope);
                }), scope.$transcludeFn = transclude;
            };
        }
    };
} ]).directive("tabHeadingTransclude", [ function() {
    return {
        restrict: "A",
        require: "^tab",
        link: function(scope, elm) {
            scope.$watch("headingElement", function(heading) {
                heading && (elm.html(""), elm.append(heading));
            });
        }
    };
} ]).directive("tabContentTransclude", function() {
    function isTabHeading(node) {
        return node.tagName && (node.hasAttribute("tab-heading") || node.hasAttribute("data-tab-heading") || "tab-heading" === node.tagName.toLowerCase() || "data-tab-heading" === node.tagName.toLowerCase());
    }
    return {
        restrict: "A",
        require: "^tabset",
        link: function(scope, elm, attrs) {
            var tab = scope.$eval(attrs.tabContentTransclude);
            tab.$transcludeFn(tab.$parent, function(contents) {
                angular.forEach(contents, function(node) {
                    isTabHeading(node) ? tab.headingElement = node : elm.append(node);
                });
            });
        }
    };
}), angular.module("ui.bootstrap.timepicker", []).constant("timepickerConfig", {
    hourStep: 1,
    minuteStep: 1,
    showMeridian: !0,
    meridians: null,
    readonlyInput: !1,
    mousewheel: !0
}).controller("TimepickerController", [ "$scope", "$attrs", "$parse", "$log", "$locale", "timepickerConfig", function($scope, $attrs, $parse, $log, $locale, timepickerConfig) {
    function getHoursFromTemplate() {
        var hours = parseInt($scope.hours, 10), valid = $scope.showMeridian ? hours > 0 && 13 > hours : hours >= 0 && 24 > hours;
        return valid ? ($scope.showMeridian && (12 === hours && (hours = 0), $scope.meridian === meridians[1] && (hours += 12)), 
        hours) : void 0;
    }
    function getMinutesFromTemplate() {
        var minutes = parseInt($scope.minutes, 10);
        return minutes >= 0 && 60 > minutes ? minutes : void 0;
    }
    function pad(value) {
        return angular.isDefined(value) && value.toString().length < 2 ? "0" + value : value;
    }
    function refresh(keyboardChange) {
        makeValid(), ngModelCtrl.$setViewValue(new Date(selected)), updateTemplate(keyboardChange);
    }
    function makeValid() {
        ngModelCtrl.$setValidity("time", !0), $scope.invalidHours = !1, $scope.invalidMinutes = !1;
    }
    function updateTemplate(keyboardChange) {
        var hours = selected.getHours(), minutes = selected.getMinutes();
        $scope.showMeridian && (hours = 0 === hours || 12 === hours ? 12 : hours % 12), 
        $scope.hours = "h" === keyboardChange ? hours : pad(hours), $scope.minutes = "m" === keyboardChange ? minutes : pad(minutes), 
        $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];
    }
    function addMinutes(minutes) {
        var dt = new Date(selected.getTime() + 6e4 * minutes);
        selected.setHours(dt.getHours(), dt.getMinutes()), refresh();
    }
    var selected = new Date(), ngModelCtrl = {
        $setViewValue: angular.noop
    }, meridians = angular.isDefined($attrs.meridians) ? $scope.$parent.$eval($attrs.meridians) : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS;
    this.init = function(ngModelCtrl_, inputs) {
        ngModelCtrl = ngModelCtrl_, ngModelCtrl.$render = this.render;
        var hoursInputEl = inputs.eq(0), minutesInputEl = inputs.eq(1), mousewheel = angular.isDefined($attrs.mousewheel) ? $scope.$parent.$eval($attrs.mousewheel) : timepickerConfig.mousewheel;
        mousewheel && this.setupMousewheelEvents(hoursInputEl, minutesInputEl), $scope.readonlyInput = angular.isDefined($attrs.readonlyInput) ? $scope.$parent.$eval($attrs.readonlyInput) : timepickerConfig.readonlyInput, 
        this.setupInputEvents(hoursInputEl, minutesInputEl);
    };
    var hourStep = timepickerConfig.hourStep;
    $attrs.hourStep && $scope.$parent.$watch($parse($attrs.hourStep), function(value) {
        hourStep = parseInt(value, 10);
    });
    var minuteStep = timepickerConfig.minuteStep;
    $attrs.minuteStep && $scope.$parent.$watch($parse($attrs.minuteStep), function(value) {
        minuteStep = parseInt(value, 10);
    }), $scope.showMeridian = timepickerConfig.showMeridian, $attrs.showMeridian && $scope.$parent.$watch($parse($attrs.showMeridian), function(value) {
        if ($scope.showMeridian = !!value, ngModelCtrl.$error.time) {
            var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
            angular.isDefined(hours) && angular.isDefined(minutes) && (selected.setHours(hours), 
            refresh());
        } else updateTemplate();
    }), this.setupMousewheelEvents = function(hoursInputEl, minutesInputEl) {
        var isScrollingUp = function(e) {
            e.originalEvent && (e = e.originalEvent);
            var delta = e.wheelDelta ? e.wheelDelta : -e.deltaY;
            return e.detail || delta > 0;
        };
        hoursInputEl.bind("mousewheel wheel", function(e) {
            $scope.$apply(isScrollingUp(e) ? $scope.incrementHours() : $scope.decrementHours()), 
            e.preventDefault();
        }), minutesInputEl.bind("mousewheel wheel", function(e) {
            $scope.$apply(isScrollingUp(e) ? $scope.incrementMinutes() : $scope.decrementMinutes()), 
            e.preventDefault();
        });
    }, this.setupInputEvents = function(hoursInputEl, minutesInputEl) {
        if ($scope.readonlyInput) return $scope.updateHours = angular.noop, void ($scope.updateMinutes = angular.noop);
        var invalidate = function(invalidHours, invalidMinutes) {
            ngModelCtrl.$setViewValue(null), ngModelCtrl.$setValidity("time", !1), angular.isDefined(invalidHours) && ($scope.invalidHours = invalidHours), 
            angular.isDefined(invalidMinutes) && ($scope.invalidMinutes = invalidMinutes);
        };
        $scope.updateHours = function() {
            var hours = getHoursFromTemplate();
            angular.isDefined(hours) ? (selected.setHours(hours), refresh("h")) : invalidate(!0);
        }, hoursInputEl.bind("blur", function() {
            !$scope.validHours && $scope.hours < 10 && $scope.$apply(function() {
                $scope.hours = pad($scope.hours);
            });
        }), $scope.updateMinutes = function() {
            var minutes = getMinutesFromTemplate();
            angular.isDefined(minutes) ? (selected.setMinutes(minutes), refresh("m")) : invalidate(void 0, !0);
        }, minutesInputEl.bind("blur", function() {
            !$scope.invalidMinutes && $scope.minutes < 10 && $scope.$apply(function() {
                $scope.minutes = pad($scope.minutes);
            });
        });
    }, this.render = function() {
        var date = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : null;
        isNaN(date) ? (ngModelCtrl.$setValidity("time", !1), $log.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')) : (date && (selected = date), 
        makeValid(), updateTemplate());
    }, $scope.incrementHours = function() {
        addMinutes(60 * hourStep);
    }, $scope.decrementHours = function() {
        addMinutes(60 * -hourStep);
    }, $scope.incrementMinutes = function() {
        addMinutes(minuteStep);
    }, $scope.decrementMinutes = function() {
        addMinutes(-minuteStep);
    }, $scope.toggleMeridian = function() {
        addMinutes(720 * (selected.getHours() < 12 ? 1 : -1));
    };
} ]).directive("timepicker", function() {
    return {
        restrict: "EA",
        require: [ "timepicker", "?^ngModel" ],
        controller: "TimepickerController",
        replace: !0,
        scope: {},
        templateUrl: "template/timepicker/timepicker.html",
        link: function(scope, element, attrs, ctrls) {
            var timepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            ngModelCtrl && timepickerCtrl.init(ngModelCtrl, element.find("input"));
        }
    };
}), angular.module("ui.bootstrap.typeahead", [ "ui.bootstrap.position", "ui.bootstrap.bindHtml" ]).factory("typeaheadParser", [ "$parse", function($parse) {
    var TYPEAHEAD_REGEXP = /^\s*(.*?)(?:\s+as\s+(.*?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+(.*)$/;
    return {
        parse: function(input) {
            var match = input.match(TYPEAHEAD_REGEXP);
            if (!match) throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "' + input + '".');
            return {
                itemName: match[3],
                source: $parse(match[4]),
                viewMapper: $parse(match[2] || match[1]),
                modelMapper: $parse(match[1])
            };
        }
    };
} ]).directive("typeahead", [ "$compile", "$parse", "$q", "$timeout", "$document", "$position", "typeaheadParser", function($compile, $parse, $q, $timeout, $document, $position, typeaheadParser) {
    var HOT_KEYS = [ 9, 13, 27, 38, 40 ];
    return {
        require: "ngModel",
        link: function(originalScope, element, attrs, modelCtrl) {
            var hasFocus, minSearch = originalScope.$eval(attrs.typeaheadMinLength) || 1, waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0, isEditable = originalScope.$eval(attrs.typeaheadEditable) !== !1, isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop, onSelectCallback = $parse(attrs.typeaheadOnSelect), inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : void 0, appendToBody = attrs.typeaheadAppendToBody ? originalScope.$eval(attrs.typeaheadAppendToBody) : !1, $setModelValue = $parse(attrs.ngModel).assign, parserResult = typeaheadParser.parse(attrs.typeahead);
            element.attr({
                "aria-autocomplete": "list",
                "aria-expanded": !1
            });
            var popUpEl = angular.element("<div typeahead-popup></div>");
            popUpEl.attr({
                matches: "matches",
                active: "activeIdx",
                select: "select(activeIdx)",
                query: "query",
                position: "position"
            }), angular.isDefined(attrs.typeaheadTemplateUrl) && popUpEl.attr("template-url", attrs.typeaheadTemplateUrl);
            var scope = originalScope.$new();
            originalScope.$on("$destroy", function() {
                scope.$destroy();
            });
            var resetMatches = function() {
                scope.matches = [], scope.activeIdx = -1, element.attr("aria-expanded", !1);
            }, getMatchesAsync = function(inputValue) {
                var locals = {
                    $viewValue: inputValue
                };
                isLoadingSetter(originalScope, !0), $q.when(parserResult.source(originalScope, locals)).then(function(matches) {
                    var onCurrentRequest = inputValue === modelCtrl.$viewValue;
                    if (onCurrentRequest && hasFocus) if (matches.length > 0) {
                        scope.activeIdx = 0, scope.matches.length = 0;
                        for (var i = 0; i < matches.length; i++) locals[parserResult.itemName] = matches[i], 
                        scope.matches.push({
                            label: parserResult.viewMapper(scope, locals),
                            model: matches[i]
                        });
                        scope.query = inputValue, scope.position = appendToBody ? $position.offset(element) : $position.position(element), 
                        scope.position.top = scope.position.top + element.prop("offsetHeight"), element.attr("aria-expanded", !0);
                    } else resetMatches();
                    onCurrentRequest && isLoadingSetter(originalScope, !1);
                }, function() {
                    resetMatches(), isLoadingSetter(originalScope, !1);
                });
            };
            resetMatches(), scope.query = void 0;
            var timeoutPromise;
            modelCtrl.$parsers.unshift(function(inputValue) {
                return hasFocus = !0, inputValue && inputValue.length >= minSearch ? waitTime > 0 ? (timeoutPromise && $timeout.cancel(timeoutPromise), 
                timeoutPromise = $timeout(function() {
                    getMatchesAsync(inputValue);
                }, waitTime)) : getMatchesAsync(inputValue) : (isLoadingSetter(originalScope, !1), 
                resetMatches()), isEditable ? inputValue : inputValue ? void modelCtrl.$setValidity("editable", !1) : (modelCtrl.$setValidity("editable", !0), 
                inputValue);
            }), modelCtrl.$formatters.push(function(modelValue) {
                var candidateViewValue, emptyViewValue, locals = {};
                return inputFormatter ? (locals.$model = modelValue, inputFormatter(originalScope, locals)) : (locals[parserResult.itemName] = modelValue, 
                candidateViewValue = parserResult.viewMapper(originalScope, locals), locals[parserResult.itemName] = void 0, 
                emptyViewValue = parserResult.viewMapper(originalScope, locals), candidateViewValue !== emptyViewValue ? candidateViewValue : modelValue);
            }), scope.select = function(activeIdx) {
                var model, item, locals = {};
                locals[parserResult.itemName] = item = scope.matches[activeIdx].model, model = parserResult.modelMapper(originalScope, locals), 
                $setModelValue(originalScope, model), modelCtrl.$setValidity("editable", !0), onSelectCallback(originalScope, {
                    $item: item,
                    $model: model,
                    $label: parserResult.viewMapper(originalScope, locals)
                }), resetMatches(), element[0].focus();
            }, element.bind("keydown", function(evt) {
                0 !== scope.matches.length && -1 !== HOT_KEYS.indexOf(evt.which) && (evt.preventDefault(), 
                40 === evt.which ? (scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length, 
                scope.$digest()) : 38 === evt.which ? (scope.activeIdx = (scope.activeIdx ? scope.activeIdx : scope.matches.length) - 1, 
                scope.$digest()) : 13 === evt.which || 9 === evt.which ? scope.$apply(function() {
                    scope.select(scope.activeIdx);
                }) : 27 === evt.which && (evt.stopPropagation(), resetMatches(), scope.$digest()));
            }), element.bind("blur", function() {
                hasFocus = !1;
            });
            var dismissClickHandler = function(evt) {
                element[0] !== evt.target && (resetMatches(), scope.$digest());
            };
            $document.bind("click", dismissClickHandler), originalScope.$on("$destroy", function() {
                $document.unbind("click", dismissClickHandler);
            });
            var $popup = $compile(popUpEl)(scope);
            appendToBody ? $document.find("body").append($popup) : element.after($popup);
        }
    };
} ]).directive("typeaheadPopup", function() {
    return {
        restrict: "EA",
        scope: {
            matches: "=",
            query: "=",
            active: "=",
            position: "=",
            select: "&"
        },
        replace: !0,
        templateUrl: "template/typeahead/typeahead-popup.html",
        link: function(scope, element, attrs) {
            scope.templateUrl = attrs.templateUrl, scope.isOpen = function() {
                return scope.matches.length > 0;
            }, scope.isActive = function(matchIdx) {
                return scope.active == matchIdx;
            }, scope.selectActive = function(matchIdx) {
                scope.active = matchIdx;
            }, scope.selectMatch = function(activeIdx) {
                scope.select({
                    activeIdx: activeIdx
                });
            };
        }
    };
}).directive("typeaheadMatch", [ "$http", "$templateCache", "$compile", "$parse", function($http, $templateCache, $compile, $parse) {
    return {
        restrict: "EA",
        scope: {
            index: "=",
            match: "=",
            query: "="
        },
        link: function(scope, element, attrs) {
            var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || "template/typeahead/typeahead-match.html";
            $http.get(tplUrl, {
                cache: $templateCache
            }).success(function(tplContent) {
                element.replaceWith($compile(tplContent.trim())(scope));
            });
        }
    };
} ]).filter("typeaheadHighlight", function() {
    function escapeRegexp(queryToEscape) {
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
    }
    return function(matchItem, query) {
        return query ? ("" + matchItem).replace(new RegExp(escapeRegexp(query), "gi"), "<strong>$&</strong>") : matchItem;
    };
}), angular.module("template/accordion/accordion-group.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/accordion/accordion-group.html", '<div class="panel panel-default">\n  <div class="panel-heading">\n    <h4 class="panel-title">\n      <a class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse" collapse="!isOpen">\n	  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>');
} ]), angular.module("template/accordion/accordion.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/accordion/accordion.html", '<div class="panel-group" ng-transclude></div>');
} ]), angular.module("template/alert/alert.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/alert/alert.html", '<div class="alert" ng-class="{\'alert-{{type || \'warning\'}}\': true, \'alert-dismissable\': closeable}" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close()">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n');
} ]), angular.module("template/carousel/carousel.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/carousel/carousel.html", '<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\n        <li ng-repeat="slide in slides track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n    </ol>\n    <div class="carousel-inner" ng-transclude></div>\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="icon-prev"></span></a>\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="icon-next"></span></a>\n</div>\n');
} ]), angular.module("template/carousel/slide.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/carousel/slide.html", "<div ng-class=\"{\n    'active': leaving || (active && !entering),\n    'prev': (next || active) && direction=='prev',\n    'next': (next || active) && direction=='next',\n    'right': direction=='prev',\n    'left': direction=='next'\n  }\" class=\"item text-center\" ng-transclude></div>\n");
} ]), angular.module("template/datepicker/datepicker.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/datepicker/datepicker.html", '<div ng-switch="datepickerMode">\n  <daypicker ng-switch-when="day"></daypicker>\n  <monthpicker ng-switch-when="month"></monthpicker>\n  <yearpicker ng-switch-when="year"></yearpicker>\n</div>');
} ]), angular.module("template/datepicker/day.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/datepicker/day.html", '<table>\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{5 + showWeeks}}"><button type="button" class="btn btn-default btn-sm btn-block" ng-click="toggleMode()"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-show="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in labels track by $index" class="text-center"><small>{{label}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-show="showWeeks" class="text-center"><small><em>{{ weekNumbers[$index] }}</em></small></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center">\n        <button type="button" style="width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected}" ng-click="select(dt.date)" ng-disabled="dt.disabled"><span ng-class="{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n');
} ]), angular.module("template/datepicker/month.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/datepicker/month.html", '<table>\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button type="button" class="btn btn-default btn-sm btn-block" ng-click="toggleMode()"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected}" ng-click="select(dt.date)" ng-disabled="dt.disabled"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n');
} ]), angular.module("template/datepicker/popup.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/datepicker/popup.html", "<ul class=\"dropdown-menu\" ng-style=\"{display: (isOpen && 'block') || 'none', top: position.top+'px', left: position.left+'px'}\">\n	<li ng-transclude></li>\n" + '	<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n		<span class="btn-group">\n			<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')">{{ getText(\'current\') }}</button>\n			<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n		</span>\n		<button type="button" class="btn btn-sm btn-success pull-right" ng-click="$parent.isOpen = false">{{ getText(\'close\') }}</button>\n	</li>\n</ul>\n');
} ]), angular.module("template/datepicker/year.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/datepicker/year.html", '<table>\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button type="button" class="btn btn-default btn-sm btn-block" ng-click="toggleMode()"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected}" ng-click="select(dt.date)" ng-disabled="dt.disabled"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n');
} ]), angular.module("template/modal/backdrop.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/modal/backdrop.html", '<div class="modal-backdrop fade"\n     ng-class="{in: animate}"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n');
} ]), angular.module("template/modal/window.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/modal/window.html", '<div tabindex="-1" class="modal fade {{ windowClass }}" ng-class="{in: animate}" ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}" >\n    <div class="modal-dialog"><div class="modal-content" ng-transclude></div></div>\n</div>');
} ]), angular.module("template/pagination/pager.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/pagination/pager.html", '<ul class="pager">\n  <li ng-class="{disabled: noPrevious(), previous: align}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext(), next: align}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n</ul>');
} ]), angular.module("template/pagination/pagination.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/pagination/pagination.html", '<ul class="pagination">\n  <li ng-if="boundaryLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(1)">{{getText(\'first\')}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active}"><a href ng-click="selectPage(page.number)">{{page.text}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n  <li ng-if="boundaryLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(totalPages)">{{getText(\'last\')}}</a></li>\n</ul>');
} ]), angular.module("template/tooltip/tooltip-html-unsafe-popup.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/tooltip/tooltip-html-unsafe-popup.html", '<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n</div>\n');
} ]), angular.module("template/tooltip/tooltip-popup.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/tooltip/tooltip-popup.html", '<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n');
} ]), angular.module("template/popover/popover.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/popover/popover.html", '<div class="popover {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-show="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n');
} ]), angular.module("template/progressbar/bar.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/progressbar/bar.html", '<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>');
} ]), angular.module("template/progressbar/progress.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/progressbar/progress.html", '<div class="progress" ng-transclude></div>');
} ]), angular.module("template/progressbar/progressbar.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/progressbar/progressbar.html", '<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>\n</div>');
} ]), angular.module("template/rating/rating.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/rating/rating.html", '<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <i ng-repeat="r in range track by $index" ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')">\n        <span class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    </i>\n</span>');
} ]), angular.module("template/tabs/tab.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/tabs/tab.html", '<li ng-class="{active: active, disabled: disabled}">\n  <a ng-click="select()" tab-heading-transclude>{{heading}}</a>\n</li>\n');
} ]), angular.module("template/tabs/tabset.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/tabs/tabset.html", '\n<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n');
} ]), angular.module("template/timepicker/timepicker.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/timepicker/timepicker.html", '<table>\n	<tbody>\n		<tr class="text-center">\n			<td><a ng-click="incrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n			<td>&nbsp;</td>\n			<td><a ng-click="incrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n			<td ng-show="showMeridian"></td>\n		</tr>\n		<tr>\n			<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidHours}">\n				<input type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-mousewheel="incrementHours()" ng-readonly="readonlyInput" maxlength="2">\n			</td>\n			<td>:</td>\n			<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n				<input type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2">\n			</td>\n			<td ng-show="showMeridian"><button type="button" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n		</tr>\n		<tr class="text-center">\n			<td><a ng-click="decrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n			<td>&nbsp;</td>\n			<td><a ng-click="decrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n			<td ng-show="showMeridian"></td>\n		</tr>\n	</tbody>\n</table>\n');
} ]), angular.module("template/typeahead/typeahead-match.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/typeahead/typeahead-match.html", '<a tabindex="-1" bind-html-unsafe="match.label | typeaheadHighlight:query"></a>');
} ]), angular.module("template/typeahead/typeahead-popup.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/typeahead/typeahead-popup.html", '<ul class="dropdown-menu" ng-if="isOpen()" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option">\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>');
} ]), "undefined" == typeof jQuery) throw new Error("Bootstrap's JavaScript requires jQuery");

+function(a) {
    "use strict";
    function b() {
        var a = document.createElement("bootstrap"), b = {
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "oTransitionEnd otransitionend",
            transition: "transitionend"
        };
        for (var c in b) if (void 0 !== a.style[c]) return {
            end: b[c]
        };
        return !1;
    }
    a.fn.emulateTransitionEnd = function(b) {
        var c = !1, d = this;
        a(this).one(a.support.transition.end, function() {
            c = !0;
        });
        var e = function() {
            c || a(d).trigger(a.support.transition.end);
        };
        return setTimeout(e, b), this;
    }, a(function() {
        a.support.transition = b();
    });
}(jQuery), +function(a) {
    "use strict";
    var b = '[data-dismiss="alert"]', c = function(c) {
        a(c).on("click", b, this.close);
    };
    c.prototype.close = function(b) {
        function c() {
            f.trigger("closed.bs.alert").remove();
        }
        var d = a(this), e = d.attr("data-target");
        e || (e = d.attr("href"), e = e && e.replace(/.*(?=#[^\s]*$)/, ""));
        var f = a(e);
        b && b.preventDefault(), f.length || (f = d.hasClass("alert") ? d : d.parent()), 
        f.trigger(b = a.Event("close.bs.alert")), b.isDefaultPrevented() || (f.removeClass("in"), 
        a.support.transition && f.hasClass("fade") ? f.one(a.support.transition.end, c).emulateTransitionEnd(150) : c());
    };
    var d = a.fn.alert;
    a.fn.alert = function(b) {
        return this.each(function() {
            var d = a(this), e = d.data("bs.alert");
            e || d.data("bs.alert", e = new c(this)), "string" == typeof b && e[b].call(d);
        });
    }, a.fn.alert.Constructor = c, a.fn.alert.noConflict = function() {
        return a.fn.alert = d, this;
    }, a(document).on("click.bs.alert.data-api", b, c.prototype.close);
}(jQuery), +function(a) {
    "use strict";
    var b = function(c, d) {
        this.$element = a(c), this.options = a.extend({}, b.DEFAULTS, d), this.isLoading = !1;
    };
    b.DEFAULTS = {
        loadingText: "loading..."
    }, b.prototype.setState = function(b) {
        var c = "disabled", d = this.$element, e = d.is("input") ? "val" : "html", f = d.data();
        b += "Text", f.resetText || d.data("resetText", d[e]()), d[e](f[b] || this.options[b]), 
        setTimeout(a.proxy(function() {
            "loadingText" == b ? (this.isLoading = !0, d.addClass(c).attr(c, c)) : this.isLoading && (this.isLoading = !1, 
            d.removeClass(c).removeAttr(c));
        }, this), 0);
    }, b.prototype.toggle = function() {
        var a = !0, b = this.$element.closest('[data-toggle="buttons"]');
        if (b.length) {
            var c = this.$element.find("input");
            "radio" == c.prop("type") && (c.prop("checked") && this.$element.hasClass("active") ? a = !1 : b.find(".active").removeClass("active")), 
            a && c.prop("checked", !this.$element.hasClass("active")).trigger("change");
        }
        a && this.$element.toggleClass("active");
    };
    var c = a.fn.button;
    a.fn.button = function(c) {
        return this.each(function() {
            var d = a(this), e = d.data("bs.button"), f = "object" == typeof c && c;
            e || d.data("bs.button", e = new b(this, f)), "toggle" == c ? e.toggle() : c && e.setState(c);
        });
    }, a.fn.button.Constructor = b, a.fn.button.noConflict = function() {
        return a.fn.button = c, this;
    }, a(document).on("click.bs.button.data-api", "[data-toggle^=button]", function(b) {
        var c = a(b.target);
        c.hasClass("btn") || (c = c.closest(".btn")), c.button("toggle"), b.preventDefault();
    });
}(jQuery), +function(a) {
    "use strict";
    var b = function(b, c) {
        this.$element = a(b), this.$indicators = this.$element.find(".carousel-indicators"), 
        this.options = c, this.paused = this.sliding = this.interval = this.$active = this.$items = null, 
        "hover" == this.options.pause && this.$element.on("mouseenter", a.proxy(this.pause, this)).on("mouseleave", a.proxy(this.cycle, this));
    };
    b.DEFAULTS = {
        interval: 5e3,
        pause: "hover",
        wrap: !0
    }, b.prototype.cycle = function(b) {
        return b || (this.paused = !1), this.interval && clearInterval(this.interval), this.options.interval && !this.paused && (this.interval = setInterval(a.proxy(this.next, this), this.options.interval)), 
        this;
    }, b.prototype.getActiveIndex = function() {
        return this.$active = this.$element.find(".item.active"), this.$items = this.$active.parent().children(), 
        this.$items.index(this.$active);
    }, b.prototype.to = function(b) {
        var c = this, d = this.getActiveIndex();
        return b > this.$items.length - 1 || 0 > b ? void 0 : this.sliding ? this.$element.one("slid.bs.carousel", function() {
            c.to(b);
        }) : d == b ? this.pause().cycle() : this.slide(b > d ? "next" : "prev", a(this.$items[b]));
    }, b.prototype.pause = function(b) {
        return b || (this.paused = !0), this.$element.find(".next, .prev").length && a.support.transition && (this.$element.trigger(a.support.transition.end), 
        this.cycle(!0)), this.interval = clearInterval(this.interval), this;
    }, b.prototype.next = function() {
        return this.sliding ? void 0 : this.slide("next");
    }, b.prototype.prev = function() {
        return this.sliding ? void 0 : this.slide("prev");
    }, b.prototype.slide = function(b, c) {
        var d = this.$element.find(".item.active"), e = c || d[b](), f = this.interval, g = "next" == b ? "left" : "right", h = "next" == b ? "first" : "last", i = this;
        if (!e.length) {
            if (!this.options.wrap) return;
            e = this.$element.find(".item")[h]();
        }
        if (e.hasClass("active")) return this.sliding = !1;
        var j = a.Event("slide.bs.carousel", {
            relatedTarget: e[0],
            direction: g
        });
        return this.$element.trigger(j), j.isDefaultPrevented() ? void 0 : (this.sliding = !0, 
        f && this.pause(), this.$indicators.length && (this.$indicators.find(".active").removeClass("active"), 
        this.$element.one("slid.bs.carousel", function() {
            var b = a(i.$indicators.children()[i.getActiveIndex()]);
            b && b.addClass("active");
        })), a.support.transition && this.$element.hasClass("slide") ? (e.addClass(b), e[0].offsetWidth, 
        d.addClass(g), e.addClass(g), d.one(a.support.transition.end, function() {
            e.removeClass([ b, g ].join(" ")).addClass("active"), d.removeClass([ "active", g ].join(" ")), 
            i.sliding = !1, setTimeout(function() {
                i.$element.trigger("slid.bs.carousel");
            }, 0);
        }).emulateTransitionEnd(1e3 * d.css("transition-duration").slice(0, -1))) : (d.removeClass("active"), 
        e.addClass("active"), this.sliding = !1, this.$element.trigger("slid.bs.carousel")), 
        f && this.cycle(), this);
    };
    var c = a.fn.carousel;
    a.fn.carousel = function(c) {
        return this.each(function() {
            var d = a(this), e = d.data("bs.carousel"), f = a.extend({}, b.DEFAULTS, d.data(), "object" == typeof c && c), g = "string" == typeof c ? c : f.slide;
            e || d.data("bs.carousel", e = new b(this, f)), "number" == typeof c ? e.to(c) : g ? e[g]() : f.interval && e.pause().cycle();
        });
    }, a.fn.carousel.Constructor = b, a.fn.carousel.noConflict = function() {
        return a.fn.carousel = c, this;
    }, a(document).on("click.bs.carousel.data-api", "[data-slide], [data-slide-to]", function(b) {
        var c, d = a(this), e = a(d.attr("data-target") || (c = d.attr("href")) && c.replace(/.*(?=#[^\s]+$)/, "")), f = a.extend({}, e.data(), d.data()), g = d.attr("data-slide-to");
        g && (f.interval = !1), e.carousel(f), (g = d.attr("data-slide-to")) && e.data("bs.carousel").to(g), 
        b.preventDefault();
    }), a(window).on("load", function() {
        a('[data-ride="carousel"]').each(function() {
            var b = a(this);
            b.carousel(b.data());
        });
    });
}(jQuery), +function(a) {
    "use strict";
    var b = function(c, d) {
        this.$element = a(c), this.options = a.extend({}, b.DEFAULTS, d), this.transitioning = null, 
        this.options.parent && (this.$parent = a(this.options.parent)), this.options.toggle && this.toggle();
    };
    b.DEFAULTS = {
        toggle: !0
    }, b.prototype.dimension = function() {
        var a = this.$element.hasClass("width");
        return a ? "width" : "height";
    }, b.prototype.show = function() {
        if (!this.transitioning && !this.$element.hasClass("in")) {
            var b = a.Event("show.bs.collapse");
            if (this.$element.trigger(b), !b.isDefaultPrevented()) {
                var c = this.$parent && this.$parent.find("> .panel > .in");
                if (c && c.length) {
                    var d = c.data("bs.collapse");
                    if (d && d.transitioning) return;
                    c.collapse("hide"), d || c.data("bs.collapse", null);
                }
                var e = this.dimension();
                this.$element.removeClass("collapse").addClass("collapsing")[e](0), this.transitioning = 1;
                var f = function(a) {
                    a && a.target != this.$element[0] || (this.$element.removeClass("collapsing").addClass("collapse in")[e]("auto"), 
                    this.transitioning = 0, this.$element.trigger("shown.bs.collapse"));
                };
                if (!a.support.transition) return f.call(this);
                var g = a.camelCase([ "scroll", e ].join("-"));
                this.$element.one(a.support.transition.end, a.proxy(f, this)).emulateTransitionEnd(350)[e](this.$element[0][g]);
            }
        }
    }, b.prototype.hide = function() {
        if (!this.transitioning && this.$element.hasClass("in")) {
            var b = a.Event("hide.bs.collapse");
            if (this.$element.trigger(b), !b.isDefaultPrevented()) {
                var c = this.dimension();
                this.$element[c](this.$element[c]())[0].offsetHeight, this.$element.addClass("collapsing").removeClass("collapse").removeClass("in"), 
                this.transitioning = 1;
                var d = function(a) {
                    a && a.target != this.$element[0] || (this.transitioning = 0, this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse"));
                };
                return a.support.transition ? void this.$element[c](0).one(a.support.transition.end, a.proxy(d, this)).emulateTransitionEnd(350) : d.call(this);
            }
        }
    }, b.prototype.toggle = function() {
        this[this.$element.hasClass("in") ? "hide" : "show"]();
    };
    var c = a.fn.collapse;
    a.fn.collapse = function(c) {
        return this.each(function() {
            var d = a(this), e = d.data("bs.collapse"), f = a.extend({}, b.DEFAULTS, d.data(), "object" == typeof c && c);
            !e && f.toggle && "show" == c && (c = !c), e || d.data("bs.collapse", e = new b(this, f)), 
            "string" == typeof c && e[c]();
        });
    }, a.fn.collapse.Constructor = b, a.fn.collapse.noConflict = function() {
        return a.fn.collapse = c, this;
    }, a(document).on("click.bs.collapse.data-api", '[data-toggle="collapse"]', function(b) {
        var c, d = a(this), e = d.attr("data-target") || b.preventDefault() || (c = d.attr("href")) && c.replace(/.*(?=#[^\s]+$)/, ""), f = a(e), g = f.data("bs.collapse"), h = g ? "toggle" : d.data(), i = d.attr("data-parent"), j = i && a(i);
        g && g.transitioning || (j && j.find('[data-toggle="collapse"][data-parent="' + i + '"]').not(d).addClass("collapsed"), 
        d[f.hasClass("in") ? "addClass" : "removeClass"]("collapsed")), f.collapse(h);
    });
}(jQuery), +function(a) {
    "use strict";
    function b(b) {
        a(d).remove(), a(e).each(function() {
            var d = c(a(this)), e = {
                relatedTarget: this
            };
            d.hasClass("open") && (d.trigger(b = a.Event("hide.bs.dropdown", e)), b.isDefaultPrevented() || d.removeClass("open").trigger("hidden.bs.dropdown", e));
        });
    }
    function c(b) {
        var c = b.attr("data-target");
        c || (c = b.attr("href"), c = c && /#[A-Za-z]/.test(c) && c.replace(/.*(?=#[^\s]*$)/, ""));
        var d = c && a(c);
        return d && d.length ? d : b.parent();
    }
    var d = ".dropdown-backdrop", e = '[data-toggle="dropdown"]', f = function(b) {
        a(b).on("click.bs.dropdown", this.toggle);
    };
    f.prototype.toggle = function(d) {
        var e = a(this);
        if (!e.is(".disabled, :disabled")) {
            var f = c(e), g = f.hasClass("open");
            if (b(), !g) {
                "ontouchstart" in document.documentElement && !f.closest(".navbar-nav").length && a('<div class="dropdown-backdrop"/>').insertAfter(a(this)).on("click", b);
                var h = {
                    relatedTarget: this
                };
                if (f.trigger(d = a.Event("show.bs.dropdown", h)), d.isDefaultPrevented()) return;
                f.toggleClass("open").trigger("shown.bs.dropdown", h), e.trigger("focus");
            }
            return !1;
        }
    }, f.prototype.keydown = function(b) {
        if (/(38|40|27)/.test(b.keyCode)) {
            var d = a(this);
            if (b.preventDefault(), b.stopPropagation(), !d.is(".disabled, :disabled")) {
                var f = c(d), g = f.hasClass("open");
                if (!g || g && 27 == b.keyCode) return 27 == b.which && f.find(e).trigger("focus"), 
                d.trigger("click");
                var h = " li:not(.divider):visible a", i = f.find('[role="menu"]' + h + ', [role="listbox"]' + h);
                if (i.length) {
                    var j = i.index(i.filter(":focus"));
                    38 == b.keyCode && j > 0 && j--, 40 == b.keyCode && j < i.length - 1 && j++, ~j || (j = 0), 
                    i.eq(j).trigger("focus");
                }
            }
        }
    };
    var g = a.fn.dropdown;
    a.fn.dropdown = function(b) {
        return this.each(function() {
            var c = a(this), d = c.data("bs.dropdown");
            d || c.data("bs.dropdown", d = new f(this)), "string" == typeof b && d[b].call(c);
        });
    }, a.fn.dropdown.Constructor = f, a.fn.dropdown.noConflict = function() {
        return a.fn.dropdown = g, this;
    }, a(document).on("click.bs.dropdown.data-api", b).on("click.bs.dropdown.data-api", ".dropdown form", function(a) {
        a.stopPropagation();
    }).on("click.bs.dropdown.data-api", e, f.prototype.toggle).on("keydown.bs.dropdown.data-api", e + ', [role="menu"], [role="listbox"]', f.prototype.keydown);
}(jQuery), +function(a) {
    "use strict";
    var b = function(b, c) {
        this.options = c, this.$element = a(b), this.$backdrop = this.isShown = null, this.options.remote && this.$element.find(".modal-content").load(this.options.remote, a.proxy(function() {
            this.$element.trigger("loaded.bs.modal");
        }, this));
    };
    b.DEFAULTS = {
        backdrop: !0,
        keyboard: !0,
        show: !0
    }, b.prototype.toggle = function(a) {
        return this[this.isShown ? "hide" : "show"](a);
    }, b.prototype.show = function(b) {
        var c = this, d = a.Event("show.bs.modal", {
            relatedTarget: b
        });
        this.$element.trigger(d), this.isShown || d.isDefaultPrevented() || (this.isShown = !0, 
        this.escape(), this.$element.on("click.dismiss.bs.modal", '[data-dismiss="modal"]', a.proxy(this.hide, this)), 
        this.backdrop(function() {
            var d = a.support.transition && c.$element.hasClass("fade");
            c.$element.parent().length || c.$element.appendTo(document.body), c.$element.show().scrollTop(0), 
            d && c.$element[0].offsetWidth, c.$element.addClass("in").attr("aria-hidden", !1), 
            c.enforceFocus();
            var e = a.Event("shown.bs.modal", {
                relatedTarget: b
            });
            d ? c.$element.find(".modal-dialog").one(a.support.transition.end, function() {
                c.$element.trigger("focus").trigger(e);
            }).emulateTransitionEnd(300) : c.$element.trigger("focus").trigger(e);
        }));
    }, b.prototype.hide = function(b) {
        b && b.preventDefault(), b = a.Event("hide.bs.modal"), this.$element.trigger(b), 
        this.isShown && !b.isDefaultPrevented() && (this.isShown = !1, this.escape(), a(document).off("focusin.bs.modal"), 
        this.$element.removeClass("in").attr("aria-hidden", !0).off("click.dismiss.bs.modal"), 
        a.support.transition && this.$element.hasClass("fade") ? this.$element.one(a.support.transition.end, a.proxy(this.hideModal, this)).emulateTransitionEnd(300) : this.hideModal());
    }, b.prototype.enforceFocus = function() {
        a(document).off("focusin.bs.modal").on("focusin.bs.modal", a.proxy(function(a) {
            this.$element[0] === a.target || this.$element.has(a.target).length || this.$element.trigger("focus");
        }, this));
    }, b.prototype.escape = function() {
        this.isShown && this.options.keyboard ? this.$element.on("keyup.dismiss.bs.modal", a.proxy(function(a) {
            27 == a.which && this.hide();
        }, this)) : this.isShown || this.$element.off("keyup.dismiss.bs.modal");
    }, b.prototype.hideModal = function() {
        var a = this;
        this.$element.hide(), this.backdrop(function() {
            a.removeBackdrop(), a.$element.trigger("hidden.bs.modal");
        });
    }, b.prototype.removeBackdrop = function() {
        this.$backdrop && this.$backdrop.remove(), this.$backdrop = null;
    }, b.prototype.backdrop = function(b) {
        var c = this.$element.hasClass("fade") ? "fade" : "";
        if (this.isShown && this.options.backdrop) {
            var d = a.support.transition && c;
            if (this.$backdrop = a('<div class="modal-backdrop ' + c + '" />').appendTo(document.body), 
            this.$element.on("click.dismiss.bs.modal", a.proxy(function(a) {
                a.target === a.currentTarget && ("static" == this.options.backdrop ? this.$element[0].focus.call(this.$element[0]) : this.hide.call(this));
            }, this)), d && this.$backdrop[0].offsetWidth, this.$backdrop.addClass("in"), !b) return;
            d ? this.$backdrop.one(a.support.transition.end, b).emulateTransitionEnd(150) : b();
        } else !this.isShown && this.$backdrop ? (this.$backdrop.removeClass("in"), a.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one(a.support.transition.end, b).emulateTransitionEnd(150) : b()) : b && b();
    };
    var c = a.fn.modal;
    a.fn.modal = function(c, d) {
        return this.each(function() {
            var e = a(this), f = e.data("bs.modal"), g = a.extend({}, b.DEFAULTS, e.data(), "object" == typeof c && c);
            f || e.data("bs.modal", f = new b(this, g)), "string" == typeof c ? f[c](d) : g.show && f.show(d);
        });
    }, a.fn.modal.Constructor = b, a.fn.modal.noConflict = function() {
        return a.fn.modal = c, this;
    }, a(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function(b) {
        var c = a(this), d = c.attr("href"), e = a(c.attr("data-target") || d && d.replace(/.*(?=#[^\s]+$)/, "")), f = e.data("bs.modal") ? "toggle" : a.extend({
            remote: !/#/.test(d) && d
        }, e.data(), c.data());
        c.is("a") && b.preventDefault(), e.modal(f, this).one("hide", function() {
            c.is(":visible") && c.trigger("focus");
        });
    }), a(document).on("show.bs.modal", ".modal", function() {
        a(document.body).addClass("modal-open");
    }).on("hidden.bs.modal", ".modal", function() {
        a(document.body).removeClass("modal-open");
    });
}(jQuery), +function(a) {
    "use strict";
    var b = function(a, b) {
        this.type = this.options = this.enabled = this.timeout = this.hoverState = this.$element = null, 
        this.init("tooltip", a, b);
    };
    b.DEFAULTS = {
        animation: !0,
        placement: "top",
        selector: !1,
        template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover focus",
        title: "",
        delay: 0,
        html: !1,
        container: !1
    }, b.prototype.init = function(b, c, d) {
        this.enabled = !0, this.type = b, this.$element = a(c), this.options = this.getOptions(d);
        for (var e = this.options.trigger.split(" "), f = e.length; f--; ) {
            var g = e[f];
            if ("click" == g) this.$element.on("click." + this.type, this.options.selector, a.proxy(this.toggle, this)); else if ("manual" != g) {
                var h = "hover" == g ? "mouseenter" : "focusin", i = "hover" == g ? "mouseleave" : "focusout";
                this.$element.on(h + "." + this.type, this.options.selector, a.proxy(this.enter, this)), 
                this.$element.on(i + "." + this.type, this.options.selector, a.proxy(this.leave, this));
            }
        }
        this.options.selector ? this._options = a.extend({}, this.options, {
            trigger: "manual",
            selector: ""
        }) : this.fixTitle();
    }, b.prototype.getDefaults = function() {
        return b.DEFAULTS;
    }, b.prototype.getOptions = function(b) {
        return b = a.extend({}, this.getDefaults(), this.$element.data(), b), b.delay && "number" == typeof b.delay && (b.delay = {
            show: b.delay,
            hide: b.delay
        }), b;
    }, b.prototype.getDelegateOptions = function() {
        var b = {}, c = this.getDefaults();
        return this._options && a.each(this._options, function(a, d) {
            c[a] != d && (b[a] = d);
        }), b;
    }, b.prototype.enter = function(b) {
        var c = b instanceof this.constructor ? b : a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type);
        return clearTimeout(c.timeout), c.hoverState = "in", c.options.delay && c.options.delay.show ? void (c.timeout = setTimeout(function() {
            "in" == c.hoverState && c.show();
        }, c.options.delay.show)) : c.show();
    }, b.prototype.leave = function(b) {
        var c = b instanceof this.constructor ? b : a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type);
        return clearTimeout(c.timeout), c.hoverState = "out", c.options.delay && c.options.delay.hide ? void (c.timeout = setTimeout(function() {
            "out" == c.hoverState && c.hide();
        }, c.options.delay.hide)) : c.hide();
    }, b.prototype.show = function() {
        var b = a.Event("show.bs." + this.type);
        if (this.hasContent() && this.enabled) {
            if (this.$element.trigger(b), b.isDefaultPrevented()) return;
            var c = this, d = this.tip();
            this.setContent(), this.options.animation && d.addClass("fade");
            var e = "function" == typeof this.options.placement ? this.options.placement.call(this, d[0], this.$element[0]) : this.options.placement, f = /\s?auto?\s?/i, g = f.test(e);
            g && (e = e.replace(f, "") || "top"), d.detach().css({
                top: 0,
                left: 0,
                display: "block"
            }).addClass(e), this.options.container ? d.appendTo(this.options.container) : d.insertAfter(this.$element);
            var h = this.getPosition(), i = d[0].offsetWidth, j = d[0].offsetHeight;
            if (g) {
                var k = this.$element.parent(), l = e, m = document.documentElement.scrollTop || document.body.scrollTop, n = "body" == this.options.container ? window.innerWidth : k.outerWidth(), o = "body" == this.options.container ? window.innerHeight : k.outerHeight(), p = "body" == this.options.container ? 0 : k.offset().left;
                e = "bottom" == e && h.top + h.height + j - m > o ? "top" : "top" == e && h.top - m - j < 0 ? "bottom" : "right" == e && h.right + i > n ? "left" : "left" == e && h.left - i < p ? "right" : e, 
                d.removeClass(l).addClass(e);
            }
            var q = this.getCalculatedOffset(e, h, i, j);
            this.applyPlacement(q, e), this.hoverState = null;
            var r = function() {
                c.$element.trigger("shown.bs." + c.type);
            };
            a.support.transition && this.$tip.hasClass("fade") ? d.one(a.support.transition.end, r).emulateTransitionEnd(150) : r();
        }
    }, b.prototype.applyPlacement = function(b, c) {
        var d, e = this.tip(), f = e[0].offsetWidth, g = e[0].offsetHeight, h = parseInt(e.css("margin-top"), 10), i = parseInt(e.css("margin-left"), 10);
        isNaN(h) && (h = 0), isNaN(i) && (i = 0), b.top = b.top + h, b.left = b.left + i, 
        a.offset.setOffset(e[0], a.extend({
            using: function(a) {
                e.css({
                    top: Math.round(a.top),
                    left: Math.round(a.left)
                });
            }
        }, b), 0), e.addClass("in");
        var j = e[0].offsetWidth, k = e[0].offsetHeight;
        if ("top" == c && k != g && (d = !0, b.top = b.top + g - k), /bottom|top/.test(c)) {
            var l = 0;
            b.left < 0 && (l = -2 * b.left, b.left = 0, e.offset(b), j = e[0].offsetWidth, k = e[0].offsetHeight), 
            this.replaceArrow(l - f + j, j, "left");
        } else this.replaceArrow(k - g, k, "top");
        d && e.offset(b);
    }, b.prototype.replaceArrow = function(a, b, c) {
        this.arrow().css(c, a ? 50 * (1 - a / b) + "%" : "");
    }, b.prototype.setContent = function() {
        var a = this.tip(), b = this.getTitle();
        a.find(".tooltip-inner")[this.options.html ? "html" : "text"](b), a.removeClass("fade in top bottom left right");
    }, b.prototype.hide = function() {
        function b() {
            "in" != c.hoverState && d.detach(), c.$element.trigger("hidden.bs." + c.type);
        }
        var c = this, d = this.tip(), e = a.Event("hide.bs." + this.type);
        return this.$element.trigger(e), e.isDefaultPrevented() ? void 0 : (d.removeClass("in"), 
        a.support.transition && this.$tip.hasClass("fade") ? d.one(a.support.transition.end, b).emulateTransitionEnd(150) : b(), 
        this.hoverState = null, this);
    }, b.prototype.fixTitle = function() {
        var a = this.$element;
        (a.attr("title") || "string" != typeof a.attr("data-original-title")) && a.attr("data-original-title", a.attr("title") || "").attr("title", "");
    }, b.prototype.hasContent = function() {
        return this.getTitle();
    }, b.prototype.getPosition = function() {
        var b = this.$element[0];
        return a.extend({}, "function" == typeof b.getBoundingClientRect ? b.getBoundingClientRect() : {
            width: b.offsetWidth,
            height: b.offsetHeight
        }, this.$element.offset());
    }, b.prototype.getCalculatedOffset = function(a, b, c, d) {
        return "bottom" == a ? {
            top: b.top + b.height,
            left: b.left + b.width / 2 - c / 2
        } : "top" == a ? {
            top: b.top - d,
            left: b.left + b.width / 2 - c / 2
        } : "left" == a ? {
            top: b.top + b.height / 2 - d / 2,
            left: b.left - c
        } : {
            top: b.top + b.height / 2 - d / 2,
            left: b.left + b.width
        };
    }, b.prototype.getTitle = function() {
        var a, b = this.$element, c = this.options;
        return a = b.attr("data-original-title") || ("function" == typeof c.title ? c.title.call(b[0]) : c.title);
    }, b.prototype.tip = function() {
        return this.$tip = this.$tip || a(this.options.template);
    }, b.prototype.arrow = function() {
        return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow");
    }, b.prototype.validate = function() {
        this.$element[0].parentNode || (this.hide(), this.$element = null, this.options = null);
    }, b.prototype.enable = function() {
        this.enabled = !0;
    }, b.prototype.disable = function() {
        this.enabled = !1;
    }, b.prototype.toggleEnabled = function() {
        this.enabled = !this.enabled;
    }, b.prototype.toggle = function(b) {
        var c = b ? a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type) : this;
        c.tip().hasClass("in") ? c.leave(c) : c.enter(c);
    }, b.prototype.destroy = function() {
        clearTimeout(this.timeout), this.hide().$element.off("." + this.type).removeData("bs." + this.type);
    };
    var c = a.fn.tooltip;
    a.fn.tooltip = function(c) {
        return this.each(function() {
            var d = a(this), e = d.data("bs.tooltip"), f = "object" == typeof c && c;
            (e || "destroy" != c) && (e || d.data("bs.tooltip", e = new b(this, f)), "string" == typeof c && e[c]());
        });
    }, a.fn.tooltip.Constructor = b, a.fn.tooltip.noConflict = function() {
        return a.fn.tooltip = c, this;
    };
}(jQuery), +function(a) {
    "use strict";
    var b = function(a, b) {
        this.init("popover", a, b);
    };
    if (!a.fn.tooltip) throw new Error("Popover requires tooltip.js");
    b.DEFAULTS = a.extend({}, a.fn.tooltip.Constructor.DEFAULTS, {
        placement: "right",
        trigger: "click",
        content: "",
        template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
    }), b.prototype = a.extend({}, a.fn.tooltip.Constructor.prototype), b.prototype.constructor = b, 
    b.prototype.getDefaults = function() {
        return b.DEFAULTS;
    }, b.prototype.setContent = function() {
        var a = this.tip(), b = this.getTitle(), c = this.getContent();
        a.find(".popover-title")[this.options.html ? "html" : "text"](b), a.find(".popover-content")[this.options.html ? "string" == typeof c ? "html" : "append" : "text"](c), 
        a.removeClass("fade top bottom left right in"), a.find(".popover-title").html() || a.find(".popover-title").hide();
    }, b.prototype.hasContent = function() {
        return this.getTitle() || this.getContent();
    }, b.prototype.getContent = function() {
        var a = this.$element, b = this.options;
        return a.attr("data-content") || ("function" == typeof b.content ? b.content.call(a[0]) : b.content);
    }, b.prototype.arrow = function() {
        return this.$arrow = this.$arrow || this.tip().find(".arrow");
    }, b.prototype.tip = function() {
        return this.$tip || (this.$tip = a(this.options.template)), this.$tip;
    };
    var c = a.fn.popover;
    a.fn.popover = function(c) {
        return this.each(function() {
            var d = a(this), e = d.data("bs.popover"), f = "object" == typeof c && c;
            (e || "destroy" != c) && (e || d.data("bs.popover", e = new b(this, f)), "string" == typeof c && e[c]());
        });
    }, a.fn.popover.Constructor = b, a.fn.popover.noConflict = function() {
        return a.fn.popover = c, this;
    };
}(jQuery), +function(a) {
    "use strict";
    function b(c, d) {
        var e, f = a.proxy(this.process, this);
        this.$element = a(a(c).is("body") ? window : c), this.$body = a("body"), this.$scrollElement = this.$element.on("scroll.bs.scroll-spy.data-api", f), 
        this.options = a.extend({}, b.DEFAULTS, d), this.selector = (this.options.target || (e = a(c).attr("href")) && e.replace(/.*(?=#[^\s]+$)/, "") || "") + " .nav li > a", 
        this.offsets = a([]), this.targets = a([]), this.activeTarget = null, this.refresh(), 
        this.process();
    }
    b.DEFAULTS = {
        offset: 10
    }, b.prototype.refresh = function() {
        var b = this.$element[0] == window ? "offset" : "position";
        this.offsets = a([]), this.targets = a([]);
        var c = this;
        this.$body.find(this.selector).map(function() {
            var d = a(this), e = d.data("target") || d.attr("href"), f = /^#./.test(e) && a(e);
            return f && f.length && f.is(":visible") && [ [ f[b]().top + (!a.isWindow(c.$scrollElement.get(0)) && c.$scrollElement.scrollTop()), e ] ] || null;
        }).sort(function(a, b) {
            return a[0] - b[0];
        }).each(function() {
            c.offsets.push(this[0]), c.targets.push(this[1]);
        });
    }, b.prototype.process = function() {
        var a, b = this.$scrollElement.scrollTop() + this.options.offset, c = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight, d = c - this.$scrollElement.height(), e = this.offsets, f = this.targets, g = this.activeTarget;
        if (b >= d) return g != (a = f.last()[0]) && this.activate(a);
        if (g && b <= e[0]) return g != (a = f[0]) && this.activate(a);
        for (a = e.length; a--; ) g != f[a] && b >= e[a] && (!e[a + 1] || b <= e[a + 1]) && this.activate(f[a]);
    }, b.prototype.activate = function(b) {
        this.activeTarget = b, a(this.selector).parentsUntil(this.options.target, ".active").removeClass("active");
        var c = this.selector + '[data-target="' + b + '"],' + this.selector + '[href="' + b + '"]', d = a(c).parents("li").addClass("active");
        d.parent(".dropdown-menu").length && (d = d.closest("li.dropdown").addClass("active")), 
        d.trigger("activate.bs.scrollspy");
    };
    var c = a.fn.scrollspy;
    a.fn.scrollspy = function(c) {
        return this.each(function() {
            var d = a(this), e = d.data("bs.scrollspy"), f = "object" == typeof c && c;
            e || d.data("bs.scrollspy", e = new b(this, f)), "string" == typeof c && e[c]();
        });
    }, a.fn.scrollspy.Constructor = b, a.fn.scrollspy.noConflict = function() {
        return a.fn.scrollspy = c, this;
    }, a(window).on("load", function() {
        a('[data-spy="scroll"]').each(function() {
            var b = a(this);
            b.scrollspy(b.data());
        });
    });
}(jQuery), +function(a) {
    "use strict";
    var b = function(b) {
        this.element = a(b);
    };
    b.prototype.show = function() {
        var b = this.element, c = b.closest("ul:not(.dropdown-menu)"), d = b.data("target");
        if (d || (d = b.attr("href"), d = d && d.replace(/.*(?=#[^\s]*$)/, "")), !b.parent("li").hasClass("active")) {
            var e = c.find(".active:last a")[0], f = a.Event("show.bs.tab", {
                relatedTarget: e
            });
            if (b.trigger(f), !f.isDefaultPrevented()) {
                var g = a(d);
                this.activate(b.parent("li"), c), this.activate(g, g.parent(), function() {
                    b.trigger({
                        type: "shown.bs.tab",
                        relatedTarget: e
                    });
                });
            }
        }
    }, b.prototype.activate = function(b, c, d) {
        function e() {
            f.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"), 
            b.addClass("active"), g ? (b[0].offsetWidth, b.addClass("in")) : b.removeClass("fade"), 
            b.parent(".dropdown-menu") && b.closest("li.dropdown").addClass("active"), d && d();
        }
        var f = c.find("> .active"), g = d && a.support.transition && f.hasClass("fade");
        g ? f.one(a.support.transition.end, e).emulateTransitionEnd(150) : e(), f.removeClass("in");
    };
    var c = a.fn.tab;
    a.fn.tab = function(c) {
        return this.each(function() {
            var d = a(this), e = d.data("bs.tab");
            e || d.data("bs.tab", e = new b(this)), "string" == typeof c && e[c]();
        });
    }, a.fn.tab.Constructor = b, a.fn.tab.noConflict = function() {
        return a.fn.tab = c, this;
    }, a(document).on("click.bs.tab.data-api", '[data-toggle="tab"], [data-toggle="pill"]', function(b) {
        b.preventDefault(), a(this).tab("show");
    });
}(jQuery), +function(a) {
    "use strict";
    var b = function(c, d) {
        this.options = a.extend({}, b.DEFAULTS, d), this.$window = a(window).on("scroll.bs.affix.data-api", a.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", a.proxy(this.checkPositionWithEventLoop, this)), 
        this.$element = a(c), this.affixed = this.unpin = this.pinnedOffset = null, this.checkPosition();
    };
    b.RESET = "affix affix-top affix-bottom", b.DEFAULTS = {
        offset: 0
    }, b.prototype.getPinnedOffset = function() {
        if (this.pinnedOffset) return this.pinnedOffset;
        this.$element.removeClass(b.RESET).addClass("affix");
        var a = this.$window.scrollTop(), c = this.$element.offset();
        return this.pinnedOffset = c.top - a;
    }, b.prototype.checkPositionWithEventLoop = function() {
        setTimeout(a.proxy(this.checkPosition, this), 1);
    }, b.prototype.checkPosition = function() {
        if (this.$element.is(":visible")) {
            var c = a(document).height(), d = this.$window.scrollTop(), e = this.$element.offset(), f = this.options.offset, g = f.top, h = f.bottom;
            "top" == this.affixed && (e.top += d), "object" != typeof f && (h = g = f), "function" == typeof g && (g = f.top(this.$element)), 
            "function" == typeof h && (h = f.bottom(this.$element));
            var i = null != this.unpin && d + this.unpin <= e.top ? !1 : null != h && e.top + this.$element.height() >= c - h ? "bottom" : null != g && g >= d ? "top" : !1;
            if (this.affixed !== i) {
                null != this.unpin && this.$element.css("top", "");
                var j = "affix" + (i ? "-" + i : ""), k = a.Event(j + ".bs.affix");
                this.$element.trigger(k), k.isDefaultPrevented() || (this.affixed = i, this.unpin = "bottom" == i ? this.getPinnedOffset() : null, 
                this.$element.removeClass(b.RESET).addClass(j).trigger(a.Event(j.replace("affix", "affixed"))), 
                "bottom" == i && this.$element.offset({
                    top: c - h - this.$element.height()
                }));
            }
        }
    };
    var c = a.fn.affix;
    a.fn.affix = function(c) {
        return this.each(function() {
            var d = a(this), e = d.data("bs.affix"), f = "object" == typeof c && c;
            e || d.data("bs.affix", e = new b(this, f)), "string" == typeof c && e[c]();
        });
    }, a.fn.affix.Constructor = b, a.fn.affix.noConflict = function() {
        return a.fn.affix = c, this;
    }, a(window).on("load", function() {
        a('[data-spy="affix"]').each(function() {
            var b = a(this), c = b.data();
            c.offset = c.offset || {}, c.offsetBottom && (c.offset.bottom = c.offsetBottom), 
            c.offsetTop && (c.offset.top = c.offsetTop), b.affix(c);
        });
    });
}(jQuery);

var hex_chr = "0123456789abcdef", a4p;

a4p || (a4p = {}), a4p.Aes = function() {
    function cipher(input, w) {
        for (var Nb = 4, Nr = w.length / Nb - 1, round = 0, state = [ [], [], [], [] ], i = 0; 4 * Nb > i; i++) state[i % 4][Math.floor(i / 4)] = input[i];
        for (state = addRoundKey(state, w, round, Nb), round++; Nr > round; round++) state = subBytes(state, Nb), 
        state = shiftRows(state, Nb), state = mixColumns(state, Nb), state = addRoundKey(state, w, round, Nb);
        state = subBytes(state, Nb), state = shiftRows(state, Nb), state = addRoundKey(state, w, round, Nb);
        for (var output = new Array(4 * Nb), i = 0; 4 * Nb > i; i++) output[i] = state[i % 4][Math.floor(i / 4)];
        return output;
    }
    function decipher(input, w) {
        for (var Nb = 4, Nr = w.length / Nb - 1, round = Nr, state = [ [], [], [], [] ], i = 0; 4 * Nb > i; i++) state[i % 4][Math.floor(i / 4)] = input[i];
        for (state = addRoundKey(state, w, round, Nb), round--; round > 0; round--) state = invShiftRows(state, Nb), 
        state = invSubBytes(state, Nb), state = addRoundKey(state, w, round, Nb), state = invMixColumns(state, Nb);
        state = invShiftRows(state, Nb), state = invSubBytes(state, Nb), state = addRoundKey(state, w, round, Nb);
        for (var output = new Array(4 * Nb), i = 0; 4 * Nb > i; i++) output[i] = state[i % 4][Math.floor(i / 4)];
        return output;
    }
    function keyExpansion(key) {
        for (var Nb = 4, Nk = key.length / 4, Nr = Nk + 6, w = new Array(Nb * (Nr + 1)), temp = new Array(4), i = 0; Nk > i; i++) {
            var r = [ key[4 * i], key[4 * i + 1], key[4 * i + 2], key[4 * i + 3] ];
            w[i] = r;
        }
        for (var i = Nk; Nb * (Nr + 1) > i; i++) {
            w[i] = new Array(4);
            for (var t = 0; 4 > t; t++) temp[t] = w[i - 1][t];
            if (0 == i % Nk) {
                temp = subWord(rotWord(temp));
                for (var t = 0; 4 > t; t++) temp[t] ^= rCon[i / Nk][t];
            } else Nk > 6 && 4 == i % Nk && (temp = subWord(temp));
            for (var t = 0; 4 > t; t++) w[i][t] = w[i - Nk][t] ^ temp[t];
        }
        return w;
    }
    function subBytes(s, Nb) {
        for (var r = 0; 4 > r; r++) for (var c = 0; Nb > c; c++) s[r][c] = sBox[s[r][c]];
        return s;
    }
    function invSubBytes(s, Nb) {
        for (var r = 0; 4 > r; r++) for (var c = 0; Nb > c; c++) s[r][c] = invsBox[s[r][c]];
        return s;
    }
    function shiftRows(s, Nb) {
        for (var t = new Array(4), r = 1; 4 > r; r++) {
            for (var c = 0; 4 > c; c++) t[c] = s[r][(c + r) % Nb];
            for (var c = 0; 4 > c; c++) s[r][c] = t[c];
        }
        return s;
    }
    function invShiftRows(s, Nb) {
        for (var t = new Array(4), r = 1; 4 > r; r++) {
            for (var c = 0; 4 > c; c++) t[c] = s[r][c];
            for (var c = 0; 4 > c; c++) s[r][(c + r) % Nb] = t[c];
        }
        return s;
    }
    function mixColumns(s) {
        for (var c = 0; 4 > c; c++) {
            for (var a = new Array(4), a2 = new Array(4), i = 0; 4 > i; i++) a[i] = s[i][c], 
            a2[i] = 128 & a[i] ? 283 ^ a[i] << 1 : a[i] << 1;
            s[0][c] = a2[0] ^ a[1] ^ a2[1] ^ a[2] ^ a[3], s[1][c] = a2[1] ^ a[2] ^ a2[2] ^ a[3] ^ a[0], 
            s[2][c] = a2[2] ^ a[3] ^ a2[3] ^ a[0] ^ a[1], s[3][c] = a2[3] ^ a[0] ^ a2[0] ^ a[1] ^ a[2];
        }
        return s;
    }
    function invMixColumns(s) {
        for (var c = 0; 4 > c; c++) {
            for (var a = new Array(4), a2 = new Array(4), a4 = new Array(4), a8 = new Array(4), i = 0; 4 > i; i++) a[i] = s[i][c], 
            a2[i] = 128 & a[i] ? 283 ^ a[i] << 1 : a[i] << 1, a4[i] = 128 & a2[i] ? 283 ^ a2[i] << 1 : a2[i] << 1, 
            a8[i] = 128 & a4[i] ? 283 ^ a4[i] << 1 : a4[i] << 1;
            s[0][c] = a8[0] ^ a4[0] ^ a2[0] ^ a8[1] ^ a2[1] ^ a[1] ^ a8[2] ^ a4[2] ^ a[2] ^ a8[3] ^ a[3], 
            s[1][c] = a8[1] ^ a4[1] ^ a2[1] ^ a8[2] ^ a2[2] ^ a[2] ^ a8[3] ^ a4[3] ^ a[3] ^ a8[0] ^ a[0], 
            s[2][c] = a8[2] ^ a4[2] ^ a2[2] ^ a8[3] ^ a2[3] ^ a[3] ^ a8[0] ^ a4[0] ^ a[0] ^ a8[1] ^ a[1], 
            s[3][c] = a8[3] ^ a4[3] ^ a2[3] ^ a8[0] ^ a2[0] ^ a[0] ^ a8[1] ^ a4[1] ^ a[1] ^ a8[2] ^ a[2];
        }
        return s;
    }
    function addRoundKey(state, w, rnd, Nb) {
        for (var r = 0; 4 > r; r++) for (var c = 0; Nb > c; c++) state[r][c] ^= w[4 * rnd + c][r];
        return state;
    }
    function subWord(w) {
        for (var i = 0; 4 > i; i++) w[i] = sBox[w[i]];
        return w;
    }
    function rotWord(w) {
        for (var tmp = w[0], i = 0; 3 > i; i++) w[i] = w[i + 1];
        return w[3] = tmp, w;
    }
    var Aes = {};
    Aes.encrypt = function(plaintext, stringkey) {
        var blockSize = 16;
        if (16 != stringkey.length && 24 != stringkey.length && 32 != stringkey.length) return "";
        for (var key = new Array(stringkey.length), i = 0; i < stringkey.length; i++) key[i] = 255 & stringkey.charCodeAt(i);
        for (var counterBlock = new Array(blockSize), keySchedule = keyExpansion(key), blockCount = Math.ceil(plaintext.length / blockSize), ciphertxt = new Array(blockCount), i = 0; blockSize > i; i++) counterBlock[i] = 0;
        for (var b = 0; blockCount > b; b++) {
            for (var i = 0; blockSize > i; i++) counterBlock[i] ^= 255 & plaintext.charCodeAt(b * blockSize + i);
            for (var cipherCntr = cipher(counterBlock, keySchedule), blockLength = blockCount - 1 > b ? blockSize : (plaintext.length - 1) % blockSize + 1, cipherChar = new Array(blockLength), i = 0; blockLength > i; i++) cipherChar[i] = String.fromCharCode(cipherCntr[i]);
            ciphertxt[b] = cipherChar.join("");
            for (var i = 0; blockSize > i; i++) counterBlock[i] = 0;
        }
        return ciphertxt.join("");
    }, Aes.decrypt = function(ciphertext, stringkey) {
        var blockSize = 16;
        if (16 != stringkey.length && 24 != stringkey.length && 32 != stringkey.length) return "";
        for (var key = new Array(stringkey.length), i = 0; i < stringkey.length; i++) key[i] = 255 & stringkey.charCodeAt(i);
        for (var counterBlock = new Array(blockSize), keySchedule = keyExpansion(key), blockCount = Math.ceil(ciphertext.length / blockSize), plaintxt = new Array(blockCount), i = 0; blockSize > i; i++) counterBlock[i] = 0;
        for (var b = 0; blockCount > b; b++) {
            for (var i = 0; blockSize > i; i++) counterBlock[i] ^= 255 & ciphertext.charCodeAt(b * blockSize + i);
            for (var cipherCntr = decipher(counterBlock, keySchedule), blockLength = blockCount - 1 > b ? blockSize : (ciphertext.length - 1) % blockSize + 1, cipherChar = new Array(blockLength), i = 0; blockLength > i; i++) cipherChar[i] = String.fromCharCode(cipherCntr[i]);
            plaintxt[b] = cipherChar.join("");
            for (var i = 0; blockSize > i; i++) counterBlock[i] = 0;
        }
        return plaintxt.join("");
    }, Aes.ctrEncrypt = function(plaintext, stringkey) {
        var blockSize = 16;
        if (16 != stringkey.length && 24 != stringkey.length && 32 != stringkey.length) return "";
        plaintext = a4p.Utf8.encode(plaintext);
        for (var key = new Array(stringkey.length), i = 0; i < stringkey.length; i++) key[i] = 255 & stringkey[i];
        for (var counterBlock = new Array(blockSize), nonce = new Date().getTime(), nonceMs = nonce % 1e3, nonceSec = Math.floor(nonce / 1e3), nonceRnd = Math.floor(65535 * Math.random()), i = 0; 2 > i; i++) counterBlock[i] = 255 & nonceMs >>> 8 * i;
        for (var i = 0; 2 > i; i++) counterBlock[i + 2] = 255 & nonceRnd >>> 8 * i;
        for (var i = 0; 4 > i; i++) counterBlock[i + 4] = 255 & nonceSec >>> 8 * i;
        for (var ctrTxt = "", i = 0; 8 > i; i++) ctrTxt += String.fromCharCode(counterBlock[i]);
        for (var keySchedule = keyExpansion(key), blockCount = Math.ceil(plaintext.length / blockSize), ciphertxt = new Array(blockCount), b = 0; blockCount > b; b++) {
            for (var c = 0; 4 > c; c++) counterBlock[15 - c] = 255 & b >>> 8 * c;
            for (var c = 0; 4 > c; c++) counterBlock[15 - c - 4] = b / 4294967296 >>> 8 * c;
            for (var cipherCntr = cipher(counterBlock, keySchedule), blockLength = blockCount - 1 > b ? blockSize : (plaintext.length - 1) % blockSize + 1, cipherChar = new Array(blockLength), i = 0; blockLength > i; i++) cipherChar[i] = cipherCntr[i] ^ plaintext.charCodeAt(b * blockSize + i), 
            cipherChar[i] = String.fromCharCode(cipherChar[i]);
            ciphertxt[b] = cipherChar.join("");
        }
        var ciphertext = ctrTxt + ciphertxt.join("");
        return ciphertext;
    }, Aes.ctrDecrypt = function(ciphertext, stringkey) {
        var blockSize = 16;
        if (16 != stringkey.length && 24 != stringkey.length && 32 != stringkey.length) return "";
        for (var key = new Array(stringkey.length), i = 0; i < stringkey.length; i++) key[i] = 255 & stringkey[i];
        for (var counterBlock = new Array(8), ctrTxt = ciphertext.slice(0, 8), i = 0; 8 > i; i++) counterBlock[i] = ctrTxt.charCodeAt(i);
        for (var keySchedule = keyExpansion(key), nBlocks = Math.ceil((ciphertext.length - 8) / blockSize), ct = new Array(nBlocks), b = 0; nBlocks > b; b++) ct[b] = ciphertext.slice(8 + b * blockSize, 8 + b * blockSize + blockSize);
        ciphertext = ct;
        for (var plaintxt = new Array(ciphertext.length), b = 0; nBlocks > b; b++) {
            for (var c = 0; 4 > c; c++) counterBlock[15 - c] = 255 & b >>> 8 * c;
            for (var c = 0; 4 > c; c++) counterBlock[15 - c - 4] = 255 & (b + 1) / 4294967296 - 1 >>> 8 * c;
            for (var cipherCntr = cipher(counterBlock, keySchedule), plaintxtByte = new Array(ciphertext[b].length), i = 0; i < ciphertext[b].length; i++) plaintxtByte[i] = cipherCntr[i] ^ ciphertext[b].charCodeAt(i), 
            plaintxtByte[i] = String.fromCharCode(plaintxtByte[i]);
            plaintxt[b] = plaintxtByte.join("");
        }
        var plaintext = plaintxt.join("");
        return plaintext = a4p.Utf8.decode(plaintext);
    };
    var sBox = [ 99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22 ], invsBox = [ 82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125 ], rCon = [ [ 0, 0, 0, 0 ], [ 1, 0, 0, 0 ], [ 2, 0, 0, 0 ], [ 4, 0, 0, 0 ], [ 8, 0, 0, 0 ], [ 16, 0, 0, 0 ], [ 32, 0, 0, 0 ], [ 64, 0, 0, 0 ], [ 128, 0, 0, 0 ], [ 27, 0, 0, 0 ], [ 54, 0, 0, 0 ] ];
    return Aes;
}();

var a4pBlockMove = function(evt, stopBubble) {
    evt.preventDefault && !$(".c4p-container-scroll-y").has($(evt.target)).length && evt.preventDefault(), 
    1 == stopBubble && evt.stopPropagation && evt.stopPropagation(), 1 == stopBubble && null != evt.cancelBubble && (evt.cancelBubble = !0);
}, a4pAllowMove = function() {
    return !0;
}, LocalFileSystem, Metadata, FileError, ProgressEvent, File, DirectoryEntry, DirectoryReader, FileWriter, FileEntry, FileSystem, FileReader, FileTransferError, FileUploadOptions, FileUploadResult, FileTransfer, Camera, a4p;

a4p || (a4p = {}), a4p.uid = [ "0", "0", "0" ], a4p.idStr = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", 
a4p.idNext = {
    "0": 1,
    "1": 2,
    "2": 3,
    "3": 4,
    "4": 5,
    "5": 6,
    "6": 7,
    "7": 8,
    "8": 9,
    "9": 10,
    A: 11,
    B: 12,
    C: 13,
    D: 14,
    E: 15,
    F: 16,
    G: 17,
    H: 18,
    I: 19,
    J: 20,
    K: 21,
    L: 22,
    M: 23,
    N: 24,
    O: 25,
    P: 26,
    Q: 27,
    R: 28,
    S: 29,
    T: 30,
    U: 31,
    V: 32,
    W: 33,
    X: 34,
    Y: 35,
    Z: 0
}, a4p.nextUid = function() {
    for (var index = a4p.uid.length; index; ) {
        index--;
        var i = a4p.idNext[a4p.uid[index]];
        if (a4p.uid[index] = a4p.idStr[i], i > 0) return a4p.uid.join("");
    }
    return a4p.uid.unshift("0"), a4p.uid.join("");
}, a4p.getUid = function() {
    return a4p.uid.join("");
}, a4p.initUid = function(seed) {
    if (a4p.isUndefined(seed)) return void (a4p.uid = [ "0", "0", "0" ]);
    seed = seed.toUpperCase(), a4p.uid = [];
    for (var i = 0, n = seed.length; n > i; i++) {
        var c = seed.charAt(i);
        a4p.isDefined(a4p.idNext[c]) && a4p.uid.push(c);
    }
    for (;a4p.uid.length < 3; ) a4p.uid.unshift("0");
}, a4p.isUndefined = function(obj) {
    return "undefined" == typeof obj;
}, a4p.isDefined = function(obj) {
    return "undefined" != typeof obj;
}, a4p.isUndefinedOrNull = function(obj) {
    return "undefined" == typeof obj || null === obj;
}, a4p.isDefinedAndNotNull = function(obj) {
    return "undefined" != typeof obj && null !== obj;
}, a4p.isEmptyOrFalse = function(obj) {
    switch (typeof obj) {
      case "object":
        return null === obj ? !0 : 0 == Object.getOwnPropertyNames(obj).length ? !0 : obj instanceof Array ? 0 === obj.length : !1;

      case "string":
        return 0 === obj.length;

      case "number":
        return 0 == obj;

      case "boolean":
        return !obj;

      case "function":
        return !1;

      case "undefined":
        return !0;
    }
    return !obj;
}, a4p.isTrueOrNonEmpty = function(obj) {
    switch (typeof obj) {
      case "object":
        return null === obj ? !1 : 0 == Object.getOwnPropertyNames(obj).length ? !1 : obj instanceof Array ? 0 !== obj.length : !0;

      case "string":
        return 0 !== obj.length;

      case "number":
        return 0 != obj;

      case "boolean":
        return obj;

      case "function":
        return !0;

      case "undefined":
        return !1;
    }
    return !!obj;
}, a4p.safeApply = function(scope, expr, beforeFct, afterFct) {
    beforeFct && a4p.safeApply(scope, beforeFct), scope.$root && scope.$root.$$phase ? (console.log("safeApply - scope.$root outside the $digest"), 
    scope.$root.$evalAsync(function() {
        scope.$eval(expr);
    })) : scope.$treeScope && scope.$treeScope.$apply ? (console.log("safeApply - scope.$treeScope for callback"), 
    scope.$treeScope.$apply(expr)) : scope.$apply && scope.$apply != angular.noop ? (console.log("safeApply - scope.$apply"), 
    scope.$apply(expr)) : (console.log("safeApply - na : dangerous ?"), expr()), afterFct && a4p.safeApply(scope, afterFct);
}, a4p.promiseWakeupNb = 0, a4p.promiseWakeupTimeout = null, a4p.promiseWakeup = function(scope, httpPromise, fctOnHttpSuccess, fctOnHttpError) {
    function tick() {
        a4p.promiseWakeupNb > 0 && (a4p.safeApply(scope), a4p.promiseWakeupTimeout = setTimeout(tick, 1e3));
    }
    var promiseWakeupOnHttpSuccess = function(response) {
        a4p.InternalLog.log("a4p.promiseWakeup.tick", "promiseWakeupOnHttpSuccess?"), a4p.promiseWakeupNb--, 
        a4p.promiseWakeupNb <= 0 && (a4p.InternalLog.log("a4p.promiseWakeup.tick", "stop"), 
        a4p.promiseWakeupNb = 0, clearTimeout(a4p.promiseWakeupTimeout), a4p.promiseWakeupTimeout = null), 
        fctOnHttpSuccess(response);
    }, promiseWakeupOnHttpError = function(response) {
        a4p.InternalLog.log("a4p.promiseWakeup.tick", "promiseWakeupOnHttpError?"), a4p.promiseWakeupNb--, 
        a4p.promiseWakeupNb <= 0 && (a4p.InternalLog.log("a4p.promiseWakeup.tick", "stop"), 
        a4p.promiseWakeupNb = 0, clearTimeout(a4p.promiseWakeupTimeout), a4p.promiseWakeupTimeout = null), 
        fctOnHttpError(response);
    };
    0 == a4p.promiseWakeupNb && (a4p.InternalLog.log("a4p.promiseWakeup.tick", "start"), 
    a4p.promiseWakeupTimeout = setTimeout(tick, 1e3)), a4p.promiseWakeupNb++, a4p.InternalLog.log("a4p.promiseWakeup.tick", "before?"), 
    httpPromise.then(promiseWakeupOnHttpSuccess, promiseWakeupOnHttpError), a4p.InternalLog.log("a4p.promiseWakeup.tick", "after?");
};

var cache = window.applicationCache, cacheStatusValues = [], a4pTranslateDatesToPxSize = function(date_start, date_end, totalSize) {
    var date1 = date_start;
    if ("string" == typeof date1 && (date1 = a4pDateParse(date_start)), !date1) return totalSize;
    var date2 = date_end;
    if ("string" == typeof date2 && (date2 = a4pDateParse(date_end)), !date2) return totalSize;
    var milliseconds = date2.getTime() - date1.getTime();
    if (0 > milliseconds) return totalSize;
    var days = milliseconds / 1e3 / 86400;
    return days > 1 && (days = 1), Math.round(days * totalSize);
}, a4pTranslateDateToPx = function(date, totalSize) {
    var date1 = date;
    if ("string" == typeof date1 && (date1 = a4pDateParse(date)), !date1) return 0;
    var days = (60 * date1.getHours() + date1.getMinutes()) / 1440;
    return Math.round(days * totalSize);
};

a4p.not = function(f) {
    return function() {
        var result = f.apply(this, arguments);
        return !result;
    };
}, a4p.mapper = function(f) {
    return function(a) {
        return map(a, f);
    };
}, a4p.memoize = function(f) {
    var cache = {};
    return function() {
        var key = arguments.length + Array.prototype.join.call(arguments, ",");
        return key in cache ? cache[key] : cache[key] = f.apply(this, arguments);
    };
}, a4p.extend = function(o, p) {
    for (var prop in p) o[prop] = p[prop];
    return o;
}, a4p.merge = function(o, p) {
    for (var prop in p) o.hasOwnProperty(prop) || (o[prop] = p[prop]);
    return o;
}, a4p.restrict = function(o, p) {
    for (var prop in o) prop in p || delete o[prop];
    return o;
}, a4p.subtract = function(o, p) {
    for (var prop in p) delete o[prop];
    return o;
}, a4p.union = function(o, p) {
    return a4p.extend(a4p.extend({}, o), p);
}, a4p.intersection = function(o, p) {
    return a4p.restrict(a4p.extend({}, o), p);
}, a4p.keys = function(o) {
    if ("object" != typeof o) throw new TypeError();
    var result = [];
    for (var prop in o) o.hasOwnProperty(prop) && result.push(prop);
    return result;
}, a4p.create = function(proto, props) {
    function F() {}
    if (null == proto) throw new TypeError();
    if (Object.create) return Object.create(proto, props);
    var t = typeof proto;
    if ("object" !== t && "function" !== t) throw new TypeError();
    F.prototype = proto;
    var o = new F();
    return a4p.extend(o, props);
}, a4p.even = function(x) {
    return 0 === x % 2;
}, a4p.odd = a4p.not(a4p.even), a4p.foreach = function(a, f, t) {
    try {
        a.forEach(f, t);
    } catch (e) {
        if (e === a4p.foreach.break) return;
        throw e;
    }
}, a4p.foreach.break = new Error("StopIteration");

var a4p;

a4p || (a4p = {}), a4p.Analytics = function() {
    function Analytics(localStorage, googleAnalytics_UA_ID) {
        this.localStorage = null, a4p.isDefined(localStorage) && localStorage && (this.localStorage = localStorage), 
        this.mAnalyticsArray = [], this.mAnalyticsFunctionnalitiesArray = [], this.localStorage && (this.mAnalyticsArray = this.localStorage.get(mAnalyticsLS, this.mAnalyticsArray), 
        this.mAnalyticsFunctionnalitiesArray = this.localStorage.get(mAnalyticsFunctionnalitiesLS, this.mAnalyticsFunctionnalitiesArray)), 
        this.vid = "vid_undefined", this.uid = "uid_undefined", this.initDone = !1, this.bEnabled = !0, 
        this.googleAnalytics_UA_ID = googleAnalytics_UA_ID, this.gaQueue = null, this.gaPanalytics = null, 
        this.gaPlugin = null;
    }
    var mAnalyticsLS = "a4p.Analytics", mAnalyticsFunctionnalitiesLS = "a4p.Analytics.functionalities";
    return Analytics.prototype.init = function() {
        this.initDone || ("undefined" != typeof _gaq ? (a4p.InternalLog.log("Analytics", "googleAnalytics official launched."), 
        this.gaQueue = _gaq || [], this.gaQueue.push([ "_setAccount", this.googleAnalytics_UA_ID ]), 
        this.gaQueue.push([ "_trackPageview" ])) : a4p.InternalLog.log("Analytics", "googleAnalytics not defined."), 
        "undefined" != typeof window.plugins && "undefined" != typeof window.plugins.gaPlugin && (a4p.InternalLog.log("Analytics", "GAPlugin launched."), 
        this.gaPlugin = window.plugins.gaPlugin, this.gaPlugin.init(successHandler, errorHandler, this.googleAnalytics_UA_ID, 10)), 
        this.initDone = !0);
    }, Analytics.prototype.setVid = function(vid) {
        this.vid = vid, a4p.InternalLog.log("Analytics", "set vid " + this.vid);
    }, Analytics.prototype.setUid = function(uid) {
        a4p.InternalLog.log("Analytics", "set uid " + uid), uid && "" != uid && (this.uid = uid);
    }, Analytics.prototype.setEnabled = function(enable) {
        this.bEnabled = 1 == enable, a4p.InternalLog.log("Analytics", "set enabled " + this.bEnabled);
    }, Analytics.prototype.add = function(category, action, value) {
        if (this.bEnabled && category && action) {
            var shouldBeTrackedAsEvent = !0;
            if ("Once" == category) {
                for (var i = 0; i < this.mAnalyticsFunctionnalitiesArray.length && shouldBeTrackedAsEvent; i++) this.mAnalyticsFunctionnalitiesArray[i] === action && (shouldBeTrackedAsEvent = !1);
                shouldBeTrackedAsEvent && this.mAnalyticsFunctionnalitiesArray.push(action);
            }
            a4p.InternalLog.log("Analytics", "shouldBeTrackedAsEvent ?" + shouldBeTrackedAsEvent);
            var paramEvent = {
                vid: this.vid,
                uid: this.uid,
                type: "event",
                category: category,
                action: action,
                value: value || 1
            }, paramView = {
                vid: this.vid,
                uid: this.uid,
                type: "view",
                category: category,
                action: action,
                value: value || 1
            };
            a4p.InternalLog.log("Analytics", "add " + paramEvent.toString()), shouldBeTrackedAsEvent && this.mAnalyticsArray.push(paramEvent), 
            this.mAnalyticsArray.push(paramView), this.localStorage && this.localStorage.set(mAnalyticsLS, this.mAnalyticsArray), 
            this.localStorage && this.localStorage.set(mAnalyticsFunctionnalitiesLS, this.mAnalyticsFunctionnalitiesArray), 
            checkConnection() && this.run();
        }
    }, Analytics.prototype.run = function() {
        if (this.bEnabled) {
            a4p.InternalLog.log("Analytics", "run - pushing " + this.mAnalyticsArray.length + " elements");
            var bOK = !0;
            try {
                for (var i = 0; i < this.mAnalyticsArray.length; i++) {
                    var param = this.mAnalyticsArray[i];
                    if ("view" == param.type) {
                        var url = "" + this.vid + " - " + param.category + " - " + param.action;
                        a4p.InternalLog.log("Analytics", "track view " + url), this.gaQueue && this.gaQueue.push([ "_trackPageview", url ]), 
                        this.gaPanalytics && this.gaPanalytics.trackView(url), this.gaPlugin && this.gaPlugin.trackPage(successHandler, errorHandler, url);
                    } else {
                        var cat = this.vid + " - " + param.category, act = param.category + " - " + param.action, lab = param.uid, val = param.value;
                        a4p.InternalLog.log("Analytics", "track event " + cat + ", " + act + ", " + lab + ", " + val), 
                        this.gaQueue && this.gaQueue.push([ "_trackEvent", cat, act, lab, val ]), this.gaPanalytics && this.gaPanalytics.trackEvent(cat, act, lab, val), 
                        this.gaPlugin && this.gaPlugin.trackEvent(successHandler, errorHandler, cat, act, lab, val);
                    }
                }
            } catch (e) {
                a4p.ErrorLog.log("Analytics", " run pb : " + a4p.formatError(e)), bOK = !1;
            }
            bOK && (this.mAnalyticsArray = [], this.localStorage && this.localStorage.set(mAnalyticsLS, this.mAnalyticsArray));
        }
    }, Analytics;
}();

var a4p;

a4p || (a4p = {}), a4p.Base64 = function() {
    function uint6ToB64(nUint6) {
        return 26 > nUint6 ? nUint6 + 65 : 52 > nUint6 ? nUint6 + 71 : 62 > nUint6 ? nUint6 - 4 : 62 === nUint6 ? 43 : 63 === nUint6 ? 47 : 65;
    }
    function b64ToUint6(nChr) {
        return nChr > 64 && 91 > nChr ? nChr - 65 : nChr > 96 && 123 > nChr ? nChr - 71 : nChr > 47 && 58 > nChr ? nChr + 4 : 43 === nChr ? 62 : 47 === nChr ? 63 : 0;
    }
    var Base64 = {};
    Base64.encode = function(input) {
        for (var chr1, chr2, chr3, enc1, enc2, enc3, enc4, output = "", i = 0; i < input.length; ) chr1 = input.charCodeAt(i++), 
        chr2 = input.charCodeAt(i++), chr3 = input.charCodeAt(i++), enc1 = chr1 >> 2, enc2 = (3 & chr1) << 4 | chr2 >> 4, 
        enc3 = (15 & chr2) << 2 | chr3 >> 6, enc4 = 63 & chr3, isNaN(chr2) ? enc3 = enc4 = 64 : isNaN(chr3) && (enc4 = 64), 
        output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);
        return output;
    }, Base64.encodeFromUint8Array = function(input) {
        for (var nMod3, sB64Enc = "", nLen = input.length, nUint24 = 0, nIdx = 0; nLen > nIdx; nIdx++) nMod3 = nIdx % 3, 
        nIdx > 0 && 0 === 4 * nIdx / 3 % 76 && (sB64Enc += "\r\n"), nUint24 |= input[nIdx] << (24 & 16 >>> nMod3), 
        (2 === nMod3 || 1 === input.length - nIdx) && (sB64Enc += String.fromCharCode(uint6ToB64(63 & nUint24 >>> 18), uint6ToB64(63 & nUint24 >>> 12), uint6ToB64(63 & nUint24 >>> 6), uint6ToB64(63 & nUint24)), 
        nUint24 = 0);
        return sB64Enc.replace(/A(?=A$|$)/g, "=");
    }, Base64.decode = function(input) {
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4, output = "", i = 0;
        for (input = input.replace(/[^A-Za-z0-9\+\/\=]/g, ""); i < input.length; ) enc1 = keyStr.indexOf(input.charAt(i++)), 
        enc2 = keyStr.indexOf(input.charAt(i++)), enc3 = keyStr.indexOf(input.charAt(i++)), 
        enc4 = keyStr.indexOf(input.charAt(i++)), chr1 = enc1 << 2 | enc2 >> 4, chr2 = (15 & enc2) << 4 | enc3 >> 2, 
        chr3 = (3 & enc3) << 6 | enc4, output += String.fromCharCode(chr1), 64 != enc3 && (output += String.fromCharCode(chr2)), 
        64 != enc4 && (output += String.fromCharCode(chr3));
        return output;
    }, Base64.decodeToUint8Array = function(input) {
        for (var nMod3, nMod4, nBlocksSize = 1, sB64Enc = input.replace(/[^A-Za-z0-9\+\/]/g, ""), nInLen = sB64Enc.length, nOutLen = nBlocksSize ? Math.ceil((3 * nInLen + 1 >> 2) / nBlocksSize) * nBlocksSize : 3 * nInLen + 1 >> 2, taBytes = new Uint8Array(nOutLen), nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInLen > nInIdx; nInIdx++) if (nMod4 = 3 & nInIdx, 
        nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4, 3 === nMod4 || 1 === nInLen - nInIdx) {
            for (nMod3 = 0; 3 > nMod3 && nOutLen > nOutIdx; nMod3++, nOutIdx++) taBytes[nOutIdx] = 255 & nUint24 >>> (24 & 16 >>> nMod3);
            nUint24 = 0;
        }
        return taBytes;
    };
    var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    return Base64;
}();

var a4p;

a4p || (a4p = {}), a4p.BezierDrawer = function() {
    function BezierDrawer(canvas) {
        this.canvas = canvas, this.ctx = canvas.getContext("2d"), this.begin = function() {
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        }, this.add = function(p0, q0, q1, p1) {
            this.ctx.beginPath(), this.ctx.strokeStyle = "cyan", this.ctx.lineWidth = "6", this.ctx.moveTo(p0.x, p0.y), 
            this.ctx.bezierCurveTo(q0.x, q0.y, q1.x, q1.y, p1.x, p1.y), this.ctx.stroke(), this.ctx.strokeStyle = "red", 
            this.ctx.lineWidth = "1", this.ctx.beginPath(), this.ctx.arc(p0.x, p0.y, 2, 0, 2 * Math.PI), 
            this.ctx.stroke(), this.ctx.strokeStyle = "green", this.ctx.lineWidth = "1", this.ctx.beginPath(), 
            this.ctx.arc(q0.x, q0.y, 2, 0, 2 * Math.PI), this.ctx.stroke(), this.ctx.strokeStyle = "green", 
            this.ctx.lineWidth = "1", this.ctx.beginPath(), this.ctx.arc(q1.x, q1.y, 2, 0, 2 * Math.PI), 
            this.ctx.stroke(), this.ctx.strokeStyle = "red", this.ctx.lineWidth = "1", this.ctx.beginPath(), 
            this.ctx.arc(p1.x, p1.y, 2, 0, 2 * Math.PI), this.ctx.stroke(), this.ctx.strokeStyle = "green", 
            this.ctx.lineWidth = "1", this.ctx.beginPath(), this.ctx.moveTo(p0.x, p0.y), this.ctx.lineTo(q0.x, q0.y), 
            this.ctx.stroke(), this.ctx.strokeStyle = "green", this.ctx.lineWidth = "1", this.ctx.beginPath(), 
            this.ctx.moveTo(q1.x, q1.y), this.ctx.lineTo(p1.x, p1.y), this.ctx.stroke();
        }, this.end = function() {};
    }
    return BezierDrawer;
}();

var a4p;

a4p || (a4p = {}), a4p.BezierInterpolator = function() {
    function BezierInterpolator(scale) {
        var p0, q0, q1, p1, samplePoint0, samplePoint1, sample10X, sample10Y, sampleDist10;
        this.listeners = [], this.sampleScale = scale || .33, this.controlPoints = [], this.nbCurve = 0, 
        this.begin = function() {
            this.controlPoints = [], this.nbCurve = 0, p0 = null, q0 = null, q1 = null, p1 = null, 
            samplePoint0 = null, samplePoint1 = null;
            for (var i = 0; i < this.listeners.length; i++) this.listeners[i].begin();
        }, this.add = function(x, y) {
            if (null == samplePoint0) return void (samplePoint0 = {
                x: x,
                y: y
            });
            if (null == samplePoint1) {
                if (x == samplePoint0.x && y == samplePoint0.y) return;
                return samplePoint1 = {
                    x: x,
                    y: y
                }, sample10X = samplePoint1.x - samplePoint0.x, sample10Y = samplePoint1.y - samplePoint0.y, 
                sampleDist10 = Math.sqrt(sample10X * sample10X + sample10Y * sample10Y), p0 = {
                    x: samplePoint0.x,
                    y: samplePoint0.y
                }, q0 = {
                    x: samplePoint0.x + this.sampleScale * sample10X,
                    y: samplePoint0.y + this.sampleScale * sample10Y
                }, this.controlPoints.push(p0), void this.controlPoints.push(q0);
            }
            if (x != samplePoint1.x || y != samplePoint1.y) {
                var tangentX = x - samplePoint0.x, tangentY = y - samplePoint0.y, tangentDist = Math.sqrt(tangentX * tangentX + tangentY * tangentY);
                q1 = {
                    x: samplePoint1.x - this.sampleScale * tangentX * sampleDist10 / tangentDist,
                    y: samplePoint1.y - this.sampleScale * tangentY * sampleDist10 / tangentDist
                }, p1 = {
                    x: samplePoint1.x,
                    y: samplePoint1.y
                }, this.controlPoints.push(q1), this.controlPoints.push(p1);
                for (var i = 0; i < this.listeners.length; i++) this.listeners[i].add(p0, q0, q1, p1);
                sample10X = x - samplePoint1.x, sample10Y = y - samplePoint1.y, sampleDist10 = Math.sqrt(sample10X * sample10X + sample10Y * sample10Y), 
                p0 = p1, q0 = {
                    x: samplePoint1.x + this.sampleScale * tangentX * sampleDist10 / tangentDist,
                    y: samplePoint1.y + this.sampleScale * tangentY * sampleDist10 / tangentDist
                }, this.controlPoints.push(q0), samplePoint0 = samplePoint1, samplePoint1 = {
                    x: x,
                    y: y
                }, this.nbCurve++;
            }
        }, this.end = function() {
            if (this.controlPoints.length > 1) {
                q1 = {
                    x: samplePoint1.x - this.sampleScale * sample10X,
                    y: samplePoint1.y - this.sampleScale * sample10Y
                }, p1 = {
                    x: samplePoint1.x,
                    y: samplePoint1.y
                }, this.controlPoints.push(q1), this.controlPoints.push(p1);
                for (var i = 0; i < this.listeners.length; i++) this.listeners[i].add(p0, q0, q1, p1);
                this.nbCurve++;
            }
            for (var i = 0; i < this.listeners.length; i++) this.listeners[i].end();
        };
    }
    return BezierInterpolator.prototype.size = function() {
        return this.nbCurve;
    }, BezierInterpolator.prototype.addListener = function(listener) {
        this.listeners.push(listener);
    }, BezierInterpolator;
}(), Bridge.prototype.setUrl = function(url, email, appId, right) {
    a4p.InternalLog.log("bridge.js", "setUrl"), window.device && "Android" === window.device.platform && cordova.exec(null, null, "Bridge", "setUrl", [ url, email, appId, right ]);
}, Bridge.prototype.getUrl = function(email, success, fail) {
    return a4p.InternalLog.log("bridge.js", "getUrl"), window.device ? "Android" === window.device.platform ? (a4p.InternalLog.log("bridge.js", "exec getUrl"), 
    cordova.exec(success, fail, "Bridge", "getUrl", [ email ])) : null : null;
}, window.plugins || (window.plugins = {}), window.plugins.bridge = new Bridge();

var a4p;

a4p || (a4p = {}), a4p.BrowserCapabilities = function(navigator, window, document) {
    function prefixStyle(style) {
        return "" === capacities.vendor ? style : (style = style.charAt(0).toUpperCase() + style.substr(1), 
        capacities.vendor + style);
    }
    for (var capacities = {
        vendor: "",
        cssVendor: ""
    }, dummyStyle = document.createElement("div").style, vendors = "t,webkitT,MozT,msT,OT".split(","), nbVendors = vendors.length, i = 0; nbVendors > i; i++) {
        var t = vendors[i] + "ransform";
        if (t in dummyStyle) {
            capacities.vendor = vendors[i].substr(0, vendors[i].length - 1), capacities.cssVendor = "-" + capacities.vendor.toLowerCase() + "-";
            break;
        }
    }
    return capacities.transform = prefixStyle("transform"), capacities.transitionProperty = prefixStyle("transitionProperty"), 
    capacities.transitionDuration = prefixStyle("transitionDuration"), capacities.transformOrigin = prefixStyle("transformOrigin"), 
    capacities.transitionTimingFunction = prefixStyle("transitionTimingFunction"), capacities.transitionDelay = prefixStyle("transitionDelay"), 
    capacities.isAndroid = /android/gi.test(navigator.appVersion), capacities.isIDevice = /iphone|ipad/gi.test(navigator.appVersion), 
    capacities.isTouchPad = /hp-tablet/gi.test(navigator.appVersion), capacities.isPhantom = /phantom/gi.test(navigator.userAgent), 
    capacities.hasTouch = ("ontouchstart" in window || "createTouch" in document) && (capacities.isAndroid || capacities.isIDevice) && !capacities.isPhantom, 
    capacities.has3d = prefixStyle("perspective") in dummyStyle, capacities.hasTransform = "" != capacities.vendor, 
    capacities.hasTransitionEnd = prefixStyle("transition") in dummyStyle, capacities.online = navigator.onLine, 
    capacities.RESIZE_EVENT = "onorientationchange" in window ? "orientationchange" : "resize", 
    capacities.TRNEND_EVENT = function() {
        if ("" == capacities.vendor) return !1;
        var transitionEnd = {
            "": "transitionend",
            webkit: "webkitTransitionEnd",
            Moz: "transitionend",
            O: "otransitionend",
            ms: "MSTransitionEnd"
        };
        return transitionEnd[capacities.vendor];
    }(), capacities.nextFrame = window.requestAnimationFrame ? function(callback) {
        return window.requestAnimationFrame(callback);
    } : window.webkitRequestAnimationFrame ? function(callback) {
        return window.webkitRequestAnimationFrame(callback);
    } : window.mozRequestAnimationFrame ? function(callback) {
        return window.mozRequestAnimationFrame(callback);
    } : window.oRequestAnimationFrame ? function(callback) {
        return window.oRequestAnimationFrame(callback);
    } : window.msRequestAnimationFrame ? function(callback) {
        return window.msRequestAnimationFrame(callback);
    } : function(callback) {
        return setTimeout(callback, 1);
    }, capacities.cancelFrame = window.cancelRequestAnimationFrame ? function(handle) {
        return window.cancelRequestAnimationFrame(handle);
    } : window.webkitCancelAnimationFrame ? function(handle) {
        return window.webkitCancelAnimationFrame(handle);
    } : window.webkitCancelRequestAnimationFrame ? function(handle) {
        return window.webkitCancelRequestAnimationFrame(handle);
    } : window.mozCancelRequestAnimationFrame ? function(handle) {
        return window.mozCancelRequestAnimationFrame(handle);
    } : window.oCancelRequestAnimationFrame ? function(handle) {
        return window.oCancelRequestAnimationFrame(handle);
    } : window.msCancelRequestAnimationFrame ? function(handle) {
        return window.msCancelRequestAnimationFrame(handle);
    } : function(handle) {
        return clearTimeout(handle);
    }, capacities.translateZ = capacities.has3d && !capacities.isAndroid ? " translateZ(0)" : "", 
    dummyStyle = null, capacities;
}(navigator, window, document), function($) {
    var gStar = 0, methods = {
        initRaty: function(selfRaty) {
            var RatyReadOnly = !1;
            0 == selfRaty && (RatyReadOnly = !1), $("#star").raty({
                cancel: !0,
                cancelOff: "/raty/cancel-off.png",
                cancelOn: "/raty/cancel-on.png",
                hintList: [ "1", "2", "3", "4", "5" ],
                number: 5,
                readOnly: RatyReadOnly,
                scoreName: "score",
                start: selfRaty,
                starOff: "/raty/star-off.png",
                starOn: "/raty/star-on.png",
                click: function(score) {
                    methods.saveRaty(score), methods.clickRaty(score);
                }
            });
        },
        saveRaty: function(selfRaty) {
            gStar = selfRaty;
        },
        clickRaty: function() {
            $.fn.raty.readOnly(!0);
        }
    };
    $.fn.feedback = function() {
        var html = '<div class="control-group"><label class="control-label" for="feedback_company_name" lang="en" name="Company">Company</label><div class="controls"><input type="text" id="feedback_company_name" class="editable" placeholder="Your company\'s name"></div></div><div class="control-group"><label class="control-label" for="feedback_phone" lang="en" name="Your Phone">Your Phone</label><div class="controls"><input type="tel" class="editable" id="feedback_phone"  placeholder="Your Phone"></div></div><div class="control-group"><div class="controls" id="rate"><div id="star"></div></div></div><div class="control-group"><div class="controls"><textarea id="feedback_feedback" class="editable" placeholder="Your feedback is usefull to improve our application!"></textarea></div></div>';
        return this.empty(), this.append(html), methods.initRaty(2), this;
    }, $.fn.feedback.save = function() {
        var feedback_company_name = $("#feedback_company_name").val(), feedback_phone = $("#feedback_phone").val(), feedback_feedback = $("#feedback_feedback").val(), feedback_star = gStar;
        window.localStorage.feedback_company_name = feedback_company_name, window.localStorage.feedback_phone = feedback_phone, 
        window.localStorage.feedback_feedback = feedback_feedback, window.localStorage.feedback_star = feedback_star;
    };
}(jQuery);

var a4p;

a4p || (a4p = {});

var json_encode = $.toJSON || Object.toJSON || window.JSON && (JSON.encode || JSON.stringify), json_decode = $.evalJSON || window.JSON && (JSON.decode || JSON.parse) || function(str) {
    return String(str).evalJSON();
};

a4p.Fifo = function() {
    function Fifo(uid) {
        a4p.isUndefined(uid) && (uid = "xxx"), this.mSQLFifoName = "a4p." + uid + ".sql", 
        this.mJSFuncFifoName = "a4p." + uid + ".js.function", this.mJSArgsFifoName = "a4p." + uid + ".js.params", 
        this.mMsgFifoName = "a4p." + uid + ".msg", this.mMailFifoName = "a4p." + uid + ".mail", 
        this.mPb = !1;
    }
    return Fifo.prototype.clear = function() {
        var bok = !0;
        return a4p.InternalLog.log("fifoClear"), $.jStorage.set(this.mSQLFifoName, ""), 
        $.jStorage.set(this.mJSFuncFifoName, ""), $.jStorage.set(this.mJSArgsFifoName, ""), 
        $.jStorage.set(this.mMailFifoName, ""), $.jStorage.set(this.mMsgFifoName, ""), bok;
    }, Fifo.prototype.getFuncFifoName = function() {
        return this.mJSFuncFifoName;
    }, Fifo.prototype.getArgsFifoName = function() {
        return this.mJSArgsFifoName;
    }, Fifo.prototype.getSQL = function(bRemoveAfter) {
        var fifo = $.jStorage.get(this.mSQLFifoName);
        return a4p.InternalLog.log("fifoGetSQL", fifo), bRemoveAfter && $.jStorage.set(this.mSQLFifoName, ""), 
        null == fifo ? "" : fifo;
    }, Fifo.prototype.addSQL = function(sql) {
        var bok = !0;
        if (a4p.InternalLog.log("fifoAddSQL", sql), a4p.isUndefined(sql) || 0 === sql.length || !sql) return !1;
        var fifo = this.getSQL();
        return fifo += sql, $.jStorage.set(this.mSQLFifoName, fifo), bok;
    }, Fifo.prototype.getArray = function(fifoName) {
        var fifo = $.jStorage.get(fifoName);
        return 0 === fifo.length && (fifo = new Array()), fifo;
    }, Fifo.prototype.callJS = function(bRemoveAfter, success) {
        var count = 0, anyPb = !1;
        a4p.InternalLog.log("fifoCallJS", bRemoveAfter);
        var funcs = this.getArray(this.mJSFuncFifoName), args = this.getArray(this.mJSArgsFifoName), funcsAfter = funcs.slice(0), argsAfter = args.slice(0);
        for (var i in funcs) if (funcs.hasOwnProperty(i)) {
            var func = json_decode(funcs[i]), arg = json_decode(args[i]);
            a4p.InternalLog.log("fifoCallJS", "func:" + func + " args:" + arg);
            var bok = function() {
                try {
                    var ok = window[func](arg);
                    if (0 == ok) return !1;
                } catch (e) {
                    return a4p.InternalLog.log("fifoCallJS", "Pb : " + e.message), !1;
                }
                return !0;
            }();
            bok || (setMessage("pb_fifo", "func:" + func + " args:" + arg), anyPb = !0), bRemoveAfter && (funcsAfter.splice(0, 1), 
            argsAfter.splice(0, 1)), count += 1;
        }
        return $.jStorage.set(this.mJSFuncFifoName, funcsAfter), $.jStorage.set(this.mJSArgsFifoName, argsAfter), 
        count == funcs.length && success && success(), count > 0 && (this.mPb = anyPb), 
        count;
    }, Fifo.prototype.addJS = function(fn, params, forceDuplicate) {
        if (a4p.InternalLog.log("fifoAddJS", "fn:" + fn + " p:" + params), "function" == typeof fn) return a4p.ErrorLog.log("fifoAddJS", "ERROR not a function name"), 
        !1;
        var funcs = this.getArray(this.mJSFuncFifoName), args = this.getArray(this.mJSArgsFifoName), funcsCount = funcs.length, argsCount = args.length, fifoFunction = fn;
        (a4p.isUndefined(params) || !params || null == params) && (params = "");
        var testStorage_elm = document.createElement("a4pFifo");
        testStorage_elm.setAttribute("Params", json_encode(params));
        var elArgs = testStorage_elm.getAttribute("Params");
        testStorage_elm.setAttribute("Func", json_encode(fifoFunction));
        var elFunc = testStorage_elm.getAttribute("Func");
        forceDuplicate = a4p.isDefined(forceDuplicate) && 1 == forceDuplicate;
        var insert = !0;
        if (!forceDuplicate) for (var i = 0; funcsCount > i && argsCount > i; i++) funcs[i] === elFunc && args[i] === elArgs && (insert = !1);
        return insert ? (a4p.InternalLog.log("fifoAddJS", "INSERT elFunc:" + elFunc + " elArgs:" + elArgs), 
        funcs[funcsCount] = elFunc, args[argsCount] = elArgs, $.jStorage.set(this.mJSFuncFifoName, funcs), 
        $.jStorage.set(this.mJSArgsFifoName, args), !0) : (a4p.InternalLog.log("fifoAddJS", "IGNORED because already inserted in fifo"), 
        !1);
    }, Fifo.prototype.launch = function() {
        if (a4p.InternalLog.log("fifoLaunch"), !checkConnection()) return a4p.InternalLog.log("fifoLaunch", "Offline"), 
        void a4pSpinner.setOffline();
        if (!gYouCanUpdate) return setMessage("pb_limite_refresh"), void a4p.InternalLog.log("fifoLaunch", "You can't update twice in 5 minutes");
        a4pSpinner.setOffline(!1), a4pSpinner.run();
        var count = this.callJS(!0, function() {});
        return 0 == count && a4pSpinner.done(this.mPb), count;
    }, Fifo.prototype.getErrors = function(bRemoveAfter) {
        var msgs = this.getArray(this.mMsgFifoName);
        return bRemoveAfter && 1 == bRemoveAfter && $.jStorage.set(this.mMsgFifoName, ""), 
        msgs;
    }, Fifo.prototype.addError = function(msg) {
        var msgs = this.getErrors(), date = new Date(), msgEl = {
            text: msg,
            date: date.toString("dd-MM-yy HH:mm:ss")
        }, testStorage_elm = document.createElement("Msg");
        testStorage_elm.setAttribute("Msg", json_encode(msgEl));
        var el = testStorage_elm.getAttribute("Msg");
        return msgs[msgs.length] = el, $.jStorage.set(this.mMsgFifoName, msgs), !0;
    }, Fifo.prototype.addMail = function() {
        var bok = !0;
        a4p.InternalLog.log("fifoAddMail");
        var mails = this.getArray(this.mMailFifoName);
        return mails[mails.length] = "", $.jStorage.set(this.mMailFifoName, mails), bok;
    }, Fifo.prototype.getMailCount = function(bErase) {
        var mails = this.getArray(this.mMailFifoName), count = mails.length;
        return a4p.InternalLog.log("fifoGetMailCount", count), bErase && 1 == bErase && (a4p.InternalLog.log("fifoGetMailCount", "erase"), 
        $.jStorage.set(this.mMailFifoName, "")), count;
    }, Fifo;
}();

var a4pFifo = new a4p.Fifo("a4p"), gFileSystem = null, fileErrorHandler = function(e) {
    var msg = "Unknown Error - " + e.code;
    if (a4p.InternalLog.log("fileErrorHandler", e.code), e.source) switch (e.code) {
      case FileTransferError.FILE_NOT_FOUND_ERR:
        msg = "FILE_NOT_FOUND_ERR";
        break;

      case FileTransferError.INVALID_URL_ERR:
        msg = "INVALID_URL_ERR";
        break;

      case FileTransferError.CONNECTION_ERR:
        msg = "CONNECTION_ERR";
    } else switch (e.code) {
      case FileError.QUOTA_EXCEEDED_ERR:
        msg = "QUOTA_EXCEEDED_ERR";
        break;

      case FileError.NOT_FOUND_ERR:
        msg = "NOT_FOUND_ERR";
        break;

      case FileError.SECURITY_ERR:
        msg = "SECURITY_ERR";
        break;

      case FileError.INVALID_MODIFICATION_ERR:
        msg = "INVALID_MODIFICATION_ERR";
        break;

      case FileError.INVALID_STATE_ERR:
        msg = "INVALID_STATE_ERR";
        break;

      case FileError.NO_MODIFICATION_ALLOWED_ERR:
        msg = "NO_MODIFICATION_ALLOWED_ERR";
        break;

      case FileError.SYNTAX_ERR:
        msg = "SYNTAX_ERR";
        break;

      case FileError.TYPE_MISMATCH_ERR:
        msg = "TYPE_MISMATCH_ERR";
        break;

      case FileError.PATH_EXISTS_ERR:
        msg = "PATH_EXISTS_ERR";
    }
    e.source && (msg = msg + " error source " + e.source), e.target && (msg = msg + " error target " + e.target), 
    e.description && (msg = msg + " error description " + e.description), a4p.InternalLog.log("fileErrorHandler", "File Error: " + msg), 
    onFillCompleted(!1), a4p.InternalLog.log("fileErrorHandler", "onFillCompleted : false");
}, a4p;

a4p || (a4p = {});

var a4p;

a4p || (a4p = {});

var geo_code, geo_city, geo_success = function(position) {
    var lat = position.coords.latitude, lng = position.coords.longitude;
    geo_codeLatLng(lat, lng);
}, geo_error = function() {
    a4p.ErrorLog.log("geo_error", "Geocoder failed");
}, geo_codeLatLng = function(lat, lng) {
    var latlng = new google.maps.LatLng(lat, lng);
    geo_code.geocode({
        latLng: latlng
    }, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) if (a4p.InternalLog.log("geo_codeLatLng", results), 
        results[1]) {
            a4p.InternalLog.log("geo_codeLatLng", results[0].formatted_address), geo_city = results[0].formatted_address;
            for (var i = 0; i < results[0].address_components.length; i++) for (var b = 0; b < results[0].address_components[i].types.length; b++) if ("administrative_area_level_1" == results[0].address_components[i].types[b]) {
                city = results[0].address_components[i];
                break;
            }
            a4p.InternalLog.log("geo_codeLatLng", city.short_name + " " + city.long_name), geo_city = '<?php print Lang::_t("(near)",$current_user);?> ' + geo_city;
            var option = new Option(geo_city, geo_city, !0, !0);
            $("#rdv-header-location").append(option), $("#rdv-header-location").val(option);
        } else a4p.InternalLog.log("geo_codeLatLng", "Geocoder No results found"); else a4p.InternalLog.log("geo_codeLatLng", "Geocoder failed due to: " + status);
    });
}, loadLocation = function() {
    geo_code = new google.maps.Geocoder(), navigator.geolocation && navigator.geolocation.getCurrentPosition(geo_success, geo_error);
}, a4p;

a4p || (a4p = {}), a4p.GestureDrawer = function() {
    function GestureDrawer(canvas) {
        this.canvas = canvas, this.ctx = canvas.getContext("2d"), this.begin = function() {}, 
        this.add = function(event) {
            this.ctx.strokeStyle = "blue", this.ctx.lineWidth = "1", this.ctx.beginPath(), this.ctx.arc(event.x, event.y, 2, 0, 2 * Math.PI), 
            this.ctx.stroke(), this.ctx.strokeStyle = "blue", this.ctx.lineWidth = "1", this.ctx.beginPath(), 
            this.ctx.moveTo(event.x, event.y), "W" == event.line ? this.ctx.lineTo(event.x - event.dist, event.y) : "SW" == event.line ? this.ctx.lineTo(event.x - event.dist / Math.sqrt(2), event.y + event.dist / Math.sqrt(2)) : "S" == event.line ? this.ctx.lineTo(event.x, event.y + event.dist) : "SE" == event.line ? this.ctx.lineTo(event.x + event.dist / Math.sqrt(2), event.y + event.dist / Math.sqrt(2)) : "E" == event.line ? this.ctx.lineTo(event.x + event.dist, event.y) : "NE" == event.line ? this.ctx.lineTo(event.x + event.dist / Math.sqrt(2), event.y - event.dist / Math.sqrt(2)) : "N" == event.line ? this.ctx.lineTo(event.x, event.y - event.dist) : "NW" == event.line && this.ctx.lineTo(event.x - event.dist / Math.sqrt(2), event.y - event.dist / Math.sqrt(2)), 
            this.ctx.stroke();
        }, this.end = function() {};
    }
    return GestureDrawer;
}();

var a4p;

a4p || (a4p = {}), a4p.GestureInterpolator = function() {
    function GestureInterpolator() {
        function triggerMove(self, move) {
            self.lastMove = {
                line: move.line,
                rotate: move.rotate
            }, self.moves.push({
                x: move.x,
                y: move.y,
                timeStamp: move.timeStamp,
                angle: move.angle,
                dist: move.dist,
                line: move.line,
                rotate: move.rotate
            });
            for (var i = 0; i < self.listeners.length; i++) self.listeners[i].add(move);
        }
        var samplePoint0, samplePoint1, sample10X, sample10Y, sampleDist10, sampleAngle10, move0;
        this.listeners = [], this.moves = [], this.lastMove = null, this.begin = function() {
            this.moves = [], this.fromIdx = 0, samplePoint0 = null, samplePoint1 = null, move0 = null;
            for (var i = 0; i < this.listeners.length; i++) this.listeners[i].begin();
        }, this.add = function(x, y, timeStamp) {
            if (null == samplePoint0) return void (samplePoint0 = {
                x: x,
                y: y,
                timeStamp: timeStamp
            });
            var self = this;
            if (null == samplePoint1) {
                if (x == samplePoint0.x && y == samplePoint0.y) return;
                return samplePoint1 = {
                    x: x,
                    y: y,
                    timeStamp: timeStamp
                }, sample10X = samplePoint1.x - samplePoint0.x, sample10Y = samplePoint1.y - samplePoint0.y, 
                sampleDist10 = Math.sqrt(sample10X * sample10X + sample10Y * sample10Y), sampleAngle10 = Math.atan2(sample10Y, sample10X), 
                move0 = {
                    x: samplePoint0.x,
                    y: samplePoint0.y,
                    timeStamp: samplePoint0.timeStamp,
                    angle: sampleAngle10,
                    dist: sampleDist10,
                    line: orientation(sampleAngle10),
                    rotate: ""
                }, void triggerMove(self, move0);
            }
            if (x != samplePoint1.x || y != samplePoint1.y) {
                var oldDist = sampleDist10, tangentX = x - samplePoint0.x, tangentY = y - samplePoint0.y;
                Math.sqrt(tangentX * tangentX + tangentY * tangentY);
                var tangentAngle = Math.atan2(tangentY, tangentX), line = orientation(tangentAngle), rotate = "";
                sample10X = x - samplePoint1.x, sample10Y = y - samplePoint1.y, sampleDist10 = Math.sqrt(sample10X * sample10X + sample10Y * sample10Y), 
                sampleAngle10 = Math.atan2(sample10Y, sample10X);
                var newMove = !1;
                if (line != move0.line) {
                    var angle = angleOf(tangentAngle, move0.angle), angleNbStep = angleNbStepOf(tangentAngle, move0.angle);
                    rotate = rotation(angle, angleNbStep), newMove = !0;
                }
                newMove && "" != this.lastMove.rotate && rotate != this.lastMove.rotate && (move0 = {
                    x: move0.x,
                    y: move0.y,
                    timeStamp: move0.timeStamp,
                    angle: move0.angle,
                    dist: move0.dist,
                    line: move0.line,
                    rotate: ""
                }, triggerMove(self, move0)), move0 = {
                    x: samplePoint1.x,
                    y: samplePoint1.y,
                    timeStamp: samplePoint1.timeStamp,
                    angle: tangentAngle,
                    dist: (oldDist + sampleDist10) / 2,
                    line: line,
                    rotate: rotate
                }, newMove && triggerMove(self, move0), samplePoint0 = samplePoint1, samplePoint1 = {
                    x: x,
                    y: y,
                    timeStamp: timeStamp
                };
            }
        }, this.end = function() {
            if (null != samplePoint1) {
                var line = orientation(sampleAngle10), rotate = "", newMove = !1;
                if (line != move0.line) {
                    var angle = angleOf(sampleAngle10, move0.angle), angleNbStep = angleNbStepOf(sampleAngle10, move0.angle);
                    rotate = rotation(angle, angleNbStep), newMove = !0;
                }
                var self = this;
                newMove && "" != this.lastMove.rotate && rotate != this.lastMove.rotate && (move0 = {
                    x: move0.x,
                    y: move0.y,
                    timeStamp: move0.timeStamp,
                    angle: move0.angle,
                    dist: move0.dist,
                    line: move0.line,
                    rotate: ""
                }, triggerMove(self, move0)), move0 = {
                    x: samplePoint1.x,
                    y: samplePoint1.y,
                    timeStamp: samplePoint1.timeStamp,
                    angle: sampleAngle10,
                    dist: sampleDist10,
                    line: line,
                    rotate: rotate
                }, newMove && triggerMove(self, move0), "" != this.lastMove.rotate && (move0 = {
                    x: move0.x,
                    y: move0.y,
                    timeStamp: move0.timeStamp,
                    angle: move0.angle,
                    dist: move0.dist,
                    line: move0.line,
                    rotate: ""
                }, triggerMove(self, move0));
            }
            for (var i = 0; i < this.listeners.length; i++) this.listeners[i].end();
        };
    }
    function orientation(angle) {
        return angle > Math.PI - step ? "W" : angle > Math.PI - 3 * step ? "SW" : angle > Math.PI - 5 * step ? "S" : angle > Math.PI - 7 * step ? "SE" : angle > Math.PI - 9 * step ? "E" : angle > Math.PI - 11 * step ? "NE" : angle > Math.PI - 13 * step ? "N" : angle > Math.PI - 15 * step ? "NW" : "W";
    }
    function angleOf(angle1, angle0) {
        var angle = angle1 - angle0;
        return angle <= -Math.PI ? angle += 2 * Math.PI : angle > Math.PI && (angle -= 2 * Math.PI), 
        angle;
    }
    function angleNbStepOf(angle1, angle0) {
        var nbStep = Math.round(angle1 / (2 * step)) - Math.round(angle0 / (2 * step));
        return -4 >= nbStep ? nbStep += 8 : nbStep > 4 && (nbStep -= 8), nbStep;
    }
    function rotation(angle, nbStep) {
        return 1 == Math.abs(nbStep) ? 0 > angle ? "left" : "right" : "";
    }
    var step = Math.PI / 8;
    return GestureInterpolator.prototype.addListener = function(listener) {
        this.listeners.push(listener);
    }, GestureInterpolator.prototype.size = function() {
        return this.moves.length;
    }, GestureInterpolator;
}();

var a4p;

a4p || (a4p = {}), a4p.Hex = function() {
    var Hex = {};
    Hex.encode = function(input) {
        for (var output = "", i = 0; i < input.length; i++) {
            var x = input.charCodeAt(i);
            output += hexTab.charAt(15 & x >>> 4) + hexTab.charAt(15 & x);
        }
        return output;
    }, Hex.decode = function(input) {
        var output = "";
        input.length % 2 > 0 && (input = "0" + input);
        for (var i = 0; i < input.length; i += 2) output += String.fromCharCode(parseInt(input.charAt(i) + input.charAt(i + 1), 16));
        return output;
    };
    var hexTab = "0123456789abcdef";
    return Hex;
}();

var a4p;

a4p || (a4p = {}), a4p.Json = function($) {
    function Json() {
        this.version = "0.1";
    }
    if (!Object.toJSON && !window.JSON) throw new Error("Object.toJSON or window.JSON needs to be loaded before a4p.Json!");
    return Json.uriEncode = function(obj) {
        var name, value, fullSubName, subName, subValue, innerObj, i, query = "";
        for (name in obj) if (obj.hasOwnProperty(name)) if (value = obj[name], value instanceof Array) for (i = 0; i < value.length; ++i) subValue = value[i], 
        fullSubName = name + "[" + i + "]", innerObj = {}, innerObj[fullSubName] = subValue, 
        query += Json.uriEncode(innerObj) + "&"; else if (value instanceof Object) for (subName in value) value.hasOwnProperty(subName) && (subValue = value[subName], 
        fullSubName = name + "[" + subName + "]", innerObj = {}, innerObj[fullSubName] = subValue, 
        query += Json.uriEncode(innerObj) + "&"); else void 0 !== value && null !== value && (query += encodeURIComponent(name) + "=" + encodeURIComponent(value) + "&");
        return query.length ? query.substr(0, query.length - 1) : query;
    }, Json.object2String = $.toJSON || Object.toJSON || window.JSON && (JSON.encode || JSON.stringify), 
    Json.string2Object = $.evalJSON || window.JSON && (JSON.decode || JSON.parse) || function(str) {
        return String(str).evalJSON();
    }, Json;
}(window.$ || window.jQuery);

var a4p;

a4p || (a4p = {}), a4p.formatError = function(arg) {
    return arg instanceof Error && (arg.stack ? arg = arg.message && -1 === arg.stack.indexOf(arg.message) ? "Error: " + arg.message + "\n" + arg.stack : arg.stack : arg.sourceURL && (arg = arg.message + "\n" + arg.sourceURL + ":" + arg.line)), 
    arg;
}, a4p.Log = function() {
    function Log(nbMax) {
        this.nbMax = nbMax || 1e3, this.nbMax < 1 && (this.nbMax = 1), this.logEntries = [], 
        this.callbackHandle = 0, this.callbacks = [];
    }
    return Log.prototype.getLog = function() {
        return this.logEntries;
    }, Log.prototype.clearLog = function() {
        this.logEntries = [];
    }, Log.prototype.setNbMax = function(nbMax) {
        this.nbMax = nbMax || 1e3, this.nbMax < 1 && (this.nbMax = 1), this.logEntries.length > this.nbMax && this.logEntries.splice(0, this.logEntries.length - this.nbMax);
    }, Log.prototype.log = function(msg, details, traceStackOffset) {
        details = details || "";
        var now = new Date();
        now = a4pDateFormat(now) + "." + now.getMilliseconds();
        var stack, from = "";
        if (traceStackOffset = traceStackOffset || 0, stack = new Error().stack) {
            var caller_stack = stack.split("\n"), caller_line = caller_stack[2 + traceStackOffset];
            if (caller_line) {
                var index = caller_line.indexOf("at ") + 3;
                from = " at " + caller_line.substr(index);
            }
        }
        console.log(details ? now + from + " : " + msg + " : " + details : now + from + " : " + msg);
        var logEntry = {
            date: now,
            msg: msg,
            details: details
        };
        this.logEntries.length >= this.nbMax && this.logEntries.splice(0, 1), this.logEntries.push(logEntry);
        for (var idx = 0, nb = this.callbacks.length; nb > idx; idx++) try {
            this.callbacks[idx].callback(this.callbacks[idx].id, logEntry);
        } catch (e) {
            console.log("Error on callback#" + idx + " called from Log for the logEntry " + a4pDumpData(logEntry, 1) + " : " + a4p.formatError(e));
        }
        return logEntry;
    }, Log.prototype.addListener = function(fct) {
        return this.callbackHandle++, this.callbacks.push({
            id: this.callbackHandle,
            callback: fct
        }), this.callbackHandle;
    }, Log.prototype.cancelListener = function(callbackHandle) {
        for (var idx = this.callbacks.length - 1; idx >= 0; idx--) if (this.callbacks[idx].id == callbackHandle) return this.callbacks.splice(idx, 1), 
        !0;
        return !1;
    }, Log;
}(), a4p.ErrorLog = new a4p.Log(1e3), a4p.InternalLog = new a4p.Log(1e3);

var a4p;

a4p || (a4p = {}), a4p.MoveDrawer = function() {
    function MoveDrawer(canvas) {
        this.canvas = canvas, this.ctx = canvas.getContext("2d"), this.begin = function() {
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        }, this.add = function(p0) {
            this.ctx.strokeStyle = "red", this.ctx.lineWidth = "1", this.ctx.beginPath(), this.ctx.arc(p0.x, p0.y, 2, 0, 2 * Math.PI), 
            this.ctx.stroke(), this.ctx.strokeStyle = "green", this.ctx.lineWidth = "1", this.ctx.beginPath(), 
            this.ctx.arc(p0.x + p0.dx, p0.y + p0.dy, 2, 0, 2 * Math.PI), this.ctx.stroke(), 
            this.ctx.strokeStyle = "green", this.ctx.lineWidth = "1", this.ctx.beginPath(), 
            this.ctx.moveTo(p0.x, p0.y), this.ctx.lineTo(p0.x + p0.dx, p0.y + p0.dy), this.ctx.stroke();
        }, this.end = function() {};
    }
    return MoveDrawer;
}();

var a4p;

a4p || (a4p = {}), a4p.MoveInterpolator = function() {
    function MoveInterpolator() {
        var samplePoint0, samplePoint1, sample10X, sample10Y, sampleDist10, sampleAngle10;
        this.listeners = [], this.moves = [], this.begin = function() {
            this.moves = [], samplePoint0 = null, samplePoint1 = null;
            for (var i = 0; i < this.listeners.length; i++) this.listeners[i].begin();
        }, this.add = function(x, y, timeStamp) {
            if (null == samplePoint0) return void (samplePoint0 = {
                x: x,
                y: y,
                timeStamp: timeStamp
            });
            if (null != samplePoint1) {
                if (x != samplePoint1.x || y != samplePoint1.y) {
                    var oldDist = sampleDist10, tangentX = x - samplePoint0.x, tangentY = y - samplePoint0.y, tangentDist = Math.sqrt(tangentX * tangentX + tangentY * tangentY), tangentAngle = Math.atan2(tangentY, tangentX);
                    sample10X = x - samplePoint1.x, sample10Y = y - samplePoint1.y, sampleDist10 = Math.sqrt(sample10X * sample10X + sample10Y * sample10Y), 
                    sampleAngle10 = Math.atan2(sample10Y, sample10X);
                    var compass2 = orientation(tangentAngle);
                    this.moves.push({
                        x: samplePoint1.x,
                        y: samplePoint1.y,
                        dx: tangentX * (oldDist + sampleDist10) / 2 / tangentDist,
                        dy: tangentY * (oldDist + sampleDist10) / 2 / tangentDist,
                        d: (oldDist + sampleDist10) / 2,
                        angle: tangentAngle,
                        compass: compass2,
                        timeStamp: samplePoint1.timeStamp
                    });
                    for (var idx2 = 0; idx2 < this.listeners.length; idx2++) this.listeners[idx2].add({
                        x: samplePoint1.x,
                        y: samplePoint1.y,
                        dx: tangentX * (oldDist + sampleDist10) / 2 / tangentDist,
                        dy: tangentY * (oldDist + sampleDist10) / 2 / tangentDist,
                        d: (oldDist + sampleDist10) / 2,
                        angle: tangentAngle,
                        compass: compass2,
                        timeStamp: samplePoint1.timeStamp
                    });
                    samplePoint0 = samplePoint1, samplePoint1 = {
                        x: x,
                        y: y,
                        timeStamp: timeStamp
                    };
                }
            } else {
                if (x == samplePoint0.x && y == samplePoint0.y) return;
                samplePoint1 = {
                    x: x,
                    y: y,
                    timeStamp: timeStamp
                }, sample10X = samplePoint1.x - samplePoint0.x, sample10Y = samplePoint1.y - samplePoint0.y, 
                sampleDist10 = Math.sqrt(sample10X * sample10X + sample10Y * sample10Y), sampleAngle10 = Math.atan2(sample10Y, sample10X);
                var compass1 = orientation(sampleAngle10);
                this.moves.push({
                    x: samplePoint0.x,
                    y: samplePoint0.y,
                    dx: sample10X,
                    dy: sample10Y,
                    d: sampleDist10,
                    angle: sampleAngle10,
                    compass: compass1,
                    timeStamp: samplePoint0.timeStamp
                });
                for (var idx1 = 0; idx1 < this.listeners.length; idx1++) this.listeners[idx1].add({
                    x: samplePoint0.x,
                    y: samplePoint0.y,
                    dx: sample10X,
                    dy: sample10Y,
                    d: sampleDist10,
                    angle: sampleAngle10,
                    compass: compass1,
                    timeStamp: samplePoint0.timeStamp
                });
            }
        }, this.end = function() {
            if (null != samplePoint1) {
                var compass1 = orientation(sampleAngle10);
                this.moves.push({
                    x: samplePoint1.x,
                    y: samplePoint1.y,
                    dx: sample10X,
                    dy: sample10Y,
                    d: sampleDist10,
                    angle: sampleAngle10,
                    compass: compass1,
                    timeStamp: samplePoint1.timeStamp
                });
                for (var i = 0; i < this.listeners.length; i++) this.listeners[i].add({
                    x: samplePoint1.x,
                    y: samplePoint1.y,
                    dx: sample10X,
                    dy: sample10Y,
                    d: sampleDist10,
                    angle: sampleAngle10,
                    compass: compass1,
                    timeStamp: samplePoint1.timeStamp
                });
            }
            for (var idx1 = 0; idx1 < this.listeners.length; idx1++) this.listeners[idx1].end();
        };
    }
    function orientation(angle) {
        return angle > Math.PI - step ? "W" : angle > Math.PI - 3 * step ? "SW" : angle > Math.PI - 5 * step ? "S" : angle > Math.PI - 7 * step ? "SE" : angle > Math.PI - 9 * step ? "E" : angle > Math.PI - 11 * step ? "NE" : angle > Math.PI - 13 * step ? "N" : angle > Math.PI - 15 * step ? "NW" : "W";
    }
    MoveInterpolator.prototype.size = function() {
        return this.moves.length;
    }, MoveInterpolator.prototype.addListener = function(listener) {
        this.listeners.push(listener);
    };
    var step = Math.PI / 8;
    return MoveInterpolator;
}();

var a4p;

a4p || (a4p = {}), a4p.throttle = function(func, wait) {
    var context, args, timeout, result, previous = 0, later = function() {
        previous = new Date(), timeout = null, result = func.apply(context, args);
    };
    return function() {
        var now = new Date(), remaining = wait - (now - previous);
        return context = this, args = arguments, 0 >= remaining ? (window.clearTimeout(timeout), 
        timeout = null, previous = now, result = func.apply(context, args)) : timeout || (timeout = window.setTimeout(later, remaining)), 
        result;
    };
}, a4p.delay = function(func, wait) {
    var context, args, timeout, previous = 0, later = function() {
        var now = new Date().getTime(), remaining = wait - (now - previous);
        remaining > 0 ? timeout = window.setTimeout(later, remaining) : (timeout = null, 
        func.apply(context, args));
    };
    return function() {
        return previous = new Date().getTime(), timeout || (context = this, args = arguments, 
        timeout = window.setTimeout(later, wait)), timeout;
    };
};

var a4p;

a4p || (a4p = {}), a4p.PointSampler = function() {
    function PointSampler(maxIdleTime, minDistance) {
        var sourcePoint0, sourcePoint1, ptTimeout, lg0, lg1, addSampleTimeout = null;
        this.listeners = [], this.maxIdleTime = maxIdleTime || 10, this.minSqrDistance = minDistance * minDistance || 10, 
        this.stats = {
            timeout: 0,
            angle: 0,
            lg: 0
        }, this.points = [], this.beginSample = function() {
            sourcePoint0 = null, sourcePoint1 = null, ptTimeout = null, lg0 = 0, lg1 = 0, null != addSampleTimeout && clearTimeout(addSampleTimeout), 
            addSampleTimeout = null, this.stats = {
                timeout: 0,
                angle: 0,
                lg: 0
            };
            for (var i = 0; i < this.listeners.length; i++) this.listeners[i].begin();
        }, this.addSample = function(x, y, timeStamp) {
            var self = this;
            if (null == sourcePoint0) {
                null != addSampleTimeout && clearTimeout(addSampleTimeout), addSampleTimeout = null, 
                ptTimeout = null, this.points.push({
                    x: x,
                    y: y
                });
                for (var i = 0; i < this.listeners.length; i++) this.listeners[i].add(x, y, timeStamp);
                return void (sourcePoint0 = {
                    x: x,
                    y: y
                });
            }
            if (null != sourcePoint1) {
                lg1 = (x - sourcePoint1.x) * (x - sourcePoint1.x) + (y - sourcePoint1.y) * (y - sourcePoint1.y);
                var lg2 = (x - sourcePoint0.x) * (x - sourcePoint0.x) + (y - sourcePoint0.y) * (y - sourcePoint0.y);
                if (lg1 > this.minSqrDistance) if (lg1 + lg0 > 1.5 * lg2) {
                    null != addSampleTimeout && clearTimeout(addSampleTimeout), addSampleTimeout = null, 
                    ptTimeout = null, this.stats.lg++, this.points.push({
                        x: x,
                        y: y
                    });
                    for (var i = 0; i < this.listeners.length; i++) this.listeners[i].add(x, y, timeStamp);
                    sourcePoint0 = sourcePoint1, sourcePoint1 = {
                        x: x,
                        y: y
                    }, lg0 = lg1;
                } else if (lg1 + lg0 - lg2 > 36) {
                    null != addSampleTimeout && clearTimeout(addSampleTimeout), addSampleTimeout = null, 
                    ptTimeout = null, this.stats.angle++, this.points.push({
                        x: x,
                        y: y
                    });
                    for (var i = 0; i < this.listeners.length; i++) this.listeners[i].add(x, y, timeStamp);
                    sourcePoint0 = sourcePoint1, sourcePoint1 = {
                        x: x,
                        y: y
                    }, lg0 = lg1;
                } else ptTimeout = {
                    x: x,
                    y: y,
                    timeStamp: timeStamp
                }, null == addSampleTimeout && (addSampleTimeout = setTimeout(function() {
                    self.stats.timeout++, self.points.push({
                        x: ptTimeout.x,
                        y: ptTimeout.y
                    });
                    for (var i = 0; i < self.listeners.length; i++) self.listeners[i].add(ptTimeout.x, ptTimeout.y, ptTimeout.timeStamp);
                    sourcePoint0 = sourcePoint1, sourcePoint1 = {
                        x: ptTimeout.x,
                        y: ptTimeout.y
                    }, ptTimeout = null, addSampleTimeout = null, lg0 = lg1;
                }, this.maxIdleTime)); else ptTimeout = {
                    x: x,
                    y: y,
                    timeStamp: timeStamp
                }, null == addSampleTimeout && (addSampleTimeout = setTimeout(function() {
                    self.stats.timeout++, self.points.push({
                        x: ptTimeout.x,
                        y: ptTimeout.y
                    });
                    for (var i = 0; i < self.listeners.length; i++) self.listeners[i].add(ptTimeout.x, ptTimeout.y, ptTimeout.timeStamp);
                    sourcePoint0 = sourcePoint1, sourcePoint1 = {
                        x: ptTimeout.x,
                        y: ptTimeout.y
                    }, ptTimeout = null, addSampleTimeout = null, lg0 = lg1;
                }, this.maxIdleTime));
            } else if (lg0 = (x - sourcePoint0.x) * (x - sourcePoint0.x) + (y - sourcePoint0.y) * (y - sourcePoint0.y), 
            lg0 > this.minSqrDistance) {
                null != addSampleTimeout && clearTimeout(addSampleTimeout), addSampleTimeout = null, 
                ptTimeout = null, this.stats.lg++, this.points.push({
                    x: x,
                    y: y
                });
                for (var i = 0; i < this.listeners.length; i++) this.listeners[i].add(x, y, timeStamp);
                sourcePoint1 = {
                    x: x,
                    y: y
                };
            } else ptTimeout = {
                x: x,
                y: y,
                timeStamp: timeStamp
            }, null == addSampleTimeout && (addSampleTimeout = setTimeout(function() {
                self.stats.timeout++, self.points.push({
                    x: ptTimeout.x,
                    y: ptTimeout.y
                });
                for (var i = 0; i < self.listeners.length; i++) self.listeners[i].add(ptTimeout.x, ptTimeout.y, ptTimeout.timeStamp);
                sourcePoint1 = {
                    x: ptTimeout.x,
                    y: ptTimeout.y
                }, ptTimeout = null, addSampleTimeout = null;
            }, this.maxIdleTime));
        }, this.endSample = function() {
            if (null != addSampleTimeout && clearTimeout(addSampleTimeout), addSampleTimeout = null, 
            null != ptTimeout) {
                this.points.push({
                    x: ptTimeout.x,
                    y: ptTimeout.y
                });
                for (var i = 0; i < this.listeners.length; i++) this.listeners[i].add(ptTimeout.x, ptTimeout.y, ptTimeout.timeStamp);
            }
            sourcePoint0 = null, sourcePoint1 = null, ptTimeout = null, lg0 = 0, lg1 = 0;
            for (var i = 0; i < this.listeners.length; i++) this.listeners[i].end();
        };
    }
    return PointSampler.prototype.addListener = function(listener) {
        this.listeners.push(listener);
    }, PointSampler;
}();

var a4p;

a4p || (a4p = {}), a4p.Resize = function(navigator, window, document) {
    function refreshResizers() {
        attrIndex = {}, refreshWriteQueue = [];
        for (var key, fn, nodeDependent, value, idx = 0, nb = rootListener.length; nb > idx; idx++) {
            for (var resizer = rootListener[idx], varIdx = 0, varNb = resizer.scopeVars.length; varNb > varIdx; varIdx++) key = resizer.scopeVars[varIdx].key, 
            fn = resizer.scopeVars[varIdx].fn, nodeDependent = resizer.scopeVars[varIdx].nodeDependent, 
            value = fn(resizer.scope, {}), setVar(resizer, key, value);
            for (var cssIdx = 0, cssNb = resizer.cssKeys.length; cssNb > cssIdx; cssIdx++) {
                switch (key = resizer.cssKeys[cssIdx].key, fn = resizer.cssKeys[cssIdx].fn, nodeDependent = resizer.cssKeys[cssIdx].nodeDependent, 
                value = fn(resizer.scope, {}), key) {
                  case "top":
                    a4p.isDefined(listenersIndex[resizer.name]) && listenersIndex[resizer.name].id == resizer.id && (attrIndex["@" + resizer.name + ".clientTop"] = value, 
                    attrIndex["@" + resizer.name + ".offsetTop"] = value), attrIndex["@" + resizer.id + ".clientTop"] = value, 
                    attrIndex["@" + resizer.id + ".offsetTop"] = value;
                    break;

                  case "left":
                    a4p.isDefined(listenersIndex[resizer.name]) && listenersIndex[resizer.name].id == resizer.id && (attrIndex["@" + resizer.name + ".clientLeft"] = value, 
                    attrIndex["@" + resizer.name + ".offsetLeft"] = value), attrIndex["@" + resizer.id + ".clientLeft"] = value, 
                    attrIndex["@" + resizer.id + ".offsetLeft"] = value;
                    break;

                  case "width":
                    a4p.isDefined(listenersIndex[resizer.name]) && listenersIndex[resizer.name].id == resizer.id && (attrIndex["@" + resizer.name + ".clientWidth"] = value, 
                    attrIndex["@" + resizer.name + ".offsetWidth"] = value), attrIndex["@" + resizer.id + ".clientWidth"] = value, 
                    attrIndex["@" + resizer.id + ".offsetWidth"] = value;
                    break;

                  case "height":
                    a4p.isDefined(listenersIndex[resizer.name]) && listenersIndex[resizer.name].id == resizer.id && (attrIndex["@" + resizer.name + ".clientHeight"] = value, 
                    attrIndex["@" + resizer.name + ".offsetHeight"] = value), attrIndex["@" + resizer.id + ".clientHeight"] = value, 
                    attrIndex["@" + resizer.id + ".offsetHeight"] = value;
                    break;

                  case "minHeight":
                    break;

                  case "minWidth":
                    break;

                  case "lineHeight":                }
                console.log("refreshWriteQueue + :" + resizer.name + " " + key + " " + value), refreshWriteQueue.push({
                    resizer: resizer,
                    cssAttr: key,
                    value: value,
                    nodeDependent: nodeDependent
                });
            }
        }
        for (var jobIdx = 0, jobNb = refreshWriteQueue.length; jobNb > jobIdx; jobIdx++) {
            var job = refreshWriteQueue[jobIdx];
            setCss(job.resizer, job.cssAttr, "" + job.value + "px");
        }
        rootScope && a4p.safeApply(rootScope);
    }
    function endRefreshResizers() {
        for (var previousAttrIndex = attrIndex, previousRefreshWrites = {}, i = 0, nb = refreshWriteQueue.length; nb > i; i++) {
            var job = refreshWriteQueue[i];
            previousRefreshWrites[job.resizer.id + "-" + job.cssAttr] = job.value;
        }
        refreshResizers();
        var dirty = !1;
        for (var optKey in attrIndex) attrIndex.hasOwnProperty(optKey) && previousAttrIndex[optKey] != attrIndex[optKey] && (dirty = !0, 
        a4p.ErrorLog.log("a4p.Resize", "COLLATERAL " + endRefreshResizersCount + " effect of resizers upon " + optKey + " : " + previousAttrIndex[optKey] + "," + attrIndex[optKey] + " : try to move some resize-css-* option in its DOM children."));
        for (var jobIdx = 0, jobNb = refreshWriteQueue.length; jobNb > jobIdx; jobIdx++) {
            var job = refreshWriteQueue[jobIdx];
            a4p.isUndefined(previousRefreshWrites[job.resizer.id + "-" + job.cssAttr]) ? (dirty = !0, 
            a4p.ErrorLog.log("a4p.Resize", "COLLATERAL " + endRefreshResizersCount + " effect of resizers upon " + job.resizer.name + "." + job.cssAttr + " which did not exist previously.")) : previousRefreshWrites[job.resizer.id + "-" + job.cssAttr] != job.value && (dirty = !0, 
            a4p.ErrorLog.log("a4p.Resize", "COLLATERAL " + endRefreshResizersCount + " effect of resizers upon " + job.resizer.name + "." + job.cssAttr + " which had another value previously."));
        }
        dirty && !endRefreshResizersCount ? (endRefreshResizersCount++, endRefreshResizersTimer = a4p.BrowserCapabilities.nextFrame(endRefreshResizers)) : orientationChangeEvent && Resize.windowAll();
    }
    function refreshAllTimeout() {
        endRefreshResizersTimer && (a4p.BrowserCapabilities.cancelFrame(endRefreshResizersTimer), 
        endRefreshResizersTimer = null), refreshResizers(), endRefreshResizersCount = 0, 
        endRefreshResizersTimer = a4p.BrowserCapabilities.nextFrame(endRefreshResizers);
    }
    function windowAllTimeout() {
        orientationChangeEvent = !1;
        for (var idx = 0, nb = rootListener.length; nb > idx; idx++) {
            var resizer = rootListener[idx];
            resizer.triggerEvent(EVT_WINDOW, {
                id: resizer.id,
                name: resizer.name,
                resizeOrientation: Resize.resizeOrientation,
                resizePortrait: Resize.resizePortrait,
                resizeOneColumn: Resize.resizeOneColumn,
                resizeWidth: Resize.resizeWidth,
                resizeHeight: Resize.resizeHeight
            });
        }
    }
    function orderResizeListeners() {
        Resize.isReordering = !0;
        for (var idx = rootListener.length - 1; idx >= 0; idx--) {
            var depNodes = rootListener[idx].dependingOnNodes();
            moveResizeListenerAfterDependentNodes(rootListener[idx], depNodes);
        }
        Resize.isReordering = !1;
    }
    function addResizeListener(resizeListener) {
        a4p.isUndefinedOrNull(listenersIndex[resizeListener.id]) && (listenersIndex[resizeListener.id] = resizeListener, 
        rootListener.push(resizeListener), listenersIndex[resizeListener.name] = resizeListener, 
        orderResizeListeners());
    }
    function removeResizeListener(resizeListener) {
        removeIdFromList(rootListener, resizeListener.id), a4p.isDefined(listenersIndex[resizeListener.id]) && delete listenersIndex[resizeListener.id], 
        a4p.isDefined(listenersIndex[resizeListener.name]) && listenersIndex[resizeListener.name].id == resizeListener.id && delete listenersIndex[resizeListener.name];
    }
    function moveResizeListenerAfterDependentNodes(resizeListener, dependentNodeNames) {
        var selfIdx, nb = rootListener.length, depNb = dependentNodeNames.length;
        for (selfIdx = 0; nb > selfIdx && rootListener[selfIdx].id != resizeListener.id; selfIdx++) ;
        for (var lastDepIdx = selfIdx, otherIdx = selfIdx + 1; nb > otherIdx; otherIdx++) for (var otherListenerId = rootListener[otherIdx].id, depIdx = 0; depNb > depIdx; depIdx++) {
            var depName = dependentNodeNames[depIdx];
            if (otherListenerId == listenersIndex[depName].id) {
                lastDepIdx = otherIdx;
                break;
            }
        }
        lastDepIdx > selfIdx && (rootListener.splice(selfIdx, 1), rootListener.splice(lastDepIdx, 0, resizeListener));
    }
    function setVar(self, name, newValue) {
        self.scope[name] = newValue;
    }
    function setCss(self, name, newValue) {
        var oldValue = self.DOMelement.style[name];
        self.element.css(name, newValue), newValue !== oldValue && window.setTimeout(function() {
            self.triggerEvent(EVT_CHANGED, {
                id: self.id,
                name: self.name,
                attr: name,
                value: newValue
            });
        }, a4p.BrowserCapabilities.isAndroid ? 200 : 0);
    }
    function nextUid() {
        for (var index = uid.length; index; ) {
            index--;
            var i = idNext[uid[index]];
            if (uid[index] = idStr[i], i > 0) return uid.join("");
        }
        return uid.unshift("0"), uid.join("");
    }
    function Resize($rootScope, scope, element, options) {
        rootScope = $rootScope, this.id = nextUid(), this.name = this.id, this.scope = scope, 
        this.timeStamp = 0, this.element = element, this.DOMelement = null, this.DOMelement = "object" == typeof element ? element[0] : document.getElementById(element), 
        this.options = {
            callApply: !1
        }, this.nodeList = [], this.nodeIndex = {}, this.cssKeys = [], this.scopeVars = [];
        for (var optKey in options) options.hasOwnProperty(optKey) && (this.options[optKey] = options[optKey], 
        "name" == optKey && (this.name = options[optKey]));
        var self = this;
        addResizeListener(this), this.element.bind("$destroy", function() {
            self.destroy();
        }), orientationChangeHandlerStarted || (window.addEventListener(a4p.BrowserCapabilities.RESIZE_EVENT, Resize.handleDocOrientationChange, !1), 
        orientationChangeHandlerStarted = !0, window.setTimeout(function() {
            a4p.safeApply($rootScope, function() {
                Resize.handleDocOrientationChange();
            });
        }, 200));
    }
    var orientationChangeHandlerStarted = !1, orientationChangeEvent = !1, endRefreshResizersTimer = null, endRefreshResizersTimeout = 200, endRefreshResizersCount = 0, rootListener = [], listenersIndex = {}, rootScope = null, attrIndex = {}, refreshWriteQueue = [], uid = [ "0", "0", "0" ], idStr = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", idNext = {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5,
        "5": 6,
        "6": 7,
        "7": 8,
        "8": 9,
        "9": 10,
        A: 11,
        B: 12,
        C: 13,
        D: 14,
        E: 15,
        F: 16,
        G: 17,
        H: 18,
        I: 19,
        J: 20,
        K: 21,
        L: 22,
        M: 23,
        N: 24,
        O: 25,
        P: 26,
        Q: 27,
        R: 28,
        S: 29,
        T: 30,
        U: 31,
        V: 32,
        W: 33,
        X: 34,
        Y: 35,
        Z: 0
    }, EVT_BEFORE_WINDOW = "BeforeWindow", EVT_WINDOW = "Window", EVT_CHANGED = "Changed";
    return Resize.prototype.destroy = function() {
        return removeResizeListener(this), !0;
    }, Resize.initWidth = 0, Resize.initHeight = 0, Resize.initOrientation = 0, Resize.initPortrait = !1, 
    Resize.initPortrait0Orientation = !1, Resize.resizeOrientation = "landscape", Resize.resizePortrait = !1, 
    Resize.resizeOneColumn = !1, Resize.resizeWidth = 0, Resize.resizeHeight = 0, Resize.isReordering = !1, 
    Resize.prototype.triggerEvent = function(name, evt) {
        var toSenseEventName = "toSense" + name;
        if (a4p.isDefined(this[toSenseEventName]) && null != this[toSenseEventName]) try {
            this[toSenseEventName](evt);
        } catch (exception) {}
        var onEventName = "on" + name;
        if (a4p.isDefined(this[onEventName]) && null != this[onEventName]) {
            try {
                this[onEventName](evt);
            } catch (exception) {}
            return !0;
        }
        return !1;
    }, Resize.prototype.getPathValue = function(path, key) {
        var value = 0, node;
        try {
            if (a4p.isTrueOrNonEmpty(path)) {
                if (!a4p.isDefined(attrIndex["@" + this.id + "." + path + "." + key])) return node = eval("this.DOMelement." + path), 
                Resize.isReordering && this.addDependentNode(node), value = node[key], a4p.isDefined(listenersIndex[this.name]) && listenersIndex[this.name].id == this.id && (attrIndex["@" + this.name + "." + path + "." + key] = value), 
                attrIndex["@" + this.id + "." + path + "." + key] = value, value;
                value = attrIndex["@" + this.id + "." + path + "." + key];
            } else {
                if (!a4p.isDefined(attrIndex["@" + this.id + "." + key])) return node = this.DOMelement, 
                value = node[key], a4p.isDefined(listenersIndex[this.name]) && listenersIndex[this.name].id == this.id && (attrIndex["@" + this.name + "." + key] = value), 
                attrIndex["@" + this.id + "." + key] = value, value;
                value = attrIndex["@" + this.id + "." + key];
            }
        } catch (e) {
            a4p.ErrorLog.log("a4p.Resize " + this.name, "getPathValue(" + path + ", " + key + ") has invalid parameters : " + e.message);
        }
        return value;
    }, Resize.prototype.addDependentNode = function(node) {
        for (var nodeResize = null, i = 0, nb = rootListener.length; nb > i; i++) if (rootListener[i].DOMelement == node) {
            nodeResize = rootListener[i];
            break;
        }
        nodeResize && (listenersIndex[nodeResize.name].id == nodeResize.id ? (a4p.isUndefined(this.nodeIndex[nodeResize.name]) && (this.nodeIndex[nodeResize.name] = !0, 
        this.nodeList.push(nodeResize.name)), a4p.isUndefined(this.nodeIndex[nodeResize.id]) && (this.nodeIndex[nodeResize.id] = !0)) : a4p.isUndefined(this.nodeIndex[nodeResize.id]) && (this.nodeIndex[nodeResize.id] = !0, 
        this.nodeList.push(nodeResize.id)));
    }, Resize.prototype.addScopeVar = function(key, fn) {
        this.scope[key] = 0, this.tmpNodeDependent = !1, fn(this.scope, {}), this.scopeVars.push({
            key: key,
            fn: fn,
            nodeDependent: this.tmpNodeDependent
        });
    }, Resize.prototype.addCssKey = function(key, fn) {
        this.tmpNodeDependent = !1, fn(this.scope, {}), this.tmpNodeDependent || a4p.ErrorLog.log("a4p.Resize", "USELESS resize-css-" + key + " option in resizer " + this.name + ' : try to use style="' + key + ':..." or ng-style="{' + key + ":getResize...()+'px'}\" to calculate it asap."), 
        this.cssKeys.push({
            key: key,
            fn: fn,
            nodeDependent: this.tmpNodeDependent
        });
    }, Resize.prototype.dependingOnNodes = function() {
        var key, fn;
        this.nodeList = [], this.nodeIndex = {};
        for (var varIdx = 0, varNb = this.scopeVars.length; varNb > varIdx; varIdx++) key = this.scopeVars[varIdx].key, 
        (fn = this.scopeVars[varIdx].fn)(this.scope, {});
        for (var cssIdx = 0, cssNb = this.cssKeys.length; cssNb > cssIdx; cssIdx++) key = this.cssKeys[cssIdx].key, 
        (fn = this.cssKeys[cssIdx].fn)(this.scope, {});
        return this.nodeList;
    }, Resize.prototype.resize = function() {
        return this.scopeVars.length > 0 ? (Resize.refreshAll(), !0) : this.cssKeys.length > 0 ? (Resize.refreshAll(), 
        !0) : !1;
    }, Resize.refreshAll = a4p.delay(refreshAllTimeout, 10), Resize.windowAll = a4p.delay(windowAllTimeout, 10), 
    Resize.handleDocOrientationChange = function() {
        window.setTimeout(Resize.handleDocOrientationChangeDelay, 750);
    }, Resize.handleDocOrientationChangeDelay = function() {
        var html = document.documentElement;
        if (0 == Resize.initWidth) a4p.InternalLog.log("a4p.Resize", "INIT orientationChange : window.orientation=" + window.orientation + ", window.innerWidth=" + window.innerWidth + ", window.outerWidth=" + window.outerWidth + ", screen.width=" + screen.width + ", html.clientWidth=" + html.clientWidth + ", window.innerHeight=" + window.innerHeight + ", window.outerHeight=" + window.outerHeight + ", screen.height=" + screen.height + ", html.clientHeight=" + html.clientHeight), 
        Resize.initWidth = html.clientWidth, window.innerWidth > 0 && window.innerWidth < Resize.initWidth && (Resize.initWidth = window.innerWidth), 
        Resize.resizeWidth = Resize.initWidth, Resize.initHeight = html.clientHeight, window.innerHeight > 0 && window.innerHeight < Resize.initHeight && (Resize.initHeight = window.innerHeight), 
        Resize.resizeHeight = Resize.initHeight, Resize.initOrientation = window.orientation, 
        a4p.isUndefined(Resize.initOrientation) || 0 == Resize.initOrientation || 180 == Resize.initOrientation ? (Resize.initPortrait = Resize.initWidth < Resize.initHeight, 
        Resize.initPortrait0Orientation = Resize.initPortrait) : (Resize.initPortrait = Resize.initWidth < Resize.initHeight, 
        Resize.initPortrait0Orientation = !Resize.initPortrait), Resize.resizePortrait = Resize.initPortrait, 
        Resize.resizeOrientation = Resize.initPortrait ? "portrait" : "landscape", a4p.InternalLog.log("a4p.Resize", "INIT orientation : initOrientation=" + Resize.initOrientation + ", initWidth=" + Resize.initWidth + ", initHeight=" + Resize.initHeight + ", initPortrait=" + Resize.initPortrait + ", initPortrait0Orientation=" + Resize.initPortrait0Orientation); else {
            a4p.InternalLog.log("a4p.Resize", "orientationChange : window.orientation=" + window.orientation + ", window.innerWidth=" + window.innerWidth + ", window.outerWidth=" + window.outerWidth + ", screen.width=" + screen.width + ", html.clientWidth=" + html.clientWidth + ", window.innerHeight=" + window.innerHeight + ", window.outerHeight=" + window.outerHeight + ", screen.height=" + screen.height + ", html.clientHeight=" + html.clientHeight);
            var initWidth = html.clientWidth;
            window.innerWidth > 0 && window.innerWidth < initWidth && (initWidth = window.innerWidth);
            var initHeight = html.clientHeight;
            window.innerHeight > 0 && window.innerHeight < initHeight && (initHeight = window.innerHeight), 
            a4p.isUndefined(window.orientation) ? (Resize.resizeOrientation = initHeight > initWidth ? "portrait" : "landscape", 
            Resize.resizePortrait = initHeight > initWidth) : initHeight > initWidth && window.innerWidth < window.innerHeight && window.outerWidth < window.outerHeight && html.clientWidth < html.clientHeight ? (Resize.resizeOrientation = "portrait", 
            Resize.resizePortrait = !0) : initWidth >= initHeight && window.innerWidth >= window.innerHeight && window.outerWidth >= window.outerHeight && html.clientWidth >= html.clientHeight ? (Resize.resizeOrientation = "landscape", 
            Resize.resizePortrait = !1) : 0 == window.orientation || 180 == window.orientation ? (Resize.resizeOrientation = Resize.initPortrait0Orientation ? "portrait" : "landscape", 
            Resize.resizePortrait = Resize.initPortrait0Orientation) : (Resize.resizeOrientation = Resize.initPortrait0Orientation ? "landscape" : "portrait", 
            Resize.resizePortrait = !Resize.initPortrait0Orientation), Resize.resizePortrait ? (Resize.resizeWidth = initHeight > initWidth ? initWidth : initHeight, 
            Resize.resizeHeight = initHeight > initWidth ? initHeight : initWidth) : (Resize.resizeWidth = initWidth >= initHeight ? initWidth : initHeight, 
            Resize.resizeHeight = initWidth >= initHeight ? initHeight : initWidth);
        }
        Resize.resizeWidth < 500 ? (Resize.resizeOneColumn = !0, document.body.setAttribute("resizeOneColumn", "1")) : (Resize.resizeOneColumn = !1, 
        document.body.setAttribute("resizeOneColumn", "0")), a4p.InternalLog.log("a4p.Resize", "orientationChange : resizeOrientation=" + Resize.resizeOrientation + ", resizePortrait=" + Resize.resizePortrait + ", resizeOneColumn=" + Resize.resizeOneColumn + ", resizeWidth=" + Resize.resizeWidth + ", resizeHeight=" + Resize.resizeHeight);
        for (var idx = 0, nb = rootListener.length; nb > idx; idx++) {
            var resizer = rootListener[idx];
            resizer.triggerEvent(EVT_BEFORE_WINDOW, {
                id: resizer.id,
                name: resizer.name,
                resizeOrientation: Resize.resizeOrientation,
                resizePortrait: Resize.resizePortrait,
                resizeOneColumn: Resize.resizeOneColumn,
                resizeWidth: Resize.resizeWidth,
                resizeHeight: Resize.resizeHeight
            });
        }
        orientationChangeEvent = !0, Resize.refreshAll();
    }, Resize.declareDirectives = function(directiveModule) {
        angular.forEach([ EVT_BEFORE_WINDOW, EVT_WINDOW, EVT_CHANGED ], function(name) {
            var directiveName = "resize" + name.charAt(0).toUpperCase() + name.slice(1).toLowerCase(), eventName = name.charAt(0).toUpperCase() + name.slice(1);
            directiveModule.directive(directiveName, [ "$parse", "$rootScope", function($parse, $rootScope) {
                return function(scope, element, attr) {
                    var resize = element.data("resize");
                    if (a4p.isUndefined(resize)) {
                        resize = Resize.newResize($parse, $rootScope, scope, element, attr);
                        var initFn = $parse(resize.options.init);
                        initFn(scope, {
                            $resize: resize
                        });
                    }
                    var fn = $parse(attr[directiveName]);
                    resize["on" + eventName] = function(event) {
                        resize.options.callApply ? a4p.safeApply(scope, function() {
                            fn(scope, {
                                $event: event
                            });
                        }) : fn(scope, {
                            $event: event
                        });
                    };
                };
            } ]);
        }), directiveModule.directive("resizeOpts", [ "$parse", "$rootScope", function($parse, $rootScope) {
            return function(scope, element, attr) {
                var resize = element.data("resize");
                if (a4p.isUndefined(resize)) {
                    resize = Resize.newResize($parse, $rootScope, scope, element, attr);
                    var initFn = $parse(resize.options.init);
                    initFn(scope, {
                        $resize: resize
                    });
                }
            };
        } ]), directiveModule.directive("resizeVars", [ "$parse", "$rootScope", function($parse, $rootScope) {
            return function(scope, element, attr) {
                var resize = element.data("resize");
                if (a4p.isUndefined(resize)) {
                    resize = Resize.newResize($parse, $rootScope, scope, element, attr);
                    var initFn = $parse(resize.options.init);
                    initFn(scope, {
                        $resize: resize
                    });
                }
                var vars = $parse(attr.resizeVars)(scope, {});
                for (var varName in vars) if (vars.hasOwnProperty(varName)) {
                    var fn = $parse(vars[varName]);
                    resize.addScopeVar(varName, fn);
                }
            };
        } ]), angular.forEach([ "top", "left", "width", "height", "lineHeight", "minHeight", "minWidth" ], function(name) {
            var directiveName = "resizecss" + name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
            directiveModule.directive(directiveName, [ "$parse", "$rootScope", function($parse, $rootScope) {
                return function(scope, element, attr) {
                    var resize = element.data("resize");
                    if (a4p.isUndefined(resize)) {
                        resize = Resize.newResize($parse, $rootScope, scope, element, attr);
                        var initFn = $parse(resize.options.init);
                        initFn(scope, {
                            $resize: resize
                        });
                    }
                    var fn = $parse(attr[directiveName]);
                    resize.addCssKey(name, fn);
                };
            } ]);
        });
    }, Resize.newResize = function($parse, $rootScope, scope, element, attr) {
        var resize, opts = {};
        if (a4p.isDefined(attr.resizeOpts) && (opts = $parse(attr.resizeOpts)(scope, {})), 
        resize = new a4p.Resize($rootScope, scope, element, opts), element.data("resize", resize), 
        scope.getResizeOrientation = function() {
            return Resize.resizeOrientation;
        }, scope.getResizePortrait = function() {
            return Resize.resizePortrait;
        }, scope.getResizeOneColumn = function() {
            return Resize.resizeOneColumn;
        }, scope.getResizeWidth = function() {
            return Resize.resizeWidth;
        }, scope.getResizeHeight = function() {
            return Resize.resizeHeight;
        }, scope.getResizeId = function() {
            return resize.id;
        }, scope.getResizeName = function() {
            return resize.name;
        }, scope.getPathValue = function(path, key) {
            return resize.tmpNodeDependent = !0, resize.getPathValue(path, key);
        }, scope.getResizePathValue = function(name, path, key) {
            resize.tmpNodeDependent = !0;
            var resizer = listenersIndex[name];
            return a4p.isDefined(resizer) ? (Resize.isReordering && resize.addDependentNode(resizer.DOMelement), 
            resizer.getPathValue(path, key)) : 0;
        }, scope.resizeRefresh = function() {
            resize.resize();
        }, a4p.isDefined(resize.options.watchRefresh)) if ("string" == typeof resize.options.watchRefresh) scope.$watch(resize.options.watchRefresh, function(newValue, oldValue) {
            newValue !== oldValue && resize.resize();
        }); else for (var i = 0, nb = resize.options.watchRefresh.length; nb > i; i++) scope.$watch(resize.options.watchRefresh[i], function(newValue, oldValue) {
            newValue !== oldValue && resize.resize();
        });
        return Resize.refreshAll(), resize;
    }, Resize.getResize = function(name) {
        return a4p.isDefined(listenersIndex[name]) ? listenersIndex[name] : null;
    }, Resize;
}(navigator, window, document);

var a4p;

a4p || (a4p = {}), a4p.Scroll = function(navigator, window, document) {
    function scrollbarH(self) {
        if (!self.hScrollbar) return void (self.hScrollbarWrapper && (a4p.BrowserCapabilities.hasTransform && (self.hScrollbarIndicator.style[a4p.BrowserCapabilities.transform] = ""), 
        self.DOMelement.removeChild(self.hScrollbarWrapper), self.hScrollbarWrapper = null, 
        self.hScrollbarIndicator = null));
        if (!self.hScrollbarWrapper) {
            var bar = document.createElement("div");
            self.options.scrollbarClass ? bar.className = self.options.scrollbarClass + "H" : (bar.style.position = "absolute", 
            bar.style.zIndex = "100", bar.style.height = "7px", bar.style.bottom = "1px", bar.style.left = "2px", 
            bar.style.right = (self.vScrollbar ? "7" : "2") + "px"), bar.style.overflow = "hidden", 
            bar.style.opacity = self.options.hideScrollbar ? "0" : "1", bar.style.pointerEvents = "none", 
            bar.style[a4p.BrowserCapabilities.transitionProperty] = "opacity", bar.style[a4p.BrowserCapabilities.transitionDuration] = self.options.fadeScrollbar ? "350ms" : "0ms", 
            self.DOMelement.appendChild(bar), self.hScrollbarWrapper = bar, bar = document.createElement("div"), 
            self.options.scrollbarClass || (bar.style.position = "absolute", bar.style.zIndex = "100", 
            bar.style.height = "100%", bar.style.backgroundColor = "rgba(0,0,0,0.5)", bar.style.borderWidth = "1px", 
            bar.style.borderStyle = "solid", bar.style.borderColor = "rgba(255,255,255,0.9)", 
            bar.style[a4p.BrowserCapabilities.vendor + "BackgroundClip"] = "padding-box", bar.style.boxSizing = "border-box", 
            bar.style[a4p.BrowserCapabilities.vendor + "BoxSizing"] = "border-box", bar.style.borderRadius = "3px", 
            bar.style[a4p.BrowserCapabilities.vendor + "BorderRadius"] = "3px"), bar.style.pointerEvents = "none", 
            bar.style[a4p.BrowserCapabilities.transitionProperty] = a4p.BrowserCapabilities.cssVendor + "transform", 
            bar.style[a4p.BrowserCapabilities.transitionTimingFunction] = "cubic-bezier(0.33,0.66,0.66,1)", 
            bar.style[a4p.BrowserCapabilities.transitionDuration] = "0ms", bar.style[a4p.BrowserCapabilities.transform] = "translate(0,0)" + a4p.BrowserCapabilities.translateZ, 
            self.options.useTransition && (bar.style[a4p.BrowserCapabilities.transitionTimingFunction] = "cubic-bezier(0.33,0.66,0.66,1)"), 
            self.hScrollbarWrapper.appendChild(bar), self.hScrollbarIndicator = bar;
        }
        var margins = 2 + (self.vScrollbar ? 7 : 2);
        self.hScrollbarWrapper.style.width = self.wrapperW - margins + "px", self.hScrollbarIndicatorSize = Math.max(Math.round((self.wrapperW - margins) * self.wrapperW / self.scrollerW), 8), 
        self.hScrollbarIndicator.style.width = self.hScrollbarIndicatorSize + "px", self.hScrollbarMaxScroll = self.wrapperW - margins - self.hScrollbarIndicatorSize, 
        self.hScrollbarProp = self.hScrollbarMaxScroll / self.maxScrollX, scrollbarPosH(self, !0);
    }
    function scrollbarV(self) {
        if (!self.vScrollbar) return void (self.vScrollbarWrapper && (a4p.BrowserCapabilities.hasTransform && (self.vScrollbarIndicator.style[a4p.BrowserCapabilities.transform] = ""), 
        self.DOMelement.removeChild(self.vScrollbarWrapper), self.vScrollbarWrapper = null, 
        self.vScrollbarIndicator = null));
        if (!self.vScrollbarWrapper) {
            var bar = document.createElement("div");
            self.options.scrollbarClass ? bar.className = self.options.scrollbarClass + "V" : (bar.style.position = "absolute", 
            bar.style.zIndex = "100", bar.style.width = "7px", bar.style.right = "1px", bar.style.top = "2px", 
            bar.style.bottom = (self.hScrollbar ? "7" : "2") + "px"), bar.style.overflow = "hidden", 
            bar.style.opacity = self.options.hideScrollbar ? "0" : "1", bar.style.pointerEvents = "none", 
            bar.style[a4p.BrowserCapabilities.transitionProperty] = "opacity", bar.style[a4p.BrowserCapabilities.transitionDuration] = self.options.fadeScrollbar ? "350ms" : "0ms", 
            self.DOMelement.appendChild(bar), self.vScrollbarWrapper = bar, bar = document.createElement("div"), 
            self.options.scrollbarClass || (bar.style.position = "absolute", bar.style.zIndex = "100", 
            bar.style.width = "100%", bar.style.backgroundColor = "rgba(0,0,0,0.5)", bar.style.borderWidth = "1px", 
            bar.style.borderStyle = "solid", bar.style.borderColor = "rgba(255,255,255,0.9)", 
            bar.style[a4p.BrowserCapabilities.vendor + "BackgroundClip"] = "padding-box", bar.style.boxSizing = "border-box", 
            bar.style[a4p.BrowserCapabilities.vendor + "BoxSizing"] = "border-box", bar.style.borderRadius = "3px", 
            bar.style[a4p.BrowserCapabilities.vendor + "BorderRadius"] = "3px"), bar.style.pointerEvents = "none", 
            bar.style[a4p.BrowserCapabilities.transitionProperty] = a4p.BrowserCapabilities.cssVendor + "transform", 
            bar.style[a4p.BrowserCapabilities.transitionTimingFunction] = "cubic-bezier(0.33,0.66,0.66,1)", 
            bar.style[a4p.BrowserCapabilities.transitionDuration] = "0ms", bar.style[a4p.BrowserCapabilities.transform] = "translate(0,0)" + a4p.BrowserCapabilities.translateZ, 
            self.options.useTransition && (bar.style[a4p.BrowserCapabilities.transitionTimingFunction] = "cubic-bezier(0.33,0.66,0.66,1)"), 
            self.vScrollbarWrapper.appendChild(bar), self.vScrollbarIndicator = bar;
        }
        var margins = 2 + (self.hScrollbar ? 7 : 2);
        self.vScrollbarWrapper.style.height = self.wrapperH - margins + "px", self.vScrollbarIndicatorSize = Math.max(Math.round((self.wrapperH - margins) * self.wrapperH / self.scrollerH), 8), 
        self.vScrollbarIndicator.style.height = self.vScrollbarIndicatorSize + "px", self.vScrollbarMaxScroll = self.wrapperH - margins - self.vScrollbarIndicatorSize, 
        self.vScrollbarProp = self.vScrollbarMaxScroll / self.maxScrollY, scrollbarPosV(self, !0);
    }
    function pos(self, x, y, reset) {
        if (!self.zoomed) {
            var deltaX = self.hScroll ? x - self.x : 0, deltaY = self.vScroll ? y - self.y : 0;
            !reset && self.options.onBeforeScrollMove && (self.options.onBeforeScrollMove.call(self, deltaX, deltaY), 
            x = self.x + deltaX, y = self.y + deltaY), x = self.hScroll ? x : 0, y = self.vScroll ? y : 0, 
            self.options.useTransform ? self.scroller.style[a4p.BrowserCapabilities.transform] = "translate(" + x + "px," + y + "px) scale(" + self.scale + ")" + a4p.BrowserCapabilities.translateZ : (x = Math.round(x), 
            y = Math.round(y), self.scroller.style.left = x + "px", self.scroller.style.top = y + "px"), 
            self.x = x, self.y = y, scrollbarPosH(self), scrollbarPosV(self);
        }
    }
    function scrollbarPosH(self, hidden) {
        var size, pos = self.x;
        self.hScrollbar && (pos = self.hScrollbarProp * pos, 0 > pos ? (self.options.fixedScrollbar || (size = self.hScrollbarIndicatorSize + Math.round(3 * pos), 
        8 > size && (size = 8), self.hScrollbarIndicator.style.width = size + "px"), pos = 0) : pos > self.hScrollbarMaxScroll && (self.options.fixedScrollbar ? pos = self.hScrollbarMaxScroll : (size = self.hScrollbarIndicatorSize - Math.round(3 * (pos - self.hScrollbarMaxScroll)), 
        8 > size && (size = 8), self.hScrollbarIndicator.style.width = size + "px", pos = self.hScrollbarMaxScroll + (self.hScrollbarIndicatorSize - size))), 
        self.hScrollbarWrapper.style[a4p.BrowserCapabilities.transitionDelay] = "0", self.hScrollbarWrapper.style.opacity = hidden && self.options.hideScrollbar ? "0" : "1", 
        self.hScrollbarIndicator.style[a4p.BrowserCapabilities.transform] = "translate(" + pos + "px,0)" + a4p.BrowserCapabilities.translateZ);
    }
    function scrollbarPosV(self, hidden) {
        var size, pos = self.y;
        self.vScrollbar && (pos = self.vScrollbarProp * pos, 0 > pos ? (self.options.fixedScrollbar || (size = self.vScrollbarIndicatorSize + Math.round(3 * pos), 
        8 > size && (size = 8), self.vScrollbarIndicator.style.height = size + "px"), pos = 0) : pos > self.vScrollbarMaxScroll && (self.options.fixedScrollbar ? pos = self.vScrollbarMaxScroll : (size = self.vScrollbarIndicatorSize - Math.round(3 * (pos - self.vScrollbarMaxScroll)), 
        8 > size && (size = 8), self.vScrollbarIndicator.style.height = size + "px", pos = self.vScrollbarMaxScroll + (self.vScrollbarIndicatorSize - size))), 
        self.vScrollbarWrapper.style[a4p.BrowserCapabilities.transitionDelay] = "0", self.vScrollbarWrapper.style.opacity = hidden && self.options.hideScrollbar ? "0" : "1", 
        self.vScrollbarIndicator.style[a4p.BrowserCapabilities.transform] = "translate(0," + pos + "px)" + a4p.BrowserCapabilities.translateZ);
    }
    function resetPos(self, time) {
        var resetX = self.x >= 0 ? 0 : self.x < self.maxScrollX ? self.maxScrollX : self.x, resetY = self.y >= -self.options.topOffset || self.maxScrollY > 0 ? -self.options.topOffset : self.y < self.maxScrollY ? self.maxScrollY : self.y;
        return resetX == self.x && resetY == self.y ? (self.moved && (self.moved = !1, self.options.onAfterScrollEnd && self.options.onAfterScrollEnd.call(self)), 
        self.hScrollbar && self.options.hideScrollbar && ("webkit" == a4p.BrowserCapabilities.vendor && (self.hScrollbarWrapper.style[a4p.BrowserCapabilities.transitionDelay] = "300ms"), 
        self.hScrollbarWrapper.style.opacity = "0"), void (self.vScrollbar && self.options.hideScrollbar && ("webkit" == a4p.BrowserCapabilities.vendor && (self.vScrollbarWrapper.style[a4p.BrowserCapabilities.transitionDelay] = "300ms"), 
        self.vScrollbarWrapper.style.opacity = "0"))) : void self.scrollTo(resetX, resetY, time || 0, !1, !0);
    }
    function transitionEnd(self, e) {
        e.target == self.scroller && (self.bindTransitionEnd && (self.bindTransitionEnd.destroy(), 
        self.bindTransitionEnd = null), startAni(self));
    }
    function startAni(self) {
        if (!self.animating) {
            if (!self.steps.length) return void resetPos(self, 400);
            var startTime = new Date().getTime(), step = self.steps.shift();
            if (0 == step.deltaX && 0 == step.deltaY && (step.time = 0), self.animating = !0, 
            self.moved = !0, self.options.useTransition) if (transitionTime(self, step.time), 
            pos(self, self.x + step.deltaX, self.y + step.deltaY, step.reset), self.animating = !1, 
            step.time) {
                var handler = function(evt) {
                    transitionEnd(self, evt);
                };
                self.scroller.addEventListener(a4p.BrowserCapabilities.TRNEND_EVENT, handler, !1), 
                self.bindTransitionEnd = {
                    destroy: function() {
                        self.scroller.removeEventListener(a4p.BrowserCapabilities.TRNEND_EVENT, handler, !1);
                    }
                };
            } else resetPos(self, 0); else {
                var animate = function() {
                    var now = new Date().getTime();
                    if (now >= startTime + step.time || step.deltaX < 5 && step.deltaX > -5 && step.deltaY < 5 && step.deltaY > -5) pos(self, self.x + step.deltaX, self.y + step.deltaY, step.reset), 
                    self.animating = !1, startAni(self); else {
                        var ratio = (now - startTime) / step.time, easeOut = Math.sqrt(ratio), deltaX = Math.floor(step.deltaX * easeOut), deltaY = Math.floor(step.deltaY * easeOut);
                        step.deltaX -= deltaX, step.deltaY -= deltaY, pos(self, self.x + deltaX, self.y + deltaY, step.reset), 
                        self.animating && (self.aniTime = a4p.BrowserCapabilities.nextFrame(animate));
                    }
                };
                animate();
            }
        }
    }
    function stopAni(self) {
        self.options.useTransition ? self.bindTransitionEnd && (self.bindTransitionEnd.destroy(), 
        self.bindTransitionEnd = null) : self.aniTime && (a4p.BrowserCapabilities.cancelFrame(self.aniTime), 
        self.aniTime = null);
    }
    function stopMomentum(self) {
        if (self.options.momentum > 0) {
            var x, y;
            if (self.options.useTransform) {
                var matrix = getComputedStyle(self.scroller, null)[a4p.BrowserCapabilities.transform].replace(/[^0-9\-.,]/g, "").split(",");
                x = +(matrix[12] || matrix[4] || 0), y = +(matrix[13] || matrix[5] || 0);
            } else x = +getComputedStyle(self.scroller, null).left.replace(/[^0-9-]/g, "") || 0, 
            y = +getComputedStyle(self.scroller, null).top.replace(/[^0-9-]/g, "") || 0;
            if (x != self.x || y != self.y) {
                var deltaX = x - self.x, deltaY = y - self.y;
                stopAni(self), self.steps = [], pos(self, self.x + deltaX, self.y + deltaY), self.options.onAfterScrollEnd && self.options.onAfterScrollEnd.call(self);
            }
        }
    }
    function transitionTime(self, time) {
        time += "ms", self.scroller.style[a4p.BrowserCapabilities.transitionDuration] = time, 
        self.hScrollbar && (self.hScrollbarIndicator.style[a4p.BrowserCapabilities.transitionDuration] = time), 
        self.vScrollbar && (self.vScrollbarIndicator.style[a4p.BrowserCapabilities.transitionDuration] = time);
    }
    function offset(self, el) {
        for (var left = el.offsetLeft, top = el.offsetTop; el = el.offsetParent; ) left += el.offsetLeft, 
        top += el.offsetTop;
        return el != self.DOMelement && (left *= self.scale, top *= self.scale), {
            left: left,
            top: top
        };
    }
    function momentumPos(self, deltaX, deltaY, time, momentum) {
        var deceleration = .006, speedX = Math.abs(deltaX) / time, speedY = Math.abs(deltaY) / time;
        if (0 != deltaX) {
            var newDistX = momentum * speedX;
            if (!self.options.virtualLoop) {
                var xMaxDistUpper = -self.x, xMaxDistLower = self.x - self.maxScrollX;
                deltaX > 0 && newDistX > xMaxDistUpper ? newDistX = self.options.bounce ? xMaxDistUpper + (newDistX - xMaxDistUpper) * (newDistX - xMaxDistUpper) / self.wrapperW : xMaxDistUpper : 0 > deltaX && newDistX > xMaxDistLower && (newDistX = self.options.bounce ? xMaxDistLower + (newDistX - xMaxDistLower) * (newDistX - xMaxDistLower) / self.wrapperW : xMaxDistLower);
            }
            deltaX = newDistX * (0 > deltaX ? -1 : 1);
        }
        if (0 != deltaY) {
            var newDistY = momentum * speedY;
            if (!self.options.virtualLoop) {
                var yMaxDistUpper = -self.y, yMaxDistLower = self.y - self.maxScrollY;
                self.options.bounce ? self.wrapperH : 0, deltaY > 0 && newDistY > yMaxDistUpper ? newDistY = self.options.bounce ? yMaxDistUpper + (newDistY - yMaxDistUpper) * (newDistY - yMaxDistUpper) / self.wrapperH : yMaxDistUpper : 0 > deltaY && newDistY > yMaxDistLower && (newDistY = self.options.bounce ? yMaxDistLower + (newDistY - yMaxDistLower) * (newDistY - yMaxDistLower) / self.wrapperH : yMaxDistLower);
            }
            deltaY = newDistY * (0 > deltaY ? -1 : 1);
        }
        return time = Math.round(Math.max(speedX, speedY) * momentum / deceleration), {
            deltaX: deltaX,
            deltaY: deltaY,
            time: time
        };
    }
    function snapPos(self, x, y) {
        var i, l, page, time, sizeX, sizeY;
        for (page = self.pagesX.length - 1, i = 0, l = self.pagesX.length; l > i; i++) if (x >= self.pagesX[i]) {
            page = i;
            break;
        }
        for (page == self.currPageX && page > 0 && self.dirX < 0 && page--, x = self.pagesX[page], 
        sizeX = Math.abs(x - self.pagesX[self.currPageX]), sizeX = sizeX ? 500 * (Math.abs(self.x - x) / sizeX) : 0, 
        self.currPageX = page, page = self.pagesY.length - 1, i = 0; page > i; i++) if (y >= self.pagesY[i]) {
            page = i;
            break;
        }
        return page == self.currPageY && page > 0 && self.dirY < 0 && page--, y = self.pagesY[page], 
        sizeY = Math.abs(y - self.pagesY[self.currPageY]), sizeY = sizeY ? 500 * (Math.abs(self.y - y) / sizeY) : 0, 
        self.currPageY = page, time = Math.round(Math.max(sizeX, sizeY)) || 200, {
            x: x,
            y: y,
            time: time
        };
    }
    function Scroll(element, options) {
        this.element = element, this.DOMelement = "object" == typeof element ? element[0] : document.getElementById(element), 
        this.scroller = this.DOMelement.children[0], this.options = {
            name: "",
            hScroll: !0,
            vScroll: !0,
            x: 0,
            y: 0,
            bounce: !0,
            bounceLock: !1,
            momentum: 100,
            virtualLoop: !1,
            useTransform: !0,
            useTransition: !1,
            topOffset: 0,
            bottomOffset: 0,
            hScrollbar: !0,
            vScrollbar: !0,
            fixedScrollbar: a4p.BrowserCapabilities.isAndroid,
            hideScrollbar: a4p.BrowserCapabilities.isIDevice,
            fadeScrollbar: a4p.BrowserCapabilities.isIDevice && a4p.BrowserCapabilities.has3d,
            scrollbarClass: "",
            zoom: !1,
            zoomMin: 1,
            zoomMax: 4,
            wheelAction: "scroll",
            pageSelector: null,
            snap: !1,
            snapThreshold: 1,
            onRefresh: null,
            onDestroy: null,
            onBeforeScrollMove: null,
            onAfterScrollEnd: null,
            onZoomStart: null,
            onZoom: null,
            onZoomEnd: null
        };
        for (var i in options) options.hasOwnProperty(i) && (this.options[i] = options[i]);
        this.options.useTransform = a4p.BrowserCapabilities.hasTransform && this.options.useTransform, 
        this.options.hScrollbar = this.options.hScroll && this.options.hScrollbar, this.options.vScrollbar = this.options.vScroll && this.options.vScrollbar, 
        "zoom" == this.options.wheelAction && (this.options.zoom = !0), this.options.zoom && !this.options.useTransform && a4p.ErrorLog.log("a4p.sense", "Zoom option impossible because Browser cannot use transform"), 
        this.options.zoom = this.options.useTransform && this.options.zoom, this.options.useTransition = a4p.BrowserCapabilities.hasTransitionEnd && this.options.useTransition, 
        this.options.useTransition && (this.options.fixedScrollbar = !0), this.DOMelement.style.overflow = "hidden", 
        this.DOMelement.style.position = "relative", this.scroller.style[a4p.BrowserCapabilities.transitionProperty] = this.options.useTransform ? a4p.BrowserCapabilities.cssVendor + "transform" : "top left", 
        this.scroller.style[a4p.BrowserCapabilities.transitionDuration] = "0", this.scroller.style[a4p.BrowserCapabilities.transformOrigin] = "0 0", 
        this.options.useTransition && (this.scroller.style[a4p.BrowserCapabilities.transitionTimingFunction] = "cubic-bezier(0.33,0.66,0.66,1)"), 
        this.options.useTransform ? this.scroller.style[a4p.BrowserCapabilities.transform] = "translate(" + this.x + "px," + this.y + "px)" + a4p.BrowserCapabilities.translateZ : (this.scroller.style.position = "absolute", 
        this.scroller.style.top = this.y + "px", this.scroller.style.left = this.x + "px"), 
        this.x = 0, this.y = 0, this.enabled = !0, this.steps = [], this.scale = 1, this.currPageX = 0, 
        this.currPageY = 0, this.pagesX = [], this.pagesY = [], this.aniTime = null, this.bindTransitionEnd = null, 
        this.wheelZoomCount = 0, this.scrollCount = 0, this.scrollHistory = [], this.hScroll = !1, 
        this.vScroll = !1, this.hScrollbar = !1, this.vScrollbar = !1, this.refresh(), this.scrollTo(this.options.x, this.options.y, 0, !1, !0);
    }
    function zoomStart(self, pageX, pageY) {
        self.zoomed = !1, self.originX = Math.abs(pageX - self.wrapperOffsetLeft) - self.x, 
        self.originY = Math.abs(pageY - self.wrapperOffsetTop) - self.y, self.options.onZoomStart && self.options.onZoomStart.call(self, {
            pageX: pageX,
            pageY: pageY
        });
    }
    function scrollStart(self) {
        (self.options.useTransition || self.options.zoom) && transitionTime(self, 0), self.moved = !1, 
        self.animating = !1, self.distX = 0, self.distY = 0, self.absDistX = 0, self.absDistY = 0, 
        self.dirX = 0, self.dirY = 0, self.snapStartX = self.x, self.snapStartY = self.y, 
        stopMomentum(self);
    }
    function zoomMove(self, scale) {
        self.zoomed = !0, scale < self.options.zoomMin ? scale = .5 * self.options.zoomMin * Math.pow(2, scale / self.options.zoomMin) : scale > self.options.zoomMax && (scale = 2 * self.options.zoomMax * Math.pow(.5, self.options.zoomMax / scale)), 
        self.lastScale = scale / self.scale;
        var newX = self.originX - self.originX * self.lastScale + self.x, newY = self.originY - self.originY * self.lastScale + self.y;
        self.scroller.style[a4p.BrowserCapabilities.transform] = "translate(" + newX + "px," + newY + "px) scale(" + scale + ")" + a4p.BrowserCapabilities.translateZ, 
        self.options.onZoom && self.options.onZoom.call(self, {
            scale: scale
        });
    }
    function scrollMove(self, deltaX, deltaY) {
        var newX = self.x + deltaX, newY = self.y + deltaY;
        self.options.virtualLoop || ((newX > 0 || newX < self.maxScrollX) && (newX = self.options.bounce ? self.x + deltaX / 2 : newX >= 0 || self.maxScrollX >= 0 ? 0 : self.maxScrollX), 
        (newY > -self.options.topOffset || newY < self.maxScrollY) && (newY = self.options.bounce ? self.y + deltaY / 2 : newY >= -self.options.topOffset || self.maxScrollY >= 0 ? -self.options.topOffset : self.maxScrollY)), 
        self.distX += deltaX, self.distY += deltaY, self.absDistX = Math.abs(self.distX), 
        self.absDistY = Math.abs(self.distY), self.moved = !0, pos(self, newX, newY), self.dirX = deltaX > 0 ? -1 : 0 > deltaX ? 1 : 0, 
        self.dirY = deltaY > 0 ? -1 : 0 > deltaY ? 1 : 0;
    }
    function zoomEnd(self, scale) {
        scale = Math.max(self.options.zoomMin, scale), scale = Math.min(self.options.zoomMax, scale), 
        self.lastScale = scale / self.scale, self.setScale(scale), self.x = self.originX - self.originX * self.lastScale + self.x, 
        self.y = self.originY - self.originY * self.lastScale + self.y, self.scroller.style[a4p.BrowserCapabilities.transitionDuration] = "200ms", 
        self.scroller.style[a4p.BrowserCapabilities.transform] = "translate(" + self.x + "px," + self.y + "px) scale(" + self.scale + ")" + a4p.BrowserCapabilities.translateZ, 
        self.zoomed = !1, self.refresh(), self.options.onZoomEnd && self.options.onZoomEnd.call(self, {
            scale: scale
        });
    }
    function scrollEnd(self, deltaX, deltaY, duration) {
        if (self.options.momentum > 0) {
            var momentum = momentumPos(self, deltaX, deltaY, duration, self.options.momentum);
            deltaX = momentum.deltaX, deltaY = momentum.deltaY, duration = Math.max(momentum.time, 10);
            var newPosX = self.x + deltaX, newPosY = self.y + deltaY;
            if ((self.x > 0 && newPosX > 0 || self.x < self.maxScrollX && newPosX < self.maxScrollX) && (deltaX = 0), 
            (self.y > -self.options.topOffset && newPosY > -self.options.topOffset || self.y < self.maxScrollY && newPosY < self.maxScrollY) && (deltaY = 0), 
            deltaX || deltaY) {
                if (self.options.snap) {
                    if (Math.abs(newPosX - self.snapStartX) < self.options.snapThreshold && Math.abs(newPosY - self.snapStartY) < self.options.snapThreshold) return void self.scrollTo(self.snapStartX, self.snapStartY, 200);
                    var snap = snapPos(self, newPosX, newPosY);
                    newPosX = snap.x, newPosY = snap.y, duration = Math.max(snap.time, duration);
                } else self.options.pageSelector && snapPos(self, newPosX, newPosY);
                return newPosX = Math.round(newPosX), newPosY = Math.round(newPosY), void self.scrollTo(newPosX, newPosY, duration);
            }
        } else {
            var newPos2X = self.x + deltaX, newPos2Y = self.y + deltaY;
            if (self.options.snap) {
                if (Math.abs(newPos2X - self.snapStartX) < self.options.snapThreshold && Math.abs(newPos2Y - self.snapStartY) < self.options.snapThreshold) return void self.scrollTo(self.snapStartX, self.snapStartY, 200);
                var snap2 = snapPos(self, newPos2X, newPos2Y);
                return void self.scrollTo(snap2.x, snap2.y, snap2.time);
            }
            self.options.pageSelector && snapPos(self, newPos2X, newPos2Y);
        }
        resetPos(self, 200);
    }
    return Scroll.prototype.destroy = function() {
        this.scroller.style[a4p.BrowserCapabilities.transform] = "", this.hScrollbar = !1, 
        this.vScrollbar = !1, scrollbarH(this), scrollbarV(this), this.bindTransitionEnd && (this.bindTransitionEnd.destroy(), 
        this.bindTransitionEnd = null), this.options.onDestroy && this.options.onDestroy.call(this);
    }, Scroll.prototype.checkDOMChanges = function() {
        return this.isReady() && (this.wrapperW != (this.DOMelement.offsetWidth || 1) || this.wrapperH != (this.DOMelement.offsetHeight || 1) || this.scrollerW != Math.round(this.scroller.offsetWidth * this.scale) || this.scrollerH != Math.round((this.scroller.offsetHeight - this.options.topOffset - this.options.bottomOffset) * this.scale));
    }, Scroll.prototype.setScale = function(scale) {
        this.scale = scale, this.scale < this.options.zoomMin && (this.scale = this.options.zoomMin);
    }, Scroll.prototype.refresh = function() {
        var wrapperOffset, i, l, els;
        if (this.wrapperW = this.DOMelement.offsetWidth || 1, this.wrapperH = this.DOMelement.offsetHeight || 1, 
        this.scrollerW = Math.round(this.scroller.offsetWidth * this.scale), this.scrollerH = Math.round((this.scroller.offsetHeight - this.options.topOffset - this.options.bottomOffset) * this.scale), 
        this.maxScrollX = this.wrapperW - this.scrollerW, this.maxScrollX > 0 && (this.maxScrollX = 0), 
        this.maxScrollY = this.wrapperH - this.scrollerH - this.options.topOffset - this.options.bottomOffset, 
        this.maxScrollY > 0 && (this.maxScrollY = 0), this.dirX = 0, this.dirY = 0, this.options.onRefresh && this.options.onRefresh.call(this), 
        this.hScroll = this.options.hScroll && this.maxScrollX < 0, this.vScroll = this.options.vScroll && (!this.options.bounceLock && !this.hScroll || this.scrollerH > this.wrapperH), 
        this.hScrollbar = this.hScroll && this.options.hScrollbar, this.vScrollbar = this.vScroll && this.options.vScrollbar && this.scrollerH > this.wrapperH, 
        wrapperOffset = offset(this, this.DOMelement), this.wrapperOffsetLeft = wrapperOffset.left, 
        this.wrapperOffsetTop = wrapperOffset.top, this.options.pageSelector) for (this.pagesX = [], 
        this.pagesY = [], els = this.scroller.querySelectorAll(this.options.pageSelector), 
        i = 0, l = els.length; l > i; i++) {
            var posLT = offset(this, els[i]);
            posLT.left -= this.wrapperOffsetLeft, posLT.top -= this.wrapperOffsetTop, this.pagesX[i] = -posLT.left < this.maxScrollX ? this.maxScrollX : -posLT.left * this.scale, 
            this.pagesY[i] = -posLT.top < this.maxScrollY ? this.maxScrollY : -posLT.top * this.scale;
        } else if (this.options.snap) {
            var pos = 0, page = 0;
            for (this.pagesX = []; pos >= this.maxScrollX; ) this.pagesX[page] = pos, pos -= this.wrapperW, 
            page++;
            for (this.maxScrollX % this.wrapperW && (this.pagesX[this.pagesX.length] = this.maxScrollX - this.pagesX[this.pagesX.length - 1] + this.pagesX[this.pagesX.length - 1]), 
            pos = 0, page = 0, this.pagesY = []; pos >= this.maxScrollY; ) this.pagesY[page] = pos, 
            pos -= this.wrapperH, page++;
            this.maxScrollY % this.wrapperH && (this.pagesY[this.pagesY.length] = this.maxScrollY - this.pagesY[this.pagesY.length - 1] + this.pagesY[this.pagesY.length - 1]);
        }
        scrollbarH(this), scrollbarV(this), this.zoomed || (this.scroller.style[a4p.BrowserCapabilities.transitionDuration] = "0", 
        resetPos(this, 400));
    }, Scroll.prototype.scrollTo = function(x, y, time, relative, reset) {
        this.stop(), relative && (x = this.x - x, y = this.y - y);
        var deltaX = x - this.x, deltaY = y - this.y;
        (deltaX || deltaY) && (console.log("Scroll : scrollTo() steps.push : deltaX=" + deltaX + " deltaY=" + deltaY + " x=" + x + " y=" + y + " this.x=" + this.x + " this.y=" + this.y), 
        this.steps.push({
            deltaX: deltaX,
            deltaY: deltaY,
            time: time || 0,
            reset: reset
        }), startAni(this));
    }, Scroll.prototype.scrollToElement = function(el, time) {
        var pos;
        el = el.nodeType ? el : this.scroller.querySelector(el), el && (pos = offset(this, el), 
        pos.left -= this.wrapperOffsetLeft, pos.top -= this.wrapperOffsetTop, pos.left = -pos.left > 0 ? 0 : -pos.left < this.maxScrollX ? this.maxScrollX : pos.left, 
        pos.top = -pos.top > -this.options.topOffset ? -this.options.topOffset : -pos.top < this.maxScrollY ? this.maxScrollY : pos.top, 
        time = a4p.isUndefined(time) ? Math.max(2 * Math.abs(pos.left), 2 * Math.abs(pos.top)) : time, 
        this.scrollTo(-pos.left, -pos.top, time));
    }, Scroll.prototype.scrollToPage = function(pageX, pageY, time) {
        var x, y;
        time = a4p.isUndefined(time) ? 400 : time, this.options.pageSelector ? (pageX = "next" == pageX ? this.currPageX + 1 : "prev" == pageX ? this.currPageX - 1 : pageX, 
        pageY = "next" == pageY ? this.currPageY + 1 : "prev" == pageY ? this.currPageY - 1 : pageY, 
        pageX = 0 > pageX ? 0 : pageX > this.pagesX.length - 1 ? this.pagesX.length - 1 : pageX, 
        pageY = 0 > pageY ? 0 : pageY > this.pagesY.length - 1 ? this.pagesY.length - 1 : pageY, 
        this.currPageX = pageX, this.currPageY = pageY, x = this.pagesX[pageX], y = this.pagesY[pageY]) : (x = -this.wrapperW * pageX, 
        y = -this.wrapperH * pageY, x < this.maxScrollX && (x = this.maxScrollX), y < this.maxScrollY && (y = this.maxScrollY)), 
        this.scrollTo(x, y, time);
    }, Scroll.prototype.hasAttainedSideLeft = function() {
        return !this.hScroll || this.x >= 0;
    }, Scroll.prototype.hasAttainedSideRight = function() {
        return !this.hScroll || this.x <= this.maxScrollX;
    }, Scroll.prototype.hasAttainedSideTop = function() {
        return !this.vScroll || this.y >= -this.options.topOffset;
    }, Scroll.prototype.hasAttainedSideBottom = function() {
        return !this.vScroll || this.y <= this.maxScrollY;
    }, Scroll.prototype.disable = function() {
        this.stop(), resetPos(this, 0), this.enabled = !1;
    }, Scroll.prototype.enable = function() {
        this.enabled = !0;
    }, Scroll.prototype.stop = function() {
        stopMomentum(this), stopAni(this), this.steps = [], this.moved = !1, this.animating = !1;
    }, Scroll.prototype.zoom = function(x, y, scale, time) {
        var relScale = scale / this.scale;
        this.options.useTransform && (this.zoomed = !0, time = a4p.isUndefined(time) ? 200 : time, 
        x = x - this.wrapperOffsetLeft - this.x, y = y - this.wrapperOffsetTop - this.y, 
        this.x = this.x * relScale, this.y = this.y * relScale, this.setScale(scale), this.refresh(), 
        this.x = this.x > 0 ? 0 : this.x < this.maxScrollX ? this.maxScrollX : this.x, this.y = this.y > -this.options.topOffset ? -this.options.topOffset : this.y < this.maxScrollY ? this.maxScrollY : this.y, 
        this.scroller.style[a4p.BrowserCapabilities.transitionDuration] = time + "ms", this.scroller.style[a4p.BrowserCapabilities.transform] = "translate(" + this.x + "px," + this.y + "px) scale(" + scale + ")" + a4p.BrowserCapabilities.translateZ, 
        this.zoomed = !1);
    }, Scroll.prototype.isReady = function() {
        return !this.moved && !this.zoomed && !this.animating;
    }, Scroll.prototype.onZoomStart = function(pageX, pageY) {
        return this.enabled ? (this.checkDOMChanges() && this.refresh(), this.options.zoom ? (zoomStart(this, pageX, pageY), 
        !0) : !1) : !1;
    }, Scroll.prototype.onScrollStart = function(pageX, pageY, timeStamp) {
        return this.enabled ? (this.checkDOMChanges() && this.refresh(), this.options.zoom && zoomStart(this, pageX, pageY), 
        scrollStart(this), this.scrollCount++, this.scrollHistory = [ {
            deltaX: 0,
            deltaY: 0,
            timeStamp: timeStamp
        } ], this.startX = this.x, this.startY = this.y, this.pointX = pageX, this.pointY = pageY, 
        this.startTime = timeStamp, !0) : !1;
    }, Scroll.prototype.onZoomMove = function(scale) {
        return this.enabled ? this.options.zoom && 1 != scale ? (zoomMove(this, scale), 
        !0) : !1 : !1;
    }, Scroll.prototype.onScrollMove = function(pageX, pageY, timeStamp, scale) {
        if (!this.enabled) return !1;
        var deltaX = pageX - this.pointX, deltaY = pageY - this.pointY;
        return this.options.zoom && 1 != scale ? (zoomMove(this, scale), !0) : ((0 != deltaX || 0 != deltaY) && (scrollMove(this, deltaX, deltaY), 
        this.scrollCount++, this.scrollHistory.push({
            deltaX: deltaX,
            deltaY: deltaY,
            timeStamp: timeStamp
        })), this.pointX = pageX, this.pointY = pageY, timeStamp - this.startTime > 300 && (this.startTime = timeStamp, 
        this.startX = this.x, this.startY = this.y), !0);
    }, Scroll.prototype.onZoomEnd = function(scale) {
        return this.enabled ? this.zoomed ? (zoomEnd(this, scale), !0) : !1 : !1;
    }, Scroll.prototype.onScrollEnd = function(pageX, pageY, timeStamp, scale) {
        if (!this.enabled) return !1;
        if (this.zoomed) return zoomEnd(this, scale), !0;
        if (!this.moved) return resetPos(this, 400), !0;
        var i = this.scrollHistory.length - 1, lastMove = this.scrollHistory[i], deltaX = lastMove.deltaX, deltaY = lastMove.deltaY, duration = 35;
        for (i--; i >= 0; i--) {
            var move = this.scrollHistory[i];
            if (!(lastMove.timeStamp - move.timeStamp < 300)) break;
            deltaX += move.deltaX, deltaY += move.deltaY, lastMove.timeStamp - move.timeStamp >= duration && (duration = lastMove.timeStamp - move.timeStamp);
        }
        return this.scrollCount = 0, this.scrollHistory = [], scrollEnd(this, deltaX, deltaY, duration), 
        !0;
    }, Scroll.prototype.wheel = function(e, cumulatedWheelDeltaX, cumulatedWheelDeltaY) {
        var timeStamp = e.timeStamp, deltaX = 0, deltaY = 0;
        if (a4p.isDefined(cumulatedWheelDeltaX) && 0 != cumulatedWheelDeltaX || a4p.isDefined(cumulatedWheelDeltaY) && 0 != cumulatedWheelDeltaY ? (deltaX = cumulatedWheelDeltaX / 12, 
        deltaY = cumulatedWheelDeltaY / 12) : "wheelDeltaX" in e && (0 != e.wheelDeltaX || 0 != e.wheelDeltaY) ? (deltaX = e.wheelDeltaX / 12, 
        deltaY = e.wheelDeltaY / 12) : "wheelDelta" in e && 0 != e.wheelDelta ? deltaX = deltaY = e.wheelDelta / 12 : "detail" in e && 0 != e.detail && (deltaX = deltaY = 3 * -e.detail), 
        0 == deltaX && 0 == deltaY) return !1;
        this.checkDOMChanges() && this.refresh();
        var self = this;
        if ("zoom" == this.options.wheelAction) {
            var deltaScale = this.scale * Math.pow(2, 1 / 3 * (deltaY ? deltaY / Math.abs(deltaY) : 0));
            return deltaScale < this.options.zoomMin && (deltaScale = this.options.zoomMin), 
            deltaScale > this.options.zoomMax && (deltaScale = this.options.zoomMax), deltaScale != this.scale && (!this.wheelZoomCount && this.options.onZoomStart && this.options.onZoomStart.call(this, e), 
            this.wheelZoomCount++, this.zoom(e.pageX, e.pageY, deltaScale, 400), window.setTimeout(function() {
                self.wheelZoomCount--, !self.wheelZoomCount && self.options.onZoomEnd && self.options.onZoomEnd.call(self, e);
            }, 400)), !0;
        }
        return 0 == this.scrollCount && (scrollStart(this), this.scrollCount++, this.scrollHistory = [ {
            deltaX: 0,
            deltaY: 0,
            timeStamp: timeStamp
        } ]), scrollMove(this, deltaX, deltaY), this.scrollCount++, this.scrollHistory.push({
            deltaX: deltaX,
            deltaY: deltaY,
            timeStamp: timeStamp
        }), window.setTimeout(function() {
            if (self.scrollCount--, 1 == self.scrollCount) {
                var i = self.scrollHistory.length - 1, lastMove = self.scrollHistory[i], deltaX = lastMove.deltaX, deltaY = lastMove.deltaY, duration = 35;
                for (i--; i >= 0; i--) {
                    var move = self.scrollHistory[i];
                    if (!(lastMove.timeStamp - move.timeStamp < 300)) break;
                    deltaX += move.deltaX, deltaY += move.deltaY, lastMove.timeStamp - move.timeStamp >= duration && (duration = lastMove.timeStamp - move.timeStamp);
                }
                self.scrollCount = 0, self.scrollHistory = [], scrollEnd(self, deltaX, deltaY, duration);
            }
        }, 35), !0;
    }, Scroll;
}(navigator, window, document), a4p.Sense = function(navigator, window, document) {
    function nextUid() {
        for (var index = uid.length; index; ) {
            index--;
            var i = idNext[uid[index]];
            if (uid[index] = idStr[i], i > 0) return uid.join("");
        }
        return uid.unshift("0"), uid.join("");
    }
    function handleTouchStart(sense, evt) {
        return sense.timeStamp = new Date().getTime(), sense.inTouchMove = !1, sense.evtHandled = !1, 
        sense.evtTriggered = !1, sense.fingers.length <= 0 && bindOnTouchOther(sense), onTouchStart[sense.state].call(sense, evt), 
        sense.evtTriggered && (sense.options.defaultAction || preventDefault(evt), sense.options.bubble || stopPropagation(evt)), 
        !sense.options.defaultAction;
    }
    function handleTouchMove(sense, evt) {
        var now = new Date().getTime();
        return now - sense.timeStamp < 17 ? !0 : (sense.timeStamp = now, sense.inTouchMove || (sense.inTouchMove = !0), 
        sense.evtHandled = !1, sense.evtTriggered = !1, onTouchMove[sense.state].call(sense, evt), 
        sense.evtTriggered && (sense.options.defaultAction || preventDefault(evt), sense.options.bubble || stopPropagation(evt), 
        unbindAllOtherExceptFor(sense)), !sense.options.defaultAction);
    }
    function handleTouchEnd(sense, evt) {
        return sense.timeStamp = new Date().getTime(), sense.inTouchMove = !1, sense.evtHandled = !1, 
        sense.evtTriggered = !1, onTouchEnd[sense.state].call(sense, evt), sense.evtTriggered && (sense.options.defaultAction || preventDefault(evt), 
        sense.options.bubble || stopPropagation(evt), unbindAllOtherExceptFor(sense)), sense.fingers.length <= 0 && unbindOther(sense), 
        !sense.options.defaultAction;
    }
    function handleTouchCancel(sense, evt) {
        return sense.timeStamp = new Date().getTime(), sense.inTouchMove = !1, sense.evtHandled = !1, 
        sense.evtTriggered = !1, onTouchCancel[sense.state].call(sense, evt), sense.evtTriggered && (sense.options.defaultAction || preventDefault(evt), 
        sense.options.bubble || stopPropagation(evt), unbindAllOtherExceptFor(sense)), sense.fingers.length <= 0 && unbindOther(sense), 
        !sense.options.defaultAction;
    }
    function handleMouseDown(sense, evt) {
        return sense.timeStamp = new Date().getTime(), sense.inMouseMove = !1, sense.evtHandled = !1, 
        sense.evtTriggered = !1, sense.fingers.length <= 0 && bindOnMouseOther(sense), onMouseDown[sense.state].call(sense, evt), 
        sense.evtTriggered && (sense.options.defaultAction || preventDefault(evt), sense.options.bubble || stopPropagation(evt)), 
        !sense.options.defaultAction;
    }
    function handleMouseMove(sense, evt) {
        var now = new Date().getTime();
        return now - sense.timeStamp < 17 ? !0 : (sense.timeStamp = now, sense.inMouseMove || (sense.inMouseMove = !0), 
        sense.evtHandled = !1, sense.evtTriggered = !1, onMouseMove[sense.state].call(sense, evt), 
        sense.evtTriggered && (sense.options.defaultAction || preventDefault(evt), sense.options.bubble || stopPropagation(evt), 
        unbindAllOtherExceptFor(sense)), !sense.options.defaultAction);
    }
    function handleMouseUp(sense, evt) {
        return sense.timeStamp = new Date().getTime(), sense.inMouseMove = !1, sense.evtHandled = !1, 
        sense.evtTriggered = !1, onMouseUp[sense.state].call(sense, evt), sense.evtTriggered && (sense.options.defaultAction || preventDefault(evt), 
        sense.options.bubble || stopPropagation(evt), unbindAllOtherExceptFor(sense)), sense.fingers.length <= 0 && unbindOther(sense), 
        !sense.options.defaultAction;
    }
    function handleWheel(sense, evt) {
        "wheelDeltaX" in evt && (0 != evt.wheelDeltaX || 0 != evt.wheelDeltaY) ? (sense.wheelDeltaX += evt.wheelDeltaX, 
        sense.wheelDeltaY += evt.wheelDeltaY) : "wheelDelta" in evt && 0 != evt.wheelDelta ? (sense.wheelDeltaX += evt.wheelDelta, 
        sense.wheelDeltaY += evt.wheelDelta) : "detail" in evt && 0 != evt.detail && (sense.wheelDeltaX += 36 * -evt.detail, 
        sense.wheelDeltaY += 36 * -evt.detail);
        var now = new Date().getTime();
        return now - sense.timeStamp < 17 ? !sense.options.defaultAction : (sense.scroll && sense.scroll.wheel(evt, sense.wheelDeltaX, sense.wheelDeltaY), 
        sense.wheelDeltaX = 0, sense.wheelDeltaY = 0, sense.timeStamp = now, !sense.options.defaultAction);
    }
    function handleDocMouseMove(evt) {
        var now = new Date().getTime();
        if (17 > now - timeStampDocMouseMove) return !0;
        timeStampDocMouseMove = now;
        var i, nb, handlers = [];
        for (i = 0, nb = mouseListeners.length; nb > i; i++) handlers.push(mouseListeners[i]);
        var noBubble = !1;
        for (i = 0, nb = handlers.length; nb > i && (a4p.isDefined(handlers[i]) && (handleMouseMove(handlers[i], evt), 
        noBubble = handlers[i].evtTriggered && !handlers[i].options.bubble), !noBubble); i++) ;
        return !0;
    }
    function handleDocMouseUp(evt) {
        var i, nb, handlers = [];
        for (i = 0, nb = mouseListeners.length; nb > i; i++) handlers.push(mouseListeners[i]);
        var noBubble = !1;
        for (i = 0, nb = handlers.length; nb > i && (a4p.isDefined(handlers[i]) && (handleMouseUp(handlers[i], evt), 
        noBubble = handlers[i].evtTriggered && !handlers[i].options.bubble), !noBubble); i++) ;
        return !0;
    }
    function bindOnStart(sense, newScroll) {
        a4p.BrowserCapabilities.hasTouch ? sense.bindTouchStart || (sense.bindTouchStart = bindEvent(sense.DOMelement, "touchstart", function(evt) {
            handleTouchStart(sense, evt);
        })) : (sense.bindMouseDown || (sense.bindMouseDown = bindEvent(sense.DOMelement, "mousedown", function(evt) {
            handleMouseDown(sense, evt);
        })), newScroll && (sense.bindMouseWheel || (sense.bindMouseWheel = bindEvent(sense.DOMelement, "mousewheel", function(evt) {
            handleWheel(sense, evt);
        })), sense.bindDomMouseWheel || (sense.bindDomMouseWheel = bindEvent(sense.DOMelement, "DOMMouseScroll", function(evt) {
            handleWheel(sense, evt);
        }))));
    }
    function unbindStart(sense) {
        sense.bindDomMouseWheel && (sense.bindDomMouseWheel.destroy(), sense.bindDomMouseWheel = !1), 
        sense.bindMouseWheel && (sense.bindMouseWheel.destroy(), sense.bindMouseWheel = !1), 
        a4p.BrowserCapabilities.hasTouch ? sense.bindTouchStart && (sense.bindTouchStart.destroy(), 
        sense.bindTouchStart = !1) : sense.bindMouseDown && (sense.bindMouseDown.destroy(), 
        sense.bindMouseDown = !1);
    }
    function bindOnTouchOther(sense) {
        if (a4p.BrowserCapabilities.hasTouch && sense.bindTouchStart) {
            for (var found = !1, i = touchListeners.length - 1; i >= 0; i--) if (touchListeners[i].id == sense.id) {
                found = !0;
                break;
            }
            found || touchListeners.push(sense), sense.bindTouchMove || (sense.bindTouchMove = bindEvent(sense.DOMelement, "touchmove", function(evt) {
                handleTouchMove(sense, evt);
            })), sense.bindTouchEnd || (sense.bindTouchEnd = bindEvent(sense.DOMelement, "touchend", function(evt) {
                handleTouchEnd(sense, evt);
            })), sense.bindTouchCancel || (sense.bindTouchCancel = bindEvent(sense.DOMelement, "touchcancel", function(evt) {
                handleTouchCancel(sense, evt);
            }));
        }
    }
    function bindOnMouseOther(sense) {
        if (!a4p.BrowserCapabilities.hasTouch && sense.bindMouseDown && !sense.bindMouseOther) {
            for (var found = !1, i = mouseListeners.length - 1; i >= 0; i--) if (mouseListeners[i].id == sense.id) {
                found = !0;
                break;
            }
            found || mouseListeners.push(sense), sense.bindMouseOther = !0;
        }
    }
    function unbindAllOtherExceptFor(sense) {
        var i;
        if (a4p.BrowserCapabilities.hasTouch) for (i = touchListeners.length - 1; i >= 0 && touchListeners[i].id != sense.id; i--) touchListeners[i].resetState(); else for (i = mouseListeners.length - 1; i >= 0 && mouseListeners[i].id != sense.id; i--) mouseListeners[i].resetState();
    }
    function unbindOther(sense) {
        var i;
        if (a4p.BrowserCapabilities.hasTouch) {
            for (i = touchListeners.length - 1; i >= 0; i--) if (touchListeners[i].id == sense.id) {
                touchListeners.splice(i, 1);
                break;
            }
            sense.bindTouchMove && (sense.bindTouchMove.destroy(), sense.bindTouchMove = !1), 
            sense.bindTouchEnd && (sense.bindTouchEnd.destroy(), sense.bindTouchEnd = !1), sense.bindTouchCancel && (sense.bindTouchCancel.destroy(), 
            sense.bindTouchCancel = !1);
        } else if (sense.bindMouseOther) {
            for (i = mouseListeners.length - 1; i >= 0; i--) if (mouseListeners[i].id == sense.id) {
                mouseListeners.splice(i, 1);
                break;
            }
            sense.bindMouseOther = !1;
        }
    }
    function bindEvent(element, eventName, callback) {
        return element.addEventListener ? (element.addEventListener(eventName, callback, !1), 
        {
            destroy: function() {
                element.removeEventListener(eventName, callback, !1);
            }
        }) : element.attachEvent ? (element.attachEvent("on" + eventName, callback), {
            destroy: function() {
                element.detachEvent("on" + eventName, callback);
            }
        }) : !1;
    }
    function preventDefault(event) {
        event = event || window.event, event.preventDefault ? event.preventDefault() : event.returnValue = !1;
    }
    function stopPropagation(event) {
        event = event || window.event, event.stopPropagation ? event.stopPropagation() : event.cancelBubble = !0;
    }
    function eventNameWithoutPrefixNorNbFinger(eventName) {
        "Short" == eventName.substr(0, 5) ? eventName = eventName.substr(5) : "Long" == eventName.substr(0, 4) && (eventName = eventName.substr(4));
        var lg = eventName.length;
        return lg > 0 && ("1" == eventName.charAt(lg - 1) || "2" == eventName.charAt(lg - 1) || "3" == eventName.charAt(lg - 1) || "4" == eventName.charAt(lg - 1) || "5" == eventName.charAt(lg - 1)) ? eventName.substr(0, lg - 1) : eventName;
    }
    function clearFingers(sense) {
        sense.fingers = [], sense.side = "", sense.scale = 1, sense.rotate = 0, sense.moves = [], 
        sense.timeStamp = new Date().getTime(), sense.wheelDeltaX = 0, sense.wheelDeltaY = 0, 
        sense.sourcePoints = [], sense.startPageX = 0, sense.startPageY = 0, sense.startClientX = 0, 
        sense.startClientY = 0, sense.pageX = 0, sense.pageY = 0, sense.clientX = 0, sense.clientY = 0, 
        sense.deltaX = 0, sense.deltaY = 0, sense.deltaFingerX = 0, sense.deltaFingerY = 0, 
        delete sense.finger1, delete sense.finger2;
    }
    function addTouchFinger(sense, id, finger) {
        for (var i = sense.fingers.length - 1; i >= 0; i--) {
            var item = sense.fingers[i];
            if (item.id == id) return void (i > 1 ? sense.fingers[i] = {
                id: id,
                target: finger.target,
                pageX: finger.pageX,
                pageY: finger.pageY,
                clientX: finger.clientX,
                clientY: finger.clientY,
                deltaFingerX: finger.clientX - sense.clientX,
                deltaFingerY: finger.clientY - sense.clientY
            } : 1 == i ? (sense.deltaFingerX = finger.clientX - sense.clientX, sense.deltaFingerY = finger.clientY - sense.clientY, 
            sense.fingers[1] = {
                id: id,
                target: finger.target,
                pageX: finger.pageX,
                pageY: finger.pageY,
                clientX: finger.clientX,
                clientY: finger.clientY,
                deltaFingerX: sense.deltaFingerX,
                deltaFingerY: sense.deltaFingerY
            }, sense.finger2 = sense.fingers[1]) : (sense.startPageX = finger.pageX, sense.startPageY = finger.pageY, 
            sense.startClientX = finger.clientX, sense.startClientY = finger.clientY, sense.pageX = finger.pageX, 
            sense.pageY = finger.pageY, sense.clientX = finger.clientX, sense.clientY = finger.clientY, 
            sense.deltaFingerX = 0, sense.deltaFingerY = 0, sense.fingers[0] = {
                id: id,
                target: finger.target,
                pageX: finger.pageX,
                pageY: finger.pageY,
                clientX: finger.clientX,
                clientY: finger.clientY,
                deltaFingerX: 0,
                deltaFingerY: 0
            }, sense.finger1 = sense.fingers[0]));
        }
        sense.fingers.length > 1 ? sense.fingers.push({
            id: id,
            target: finger.target,
            pageX: finger.pageX,
            pageY: finger.pageY,
            clientX: finger.clientX,
            clientY: finger.clientY,
            deltaFingerX: finger.clientX - sense.clientX,
            deltaFingerY: finger.clientY - sense.clientY
        }) : 1 == sense.fingers.length ? (sense.deltaFingerX = finger.clientX - sense.clientX, 
        sense.deltaFingerY = finger.clientY - sense.clientY, sense.fingers.push({
            id: id,
            target: finger.target,
            pageX: finger.pageX,
            pageY: finger.pageY,
            clientX: finger.clientX,
            clientY: finger.clientY,
            deltaFingerX: sense.deltaFingerX,
            deltaFingerY: sense.deltaFingerY
        }), sense.finger2 = sense.fingers[1]) : (sense.startPageX = finger.pageX, sense.startPageY = finger.pageY, 
        sense.startClientX = finger.clientX, sense.startClientY = finger.clientY, sense.pageX = finger.pageX, 
        sense.pageY = finger.pageY, sense.clientX = finger.clientX, sense.clientY = finger.clientY, 
        sense.deltaFingerX = 0, sense.deltaFingerY = 0, sense.fingers.push({
            id: id,
            target: finger.target,
            pageX: finger.pageX,
            pageY: finger.pageY,
            clientX: finger.clientX,
            clientY: finger.clientY,
            deltaFingerX: 0,
            deltaFingerY: 0
        }), sense.finger1 = sense.fingers[0]);
    }
    function addMouseFinger(sense, id, evt) {
        for (var pageX = getMousePageX(evt), pageY = getMousePageY(evt), i = sense.fingers.length - 1; i >= 0; i--) {
            var item = sense.fingers[i];
            if (item.id == id) return void (i > 1 ? sense.fingers[i] = {
                id: id,
                target: evt.target,
                pageX: pageX,
                pageY: pageY,
                clientX: evt.clientX,
                clientY: evt.clientY,
                deltaFingerX: evt.clientX - sense.clientX,
                deltaFingerY: evt.clientY - sense.clientY
            } : 1 == i ? (sense.deltaFingerX = evt.clientX - sense.clientX, sense.deltaFingerY = evt.clientY - sense.clientY, 
            sense.fingers[1] = {
                id: id,
                target: evt.target,
                pageX: pageX,
                pageY: pageY,
                clientX: evt.clientX,
                clientY: evt.clientY,
                deltaFingerX: sense.deltaFingerX,
                deltaFingerY: sense.deltaFingerY
            }, sense.finger2 = sense.fingers[1]) : (sense.startPageX = pageX, sense.startPageY = pageY, 
            sense.startClientX = evt.clientX, sense.startClientY = evt.clientY, sense.pageX = pageX, 
            sense.pageY = pageY, sense.clientX = evt.clientX, sense.clientY = evt.clientY, sense.deltaFingerX = 0, 
            sense.deltaFingerY = 0, sense.fingers[0] = {
                id: id,
                target: evt.target,
                pageX: pageX,
                pageY: pageY,
                clientX: evt.clientX,
                clientY: evt.clientY,
                deltaFingerX: 0,
                deltaFingerY: 0
            }, sense.finger1 = sense.fingers[0]));
        }
        sense.fingers.length > 1 ? sense.fingers.push({
            id: id,
            target: evt.target,
            pageX: pageX,
            pageY: pageY,
            clientX: evt.clientX,
            clientY: evt.clientY,
            deltaFingerX: evt.clientX - sense.clientX,
            deltaFingerY: evt.clientY - sense.clientY
        }) : 1 == sense.fingers.length ? (sense.deltaFingerX = evt.clientX - sense.clientX, 
        sense.deltaFingerY = evt.clientY - sense.clientY, sense.fingers.push({
            id: id,
            target: evt.target,
            pageX: pageX,
            pageY: pageY,
            clientX: evt.clientX,
            clientY: evt.clientY,
            deltaFingerX: sense.deltaFingerX,
            deltaFingerY: sense.deltaFingerY
        }), sense.finger2 = sense.fingers[1]) : (sense.startPageX = pageX, sense.startPageY = pageY, 
        sense.startClientX = evt.clientX, sense.startClientY = evt.clientY, sense.pageX = pageX, 
        sense.pageY = pageY, sense.clientX = evt.clientX, sense.clientY = evt.clientY, sense.deltaFingerX = 0, 
        sense.deltaFingerY = 0, sense.fingers.push({
            id: id,
            target: evt.target,
            pageX: pageX,
            pageY: pageY,
            clientX: evt.clientX,
            clientY: evt.clientY,
            deltaFingerX: 0,
            deltaFingerY: 0
        }), sense.finger1 = sense.fingers[0]);
    }
    function setTouchFinger(sense, id, finger) {
        for (var i = sense.fingers.length - 1; i >= 0; i--) {
            var item = sense.fingers[i];
            if (item.id == id) return item.pageX = finger.pageX, item.pageY = finger.pageY, 
            item.clientX = finger.clientX, item.clientY = finger.clientY, 0 == i ? (sense.pageX = item.pageX - item.deltaFingerX, 
            sense.pageY = item.pageY - item.deltaFingerY, sense.clientX = item.clientX - item.deltaFingerX, 
            sense.clientY = item.clientY - item.deltaFingerY, sense.fingers.length > 1 && (sense.deltaFingerX = sense.finger2.clientX - sense.clientX, 
            sense.deltaFingerY = sense.finger2.clientY - sense.clientY)) : 1 == i && (sense.deltaFingerX = item.clientX - sense.clientX, 
            sense.deltaFingerY = item.clientY - sense.clientY), !0;
        }
        return !1;
    }
    function setMouseFinger(sense, id, evt) {
        for (var i = sense.fingers.length - 1; i >= 0; i--) {
            var item = sense.fingers[i];
            if (item.id == id) return item.pageX = getMousePageX(evt), item.pageY = getMousePageY(evt), 
            item.clientX = evt.clientX, item.clientY = evt.clientY, 0 == i ? (sense.pageX = item.pageX - item.deltaFingerX, 
            sense.pageY = item.pageY - item.deltaFingerY, sense.clientX = item.clientX - item.deltaFingerX, 
            sense.clientY = item.clientY - item.deltaFingerY, sense.fingers.length > 1 && (sense.deltaFingerX = sense.finger2.clientX - sense.clientX, 
            sense.deltaFingerY = sense.finger2.clientY - sense.clientY)) : 1 == i && (sense.deltaFingerX = item.clientX - sense.clientX, 
            sense.deltaFingerY = item.clientY - sense.clientY), !0;
        }
        return !1;
    }
    function removeFinger(sense, id) {
        for (var i = sense.fingers.length - 1; i >= 0; i--) {
            var item = sense.fingers[i];
            if (item.id == id) return sense.fingers.splice(i, 1), 0 == i ? sense.fingers.length > 0 && (sense.finger1 = sense.fingers[0], 
            sense.pageX = sense.finger1.pageX - sense.finger1.deltaFingerX, sense.pageY = sense.finger1.pageY - sense.finger1.deltaFingerY, 
            sense.clientX = sense.finger1.clientX - sense.finger1.deltaFingerX, sense.clientY = sense.finger1.clientY - sense.finger1.deltaFingerY, 
            sense.fingers.length > 1 && (sense.finger2 = sense.fingers[1], sense.deltaFingerX = sense.finger2.clientX - sense.clientX, 
            sense.deltaFingerY = sense.finger2.clientY - sense.clientY)) : 1 == i && sense.fingers.length > 1 && (sense.finger2 = sense.fingers[1], 
            sense.deltaFingerX = sense.finger2.clientX - sense.clientX, sense.deltaFingerY = sense.finger2.clientY - sense.clientY), 
            !0;
        }
        return !1;
    }
    function hasFinger(sense, id) {
        for (var i = sense.fingers.length - 1; i >= 0; i--) {
            var item = sense.fingers[i];
            if (item.id == id) return !0;
        }
        return !1;
    }
    function addSourcePoint(sense) {
        sense.sourcePoints.push({
            x: sense.clientX,
            y: sense.clientY,
            t: new Date().getTime()
        });
    }
    function add1FingerMove(sense) {
        if (sense.fingers.length <= 0) return !1;
        var fromX = sense.startClientX, fromY = sense.startClientY;
        sense.moves.length > 0 && (fromX = sense.moves[sense.moves.length - 1].x, fromY = sense.moves[sense.moves.length - 1].y);
        var deltaX = sense.clientX - fromX, deltaY = sense.clientY - fromY;
        if (deltaX * deltaX + deltaY * deltaY > sense.options.smallMove * sense.options.smallMove) {
            if (sense.moves.length > 0) if (a4p.isUndefined(sense.moves[sense.moves.length - 1].radius)) {
                var previousX = sense.startClientX, previousY = sense.startClientY;
                sense.moves.length > 1 && (previousX = sense.moves[sense.moves.length - 2].x, previousY = sense.moves[sense.moves.length - 2].y);
                var center = getCircleCenter(previousX, previousY, fromX, fromY, sense.clientX, sense.clientY);
                if (null != center) {
                    var radiusX = sense.clientX - center[0], radiusY = sense.clientY - center[1];
                    if (radiusX * radiusX + radiusY * radiusY < sense.options.arcRadius * sense.options.arcRadius) if (radiusX * radiusX + radiusY * radiusY > sense.options.smallMove * sense.options.smallMove) {
                        var angleStart = Math.atan2(previousY - center[1], previousX - center[0]), angleEnd = Math.atan2(radiusY, radiusX), rotation = angleEnd - angleStart;
                        sense.moves.splice(sense.moves.length - 1, 1, {
                            x: sense.clientX,
                            y: sense.clientY,
                            centerx: center[0],
                            centery: center[1],
                            radius: Math.sqrt(radiusX * radiusX + radiusY * radiusY),
                            start: angleStart,
                            end: angleEnd,
                            direction: rotation >= 0 ? "right" : "left"
                        });
                    } else sense.moves.push({
                        x: sense.clientX,
                        y: sense.clientY,
                        deltaX: deltaX,
                        deltaY: deltaY
                    }); else sense.moves.splice(sense.moves.length - 1, 1, {
                        x: sense.clientX,
                        y: sense.clientY,
                        deltaX: sense.clientX - previousX,
                        deltaY: sense.clientY - previousY
                    });
                } else (fromX - previousX) * deltaX >= 0 ? sense.moves.splice(sense.moves.length - 1, 1, {
                    x: sense.clientX,
                    y: sense.clientY,
                    deltaX: sense.clientX - previousX,
                    deltaY: sense.clientY - previousY
                }) : sense.moves.push({
                    x: sense.clientX,
                    y: sense.clientY,
                    deltaX: deltaX,
                    deltaY: deltaY
                });
            } else {
                var radius = sense.moves[sense.moves.length - 1].radius, centerx = sense.moves[sense.moves.length - 1].centerx, centery = sense.moves[sense.moves.length - 1].centery, start = sense.moves[sense.moves.length - 1].start, end = sense.moves[sense.moves.length - 1].end, lastRadiusX = sense.clientX - centerx, lastRadiusY = sense.clientY - centery;
                if (Math.abs(lastRadiusX * lastRadiusX + lastRadiusY * lastRadiusY - radius * radius) <= sense.options.smallMove * sense.options.smallMove) {
                    var lastAngleEnd = Math.atan2(lastRadiusY, lastRadiusX), lastRotation = lastAngleEnd - end;
                    (end - start) * lastRotation >= 0 ? sense.moves.splice(sense.moves.length - 1, 1, {
                        x: sense.clientX,
                        y: sense.clientY,
                        centerx: centerx,
                        centery: centery,
                        radius: radius,
                        start: start,
                        end: lastAngleEnd,
                        direction: lastRotation >= 0 ? "right" : "left"
                    }) : sense.moves.push({
                        x: sense.clientX,
                        y: sense.clientY,
                        centerx: centerx,
                        centery: centery,
                        radius: Math.sqrt(lastRadiusX * lastRadiusX + lastRadiusY * lastRadiusY),
                        start: start,
                        end: lastAngleEnd,
                        direction: lastRotation >= 0 ? "right" : "left"
                    });
                } else sense.moves.push({
                    x: sense.clientX,
                    y: sense.clientY,
                    deltaX: deltaX,
                    deltaY: deltaY
                });
            } else sense.moves.push({
                x: sense.clientX,
                y: sense.clientY,
                deltaX: deltaX,
                deltaY: deltaY
            });
            return !0;
        }
        return !1;
    }
    function set2FingersScaleAndRotate(sense) {
        if (sense.fingers.length <= 1) return !1;
        var to1X = sense.clientX, to1Y = sense.clientY, to2X = sense.finger2.clientX, to2Y = sense.finger2.clientY, from1X = sense.moves[sense.moves.length - 1].x, from1Y = sense.moves[sense.moves.length - 1].y, from2X = from1X + sense.finger2.deltaFingerX, from2Y = from1Y + sense.finger2.deltaFingerY, delta1X = to1X - from1X, delta1Y = to1Y - from1Y, delta2X = to2X - from2X, delta2Y = to2Y - from2Y;
        if (delta1X * delta1X + delta1Y * delta1Y > sense.options.smallMove * sense.options.smallMove || delta2X * delta2X + delta2Y * delta2Y > sense.options.smallMove * sense.options.smallMove) {
            var angleStart = Math.atan2(sense.finger2.deltaFingerY, sense.finger2.deltaFingerX), angleEnd = Math.atan2(sense.deltaFingerY, sense.deltaFingerX);
            return sense.scale = Math.sqrt((sense.deltaFingerX * sense.deltaFingerX + sense.deltaFingerY * sense.deltaFingerY) / (sense.finger2.deltaFingerX * sense.finger2.deltaFingerX + sense.finger2.deltaFingerY * sense.finger2.deltaFingerY)), 
            sense.rotate = angleEnd - angleStart, Math.abs(sense.scale - 1) <= sense.options.smallScale && (sense.scale = 1), 
            Math.abs(sense.rotate) <= sense.options.smallRotation && (sense.rotate = 0), !0;
        }
        return !1;
    }
    function onWhichEvent(sense, name, nbFinger) {
        var prefix = "Short";
        sense.hasPaused && (prefix = "Long");
        var onEventName = "on" + prefix + name + nbFinger;
        if (a4p.isDefined(sense[onEventName]) && null != sense[onEventName]) return onEventName;
        if (sense.options.prefixPriority) {
            if (onEventName = "on" + prefix + name, a4p.isDefined(sense[onEventName]) && null != sense[onEventName]) return onEventName;
            if (onEventName = "on" + name + nbFinger, a4p.isDefined(sense[onEventName]) && null != sense[onEventName]) return onEventName;
        } else {
            if (onEventName = "on" + name + nbFinger, a4p.isDefined(sense[onEventName]) && null != sense[onEventName]) return onEventName;
            if (onEventName = "on" + prefix + name, a4p.isDefined(sense[onEventName]) && null != sense[onEventName]) return onEventName;
        }
        return onEventName = "on" + name, a4p.isDefined(sense[onEventName]) && null != sense[onEventName] ? onEventName : "";
    }
    function executeEvent(sense, name, evt) {
        var onEventName = onWhichEvent(sense, name, evt.nbFinger);
        if (onEventName.length > 0) {
            try {
                sense[onEventName](evt);
            } catch (exception) {}
            return !0;
        }
        return !1;
    }
    function isEventListened(sense, name, nbFinger) {
        var onEventName = onWhichEvent(sense, name, nbFinger);
        return onEventName.length > 0;
    }
    function clearDrops(sense) {
        sense.dropsStarted = [], sense.dropOver = null, sense.dropEvt = {
            dataType: "text/plain",
            dataTransfer: ""
        };
    }
    function dndStart(sense) {
        for (var idx = dndables.length - 1; idx >= 0; idx--) {
            var dropSenseId = dndables[idx], dropSense = dndablesMap[dropSenseId];
            executeEvent(dropSense, GST_DND_START, sense.dropEvt);
        }
    }
    function dndEnd(sense) {
        for (var idx = dndables.length - 1; idx >= 0; idx--) {
            var dropSenseId = dndables[idx], dropSense = dndablesMap[dropSenseId];
            executeEvent(dropSense, GST_DND_END, sense.dropEvt);
        }
    }
    function dndCancel(sense) {
        for (var idx = dndables.length - 1; idx >= 0; idx--) {
            var dropSenseId = dndables[idx], dropSense = dndablesMap[dropSenseId];
            executeEvent(dropSense, GST_DND_CANCEL, sense.dropEvt);
        }
    }
    function dragStart(sense) {
        sense.dropEvt.nbFinger = sense.fingers.length, sense.dropEvt.side = sense.side, 
        sense.dropEvt.scale = sense.scale, sense.dropEvt.rotate = sense.rotate, sense.dropEvt.moves = sense.moves, 
        sense.dropEvt.sourcePoints = sense.sourcePoints, sense.dropEvt.timeStamp = sense.timeStamp, 
        sense.dropEvt.clientX = sense.startClientX, sense.dropEvt.clientY = sense.startClientY, 
        sense.dropEvt.pageX = sense.startPageX, sense.dropEvt.pageY = sense.startPageY;
        var box = sense.DOMelement.getBoundingClientRect();
        sense.dropEvt.elementX = sense.startClientX - box.left, sense.dropEvt.elementY = sense.startClientY - box.top, 
        sense.triggerEvent(GST_DRAG_START, sense.dropEvt), dndStart(sense);
    }
    function dropStart(sense) {
        if (sense.dropEvt.nbFinger = sense.fingers.length, sense.dropEvt.side = sense.side, 
        sense.dropEvt.scale = sense.scale, sense.dropEvt.rotate = sense.rotate, sense.dropEvt.moves = sense.moves, 
        sense.dropEvt.sourcePoints = sense.sourcePoints, sense.dropEvt.timeStamp = sense.timeStamp, 
        sense.dropEvt.clientX = sense.finger1.clientX, sense.dropEvt.clientY = sense.finger1.clientY, 
        sense.dropEvt.pageX = sense.finger1.pageX, sense.dropEvt.pageY = sense.finger1.pageY, 
        null != sense.dropOver) {
            var idx = sense.dropsStarted.indexOf(sense.dropOver);
            0 > idx && (sense.dropsStarted.push(sense.dropOver), executeEvent(droppablesMap[sense.dropOver], GST_DROP_START, sense.dropEvt));
        }
    }
    function dropEnd(sense) {
        sense.dropEvt.nbFinger = sense.fingers.length, sense.dropEvt.side = sense.side, 
        sense.dropEvt.scale = sense.scale, sense.dropEvt.rotate = sense.rotate, sense.dropEvt.moves = sense.moves, 
        sense.dropEvt.sourcePoints = sense.sourcePoints, sense.dropEvt.timeStamp = sense.timeStamp, 
        sense.dropEvt.clientX = sense.finger1.clientX, sense.dropEvt.clientY = sense.finger1.clientY, 
        sense.dropEvt.pageX = sense.finger1.pageX, sense.dropEvt.pageY = sense.finger1.pageY, 
        sense.dropsStarted.length > 0 ? (null != sense.dropOver && (sense.triggerEvent(GST_DRAG_OVER_LEAVE, sense.dropEvt), 
        executeEvent(droppablesMap[sense.dropOver], GST_DROP_OVER_LEAVE, sense.dropEvt), 
        sense.dropOver = null), sense.scroll && sense.scroll.options.zoom && sense.scroll.onScrollEnd(sense.finger1.pageX, sense.finger1.pageY, sense.timeStamp, sense.scale) && (sense.evtTriggered = !0), 
        sense.triggerEvent(GST_DRAG_END, sense.dropEvt), sense.dropsStarted.forEach(function(targetId) {
            executeEvent(droppablesMap[targetId], GST_DROP_END, sense.dropEvt);
        }), dndEnd(sense), clearDrops(sense)) : dropCancel(sense);
    }
    function dropCancel(sense) {
        sense.dropEvt.nbFinger = sense.fingers.length, sense.dropEvt.side = sense.side, 
        sense.dropEvt.scale = sense.scale, sense.dropEvt.rotate = sense.rotate, sense.dropEvt.moves = sense.moves, 
        sense.dropEvt.sourcePoints = sense.sourcePoints, sense.dropEvt.timeStamp = sense.timeStamp, 
        sense.dropEvt.clientX = sense.finger1.clientX, sense.dropEvt.clientY = sense.finger1.clientY, 
        sense.dropEvt.pageX = sense.finger1.pageX, sense.dropEvt.pageY = sense.finger1.pageY, 
        null != sense.dropOver && (sense.triggerEvent(GST_DRAG_OVER_LEAVE, sense.dropEvt), 
        executeEvent(droppablesMap[sense.dropOver], GST_DROP_OVER_LEAVE, sense.dropEvt), 
        sense.dropOver = null), sense.scroll && sense.scroll.options.zoom && sense.scroll.onScrollEnd(sense.finger1.pageX, sense.finger1.pageY, sense.timeStamp, sense.scale) && (sense.evtTriggered = !0), 
        sense.triggerEvent(GST_DRAG_CANCEL, sense.dropEvt), sense.dropsStarted.forEach(function(targetId) {
            executeEvent(droppablesMap[targetId], GST_DROP_CANCEL, sense.dropEvt);
        }), dndCancel(sense), clearDrops(sense);
    }
    function findDroppableSenseFromCoord(clientX, clientY) {
        for (var dropOverTargetId = null, boxArea = -1, idx = droppables.length - 1; idx >= 0; idx--) {
            var dropSenseId = droppables[idx], dropSense = droppablesMap[dropSenseId], box = dropSense.DOMelement.getBoundingClientRect();
            box.left <= clientX && clientX <= box.right && box.top <= clientY && clientY <= box.bottom && (null == dropOverTargetId || box.height * box.width < boxArea) && (dropOverTargetId = dropSenseId, 
            boxArea = box.height * box.width);
        }
        return dropOverTargetId;
    }
    function startHoldGesture(sense) {
        sense.triggerEvent(GST_HOLD_START, {
            clientX: sense.finger1.clientX,
            clientY: sense.finger1.clientY,
            pageX: sense.finger1.pageX,
            pageY: sense.finger1.pageY,
            nbFinger: sense.fingers.length
        });
    }
    function stopHoldGesture(sense) {
        sense.triggerEvent(GST_HOLD_STOP, {
            clientX: sense.finger1.clientX,
            clientY: sense.finger1.clientY,
            pageX: sense.finger1.pageX,
            pageY: sense.finger1.pageY,
            nbFinger: sense.fingers.length
        });
    }
    function tapGesture(sense) {
        sense.triggerEvent(GST_TAP, {
            clientX: sense.finger1.clientX,
            clientY: sense.finger1.clientY,
            pageX: sense.finger1.pageX,
            pageY: sense.finger1.pageY,
            nbFinger: sense.fingers.length
        });
    }
    function tapAndStartGestureIfMoves(sense) {
        add1FingerMove(sense), sense.moves.length > 0 && (tapGesture(sense), startGesture(sense));
    }
    function startGestureIfMoves(sense) {
        add1FingerMove(sense), sense.moves.length > 0 && startGesture(sense);
    }
    function startGesture(sense) {
        var move = sense.moves[sense.moves.length - 1];
        if (0 == move.deltaY || Math.abs(move.deltaX / move.deltaY) > sense.options.axeRatio) if (move.deltaX >= 0) {
            if (sense.side = "right", sense.scroll && !sense.scroll.hasAttainedSideLeft()) return void startScrollGesture(sense);
            if ("scroll" == sense.options.axeX) return void startScrollGesture(sense);
            if ("swipe" == sense.options.axeX) return void startSwipeGesture(sense);
        } else {
            if (sense.side = "left", sense.scroll && !sense.scroll.hasAttainedSideRight()) return void startScrollGesture(sense);
            if ("scroll" == sense.options.axeX) return void startScrollGesture(sense);
            if ("swipe" == sense.options.axeX) return void startSwipeGesture(sense);
        } else if (0 == move.deltaX || Math.abs(move.deltaY / move.deltaX) > sense.options.axeRatio) if (move.deltaY >= 0) {
            if (sense.side = "bottom", sense.scroll && !sense.scroll.hasAttainedSideTop()) return void startScrollGesture(sense);
            if ("scroll" == sense.options.axeY) return void startScrollGesture(sense);
            if ("swipe" == sense.options.axeY) return void startSwipeGesture(sense);
        } else {
            if (sense.side = "top", sense.scroll && !sense.scroll.hasAttainedSideBottom()) return void startScrollGesture(sense);
            if ("scroll" == sense.options.axeY) return void startScrollGesture(sense);
            if ("swipe" == sense.options.axeY) return void startSwipeGesture(sense);
        } else if (sense.side = "", sense.scroll && sense.scroll.enabled && sense.scroll.options.zoom) return void startScrollGesture(sense);
        sense.fingers.length > 1 && set2FingersScaleAndRotate(sense), sense.side = "", isEventListened(sense, GST_DRAG_START, sense.fingers.length) ? (sense.gotoState(STATE_DRAGGING), 
        dragStart(sense), dragGesture(sense)) : sense.gotoState(STATE_0CLICK);
    }
    function swipeGesture(sense) {
        sense.inPause && (sense.inPause = !1, sense.startTimer(sense.options.holdTime)), 
        sense.triggerEvent(GST_SWIPE_MOVE, {
            clientX: sense.clientX,
            clientY: sense.clientY,
            pageX: sense.pageX,
            pageY: sense.pageY,
            nbFinger: sense.fingers.length,
            side: sense.side,
            moves: sense.moves,
            sourcePoints: sense.sourcePoints,
            timeStamp: sense.timeStamp
        });
    }
    function startSwipeGesture(sense) {
        sense.gotoState(STATE_SWIPING), sense.triggerEvent(GST_SWIPE_START, {
            clientX: sense.startClientX,
            clientY: sense.startClientY,
            pageX: sense.startPageX,
            pageY: sense.startPageY,
            nbFinger: sense.fingers.length,
            side: sense.side,
            moves: sense.moves,
            sourcePoints: sense.sourcePoints,
            timeStamp: sense.timeStamp
        }), swipeGesture(sense);
    }
    function continueSwipeGesture(sense) {
        add1FingerMove(sense), swipeGesture(sense);
    }
    function cancelSwipeGesture(sense) {
        sense.triggerEvent(GST_SWIPE_CANCEL, {
            clientX: sense.finger1.clientX,
            clientY: sense.finger1.clientY,
            pageX: sense.finger1.pageX,
            pageY: sense.finger1.pageY,
            nbFinger: sense.fingers.length,
            side: sense.side,
            moves: sense.moves,
            sourcePoints: sense.sourcePoints,
            timeStamp: sense.timeStamp
        }), sense.gotoState(STATE_0CLICK);
    }
    function endSwipeGesture(sense) {
        sense.triggerEvent(GST_SWIPE_END, {
            clientX: sense.finger1.clientX,
            clientY: sense.finger1.clientY,
            pageX: sense.finger1.pageX,
            pageY: sense.finger1.pageY,
            nbFinger: sense.fingers.length,
            side: sense.side,
            moves: sense.moves,
            sourcePoints: sense.sourcePoints,
            timeStamp: sense.timeStamp
        }), sense.gotoState(STATE_0CLICK);
    }
    function scrollGesture(sense) {
        sense.inPause && (sense.inPause = !1, sense.startTimer(sense.options.holdTime)), 
        sense.scroll && (sense.scroll.options.zoom || "scroll" == sense.options.axeX || "scroll" == sense.options.axeY) && sense.scroll.onScrollMove(sense.pageX, sense.pageY, sense.timeStamp, sense.scale) && (sense.evtTriggered = !0), 
        sense.triggerEvent(GST_SCROLL_MOVE, {
            clientX: sense.clientX,
            clientY: sense.clientY,
            pageX: sense.pageX,
            pageY: sense.pageY,
            nbFinger: sense.fingers.length,
            side: sense.side,
            moves: sense.moves,
            sourcePoints: sense.sourcePoints,
            timeStamp: sense.timeStamp
        });
    }
    function startScrollGesture(sense) {
        sense.gotoState(STATE_SCROLLING), sense.scroll && (sense.scroll.options.zoom || "scroll" == sense.options.axeX || "scroll" == sense.options.axeY) && sense.scroll.onScrollStart(sense.startPageX, sense.startPageY, sense.timeStamp) && (sense.evtTriggered = !0), 
        sense.triggerEvent(GST_SCROLL_START, {
            clientX: sense.startClientX,
            clientY: sense.startClientY,
            pageX: sense.startPageX,
            pageY: sense.startPageY,
            nbFinger: sense.fingers.length,
            side: sense.side,
            moves: sense.moves,
            sourcePoints: sense.sourcePoints,
            timeStamp: sense.timeStamp
        }), scrollGesture(sense);
    }
    function continueScrollGesture(sense) {
        add1FingerMove(sense), sense.fingers.length > 1 && set2FingersScaleAndRotate(sense), 
        scrollGesture(sense);
    }
    function cancelScrollGesture(sense) {
        sense.scroll && (sense.scroll.options.zoom || "scroll" == sense.options.axeX || "scroll" == sense.options.axeY) && sense.scroll.onScrollEnd(sense.finger1.pageX, sense.finger1.pageY, sense.timeStamp, sense.scale) && (sense.evtTriggered = !0), 
        sense.triggerEvent(GST_SCROLL_CANCEL, {
            clientX: sense.finger1.clientX,
            clientY: sense.finger1.clientY,
            pageX: sense.finger1.pageX,
            pageY: sense.finger1.pageY,
            nbFinger: sense.fingers.length,
            side: sense.side,
            moves: sense.moves,
            sourcePoints: sense.sourcePoints,
            timeStamp: sense.timeStamp
        }), sense.gotoState(STATE_0CLICK);
    }
    function endScrollGesture(sense) {
        sense.scroll && (sense.scroll.options.zoom || "scroll" == sense.options.axeX || "scroll" == sense.options.axeY) && sense.scroll.onScrollEnd(sense.finger1.pageX, sense.finger1.pageY, sense.timeStamp, sense.scale) && (sense.evtTriggered = !0), 
        sense.triggerEvent(GST_SCROLL_END, {
            clientX: sense.finger1.clientX,
            clientY: sense.finger1.clientY,
            pageX: sense.finger1.pageX,
            pageY: sense.finger1.pageY,
            nbFinger: sense.fingers.length,
            side: sense.side,
            moves: sense.moves,
            sourcePoints: sense.sourcePoints,
            timeStamp: sense.timeStamp
        }), sense.gotoState(STATE_0CLICK);
    }
    function dragGesture(sense) {
        sense.inPause && (sense.inPause = !1, sense.startTimer(sense.options.holdTime)), 
        sense.dropEvt.nbFinger = sense.fingers.length, sense.dropEvt.side = sense.side, 
        sense.dropEvt.scale = sense.scale, sense.dropEvt.rotate = sense.rotate, sense.dropEvt.moves = sense.moves, 
        sense.dropEvt.sourcePoints = sense.sourcePoints, sense.dropEvt.timeStamp = sense.timeStamp, 
        sense.dropEvt.clientX = sense.clientX, sense.dropEvt.clientY = sense.clientY, sense.dropEvt.pageX = sense.pageX, 
        sense.dropEvt.pageY = sense.pageY, sense.scroll && sense.scroll.options.zoom && sense.scroll.onScrollMove(sense.pageX, sense.pageY, sense.timeStamp, sense.scale) && (sense.evtTriggered = !0), 
        sense.triggerEvent(GST_DRAG_MOVE, sense.dropEvt);
        var targetId = findDroppableSenseFromCoord(sense.clientX, sense.clientY);
        sense.dropOver != targetId && (null != sense.dropOver && (sense.triggerEvent(GST_DRAG_OVER_LEAVE, sense.dropEvt), 
        executeEvent(droppablesMap[sense.dropOver], GST_DROP_OVER_LEAVE, sense.dropEvt), 
        sense.dropOver = null), null != targetId && (sense.dropOver = targetId, sense.triggerEvent(GST_DRAG_OVER_ENTER, sense.dropEvt), 
        executeEvent(droppablesMap[targetId], GST_DROP_OVER_ENTER, sense.dropEvt))), null != sense.dropOver && executeEvent(droppablesMap[sense.dropOver], GST_DROP_MOVE, sense.dropEvt);
    }
    function continueDragGesture(sense) {
        var viewportWidth = document.documentElement.clientWidth, viewportHeight = document.documentElement.clientHeight;
        sense.finger1.clientX < sense.options.smallMove || sense.finger1.clientX > viewportWidth - sense.options.smallMove || sense.finger1.clientY < sense.options.smallMove || sense.finger1.clientY > viewportHeight - sense.options.smallMove ? (dropCancel(sense), 
        sense.gotoState(STATE_0CLICK)) : (add1FingerMove(sense), sense.fingers.length > 1 && set2FingersScaleAndRotate(sense), 
        dragGesture(sense));
    }
    function getMousePageX(evt) {
        var body = document.body;
        return evt = evt || window.event, evt.pageX || evt.clientX + (document && document.scrollLeft || body && body.scrollLeft || 0) - (document && document.clientLeft || body && body.clientLeft || 0);
    }
    function getMousePageY(evt) {
        var body = document.body;
        return evt = evt || window.event, evt.pageY || evt.clientY + (document && document.scrollTop || body && body.scrollTop || 0) - (document && document.clientTop || body && body.clientTop || 0);
    }
    function getCircleCenter(x1, y1, x2, y2, x3, y3) {
        if (y1 == y2 && y2 == y3) return null;
        var dx3, dx2, dx1, nx3, nx2, nx1, x0, y0;
        return y3 == y2 ? (dx3 = (x2 - x1) / (y2 - y1), dx2 = (x3 - x1) / (y3 - y1), nx2 = (dx2 * (x3 + x1) + (y3 + y1)) / 2, 
        nx3 = (dx3 * (x2 + x1) + (y2 + y1)) / 2, x0 = (nx2 - nx3) / (dx3 - dx2), y0 = dx3 * x0 + nx3) : y2 == y1 ? (dx1 = (x3 - x2) / (y3 - y2), 
        dx2 = (x3 - x1) / (y3 - y1), nx2 = (dx2 * (x3 + x1) + (y3 + y1)) / 2, nx1 = (dx1 * (x3 + x2) + (y3 + y2)) / 2, 
        x0 = (nx2 - nx1) / (dx1 - dx2), y0 = dx1 * x0 + nx1) : (dx3 = (x2 - x1) / (y2 - y1), 
        dx1 = (x3 - x2) / (y3 - y2), nx1 = (dx1 * (x3 + x2) + (y3 + y2)) / 2, nx3 = (dx3 * (x2 + x1) + (y2 + y1)) / 2, 
        x0 = (nx1 - nx3) / (dx3 - dx1), y0 = dx3 * x0 + nx3), [ x0, y0 ];
    }
    function Sense(element, options, scrollOpts) {
        this.id = nextUid(), this.name = this.id, this.state = STATE_0CLICK, this.createScroll = !1, 
        clearFingers(this), clearDrops(this), this.bindTouchStart = !1, this.bindTouchMove = !1, 
        this.bindTouchEnd = !1, this.bindTouchCancel = !1, this.bindMouseDown = !1, this.bindMouseOther = !1, 
        this.hasPaused = !1, this.inPause = !1, this.inMouseMove = !1, this.inTouchMove = !1, 
        this.holdTimer = null, this.scroll = null, this.checkDOMTimer = null, this.timeStamp = 0, 
        this.wheelDeltaX = 0, this.wheelDeltaY = 0, this.element = element, this.DOMelement = "object" == typeof element ? element[0] : document.getElementById(element), 
        this.destroyListener = null, this.options = {
            name: "",
            axeX: "",
            axeY: "",
            defaultAction: !1,
            bubble: !1,
            prefixPriority: !1,
            smallMove: 10,
            smallScale: .1,
            smallRotation: .25,
            doubleTime: 250,
            holdTime: 300,
            arcRadius: 500,
            axeRatio: 2.5,
            callApply: !1,
            checkDOMChanges: !1
        }, this.scrollOptions = {
            name: "",
            hScroll: scrollOpts.zoom,
            vScroll: scrollOpts.zoom
        };
        for (var optKey in options) options.hasOwnProperty(optKey) && (this.options[optKey] = options[optKey], 
        "name" == optKey && (this.name = options[optKey], this.scrollOptions.name = options[optKey]));
        for (var scrollOptKey in scrollOpts) scrollOpts.hasOwnProperty(scrollOptKey) && (this.scrollOptions[scrollOptKey] = scrollOpts[scrollOptKey], 
        this.createScroll = !0);
        ("scroll" == this.options.axeX || "scroll" == this.options.axeY) && ("scroll" == this.options.axeX && (this.scrollOptions.hScroll = !0, 
        this.createScroll = !0), "scroll" == this.options.axeY && (this.scrollOptions.vScroll = !0, 
        this.createScroll = !0)), bindOnStart(this, this.createScroll);
        var self = this;
        this.element.bind("$destroy", function() {
            self.destroy();
        }), this.createScroll && (self.scroll = new a4p.Scroll(element, self.scrollOptions)), 
        window.setTimeout(function() {
            self.sizeRefresh(), self.options.checkDOMChanges && (self.checkDOMTimer = setInterval(function() {
                self.sizeRefresh();
            }, 500));
        }, 750);
    }
    var dndables = [], dndablesMap = {}, droppables = [], droppablesMap = {}, uid = [ "0", "0", "0" ], idStr = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", idNext = {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5,
        "5": 6,
        "6": 7,
        "7": 8,
        "8": 9,
        "9": 10,
        A: 11,
        B: 12,
        C: 13,
        D: 14,
        E: 15,
        F: 16,
        G: 17,
        H: 18,
        I: 19,
        J: 20,
        K: 21,
        L: 22,
        M: 23,
        N: 24,
        O: 25,
        P: 26,
        Q: 27,
        R: 28,
        S: 29,
        T: 30,
        U: 31,
        V: 32,
        W: 33,
        X: 34,
        Y: 35,
        Z: 0
    }, mouseListeners = [], touchListeners = [], timeStampDocMouseMove = 0;
    document.addEventListener("mousemove", handleDocMouseMove, !1), document.addEventListener("mouseup", handleDocMouseUp, !1), 
    Sense.hasTouch = a4p.BrowserCapabilities.hasTouch, Sense.prototype.destroy = function() {
        null != this.destroyListener && this.destroyListener(), unbindStart(this), unbindOther(this), 
        this.checkDOMTimer && (clearInterval(this.checkDOMTimer), this.checkDOMTimer = null);
        var idx = dndables.indexOf(this.id);
        return idx >= 0 && dndables.splice(idx, 1), delete dndablesMap[this.id], idx = droppables.indexOf(this.id), 
        idx >= 0 && droppables.splice(idx, 1), delete droppablesMap[this.id], this.scroll && (this.scroll.destroy && this.scroll.destroy(), 
        this.scroll = null), !0;
    }, Sense.prototype.addHandler = function(eventName, handler) {
        this["on" + eventName] = handler;
        var self = this, baseEventName = eventNameWithoutPrefixNorNbFinger(eventName);
        if (baseEventName == GST_DROP_OVER_ENTER || baseEventName == GST_DROP_START) {
            var dropIdx = droppables.indexOf(this.id);
            0 > dropIdx && droppables.push(this.id), droppablesMap[this.id] = self;
        }
        if (baseEventName == GST_DND_START || baseEventName == GST_DND_END || baseEventName == GST_DND_CANCEL) {
            var dndIdx = dndables.indexOf(this.id);
            0 > dndIdx && dndables.push(this.id), dndablesMap[this.id] = self;
        }
    }, Sense.prototype.sizeRefresh = function() {
        if (this.scroll) {
            var self = this;
            window.setTimeout(function() {
                self.scroll && self.scroll.checkDOMChanges() && self.scroll.refresh();
            }, 300);
        }
    }, Sense.prototype.triggerEvent = function(name, evt) {
        var eventFound = executeEvent(this, name, evt);
        return eventFound && (this.evtTriggered = !0), eventFound;
    }, Sense.declareDirectives = function(directiveModule) {
        for (var allEvents = [], evtIdx = 0, evtNb = Sense.ALL_EVENTS.length; evtNb > evtIdx; evtIdx++) {
            var name = Sense.ALL_EVENTS[evtIdx];
            allEvents.push(name), allEvents.push("Short" + name), allEvents.push("Long" + name);
            for (var i = 1; 5 >= i; i++) allEvents.push(name + i), allEvents.push("Short" + name + i), 
            allEvents.push("Long" + name + i);
        }
        angular.forEach(allEvents, function(name) {
            var directiveName = "sense" + name.charAt(0).toUpperCase() + name.slice(1).toLowerCase(), eventName = name.charAt(0).toUpperCase() + name.slice(1);
            directiveModule.directive(directiveName, [ "$parse", "$rootScope", function($parse, $rootScope) {
                return function(scope, element, attr) {
                    var sense = element.data("sense");
                    if (a4p.isUndefined(sense)) {
                        sense = Sense.newSense($parse, $rootScope, scope, element, attr);
                        var initFn = $parse(sense.options.init);
                        initFn(scope, {
                            $sense: sense
                        });
                    }
                    var fn = $parse(attr[directiveName]);
                    sense.addHandler(eventName, function(event) {
                        sense.options.callApply ? a4p.safeApply(scope, function() {
                            fn(scope, {
                                $event: event,
                                $element: element
                            });
                        }) : fn(scope, {
                            $event: event,
                            $element: element
                        });
                    });
                };
            } ]);
        }), directiveModule.directive("senseOpts", [ "$parse", "$rootScope", function($parse, $rootScope) {
            return function(scope, element, attr) {
                var sense = element.data("sense");
                if (a4p.isUndefined(sense)) {
                    sense = Sense.newSense($parse, $rootScope, scope, element, attr);
                    var initFn = $parse(sense.options.init);
                    initFn(scope, {
                        $sense: sense
                    });
                }
            };
        } ]), directiveModule.directive("senseScrollopts", [ "$parse", "$rootScope", function($parse, $rootScope) {
            return function(scope, element, attr) {
                var sense = element.data("sense");
                if (a4p.isUndefined(sense)) {
                    sense = Sense.newSense($parse, $rootScope, scope, element, attr);
                    var initFn = $parse(sense.options.init);
                    initFn(scope, {
                        $sense: sense
                    });
                }
            };
        } ]), directiveModule.directive("senseLoop", [ "$parse", function($parse) {
            return function(scope, element, attr) {
                var senseWrapper, list = element[0], parent = element[0].parentNode;
                if (a4p.isDefinedAndNotNull(parent)) for (senseWrapper = angular.element(parent).data("sense"); a4p.isUndefined(senseWrapper) && a4p.isDefinedAndNotNull(parent.parentNode); ) parent = parent.parentNode, 
                senseWrapper = angular.element(parent).data("sense");
                if (a4p.isDefinedAndNotNull(senseWrapper)) {
                    var scrollOptions;
                    scrollOptions = a4p.isDefinedAndNotNull(senseWrapper.scroll) ? senseWrapper.scroll.options : senseWrapper.scrollOptions;
                    var callApply = attr.callApply, onElementMove = $parse(attr.onElementMove);
                    scrollOptions.hScrollbar = !1, scrollOptions.vScrollbar = !1, scrollOptions.virtualLoop = !0, 
                    scrollOptions.bounce = !1, scrollOptions.virtualLoop = !0, scrollOptions.onBeforeScrollMove = function(deltaX, deltaY) {
                        var first, last, nb, initX = senseWrapper.scroll.options.x || 0, initY = senseWrapper.scroll.options.y || 0;
                        if (this.y + deltaY > initY) {
                            last = list.children[list.children.length - 1];
                            var lastHeight = last.offsetHeight;
                            nb = Math.round((this.y + deltaY - initY) / lastHeight), nb > 0 && (this.y -= nb * lastHeight, 
                            callApply ? a4p.safeApply(scope, function() {
                                onElementMove(scope, {
                                    $side: "top",
                                    $nb: nb
                                });
                            }) : onElementMove(scope, {
                                $side: "top",
                                $nb: nb
                            }));
                        } else if (this.y + deltaY < initY) {
                            first = list.children[0];
                            var firstHeight = first.offsetHeight;
                            nb = Math.round((initY - this.y - deltaY) / firstHeight), nb > 0 && (this.y += nb * firstHeight, 
                            callApply ? a4p.safeApply(scope, function() {
                                onElementMove(scope, {
                                    $side: "bottom",
                                    $nb: nb
                                });
                            }) : onElementMove(scope, {
                                $side: "bottom",
                                $nb: nb
                            }));
                        }
                        if (this.x + deltaX > initX) {
                            last = list.children[list.children.length - 1];
                            var lastWidth = last.offsetWidth;
                            nb = Math.round((this.x + deltaX - initX) / lastWidth), nb > 0 && (this.x -= nb * lastWidth, 
                            callApply ? a4p.safeApply(scope, function() {
                                onElementMove(scope, {
                                    $side: "left",
                                    $nb: nb
                                });
                            }) : onElementMove(scope, {
                                $side: "left",
                                $nb: nb
                            }));
                        } else if (this.x + deltaX < initX) {
                            first = list.children[0];
                            var firstWidth = first.offsetWidth;
                            nb = Math.round((initX - this.x - deltaX) / firstWidth), nb > 0 && (this.x += nb * firstWidth, 
                            callApply ? a4p.safeApply(scope, function() {
                                onElementMove(scope, {
                                    $side: "right",
                                    $nb: nb
                                });
                            }) : onElementMove(scope, {
                                $side: "right",
                                $nb: nb
                            }));
                        }
                    };
                }
            };
        } ]);
    }, Sense.newSense = function($parse, $rootScope, scope, element, attr) {
        var sense, opts = {}, scrollOpts = {};
        if (a4p.isDefined(attr.senseOpts) && (opts = $parse(attr.senseOpts)(scope, {})), 
        a4p.isDefined(attr.senseScrollopts) && (scrollOpts = $parse(attr.senseScrollopts)(scope, {})), 
        sense = new a4p.Sense(element, opts, scrollOpts), element.data("sense", sense), 
        scope.getSenseId = function() {
            return sense.id;
        }, scope.getSenseName = function() {
            return sense.name;
        }, sense.createScroll) {
            if (scope.senseScrollToElement = function(eltQuery, timeMs) {
                sense.scroll.scrollToElement(eltQuery, timeMs);
            }, scope.senseScrollToPage = function(pageX, pageY, timeMs) {
                sense.scroll.scrollToPage(pageX, pageY, timeMs);
            }, scope.senseScrollTo = function(x, y, timeMs, relative) {
                sense.scroll.scrollTo(x, y, timeMs, relative);
            }, scope.scrollRefresh = function() {
                sense.sizeRefresh();
            }, attr.senseAfterscrollend) {
                var scrollOptions;
                scrollOptions = a4p.isDefinedAndNotNull(sense.scroll) ? sense.scroll.options : sense.scrollOptions;
                var fn = $parse(attr.senseAfterscrollend);
                scrollOptions.onAfterScrollEnd = sense.options.callApply ? function() {
                    var x = this.x, y = this.y;
                    a4p.safeApply(scope, function() {
                        fn(scope, {
                            $x: x,
                            $y: y
                        });
                    });
                } : function() {
                    var x = this.x, y = this.y;
                    fn(scope, {
                        $x: x,
                        $y: y
                    });
                };
            }
            var resize = element.data("resize");
            a4p.isUndefined(resize) && (resize = a4p.Resize.newResize($parse, $rootScope, scope, element, attr)), 
            resize.toSenseWindow = function() {
                sense.sizeRefresh();
            }, resize.toSenseChanged = function() {
                sense.sizeRefresh();
            };
        }
        if (a4p.isDefined(sense.options.watchRefresh)) if ("string" == typeof sense.options.watchRefresh) scope.$watch(sense.options.watchRefresh, function(newValue, oldValue) {
            newValue !== oldValue && sense.sizeRefresh();
        }); else for (var i = 0, nb = sense.options.watchRefresh.length; nb > i; i++) scope.$watch(sense.options.watchRefresh[i], function(newValue, oldValue) {
            newValue !== oldValue && sense.sizeRefresh();
        });
        return sense.sizeRefresh(), sense;
    };
    var EVT_TOUCH_START = "Touchstart", EVT_TOUCH_MOVE = "Touchmove", EVT_TOUCH_END = "Touchend", EVT_TOUCH_CANCEL = "Touchcancel", EVT_MOUSE_DOWN = "Mousedown", EVT_MOUSE_MOVE = "Mousemove", EVT_MOUSE_UP = "Mouseup", GST_HOLD_START = "HoldStart", GST_HOLD_STOP = "HoldStop", GST_TAP = "Tap", GST_DOUBLE_TAP = "DoubleTap", GST_DRAG_OVER_ENTER = "DragOverEnter", GST_DRAG_OVER_LEAVE = "DragOverLeave", GST_DRAG_START = "DragStart", GST_DRAG_PAUSE = "DragPause", GST_DRAG_MOVE = "DragMove", GST_DRAG_END = "DragEnd", GST_DRAG_CANCEL = "DragCancel", GST_DROP_OVER_ENTER = "DropOverEnter", GST_DROP_OVER_LEAVE = "DropOverLeave", GST_DROP_START = "DropStart", GST_DROP_MOVE = "DropMove", GST_DROP_END = "DropEnd", GST_DROP_CANCEL = "DropCancel", GST_DND_START = "DndStart", GST_DND_END = "DndEnd", GST_DND_CANCEL = "DndCancel", GST_SWIPE_START = "SwipeStart", GST_SWIPE_PAUSE = "SwipePause", GST_SWIPE_MOVE = "SwipeMove", GST_SWIPE_END = "SwipeEnd", GST_SWIPE_CANCEL = "SwipeCancel", GST_SCROLL_START = "ScrollStart", GST_SCROLL_PAUSE = "ScrollPause", GST_SCROLL_MOVE = "ScrollMove", GST_SCROLL_END = "ScrollEnd", GST_SCROLL_CANCEL = "ScrollCancel";
    Sense.ALL_EVENTS = [ EVT_TOUCH_START, EVT_TOUCH_MOVE, EVT_TOUCH_END, EVT_TOUCH_CANCEL, EVT_MOUSE_DOWN, EVT_MOUSE_MOVE, EVT_MOUSE_UP, GST_TAP, GST_DOUBLE_TAP, GST_HOLD_START, GST_HOLD_STOP, GST_DRAG_OVER_ENTER, GST_DRAG_OVER_LEAVE, GST_DRAG_START, GST_DRAG_PAUSE, GST_DRAG_MOVE, GST_DRAG_END, GST_DRAG_CANCEL, GST_DND_START, GST_DND_END, GST_DND_CANCEL, GST_DROP_OVER_ENTER, GST_DROP_OVER_LEAVE, GST_DROP_START, GST_DROP_MOVE, GST_DROP_END, GST_DROP_CANCEL, GST_SWIPE_START, GST_SWIPE_PAUSE, GST_SWIPE_MOVE, GST_SWIPE_END, GST_SWIPE_CANCEL, GST_SCROLL_START, GST_SCROLL_PAUSE, GST_SCROLL_MOVE, GST_SCROLL_END, GST_SCROLL_CANCEL ];
    var STATE_0CLICK = "0click", STATE_1DOWN = "1down", STATE_1CLICK = "1click", STATE_2DOWN = "2down", STATE_SWIPING = "swiping", STATE_SCROLLING = "scrolling", STATE_DRAGGING = "dragging", onEnter = {}, onExit = {}, onTimeout = {}, onTouchStart = {}, onTouchMove = {}, onTouchEnd = {}, onTouchCancel = {}, onMouseDown = {}, onMouseMove = {}, onMouseUp = {};
    return Sense.prototype.resetState = function() {
        this.clearTimeout(), clearDrops(this), unbindOther(this), this.hasPaused = !1, this.inPause = !1, 
        this.inMouseMove = !1, this.inTouchMove = !1, this.evtHandled = !1, this.evtTriggered = !1, 
        this.state = STATE_0CLICK, onEnter[STATE_0CLICK].call(this);
    }, Sense.prototype.gotoState = function(state) {
        onExit[this.state].call(this), this.state = state, onEnter[this.state].call(this);
    }, Sense.prototype.handleTimeout = function() {
        this.holdTimer = null, onTimeout[this.state].call(this);
    }, Sense.prototype.clearTimeout = function() {
        null != this.holdTimer && (clearTimeout(this.holdTimer), this.holdTimer = null);
    }, Sense.prototype.startTimer = function(ms) {
        null != this.holdTimer && clearTimeout(this.holdTimer);
        var self = this;
        this.holdTimer = window.setTimeout(function() {
            self.handleTimeout();
        }, ms);
    }, onEnter[STATE_0CLICK] = function() {
        this.hasPaused = !1, this.inPause = !1, clearFingers(this);
    }, onExit[STATE_0CLICK] = function() {}, onTimeout[STATE_0CLICK] = function() {}, 
    onTouchStart[STATE_0CLICK] = function(evt) {
        if (this.fingers.length <= 0) {
            this.evtHandled = !0;
            for (var i = 0; i < evt.changedTouches.length; i++) {
                var finger = evt.changedTouches[i], id = finger.identifier;
                addTouchFinger(this, id, finger);
            }
            addSourcePoint(this);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_START, evt), 
        this.gotoState(STATE_1DOWN));
    }, onTouchMove[STATE_0CLICK] = function() {}, onTouchEnd[STATE_0CLICK] = function(evt) {
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_END, evt));
    }, onTouchCancel[STATE_0CLICK] = function(evt) {
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_CANCEL, evt));
    }, onMouseDown[STATE_0CLICK] = function(evt) {
        if (this.fingers.length <= 0) {
            this.evtHandled = !0;
            var id = "mouse" + (evt.which || 0);
            addMouseFinger(this, id, evt), addSourcePoint(this);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_DOWN, evt), 
        this.gotoState(STATE_1DOWN));
    }, onMouseMove[STATE_0CLICK] = function() {}, onMouseUp[STATE_0CLICK] = function(evt) {
        var id = "mouse" + (evt.which || 0);
        removeFinger(this, id) && (this.evtHandled = !0), this.evtHandled && (evt.nbFinger = this.fingers.length, 
        this.triggerEvent(EVT_MOUSE_UP, evt));
    }, onEnter[STATE_1DOWN] = function() {
        this.inPause = !1, this.startTimer(this.options.holdTime);
    }, onExit[STATE_1DOWN] = function() {
        this.clearTimeout();
    }, onTimeout[STATE_1DOWN] = function() {
        startHoldGesture(this), this.inPause = !0, this.hasPaused = !0;
    }, onTouchStart[STATE_1DOWN] = function(evt) {
        this.evtHandled = !0, this.inPause || this.startTimer(this.options.holdTime);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            addTouchFinger(this, id, finger);
        }
        evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_START, evt);
    }, onTouchMove[STATE_1DOWN] = function(evt) {
        this.inPause && (this.clearTimeout(), stopHoldGesture(this), this.inPause = !1);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            hasFinger(this, id) && (this.evtHandled = !0, setTouchFinger(this, id, finger), 
            this.finger1.id == id && addSourcePoint(this));
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_MOVE, evt), 
        startGestureIfMoves(this));
    }, onTouchEnd[STATE_1DOWN] = function(evt) {
        this.inPause && (this.clearTimeout(), stopHoldGesture(this), this.inPause = !1);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        if (this.evtHandled) {
            evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_END, evt);
            var onEventName = onWhichEvent(this, GST_DOUBLE_TAP, evt.nbFinger);
            onEventName.length > 0 ? this.gotoState(STATE_1CLICK) : (tapGesture(this), this.gotoState(STATE_0CLICK));
        }
    }, onTouchCancel[STATE_1DOWN] = function(evt) {
        this.inPause && (this.clearTimeout(), stopHoldGesture(this), this.inPause = !1);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_CANCEL, evt), 
        this.gotoState(STATE_0CLICK));
    }, onMouseDown[STATE_1DOWN] = function(evt) {
        this.evtHandled = !0, this.inPause || this.startTimer(this.options.holdTime);
        var id = "mouse" + (evt.which || 0);
        addMouseFinger(this, id, evt), evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_DOWN, evt);
    }, onMouseMove[STATE_1DOWN] = function(evt) {
        this.inPause && (this.clearTimeout(), stopHoldGesture(this), this.inPause = !1);
        var id = "mouse" + (evt.which || 0);
        hasFinger(this, id) && (this.evtHandled = !0, setMouseFinger(this, id, evt), this.finger1.id == id && addSourcePoint(this)), 
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_MOVE, evt), 
        startGestureIfMoves(this));
    }, onMouseUp[STATE_1DOWN] = function(evt) {
        this.inPause && (this.clearTimeout(), stopHoldGesture(this), this.inPause = !1);
        var id = "mouse" + (evt.which || 0);
        if (removeFinger(this, id) && (this.evtHandled = !0), this.evtHandled) {
            evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_UP, evt);
            var onEventName = onWhichEvent(this, GST_DOUBLE_TAP, evt.nbFinger);
            onEventName.length > 0 ? this.gotoState(STATE_1CLICK) : (tapGesture(this), this.gotoState(STATE_0CLICK));
        }
    }, onEnter[STATE_1CLICK] = function() {
        this.startTimer(this.options.doubleTime);
    }, onExit[STATE_1CLICK] = function() {
        this.clearTimeout();
    }, onTimeout[STATE_1CLICK] = function() {
        tapGesture(this), this.gotoState(STATE_0CLICK);
    }, onTouchStart[STATE_1CLICK] = function(evt) {
        if (this.fingers.length <= 0) {
            this.evtHandled = !0;
            for (var i = 0; i < evt.changedTouches.length; i++) {
                var finger = evt.changedTouches[i], id = finger.identifier;
                addTouchFinger(this, id, finger);
            }
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_START, evt), 
        this.gotoState(STATE_2DOWN));
    }, onTouchMove[STATE_1CLICK] = function() {}, onTouchEnd[STATE_1CLICK] = function(evt) {
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_END, evt));
    }, onTouchCancel[STATE_1CLICK] = function(evt) {
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_CANCEL, evt));
    }, onMouseDown[STATE_1CLICK] = function(evt) {
        if (this.fingers.length <= 0) {
            this.evtHandled = !0;
            var id = "mouse" + (evt.which || 0);
            addMouseFinger(this, id, evt);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_DOWN, evt), 
        this.gotoState(STATE_2DOWN));
    }, onMouseMove[STATE_1CLICK] = function() {}, onMouseUp[STATE_1CLICK] = function(evt) {
        var id = "mouse" + (evt.which || 0);
        removeFinger(this, id) && (this.evtHandled = !0), this.evtHandled && (evt.nbFinger = this.fingers.length, 
        this.triggerEvent(EVT_MOUSE_UP, evt));
    }, onEnter[STATE_2DOWN] = function() {}, onExit[STATE_2DOWN] = function() {}, onTimeout[STATE_2DOWN] = function() {}, 
    onTouchStart[STATE_2DOWN] = function(evt) {
        this.evtHandled = !0;
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            addTouchFinger(this, id, finger);
        }
        evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_START, evt);
    }, onTouchMove[STATE_2DOWN] = function(evt) {
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            hasFinger(this, id) && (this.evtHandled = !0, setTouchFinger(this, id, finger), 
            this.finger1.id == id && addSourcePoint(this));
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_MOVE, evt), 
        tapAndStartGestureIfMoves(this));
    }, onTouchEnd[STATE_2DOWN] = function(evt) {
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_END, evt), 
        this.triggerEvent(GST_DOUBLE_TAP, {
            clientX: this.finger1.clientX,
            clientY: this.finger1.clientY,
            pageX: this.finger1.pageX,
            pageY: this.finger1.pageY,
            nbFinger: this.fingers.length
        }), this.gotoState(STATE_0CLICK));
    }, onTouchCancel[STATE_2DOWN] = function(evt) {
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_CANCEL, evt), 
        tapGesture(this), this.gotoState(STATE_0CLICK));
    }, onMouseDown[STATE_2DOWN] = function(evt) {
        this.evtHandled = !0;
        var id = "mouse" + (evt.which || 0);
        addMouseFinger(this, id, evt), evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_DOWN, evt);
    }, onMouseMove[STATE_2DOWN] = function(evt) {
        var id = "mouse" + (evt.which || 0);
        hasFinger(this, id) && (this.evtHandled = !0, setMouseFinger(this, id, evt), this.finger1.id == id && addSourcePoint(this)), 
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_MOVE, evt), 
        tapAndStartGestureIfMoves(this));
    }, onMouseUp[STATE_2DOWN] = function(evt) {
        var id = "mouse" + (evt.which || 0);
        removeFinger(this, id) && (this.evtHandled = !0), this.evtHandled && (evt.nbFinger = this.fingers.length, 
        this.triggerEvent(EVT_MOUSE_UP, evt), this.triggerEvent(GST_DOUBLE_TAP, {
            clientX: this.finger1.clientX,
            clientY: this.finger1.clientY,
            pageX: this.finger1.pageX,
            pageY: this.finger1.pageY,
            nbFinger: this.fingers.length
        }), this.gotoState(STATE_0CLICK));
    }, onEnter[STATE_SWIPING] = function() {
        this.inPause = !1, this.startTimer(this.options.holdTime);
    }, onExit[STATE_SWIPING] = function() {
        this.clearTimeout();
    }, onTimeout[STATE_SWIPING] = function() {
        this.triggerEvent(GST_SWIPE_PAUSE, {
            clientX: this.finger1.clientX,
            clientY: this.finger1.clientY,
            pageX: this.finger1.pageX,
            pageY: this.finger1.pageY,
            nbFinger: this.fingers.length,
            side: this.side,
            moves: this.moves,
            sourcePoints: this.sourcePoints,
            timeStamp: this.timeStamp
        }), this.inPause = !0;
    }, onTouchStart[STATE_SWIPING] = function(evt) {
        this.evtHandled = !0, this.inPause || this.startTimer(this.options.holdTime);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            addTouchFinger(this, id, finger);
        }
        evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_START, evt);
    }, onTouchMove[STATE_SWIPING] = function(evt) {
        this.inPause || this.startTimer(this.options.holdTime);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            hasFinger(this, id) && (this.evtHandled = !0, setTouchFinger(this, id, finger), 
            this.finger1.id == id && addSourcePoint(this));
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_MOVE, evt), 
        continueSwipeGesture(this));
    }, onTouchEnd[STATE_SWIPING] = function(evt) {
        this.inPause || this.clearTimeout();
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_END, evt), 
        endSwipeGesture(this));
    }, onTouchCancel[STATE_SWIPING] = function(evt) {
        this.inPause || this.clearTimeout();
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_CANCEL, evt), 
        cancelSwipeGesture(this));
    }, onMouseDown[STATE_SWIPING] = function(evt) {
        this.evtHandled = !0, this.inPause || this.startTimer(this.options.holdTime);
        var id = "mouse" + (evt.which || 0);
        addMouseFinger(this, id, evt), evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_DOWN, evt);
    }, onMouseMove[STATE_SWIPING] = function(evt) {
        this.inPause || this.startTimer(this.options.holdTime);
        var id = "mouse" + (evt.which || 0);
        hasFinger(this, id) && (this.evtHandled = !0, setMouseFinger(this, id, evt), this.finger1.id == id && addSourcePoint(this)), 
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_MOVE, evt), 
        continueSwipeGesture(this));
    }, onMouseUp[STATE_SWIPING] = function(evt) {
        this.inPause || this.clearTimeout();
        var id = "mouse" + (evt.which || 0);
        removeFinger(this, id) && (this.evtHandled = !0), this.evtHandled && (evt.nbFinger = this.fingers.length, 
        this.triggerEvent(EVT_MOUSE_UP, evt), endSwipeGesture(this));
    }, onEnter[STATE_SCROLLING] = function() {
        this.inPause = !1, this.startTimer(this.options.holdTime);
    }, onExit[STATE_SCROLLING] = function() {
        this.clearTimeout();
    }, onTimeout[STATE_SCROLLING] = function() {
        this.triggerEvent(GST_SCROLL_PAUSE, {
            clientX: this.finger1.clientX,
            clientY: this.finger1.clientY,
            pageX: this.finger1.pageX,
            pageY: this.finger1.pageY,
            nbFinger: this.fingers.length,
            side: this.side,
            moves: this.moves,
            sourcePoints: this.sourcePoints,
            timeStamp: this.timeStamp
        }), this.inPause = !0;
    }, onTouchStart[STATE_SCROLLING] = function(evt) {
        this.evtHandled = !0, this.inPause || this.startTimer(this.options.holdTime);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            addTouchFinger(this, id, finger);
        }
        evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_START, evt);
    }, onTouchMove[STATE_SCROLLING] = function(evt) {
        this.inPause || this.startTimer(this.options.holdTime);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            hasFinger(this, id) && (this.evtHandled = !0, setTouchFinger(this, id, finger), 
            this.finger1.id == id && addSourcePoint(this));
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_MOVE, evt), 
        continueScrollGesture(this));
    }, onTouchEnd[STATE_SCROLLING] = function(evt) {
        this.inPause || this.clearTimeout();
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_END, evt), 
        endScrollGesture(this));
    }, onTouchCancel[STATE_SCROLLING] = function(evt) {
        this.inPause || this.clearTimeout();
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_CANCEL, evt), 
        cancelScrollGesture(this));
    }, onMouseDown[STATE_SCROLLING] = function(evt) {
        this.evtHandled = !0, this.inPause || this.startTimer(this.options.holdTime);
        var id = "mouse" + (evt.which || 0);
        addMouseFinger(this, id, evt), evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_DOWN, evt);
    }, onMouseMove[STATE_SCROLLING] = function(evt) {
        this.inPause || this.startTimer(this.options.holdTime);
        var id = "mouse" + (evt.which || 0);
        hasFinger(this, id) && (this.evtHandled = !0, setMouseFinger(this, id, evt), this.finger1.id == id && addSourcePoint(this)), 
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_MOVE, evt), 
        continueScrollGesture(this));
    }, onMouseUp[STATE_SCROLLING] = function(evt) {
        this.inPause || this.clearTimeout();
        var id = "mouse" + (evt.which || 0);
        removeFinger(this, id) && (this.evtHandled = !0), this.evtHandled && (evt.nbFinger = this.fingers.length, 
        this.triggerEvent(EVT_MOUSE_UP, evt), endScrollGesture(this));
    }, onEnter[STATE_DRAGGING] = function() {
        clearDrops(this), this.inPause = !1, this.startTimer(this.options.holdTime);
    }, onExit[STATE_DRAGGING] = function() {
        this.clearTimeout();
    }, onTimeout[STATE_DRAGGING] = function() {
        this.triggerEvent(GST_DRAG_PAUSE, {
            clientX: this.finger1.clientX,
            clientY: this.finger1.clientY,
            pageX: this.finger1.pageX,
            pageY: this.finger1.pageY,
            nbFinger: this.fingers.length,
            side: this.side,
            moves: this.moves,
            sourcePoints: this.sourcePoints,
            timeStamp: this.timeStamp
        }), this.inPause = !0;
    }, onTouchStart[STATE_DRAGGING] = function(evt) {
        this.evtHandled = !0, this.inPause || this.startTimer(this.options.holdTime);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            addTouchFinger(this, id, finger);
        }
        evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_START, evt);
    }, onTouchMove[STATE_DRAGGING] = function(evt) {
        this.inPause || this.startTimer(this.options.holdTime);
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            hasFinger(this, id) && (this.evtHandled = !0, setTouchFinger(this, id, finger), 
            this.finger1.id == id && addSourcePoint(this));
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_MOVE, evt), 
        continueDragGesture(this));
    }, onTouchEnd[STATE_DRAGGING] = function(evt) {
        this.inPause || this.clearTimeout();
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            if (hasFinger(this, id)) {
                this.evtHandled = !0;
                break;
            }
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_END, evt), 
        dropStart(this), dropEnd(this), this.gotoState(STATE_0CLICK));
    }, onTouchCancel[STATE_DRAGGING] = function(evt) {
        this.inPause || this.clearTimeout();
        for (var i = 0; i < evt.changedTouches.length; i++) {
            var finger = evt.changedTouches[i], id = finger.identifier;
            removeFinger(this, id) && (this.evtHandled = !0);
        }
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_TOUCH_CANCEL, evt), 
        dropCancel(this), this.gotoState(STATE_0CLICK));
    }, onMouseDown[STATE_DRAGGING] = function(evt) {
        this.evtHandled = !0, this.inPause || this.startTimer(this.options.holdTime);
        var id = "mouse" + (evt.which || 0);
        addMouseFinger(this, id, evt), evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_DOWN, evt);
    }, onMouseMove[STATE_DRAGGING] = function(evt) {
        this.inPause || this.startTimer(this.options.holdTime);
        var id = "mouse" + (evt.which || 0);
        hasFinger(this, id) && (this.evtHandled = !0, setMouseFinger(this, id, evt), this.finger1.id == id && addSourcePoint(this)), 
        this.evtHandled && (evt.nbFinger = this.fingers.length, this.triggerEvent(EVT_MOUSE_MOVE, evt), 
        continueDragGesture(this));
    }, onMouseUp[STATE_DRAGGING] = function(evt) {
        this.inPause || this.clearTimeout();
        var id = "mouse" + (evt.which || 0);
        hasFinger(this, id) && (this.evtHandled = !0), this.evtHandled && (evt.nbFinger = this.fingers.length, 
        this.triggerEvent(EVT_MOUSE_UP, evt), dropStart(this), dropEnd(this), this.gotoState(STATE_0CLICK));
    }, Sense;
}(navigator, window, document);

var a4p;

a4p || (a4p = {}), a4p.Sha1 = function() {
    function rstr2binb(input) {
        for (var output = new Array(input.length >> 2), i = 0; i < output.length; i++) output[i] = 0;
        for (var j = 0; j < 8 * input.length; j += 8) output[j >> 5] |= (255 & input.charCodeAt(j / 8)) << 24 - j % 32;
        return output;
    }
    function binb2rstr(input) {
        for (var output = "", i = 0; i < 32 * input.length; i += 8) output += String.fromCharCode(255 & input[i >> 5] >>> 24 - i % 32);
        return output;
    }
    function binb_sha1(x, len) {
        x[len >> 5] |= 128 << 24 - len % 32, x[(len + 64 >> 9 << 4) + 15] = len;
        for (var w = new Array(80), a = 1732584193, b = -271733879, c = -1732584194, d = 271733878, e = -1009589776, i = 0; i < x.length; i += 16) {
            for (var olda = a, oldb = b, oldc = c, oldd = d, olde = e, j = 0; 80 > j; j++) {
                w[j] = 16 > j ? x[i + j] : bit_rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
                var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));
                e = d, d = c, c = bit_rol(b, 30), b = a, a = t;
            }
            a = safe_add(a, olda), b = safe_add(b, oldb), c = safe_add(c, oldc), d = safe_add(d, oldd), 
            e = safe_add(e, olde);
        }
        return [ a, b, c, d, e ];
    }
    function sha1_ft(t, b, c, d) {
        return 20 > t ? b & c | ~b & d : 40 > t ? b ^ c ^ d : 60 > t ? b & c | b & d | c & d : b ^ c ^ d;
    }
    function sha1_kt(t) {
        return 20 > t ? 1518500249 : 40 > t ? 1859775393 : 60 > t ? -1894007588 : -899497514;
    }
    function safe_add(x, y) {
        var lsw = (65535 & x) + (65535 & y), msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return msw << 16 | 65535 & lsw;
    }
    function bit_rol(num, cnt) {
        return num << cnt | num >>> 32 - cnt;
    }
    var Sha1 = {};
    return Sha1.hash = function(input) {
        var s = a4p.Utf8.encode(input);
        return binb2rstr(binb_sha1(rstr2binb(s), 8 * s.length));
    }, Sha1.key256 = function(password) {
        var nBytes = 32, halfLen = password.length / 2, hash1 = a4p.Sha1.hash(password.substr(0, halfLen)), hash2 = a4p.Sha1.hash(password.substr(halfLen));
        return hash1.substr(0, 16) + hash2.substr(0, nBytes - 16);
    }, Sha1;
}();

var a4p;

a4p || (a4p = {}), a4p.MemoryStorage = function() {
    function Storage() {
        this.keyes = [], this.set = {}, this.length = 0;
    }
    return Storage.prototype.clear = function() {
        this.keyes = [], this.set = {}, this.length = 0;
    }, Storage.prototype.key = function(idx) {
        return this.keyes[idx];
    }, Storage.prototype.getItem = function(key) {
        return a4p.isUndefined(this.set[key]) ? null : this.set[key];
    }, Storage.prototype.setItem = function(key, value) {
        this.set[key] = value;
        for (var i = 0; i < this.keyes.length; i++) if (this.keyes[i] == key) return;
        this.keyes.push(key), this.length = this.keyes.length;
    }, Storage.prototype.removeItem = function(key) {
        delete this.set[key];
        for (var i = 0; i < this.keyes.length; i++) this.keyes[i] == key && (this.keyes.splice(i, 1), 
        this.length = this.keyes.length);
    }, Storage;
}(), a4p.LocalStorageFactory = function(storageService) {
    function LocalStorage() {
        if (this.version = "0.1", !a4p.Xml) throw new Error("a4p.Xml needs to be loaded before a4p.LocalStorage!");
        if (!a4p.Json) throw new Error("a4p.Json needs to be loaded before a4p.LocalStorage!");
        if (!a4p.Xml.isXml || !a4p.Xml.xml2String || !a4p.Xml.string2Xml) throw new Error("a4p.Xml with isXml(), xml2String() and string2Xml() needs to be loaded before a4p.LocalStorage!");
        if (!a4p.Json.object2String || !a4p.Json.string2Object) throw new Error("a4p.Json with object2String() and string2Object() needs to be loaded before a4p.LocalStorage!");
    }
    function checkKey(key) {
        if (!key || "string" != typeof key) throw new TypeError("Key type must be string");
        return !0;
    }
    var storage = storageService || window.localStorage;
    if (!storage) throw new Error("a4p.LocalStorageFactory needs a storageService!");
    return LocalStorage.prototype.set = function(key, value) {
        checkKey(key);
        var t = typeof value;
        if ("undefined" == t) value = "null"; else if (null == value) value = "null"; else if (a4p.Xml.isXml(value)) value = a4p.Json.object2String({
            xml: a4p.Xml.xml2String(value)
        }); else if ("string" == t) value = a4p.Json.object2String({
            string: value
        }); else if ("number" == t) value = a4p.Json.object2String({
            number: value
        }); else if ("boolean" == t) value = a4p.Json.object2String({
            bool: value
        }); else {
            if ("object" != t) throw new TypeError("Value type " + t + " is invalid. It must be null, undefined, xml, string, number, boolean or object");
            value = a4p.Json.object2String({
                json: value
            });
        }
        return storage.setItem(key, value), value;
    }, LocalStorage.prototype.get = function(key, def) {
        checkKey(key);
        var item = storage.getItem(key);
        if (null != item) {
            if ("null" == item) return null;
            var value = a4p.Json.string2Object(item);
            return "xml" in value ? a4p.Xml.string2Xml(value.xml) : "string" in value ? value.string : "number" in value ? value.number.valueOf() : "bool" in value ? value.bool.valueOf() : value.json;
        }
        return a4p.isUndefined(def) ? null : def;
    }, LocalStorage.prototype.remove = function(key) {
        checkKey(key);
        var existed = null != storage.getItem(key);
        return storage.removeItem(key), existed;
    }, LocalStorage.prototype.clear = function() {
        var existed = storage.length > 0;
        return storage.clear(), existed;
    }, LocalStorage.prototype.size = function() {
        return storage.length;
    }, LocalStorage.prototype.foreach = function(f, context) {
        for (var n = storage.length, i = 0; n > i; i++) {
            var key = storage.key(i), value = this.get(key);
            context ? f.call(context, value) : f(value);
        }
        return n;
    }, LocalStorage;
}, a4p.FileStorage = function() {
    function FileStorage($q, $rootScope) {
        this.version = "0.1", this.q = $q, this.rootScope = $rootScope, this.grantedBytes = 0, 
        this.fs = null, this.urlPrefix = "", this.storageType = null, this.initDone = !1, 
        this.initPromises = [], this.initTimer = null;
    }
    function initEnd(self) {
        a4p.safeApply(self.rootScope, function() {
            for (var i = 0; i < self.initPromises.length; i++) self.initTrigger(self.initPromises[i]);
            self.initDone = !0, self.initPromises = [], self.initTimer = null;
        });
    }
    function launchEnd(self) {
        null == self.initTimer && (self.initTimer = setTimeout(function() {
            initEnd(self);
        }, 100));
    }
    function tryQuota(self, grantBytes) {
        try {
            var fctOnSuccess = function(fs) {
                a4p.InternalLog.log("a4p.FileStorage", "opened file system " + fs.name), self.fs = fs, 
                self.urlPrefix = "";
                var pattern = /^(https?)_([^_]+)_(\d+):Persistent$/;
                if (pattern.test(fs.name)) {
                    var name = fs.name;
                    name = name.replace(pattern, "$1://$2:$3"), name = name.replace(/^(.*):0$/, "$1"), 
                    self.urlPrefix = "filesystem:" + name + "/persistent";
                }
                a4p.InternalLog.log("a4p.FileStorage", "urlPrefix = " + self.urlPrefix), self.initTrigger = function(deferred) {
                    deferred.resolve();
                }, launchEnd(self);
            }, fctOnFailure = function(fileError) {
                if (fileError.code == FileError.QUOTA_EXCEEDED_ERR) setTimeout(function() {
                    tryQuota(self, grantBytes / 2);
                }, 100); else {
                    var message = "requestFileSystem failure : " + errorMessage(fileError);
                    self.initTrigger = function(deferred) {
                        deferred.reject(message);
                    }, launchEnd(self);
                }
            }, requestFs = function(grantedBytes) {
                try {
                    a4p.isDefined(window.requestFileSystem) ? window.requestFileSystem(self.storageType, grantedBytes, fctOnSuccess, fctOnFailure) : window.webkitRequestFileSystem(self.storageType, grantedBytes, fctOnSuccess, fctOnFailure);
                } catch (e) {
                    var message = e.message;
                    self.initTrigger = function(deferred) {
                        deferred.reject(message);
                    }, launchEnd(self);
                }
            };
            a4p.isDefined(window.webkitPersistentStorage) ? a4p.isDefined(window.webkitPersistentStorage.requestQuota) ? window.webkitPersistentStorage.requestQuota(grantBytes, function(grantedBytes) {
                self.grantedBytes = grantedBytes, requestFs(grantedBytes);
            }, function(fileError) {
                if (fileError.code == FileError.QUOTA_EXCEEDED_ERR) setTimeout(function() {
                    tryQuota(self, grantBytes / 2);
                }, 100); else {
                    var message = "requestQuota failure : " + errorMessage(fileError);
                    self.initTrigger = function(deferred) {
                        deferred.reject(message);
                    }, launchEnd(self);
                }
            }) : requestFs(grantBytes) : a4p.isDefined(window.webkitStorageInfo) ? a4p.isDefined(window.webkitStorageInfo.requestQuota) ? window.webkitStorageInfo.requestQuota(self.storageType, grantBytes, function(grantedBytes) {
                self.grantedBytes = grantedBytes, requestFs(grantedBytes);
            }, function(fileError) {
                if (fileError.code == FileError.QUOTA_EXCEEDED_ERR) setTimeout(function() {
                    tryQuota(self, grantBytes / 2);
                }, 100); else {
                    var message = "requestQuota failure : " + errorMessage(fileError);
                    self.initTrigger = function(deferred) {
                        deferred.reject(message);
                    }, launchEnd(self);
                }
            }) : requestFs(grantBytes) : requestFs(grantBytes);
        } catch (e) {
            var message = e.message;
            self.initTrigger = function(deferred) {
                deferred.reject(message);
            }, launchEnd(self);
        }
    }
    function errorMessage(fileError) {
        var msg = "";
        switch (fileError.code) {
          case FileError.NOT_FOUND_ERR:
            msg = "File not found";
            break;

          case FileError.SECURITY_ERR:
            msg = "Security error";
            break;

          case FileError.ABORT_ERR:
            msg = "Aborted";
            break;

          case FileError.NOT_READABLE_ERR:
            msg = "File not readable";
            break;

          case FileError.ENCODING_ERR:
            msg = "Encoding error";
            break;

          case FileError.NO_MODIFICATION_ALLOWED_ERR:
            msg = "File not modifiable";
            break;

          case FileError.INVALID_STATE_ERR:
            msg = "Invalid state";
            break;

          case FileError.SYNTAX_ERR:
            msg = "Syntax error";
            break;

          case FileError.INVALID_MODIFICATION_ERR:
            msg = "Invalid modification";
            break;

          case FileError.QUOTA_EXCEEDED_ERR:
            msg = "Quota exceeded";
            break;

          case FileError.TYPE_MISMATCH_ERR:
            msg = "Type mismatch";
            break;

          case FileError.PATH_EXISTS_ERR:
            msg = "File already exists";
            break;

          default:
            msg = "Unknown FileError code (code= " + fileError.code + ", type=" + typeof fileError + ")";
        }
        return msg;
    }
    function getDirEntry(dirEntry, dirOptions, dirs, onSuccess, onFailure) {
        if (dirs.length <= 0) return a4p.InternalLog.log("a4p.FileStorage", "getDirEntry success1"), 
        void (onSuccess && onSuccess(dirEntry));
        var bWillThrow = !1, dirName = dirs[0];
        dirs = dirs.slice(1), a4p.InternalLog.log("a4p.FileStorage", "getDirEntry " + dirName + " " + dirOptions), 
        dirEntry.getDirectory(dirName, dirOptions, function(dirEntry) {
            bWillThrow = !0, a4p.InternalLog.log("a4p.FileStorage", "getDirEntry in " + dirName), 
            dirs.length ? (a4p.InternalLog.log("a4p.FileStorage", "getDirEntry in2 " + dirName), 
            getDirEntry(dirEntry, dirOptions, dirs, onSuccess, onFailure)) : (a4p.InternalLog.log("a4p.FileStorage", "getDirEntry success2 " + dirName), 
            onSuccess && onSuccess(dirEntry));
        }, function(fileError) {
            a4p.InternalLog.log("a4p.FileStorage", "getDirEntry fail " + dirName + " " + fileError + " " + dirOptions), 
            bWillThrow = !0, onFailure && onFailure("getDirectory " + dirName + " from " + dirEntry.fullPath + " failure : " + errorMessage(fileError));
        }), a4p.InternalLog.log("a4p.FileStorage", "bWillThrow ? " + bWillThrow + " " + dirName);
    }
    function getFileEntry(rootEntry, filePath, fileOptions, onSuccess, onFailure) {
        for (var names = filePath.split("/"), max = names.length - 1, fileName = names[max], dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        a4p.InternalLog.log("a4p.FileStorage", "getFileEntry filePath :" + filePath + " fileOptions:" + fileOptions.create + " dirs:" + a4pDumpObject("  ", dirs, 1));
        var dirOptions;
        dirOptions = fileOptions.create ? {
            create: !0,
            exclusive: !1
        } : {
            create: !1,
            exclusive: !1
        }, getDirEntry(rootEntry, dirOptions, dirs, function(dirEntry) {
            a4p.InternalLog.log("a4p.FileStorage", "getFileEntry in filePath :" + filePath + " fileOptions:" + fileOptions.create), 
            dirEntry.getFile(fileName, fileOptions, function(fileEntry) {
                a4p.InternalLog.log("a4p.FileStorage", "getFileEntry in success filePath :" + filePath + " fileOptions:" + fileOptions.create), 
                onSuccess && onSuccess(fileEntry);
            }, function(fileError) {
                a4p.InternalLog.log("a4p.FileStorage", "getFileEntry in failure filePath :" + filePath + " fileOptions:" + fileOptions.create), 
                onFailure && onFailure("getFile " + fileName + " from " + dirEntry.fullPath + " failure : " + errorMessage(fileError));
            });
        }, onFailure);
    }
    return FileStorage.prototype.init = function() {
        var deferred = this.q.defer();
        if (this.initPromises.push(deferred), this.initDone) launchEnd(this); else if (1 == this.initPromises.length) if (this.initPromises.push(deferred), 
        this.storageType = a4p.isUndefinedOrNull(LocalFileSystem) ? window.PERSISTENT : LocalFileSystem.PERSISTENT, 
        window.File && window.FileReader && window.Blob) if (a4p.isUndefined(window.requestFileSystem) && a4p.isUndefined(window.webkitRequestFileSystem)) {
            var message = "window.requestFileSystem() or window.webkitRequestFileSystem() required by a4p.FileStorage!";
            this.initTrigger = function(deferred) {
                deferred.reject(message);
            }, launchEnd(this);
        } else if (a4p.isUndefined(window.resolveLocalFileSystemURL) && a4p.isUndefined(window.webkitResolveLocalFileSystemURL) && a4p.isUndefined(window.resolveLocalFileSystemURI) && a4p.isUndefined(window.webkitResolveLocalFileSystemURI)) {
            var message = "window.resolveLocalFileSystemURI or equivalent required by a4p.FileStorage!";
            this.initTrigger = function(deferred) {
                deferred.reject(message);
            }, launchEnd(this);
        } else {
            var grantBytes = 4294967296, self = this;
            setTimeout(function() {
                tryQuota(self, grantBytes);
            }, 100);
        } else {
            var message = "window.File, window.FileReader and window.Blob need to be loaded before a4p.FileStorage!";
            this.initTrigger = function(deferred) {
                deferred.reject(message);
            }, launchEnd(this);
        }
        return deferred.promise;
    }, FileStorage.prototype.getFS = function() {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        return this.fs;
    }, FileStorage.prototype.createDir = function(dirPath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        for (var names = dirPath.split("/"), max = names.length, dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !0,
            exclusive: !1
        };
        getDirEntry(this.fs.root, dirOptions, dirs, function(dirEntry) {
            onSuccess && onSuccess(dirEntry);
        }, onFailure);
    }, FileStorage.prototype.getDir = function(dirPath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        for (var names = dirPath.split("/"), max = names.length, dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !1,
            exclusive: !1
        };
        getDirEntry(this.fs.root, dirOptions, dirs, onSuccess, onFailure);
    }, FileStorage.prototype.readDirectory = function(dirPath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        for (var names = dirPath.split("/"), max = names.length, dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !1,
            exclusive: !1
        }, dirContentReader = function(dirEntry) {
            var dirReader = dirEntry.createReader(), fileEntries = [], dirEntries = [], readEntries = function() {
                dirReader.readEntries(function(results) {
                    if (results.length) {
                        for (var max = results.length, i = 0; max > i; i++) results[i].isFile ? fileEntries.push(results[i].name) : dirEntries.push(results[i].name);
                        readEntries();
                    } else onSuccess && (dirEntries.sort(), fileEntries.sort(), onSuccess(dirEntries, fileEntries));
                }, function(fileError) {
                    onFailure && onFailure("readEntries from " + dirEntry.fullPath + " failure : " + errorMessage(fileError));
                });
            };
            readEntries();
        };
        getDirEntry(this.fs.root, dirOptions, dirs, dirContentReader, onFailure);
    }, FileStorage.prototype.readFullDirectory = function(dirPath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        for (var names = dirPath.split("/"), max = names.length, dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !1,
            exclusive: !1
        }, dirEntries = [], fileEntries = [], dirContentReader = function(dirEntry) {
            a4p.InternalLog.log("a4p.FileStorage", "Reading dir " + dirEntry.fullPath);
            var dirReader = dirEntry.createReader(), readEntries = function() {
                dirReader.readEntries(function(results) {
                    if (results.length) {
                        for (var max = results.length, i = 0; max > i; i++) results[i].isFile ? fileEntries.push(results[i].fullPath) : dirEntries.push(results[i]);
                        readEntries();
                    } else dirEntries.length <= 0 ? onSuccess && (fileEntries.sort(), onSuccess(fileEntries)) : dirContentReader(dirEntries.shift());
                }, function(fileError) {
                    onFailure && onFailure("readEntries from " + dirEntry.fullPath + " failure : " + errorMessage(fileError));
                });
            };
            readEntries();
        };
        getDirEntry(this.fs.root, dirOptions, dirs, dirContentReader, onFailure);
    }, FileStorage.prototype.deleteDir = function(dirPath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        for (var names = dirPath.split("/"), max = names.length, dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !1,
            exclusive: !1
        };
        getDirEntry(this.fs.root, dirOptions, dirs, function(dirEntry) {
            dirEntry.remove(function() {
                onSuccess && onSuccess();
            }, function(fileError) {
                onFailure && onFailure("remove " + dirEntry.fullPath + " failure : " + errorMessage(fileError));
            });
        }, function() {
            onSuccess && onSuccess();
        });
    }, FileStorage.prototype.deleteFullDir = function(dirPath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        for (var names = dirPath.split("/"), max = names.length, dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !1,
            exclusive: !1
        };
        getDirEntry(this.fs.root, dirOptions, dirs, function(dirEntry) {
            dirEntry.removeRecursively(function() {
                onSuccess && onSuccess();
            }, function(fileError) {
                onFailure && onFailure("removeRecursively " + dirEntry.fullPath + " failure : " + errorMessage(fileError));
            });
        }, function() {
            onSuccess && onSuccess();
        });
    }, FileStorage.prototype.getFileFromUrl = function(fileUrl, onSuccess, onFailure) {
        if (a4p.InternalLog.log("a4p.FileStorage", "getFileFromUrl : " + fileUrl), !this.fs) throw a4p.InternalLog.log("a4p.FileStorage", "FileStorage No FS !"), 
        new Error("a4p.FileStorage is not yet initialized with its file system.");
        fileUrl = fileUrl.replace("/private/", "/"), fileUrl = fileUrl.replace("/localhost/", "/"), 
        a4p.isDefined(window.resolveLocalFileSystemURL) ? (a4p.InternalLog.log("a4p.FileStorage", "window.resolveLocalFileSystemURL " + fileUrl), 
        window.resolveLocalFileSystemURL(fileUrl, function(fileEntry) {
            onSuccess && onSuccess(fileEntry);
        }, function(fileError) {
            onFailure && onFailure("resolveLocalFileSystemURL " + fileUrl + " failure : " + errorMessage(fileError));
        })) : a4p.isDefined(window.webkitResolveLocalFileSystemURL) ? (a4p.InternalLog.log("a4p.FileStorage", "window.webkitResolveLocalFileSystemURL " + fileUrl), 
        window.webkitResolveLocalFileSystemURL(fileUrl, function(fileEntry) {
            onSuccess && onSuccess(fileEntry);
        }, function(fileError) {
            onFailure && onFailure("webkitResolveLocalFileSystemURL " + fileUrl + " failure : " + errorMessage(fileError));
        })) : (a4p.InternalLog.log("a4p.FileStorage", "cordova.getFileFromUri " + fileUrl), 
        this.getFileFromUri(fileUrl, onSuccess, onFailure));
    }, FileStorage.prototype.getFileFromUri = function(fileUri, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        fileUri = fileUri.replace("/private/", "/"), fileUri = fileUri.replace("/localhost/", "/"), 
        a4p.isDefined(window.resolveLocalFileSystemURI) ? (a4p.InternalLog.log("a4p.FileStorage", "window.resolveLocalFileSystemURI " + fileUri), 
        window.resolveLocalFileSystemURI(fileUri, function(fileEntry) {
            onSuccess && onSuccess(fileEntry);
        }, function(fileError) {
            onFailure && onFailure("resolveLocalFileSystemURI " + fileUri + " failure : " + errorMessage(fileError));
        })) : a4p.isDefined(window.webkitResolveLocalFileSystemURI) ? (a4p.InternalLog.log("a4p.FileStorage", "window.webkitResolveLocalFileSystemURI " + fileUri), 
        window.webkitResolveLocalFileSystemURI(fileUri, function(fileEntry) {
            onSuccess && onSuccess(fileEntry);
        }, function(fileError) {
            onFailure && onFailure("webkitResolveLocalFileSystemURI " + fileUri + " failure : " + errorMessage(fileError));
        })) : (a4p.InternalLog.log("a4p.FileStorage", "cordova.getFileFromUrl " + fileUri), 
        this.getFileFromUrl(self.urlPrefix + fileUri, onSuccess, onFailure));
    }, FileStorage.prototype.getUrlFromFile = function(filePath, onSuccess, onFailure) {
        if (a4p.InternalLog.log("a4p.FileStorage", "getUrlFromFile " + filePath), !this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        a4p.InternalLog.log("a4p.FileStorage", "getUrlFromFile .. " + filePath), getFileEntry(this.fs.root, filePath, {
            create: !1,
            exclusive: !1
        }, function(fileEntry) {
            a4p.InternalLog.log("a4p.FileStorage", "getUrlFromFile result  toURL " + fileEntry.toURL()), 
            a4p.InternalLog.log("a4p.FileStorage", "getUrlFromFile result  fullPath " + fileEntry.fullPath), 
            a4p.isDefined(fileEntry.toNativeURL) ? (a4p.InternalLog.log("a4p.FileStorage", "getUrlFromFile result  toNativeURL " + fileEntry.toNativeURL()), 
            onSuccess && onSuccess(fileEntry.toNativeURL())) : (a4p.InternalLog.log("a4p.FileStorage", "toNativeURL not defined, use toUrl"), 
            onSuccess && onSuccess(fileEntry.toURL()));
        }, onFailure);
    }, FileStorage.prototype.getUriFromFile = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !1,
            exclusive: !1
        }, function(fileEntry) {
            onSuccess && onSuccess(fileEntry.toURI());
        }, onFailure);
    }, FileStorage.prototype.getModificationTimeFromFile = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !1,
            exclusive: !1
        }, function(fileEntry) {
            fileEntry.getMetadata(function(metadata) {
                onSuccess && onSuccess(metadata.modificationTime);
            }, function(fileError) {
                onFailure && onFailure("getMetadata " + fileEntry.fullPath + " failure : " + errorMessage(fileError));
            });
        }, onFailure);
    }, FileStorage.prototype.getFile = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !1,
            exclusive: !1
        }, onSuccess, onFailure);
    }, FileStorage.prototype.newFile = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !0,
            exclusive: !0
        }, onSuccess, onFailure);
    }, FileStorage.prototype.getOrNewFile = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !0,
            exclusive: !1
        }, onSuccess, onFailure);
    }, FileStorage.prototype.readFileAsDataURL = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !1,
            exclusive: !1
        }, function(fileEntry) {
            fileEntry.file(function(file) {
                var reader = new FileReader();
                onSuccess && (reader.onload = function(evt) {
                    onSuccess(evt.target.result);
                }), onFailure && (reader.onerror = function(fileError) {
                    onFailure("readAsDataURL " + file.fullPath + " failure : " + errorMessage(fileError));
                }), reader.readAsDataURL(file);
            }, function(fileError) {
                onFailure && onFailure("file " + file.fullPath + " failure : " + errorMessage(fileError));
            });
        }, onFailure);
    }, FileStorage.prototype.readFileAsText = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !1,
            exclusive: !1
        }, function(fileEntry) {
            fileEntry.file(function(file) {
                var reader = new FileReader();
                onSuccess && (reader.onload = function(evt) {
                    onSuccess(evt.target.result);
                }), onFailure && (reader.onerror = function(fileError) {
                    onFailure("readAsText " + file.fullPath + " failure : " + errorMessage(fileError));
                }), reader.readAsText(file);
            }, function(fileError) {
                onFailure && onFailure("file " + file.fullPath + " failure : " + errorMessage(fileError));
            });
        }, onFailure);
    }, FileStorage.prototype.readFileAsArrayBuffer = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !1,
            exclusive: !1
        }, function(fileEntry) {
            fileEntry.file(function(file) {
                var reader = new FileReader();
                onSuccess && (reader.onload = function(evt) {
                    onSuccess(evt.target.result);
                }), onFailure && (reader.onerror = function(fileError) {
                    onFailure("readAsText " + file.fullPath + " failure : " + errorMessage(fileError));
                }), reader.readAsArrayBuffer(file);
            }, function(fileError) {
                onFailure && onFailure("file " + file.fullPath + " failure : " + errorMessage(fileError));
            });
        }, onFailure);
    }, FileStorage.prototype.readFileAsBinaryString = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !1,
            exclusive: !1
        }, function(fileEntry) {
            fileEntry.file(function(file) {
                var reader = new FileReader();
                onSuccess && (reader.onload = function(evt) {
                    onSuccess(evt.target.result);
                }), onFailure && (reader.onerror = function(fileError) {
                    onFailure("readAsText " + file.fullPath + " failure : " + errorMessage(fileError));
                }), reader.readAsBinaryString(file);
            }, function(fileError) {
                onFailure && onFailure("file " + file.fullPath + " failure : " + errorMessage(fileError));
            });
        }, onFailure);
    }, FileStorage.prototype.writeFile = function(fromBlob, toFilePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, toFilePath, {
            create: !0,
            exclusive: !1
        }, function(fileEntry) {
            fileEntry.createWriter(function(fileWriter) {
                fileWriter.onwriteend = function() {
                    fileWriter.onwriteend = null, onSuccess && (fileWriter.onwrite = function() {
                        onSuccess(fileEntry);
                    }), onFailure && (fileWriter.onerror = function(fileError) {
                        onFailure("write or truncate " + fileEntry.fullPath + " failure : " + errorMessage(fileError));
                    }), fileWriter.write(fromBlob);
                }, fileWriter.truncate(0);
            }, function(fileError) {
                onFailure && onFailure("createWriter " + fileEntry.fullPath + " failure : " + errorMessage(fileError));
            });
        }, onFailure);
    }, FileStorage.prototype.appendFile = function(fromBlob, toFilePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, toFilePath, {
            create: !0,
            exclusive: !1
        }, function(fileEntry) {
            fileEntry.createWriter(function(fileWriter) {
                onSuccess && (fileWriter.onwrite = function() {
                    onSuccess(fileEntry);
                }), onFailure && (fileWriter.onerror = function(fileError) {
                    onFailure("write or seek " + fileEntry.fullPath + " failure : " + errorMessage(fileError));
                }), fileWriter.seek(fileWriter.length), fileWriter.write(fromBlob);
            }, function(fileError) {
                onFailure && onFailure("createWriter " + fileEntry.fullPath + " failure : " + errorMessage(fileError));
            });
        }, onFailure);
    }, FileStorage.prototype.deleteFile = function(filePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        getFileEntry(this.fs.root, filePath, {
            create: !1,
            exclusive: !1
        }, function(fileEntry) {
            fileEntry.remove(function() {
                onSuccess && onSuccess();
            }, function(fileError) {
                onFailure && onFailure("remove " + fileEntry.fullPath + " failure : " + errorMessage(fileError));
            });
        }, function() {
            onSuccess && onSuccess();
        });
    }, FileStorage.prototype.copyFile = function(fromFilePath, toFilePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        a4p.InternalLog.log("a4p.FileStorage", "copyFile :" + fromFilePath + " to:" + toFilePath);
        for (var self = this, names = toFilePath.split("/"), max = names.length - 1, fileName = names[max], dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !0,
            exclusive: !1
        };
        getDirEntry(this.fs.root, dirOptions, dirs, function(dirEntry) {
            a4p.InternalLog.log("a4p.FileStorage", "copyFile in :" + fromFilePath + " to:" + toFilePath), 
            getFileEntry(self.fs.root, fromFilePath, {
                create: !1,
                exclusive: !1
            }, function(fileEntry) {
                a4p.InternalLog.log("a4p.FileStorage", "copyFile in2 :" + fromFilePath + " to:" + toFilePath), 
                fileEntry.copyTo(dirEntry, fileName, function(toFileEntry) {
                    onSuccess && onSuccess(toFileEntry);
                }, function(fileError) {
                    onFailure && onFailure("copy " + fileEntry.fullPath + " to " + dirEntry.fullPath + "/" + fileName + " failure : " + errorMessage(fileError));
                });
            }, onFailure);
        }, onFailure);
    }, FileStorage.prototype.copyFileFromUrl = function(fromFileUrl, toFilePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        a4p.InternalLog.log("a4p.FileStorage", "copyFileFromUrl :" + fromFileUrl + " to:" + toFilePath);
        for (var self = this, names = toFilePath.split("/"), max = names.length - 1, fileName = names[max], dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !0,
            exclusive: !1
        };
        getDirEntry(this.fs.root, dirOptions, dirs, function(dirEntry) {
            a4p.InternalLog.log("a4p.FileStorage", "copyFileFromUrl in :" + fromFileUrl + " to:" + toFilePath), 
            self.getFileFromUrl(fromFileUrl, function(fileEntry) {
                a4p.InternalLog.log("a4p.FileStorage", "copyFileFromUrl in2 :" + fromFileUrl + " to:" + toFilePath), 
                fileEntry.copyTo(dirEntry, fileName, function(toFileEntry) {
                    onSuccess && onSuccess(toFileEntry);
                }, function(fileError) {
                    onFailure && onFailure("copy " + fileEntry.fullPath + " to " + dirEntry.fullPath + "/" + fileName + " failure : " + errorMessage(fileError));
                });
            }, onFailure);
        }, onFailure);
    }, FileStorage.prototype.moveFile = function(fromFilePath, toFilePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        for (var self = this, names = toFilePath.split("/"), max = names.length - 1, fileName = names[max], dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !0,
            exclusive: !1
        };
        getDirEntry(this.fs.root, dirOptions, dirs, function(dirEntry) {
            getFileEntry(self.fs.root, fromFilePath, {
                create: !1,
                exclusive: !1
            }, function(fileEntry) {
                fileEntry.moveTo(dirEntry, fileName, function(toFileEntry) {
                    onSuccess && onSuccess(toFileEntry);
                }, function(fileError) {
                    onFailure && onFailure("move " + fileEntry.fullPath + " to " + dirEntry.fullPath + "/" + fileName + " failure : " + errorMessage(fileError));
                });
            }, onFailure);
        }, onFailure);
    }, FileStorage.prototype.moveFileEntry = function(fromFileEntry, toFilePath, onSuccess, onFailure) {
        if (!this.fs) throw new Error("a4p.FileStorage is not yet initialized with its file system.");
        for (var names = toFilePath.split("/"), max = names.length - 1, fileName = names[max], dirs = [], i = 0; max > i; i++) "." != names[i] && "" != names[i] && dirs.push(names[i]);
        var dirOptions = {
            create: !0,
            exclusive: !1
        };
        getDirEntry(this.fs.root, dirOptions, dirs, function(dirEntry) {
            fromFileEntry.moveTo(dirEntry, fileName, function(toFileEntry) {
                onSuccess && onSuccess(toFileEntry);
            }, function(fileError) {
                onFailure && onFailure("move " + fileEntry.fullPath + " to " + dirEntry.fullPath + "/" + fileName + " failure : " + errorMessage(fileError));
            });
        }, onFailure);
    }, FileStorage;
}(), a4p.PredefinedFileStorage = function() {
    function PredefinedFileStorage(fileSystem, grantedBytes) {
        this.version = "0.1", this.fs = fileSystem, this.grantedBytes = grantedBytes;
    }
    return PredefinedFileStorage.prototype = a4p.FileStorage.prototype, PredefinedFileStorage;
}();

var a4p;

a4p || (a4p = {}), a4p.TaskReceiver = function() {
    function TaskReceiver(receiverName, http, localStorage) {
        if (this.version = "0.1", this.receiverName = receiverName, this.http = http, localStorage) this.localStorage = localStorage; else {
            var storage = a4p.LocalStorageFactory(window.localStorage);
            this.localStorage = new storage();
        }
        this.todoTasks = this.localStorage.get("TaskReceiver-" + receiverName + "-todoTasks", {}), 
        this.doneTasks = this.localStorage.get("TaskReceiver-" + receiverName + "-doneTasks", {}), 
        this.waitingDone = {}, this.defs = {}, this.synchronizing = {};
    }
    function nextTodo(self, fifoName) {
        var todoTasks = self.todoTasks[fifoName], nbTask = todoTasks.length;
        if (nbTask > 0) {
            var def = self.defs[fifoName], task = todoTasks[0];
            self.waitingDone[fifoName] = !0, def.onAction(task.id, task.action, task.data);
        }
    }
    return TaskReceiver.prototype.clearTaskList = function(fifoName) {
        fifoName = fifoName || "";
        var def = this.defs[fifoName];
        if (!def) throw new Error("TaskReceiver.clearTaskList() called on undefined task list '" + fifoName + "'.");
        this.waitingDone[fifoName] = !1, this.todoTasks[fifoName] = [], this.localStorage.set("TaskReceiver-" + this.receiverName + "-todoTasks", this.todoTasks), 
        this.doneTasks[fifoName] = [], this.localStorage.set("TaskReceiver-" + this.receiverName + "-doneTasks", this.doneTasks);
    }, TaskReceiver.prototype.defineTaskList = function(fifoName, serverUrl, onAction) {
        fifoName = fifoName || "";
        var def;
        this.defs[fifoName] ? (def = this.defs[fifoName], def.serverUrl = serverUrl, def.onAction = onAction) : (def = {
            serverUrl: serverUrl,
            onAction: onAction
        }, this.defs[fifoName] = def), this.doneTasks[fifoName] || (this.doneTasks[fifoName] = []), 
        this.waitingDone[fifoName] || (this.waitingDone[fifoName] = !1), this.todoTasks[fifoName] ? nextTodo(this, fifoName) : this.todoTasks[fifoName] = [], 
        this.synchronizing[fifoName] = !1;
    }, TaskReceiver.prototype.synchronize = function(fifoName, onSuccess, onFailure) {
        fifoName = fifoName || "";
        var def = this.defs[fifoName], self = this;
        if (!def || self.synchronizing[fifoName]) throw new Error("TaskReceiver.synchronize() called on undefined task list '" + fifoName + "'.");
        for (var oldDone = [], doneTasks = self.doneTasks[fifoName], nb = doneTasks.length, i = 0; nb > i; i++) oldDone.push(doneTasks[i].id);
        var oldNb = oldDone.length, onSuccessFct = function(data) {
            self.synchronizing[fifoName] = !1, self.defs[fifoName];
            for (var todoTasks = self.todoTasks[fifoName], doneTasks = self.doneTasks[fifoName], nb = data.length, i = 0; nb > i; i++) {
                var task = data[i];
                todoTasks.push({
                    id: task.id,
                    action: task.action,
                    data: task.data
                });
            }
            self.localStorage.set("TaskReceiver-" + self.receiverName + "-todoTasks", self.todoTasks);
            for (var i = 0; oldNb > i; i++) {
                var id = oldDone[i], idxRemove = 0, nb = doneTasks.length, found = !1;
                for (idxRemove = 0; nb > idxRemove; idxRemove++) if (id == doneTasks[idxRemove].id) {
                    found = !0;
                    break;
                }
                found ? doneTasks.splice(idxRemove, 1) : a4p.ErrorLog.log("a4p.TaskReceiver", "Unknown done client task id='" + id + "'. Have you cleared TaskReceiver before receiving the ack ?");
            }
            self.localStorage.set("TaskReceiver-" + self.receiverName + "-doneTasks", self.doneTasks), 
            onSuccess(), self.waitingDone[fifoName] || nextTodo(self, fifoName);
        }, onFailureFct = function(data, status) {
            self.synchronizing[fifoName] = !1, onFailure("status=" + status + " " + (data || "Request failed"));
        };
        self.synchronizing[fifoName] = !0, this.http.post(def.serverUrl, doneTasks).success(onSuccessFct).error(onFailureFct);
    }, TaskReceiver.prototype.doneTask = function(fifoName, ack) {
        fifoName = fifoName || "";
        var def = this.defs[fifoName];
        if (def && this.waitingDone[fifoName]) {
            this.waitingDone[fifoName] = !1, ack = ack || null;
            var todoTasks = this.todoTasks[fifoName], task = todoTasks.shift();
            this.localStorage.set("TaskReceiver-" + this.receiverName + "-todoTasks", this.todoTasks);
            var doneTasks = this.doneTasks[fifoName];
            doneTasks.push({
                id: task.id,
                ack: ack
            }), this.localStorage.set("TaskReceiver-" + this.receiverName + "-doneTasks", this.doneTasks), 
            nextTodo(this, fifoName);
        }
    }, TaskReceiver.prototype.nbTaskTodo = function(fifoName) {
        fifoName = fifoName || "";
        var todoTasks = this.todoTasks[fifoName];
        return todoTasks ? todoTasks.length : 0;
    }, TaskReceiver.prototype.nbTaskDone = function(fifoName) {
        fifoName = fifoName || "";
        var doneTasks = this.doneTasks[fifoName];
        return doneTasks ? doneTasks.length : 0;
    }, TaskReceiver;
}();

var a4p;

a4p || (a4p = {}), a4p.TaskSender = function() {
    function TaskSender(senderName, http, localStorage) {
        if (this.version = "0.1", this.senderName = senderName, this.http = http, localStorage) this.localStorage = localStorage; else {
            var LocalStorage = a4p.LocalStorageFactory(window.localStorage);
            this.localStorage = new LocalStorage();
        }
        this.todoTasks = this.localStorage.get("TaskSender-" + senderName + "-todoTasks", {}), 
        this.sentTasks = this.localStorage.get("TaskSender-" + senderName + "-sentTasks", {}), 
        this.ackTasks = this.localStorage.get("TaskSender-" + senderName + "-ackTasks", {}), 
        this.waitingDone = {}, this.defs = {}, this.synchronizing = {};
    }
    function nextAck(self, fifoName) {
        var ackTasks = self.ackTasks[fifoName], nbTask = ackTasks.length;
        if (nbTask > 0) {
            var def = self.defs[fifoName], task = ackTasks[0];
            self.waitingDone[fifoName] = !0, def.onAck(task.id, task.ack);
        }
    }
    return TaskSender.prototype.clearTaskList = function(fifoName) {
        fifoName = fifoName || "";
        var def = this.defs[fifoName];
        if (!def) throw new Error("TaskSender.clearTaskList() called on undefined task list '" + fifoName + "'.");
        this.waitingDone[fifoName] = !1, this.todoTasks[fifoName] = [], this.localStorage.set("TaskSender-" + this.senderName + "-todoTasks", this.todoTasks), 
        this.sentTasks[fifoName] = [], this.localStorage.set("TaskSender-" + this.senderName + "-sentTasks", this.sentTasks), 
        this.ackTasks[fifoName] = [], this.localStorage.set("TaskSender-" + this.senderName + "-ackTasks", this.ackTasks);
    }, TaskSender.prototype.defineTaskList = function(fifoName, serverUrl, onAck) {
        fifoName = fifoName || "";
        var def;
        this.defs[fifoName] ? (def = this.defs[fifoName], def.serverUrl = serverUrl, def.onAck = onAck) : (def = {
            serverUrl: serverUrl,
            onAck: onAck
        }, this.defs[fifoName] = def), this.todoTasks[fifoName] || (this.todoTasks[fifoName] = []), 
        this.sentTasks[fifoName] || (this.sentTasks[fifoName] = []), this.waitingDone[fifoName] || (this.waitingDone[fifoName] = !1), 
        this.ackTasks[fifoName] ? nextAck(this, fifoName) : this.ackTasks[fifoName] = [], 
        this.synchronizing[fifoName] = !1;
    }, TaskSender.prototype.todoTask = function(fifoName, id, action, data) {
        fifoName = fifoName || "";
        var def = this.defs[fifoName];
        if (!def) throw new Error("TaskSender.todoTask() called on undefined task list '" + fifoName + "'.");
        action = action || "", data = data || null;
        for (var todoTasks = this.todoTasks[fifoName], nb = todoTasks.length, i = 0; nb > i; i++) if (id == todoTasks[i].id) throw new Error("TaskSender.todoTask() called on already defined todo task '" + id + "'.");
        todoTasks.push({
            id: id,
            action: action,
            data: data
        }), this.localStorage.set("TaskSender-" + this.senderName + "-todoTasks", this.todoTasks);
    }, TaskSender.prototype.synchronize = function(fifoName, onSuccess, onFailure) {
        fifoName = fifoName || "";
        var def = this.defs[fifoName], self = this;
        if (!def || self.synchronizing[fifoName]) throw new Error("TaskSender.synchronize() called on undefined task list '" + fifoName + "'.");
        for (var oldTodo = [], todoTasks = self.todoTasks[fifoName], nb = todoTasks.length, i = 0; nb > i; i++) oldTodo.push(todoTasks[i].id);
        var oldNb = oldTodo.length, onSuccessFct = function(data) {
            self.synchronizing[fifoName] = !1, self.defs[fifoName];
            for (var todoTasks = self.todoTasks[fifoName], sentTasks = self.sentTasks[fifoName], i = 0; oldNb > i; i++) {
                var id = oldTodo[i], idxRemove = 0, nb = todoTasks.length, found = !1;
                for (idxRemove = 0; nb > idxRemove; idxRemove++) if (id == todoTasks[idxRemove].id) {
                    found = !0;
                    break;
                }
                found ? (sentTasks.push(todoTasks[idxRemove].id), todoTasks.splice(idxRemove, 1)) : a4p.ErrorLog.log("a4p.TaskSender", "Unknown sent server task id='" + id + "'");
            }
            self.localStorage.set("TaskSender-" + self.senderName + "-todoTasks", self.todoTasks);
            for (var ackTasks = self.ackTasks[fifoName], nb = data.length, i = 0; nb > i; i++) {
                var task = data[i], found = !1, nb = sentTasks.length, idxRemove = 0;
                for (idxRemove = 0; nb > idxRemove; idxRemove++) if (task.id == sentTasks[idxRemove]) {
                    found = !0;
                    break;
                }
                found ? (ackTasks.push({
                    id: task.id,
                    ack: task.ack
                }), sentTasks.splice(idxRemove, 1)) : a4p.ErrorLog.log("a4p.TaskSender", "Unknown ack server task id='" + task.id + "' ack='" + task.ack + "'");
            }
            self.localStorage.set("TaskSender-" + self.senderName + "-sentTasks", self.sentTasks), 
            self.localStorage.set("TaskSender-" + self.senderName + "-ackTasks", self.ackTasks), 
            onSuccess(), self.waitingDone[fifoName] || nextAck(self, fifoName);
        }, onFailureFct = function(data, status) {
            self.synchronizing[fifoName] = !1, onFailure("status=" + status + " " + (data || "Request failed"));
        };
        self.synchronizing[fifoName] = !0, this.http.post(def.serverUrl, todoTasks).success(onSuccessFct).error(onFailureFct);
    }, TaskSender.prototype.doneTask = function(fifoName) {
        fifoName = fifoName || "";
        var def = this.defs[fifoName];
        if (!def || !this.waitingDone[fifoName]) throw new Error("TaskSender.doneTask() called on undefined task list '" + fifoName + "'.");
        this.waitingDone[fifoName] = !1;
        var ackTasks = this.ackTasks[fifoName];
        ackTasks.shift(), this.localStorage.set("TaskSender-" + this.senderName + "-ackTasks", this.ackTasks), 
        nextAck(this, fifoName);
    }, TaskSender.prototype.nbTaskTodo = function(fifoName) {
        fifoName = fifoName || "";
        var todoTasks = this.todoTasks[fifoName];
        return todoTasks ? todoTasks.length : 0;
    }, TaskSender.prototype.nbTaskSent = function(fifoName) {
        fifoName = fifoName || "";
        var sentTasks = this.sentTasks[fifoName];
        return sentTasks ? sentTasks.length : 0;
    }, TaskSender.prototype.nbTaskAck = function(fifoName) {
        fifoName = fifoName || "";
        var ackTasks = this.ackTasks[fifoName];
        return ackTasks ? ackTasks.length : 0;
    }, TaskSender;
}();

var a4p;

a4p || (a4p = {}), a4p.Thumb = function() {
    function Thumb(element) {
        this.element = element;
    }
    var textInitials = function(text) {
        var textInitials = "  ";
        if (!text || "string" != typeof text) return textInitials;
        textInitials += text[0] ? text[0] : "?", textInitials += text[1] ? text[1] : " ";
        var textArr = text.split(" ");
        if (textArr.length > 1) {
            textInitials = "";
            for (var x = 0; 2 > x; x++) textInitials += textArr[x].charAt(0);
        }
        return textInitials;
    };
    return Thumb.prototype.addCanvas = function(text, number, color, width, height) {
        if (this.element) {
            var canvas = document.createElement("canvas");
            canvas.id = "canvas", canvas.width = width, canvas.height = height;
            var context = canvas.getContext("2d"), initials = textInitials(text), textSize = Math.round(height / 2), numberTextSize = Math.round(height / 5);
            Math.round(number).toString();
            var textPosx = width > 2 * textSize ? Math.round(width / 2 - textSize) : 0, textPosy = height > textSize ? Math.round(height / 2 + textSize / 2) : height;
            Math.round(width / 2);
            var my_gradient = context.createLinearGradient(0, 0, width, height);
            my_gradient.addColorStop(0, "gray"), my_gradient.addColorStop(1, "white"), context.createLinearGradient(0, 0, width, height), 
            context.fillStyle = my_gradient, context.fillRect(0, 0, width, height), context.fillStyle = "white";
            var realTextSize = Math.round(1.2 * textSize);
            context.font = "normal " + realTextSize + "px a4pHelveticaNeueLight,Helvetica,sans-serif", 
            context.fillText(initials.toUpperCase(), textPosx, textPosy), context.fillStyle = "black";
            var realNumberTextSize = Math.round(1.5 * numberTextSize);
            context.font = "normal " + realNumberTextSize + "px a4pHelveticaNeueLight,Helvetica,sans-serif", 
            this.element.appendChild(canvas);
        }
    }, Thumb.prototype.addDiv = function(text, number, color, width, height) {
        if (this.element) {
            var initials = textInitials(text), textSize = Math.round(height / 2), numberTextSize = Math.round(height / 5);
            Math.round(number).toString();
            var divBack = document.createElement("div");
            divBack.id = "canvas", color ? divBack.className += color : divBack.style.background = "red";
            var divText = document.createElement("div");
            divText.style.color = "white", divText.style.textAlign = "center", Math.round(1.2 * textSize), 
            divText.style.font = "normal a4pHelveticaNeueLight,Helvetica,sans-serif", divText.textContent = initials.toUpperCase();
            var divTextNumber = document.createElement("div");
            divTextNumber.style.color = "black", divTextNumber.style.textAlign = "center", Math.round(1.5 * numberTextSize), 
            divTextNumber.style.font = "normal a4pHelveticaNeueLight,Helvetica,sans-serif", 
            divBack.appendChild(divText), divBack.appendChild(divTextNumber), this.element.appendChild(divBack);
        }
    }, Thumb;
}(), function() {
    var appCache = window.applicationCache;
    return a4p.isUndefined(appCache) || appCache.status === appCache.UNCACHED ? !1 : (appCache.update(), 
    void appCache.addEventListener("updateready", function() {
        if (appCache.status == window.applicationCache.UPDATEREADY && window.confirm("A new version of this site is available. Load it ?")) {
            appCache.swapCache();
            var form = document.createElement("form");
            form.setAttribute("method", "POST"), form.setAttribute("action", window.location.href), 
            document.body.appendChild(form), form.submit();
        }
    }));
}();

var a4p;

a4p || (a4p = {}), a4p.Utf8 = function() {
    var Utf8 = {};
    return Utf8.encode = function(input) {
        for (var nChr, utftext = "", nStrLen = input.length, nChrIdx = 0; nStrLen > nChrIdx; nChrIdx++) nChr = input.charCodeAt(nChrIdx), 
        128 > nChr ? utftext += String.fromCharCode(nChr) : 2048 > nChr ? (utftext += String.fromCharCode(192 + (nChr >>> 6)), 
        utftext += String.fromCharCode(128 + (63 & nChr))) : 65536 > nChr ? (utftext += String.fromCharCode(224 + (nChr >>> 12)), 
        utftext += String.fromCharCode(128 + (63 & nChr >>> 6)), utftext += String.fromCharCode(128 + (63 & nChr))) : 2097152 > nChr ? (utftext += String.fromCharCode(240 + (nChr >>> 18)), 
        utftext += String.fromCharCode(128 + (63 & nChr >>> 12)), utftext += String.fromCharCode(128 + (63 & nChr >>> 6)), 
        utftext += String.fromCharCode(128 + (63 & nChr))) : 67108864 > nChr ? (utftext += String.fromCharCode(248 + (nChr >>> 24)), 
        utftext += String.fromCharCode(128 + (63 & nChr >>> 18)), utftext += String.fromCharCode(128 + (63 & nChr >>> 12)), 
        utftext += String.fromCharCode(128 + (63 & nChr >>> 6)), utftext += String.fromCharCode(128 + (63 & nChr))) : (utftext += String.fromCharCode(252 + nChr / 1073741824), 
        utftext += String.fromCharCode(128 + (63 & nChr >>> 24)), utftext += String.fromCharCode(128 + (63 & nChr >>> 18)), 
        utftext += String.fromCharCode(128 + (63 & nChr >>> 12)), utftext += String.fromCharCode(128 + (63 & nChr >>> 6)), 
        utftext += String.fromCharCode(128 + (63 & nChr)));
        return utftext;
    }, Utf8.encodeToUint8Array = function(input) {
        for (var aBytes, nChr, nStrLen = input.length, nArrLen = 0, nMapIdx = 0; nStrLen > nMapIdx; nMapIdx++) nChr = input.charCodeAt(nMapIdx), 
        nArrLen += 128 > nChr ? 1 : 2048 > nChr ? 2 : 65536 > nChr ? 3 : 2097152 > nChr ? 4 : 67108864 > nChr ? 5 : 6;
        aBytes = new Uint8Array(nArrLen);
        for (var nIdx = 0, nChrIdx = 0; nArrLen > nIdx; nChrIdx++) nChr = input.charCodeAt(nChrIdx), 
        128 > nChr ? aBytes[nIdx++] = nChr : 2048 > nChr ? (aBytes[nIdx++] = 192 + (nChr >>> 6), 
        aBytes[nIdx++] = 128 + (63 & nChr)) : 65536 > nChr ? (aBytes[nIdx++] = 224 + (nChr >>> 12), 
        aBytes[nIdx++] = 128 + (63 & nChr >>> 6), aBytes[nIdx++] = 128 + (63 & nChr)) : 2097152 > nChr ? (aBytes[nIdx++] = 240 + (nChr >>> 18), 
        aBytes[nIdx++] = 128 + (63 & nChr >>> 12), aBytes[nIdx++] = 128 + (63 & nChr >>> 6), 
        aBytes[nIdx++] = 128 + (63 & nChr)) : 67108864 > nChr ? (aBytes[nIdx++] = 248 + (nChr >>> 24), 
        aBytes[nIdx++] = 128 + (63 & nChr >>> 18), aBytes[nIdx++] = 128 + (63 & nChr >>> 12), 
        aBytes[nIdx++] = 128 + (63 & nChr >>> 6), aBytes[nIdx++] = 128 + (63 & nChr)) : (aBytes[nIdx++] = 252 + nChr / 1073741824, 
        aBytes[nIdx++] = 128 + (63 & nChr >>> 24), aBytes[nIdx++] = 128 + (63 & nChr >>> 18), 
        aBytes[nIdx++] = 128 + (63 & nChr >>> 12), aBytes[nIdx++] = 128 + (63 & nChr >>> 6), 
        aBytes[nIdx++] = 128 + (63 & nChr));
        return aBytes;
    }, Utf8.decode = function(input) {
        for (var nChr, nCode, sView = "", nStrLen = input.length, nChrIdx = 0; nStrLen > nChrIdx; nChrIdx++) nChr = input.charCodeAt(nChrIdx), 
        nChr >= 252 && 253 >= nChr && nStrLen > nChrIdx + 5 ? (nCode = 1073741824 * (1 & nChr), 
        nChr = input.charCodeAt(++nChrIdx), nCode |= (63 & nChr) << 24, nChr = input.charCodeAt(++nChrIdx), 
        nCode |= (63 & nChr) << 18, nChr = input.charCodeAt(++nChrIdx), nCode |= (63 & nChr) << 12, 
        nChr = input.charCodeAt(++nChrIdx), nCode |= (63 & nChr) << 6, nChr = input.charCodeAt(++nChrIdx), 
        nCode |= 63 & nChr, sView += String.fromCharCode(nCode)) : nChr >= 248 && 251 >= nChr && nStrLen > nChrIdx + 4 ? (nCode = (3 & nChr) << 24, 
        nChr = input.charCodeAt(++nChrIdx), nCode |= (63 & nChr) << 18, nChr = input.charCodeAt(++nChrIdx), 
        nCode |= (63 & nChr) << 12, nChr = input.charCodeAt(++nChrIdx), nCode |= (63 & nChr) << 6, 
        nChr = input.charCodeAt(++nChrIdx), nCode |= 63 & nChr, sView += String.fromCharCode(nCode)) : nChr >= 240 && 247 >= nChr && nStrLen > nChrIdx + 3 ? (nCode = (7 & nChr) << 18, 
        nChr = input.charCodeAt(++nChrIdx), nCode |= (63 & nChr) << 12, nChr = input.charCodeAt(++nChrIdx), 
        nCode |= (63 & nChr) << 6, nChr = input.charCodeAt(++nChrIdx), nCode |= 63 & nChr, 
        sView += String.fromCharCode(nCode)) : nChr >= 224 && 239 >= nChr && nStrLen > nChrIdx + 2 ? (nCode = (15 & nChr) << 12, 
        nChr = input.charCodeAt(++nChrIdx), nCode |= (63 & nChr) << 6, nChr = input.charCodeAt(++nChrIdx), 
        nCode |= 63 & nChr, sView += String.fromCharCode(nCode)) : nChr >= 192 && 223 >= nChr && nStrLen > nChrIdx + 1 ? (nCode = (31 & nChr) << 6, 
        nChr = input.charCodeAt(++nChrIdx), nCode |= 63 & nChr, sView += String.fromCharCode(nCode)) : sView += String.fromCharCode(127 & nChr);
        return sView;
    }, Utf8.decodeFromUint8Array = function(aBytes) {
        for (var nPart, nCode, sView = "", nLen = aBytes.length, nIdx = 0; nLen > nIdx; nIdx++) nPart = aBytes[nIdx], 
        nPart >= 252 && 253 >= nPart && nLen > nIdx + 5 ? (nCode = 1073741824 * (1 & nPart), 
        nPart = aBytes[++nIdx], nCode += (63 & nPart) << 24, nPart = aBytes[++nIdx], nCode += (63 & nPart) << 18, 
        nPart = aBytes[++nIdx], nCode += (63 & nPart) << 12, nPart = aBytes[++nIdx], nCode += (63 & nPart) << 6, 
        nPart = aBytes[++nIdx], nCode += 63 & nPart, sView += String.fromCharCode(nCode)) : nPart >= 248 && 251 >= nPart && nLen > nIdx + 4 ? (nCode = (3 & nPart) << 24, 
        nPart = aBytes[++nIdx], nCode += (63 & nPart) << 18, nPart = aBytes[++nIdx], nCode += (63 & nPart) << 12, 
        nPart = aBytes[++nIdx], nCode += (63 & nPart) << 6, nPart = aBytes[++nIdx], nCode += 63 & nPart, 
        sView += String.fromCharCode(nCode)) : nPart >= 240 && 247 >= nPart && nLen > nIdx + 3 ? (nCode = (7 & nPart) << 18, 
        nPart = aBytes[++nIdx], nCode += (63 & nPart) << 12, nPart = aBytes[++nIdx], nCode += (63 & nPart) << 6, 
        nPart = aBytes[++nIdx], nCode += 63 & nPart, sView += String.fromCharCode(nCode)) : nPart >= 224 && 239 >= nPart && nLen > nIdx + 2 ? (nCode = (15 & nPart) << 12, 
        nPart = aBytes[++nIdx], nCode += (63 & nPart) << 6, nPart = aBytes[++nIdx], nCode += 63 & nPart, 
        sView += String.fromCharCode(nCode)) : nPart >= 192 && 223 >= nPart && nLen > nIdx + 1 ? (nCode = (31 & nPart) << 6, 
        nPart = aBytes[++nIdx], nCode += 63 & nPart, sView += String.fromCharCode(nCode)) : sView += String.fromCharCode(127 & nPart);
        return sView;
    }, Utf8;
}();

var a4p;

a4p || (a4p = {}), a4p.Xml = function() {
    function Xml() {
        this.version = "0.1";
    }
    Xml.isXml = function(elm) {
        var documentElement = (elm ? elm.ownerDocument || elm : 0).documentElement;
        return documentElement ? "HTML" !== documentElement.nodeName : !1;
    }, Xml.xml2String = function(xmlNode) {
        if (!Xml.isXml(xmlNode)) return !1;
        try {
            return new XMLSerializer().serializeToString(xmlNode);
        } catch (E1) {
            try {
                return xmlNode.xml;
            } catch (E2) {}
        }
        return !1;
    }, Xml.string2Xml = function(xmlString) {
        if (!dom_parser) return !1;
        var resultXML = dom_parser.call("DOMParser" in window && new DOMParser() || window, xmlString, "text/xml");
        return this.isXml(resultXML) ? resultXML : !1;
    };
    var dom_parser = "DOMParser" in window && new DOMParser().parseFromString || window.ActiveXObject && function(_xmlString) {
        var xml_doc = new ActiveXObject("Microsoft.XMLDOM");
        return xml_doc.async = "false", xml_doc.loadXML(_xmlString), xml_doc;
    };
    return Xml;
}();

var c4p;

c4p || (c4p = {}), c4p.Model = function() {
    function Model() {
        this.version = "0.1";
    }
    Model.a4p_types = {
        Facet: {
            isAttachment: !1,
            icon: "tag",
            colorType: "j",
            fields: [ "prefix", "name", "description", "facets_ids", "items_ids", "parent_id", "owner_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "facets_ids",
                one: "child",
                many: "parent",
                types: [ "Facet" ]
            }, {
                key: "items_ids",
                one: "faceted",
                many: "faceter",
                types: [ "Account", "Contact", "Event", "Task", "Opportunity", "Lead", "Document", "Note", "Report" ]
            }, {
                key: "owner_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "parent_id",
                one: "parent",
                many: "child",
                types: [ "Facet" ],
                cascadeDelete: "many"
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                prefix: {
                    title: "htmlFormPrefix",
                    type: "",
                    defaultValue: ""
                },
                name: {
                    title: "htmlFormName",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.name.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormPrefix'])"
                    } ]
                },
                description: {
                    title: "",
                    type: "textarea",
                    defaultValue: ""
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [],
            editObjectGroups: [ {
                key: "title",
                title: "htmlFieldsetTitle",
                fields: [ "prefix", "name" ]
            }, {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "description" ]
            } ],
            displayNameList: [ [ "name" ] ],
            displayDescription: [ "description" ],
            displayResumedObjectGroups: [],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "tag",
                name: !0,
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: []
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "tag",
                    name: !1,
                    title: "",
                    size: "bigger",
                    fields: [ {
                        key: "prefix",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "bigger"
                    }, {
                        key: "name",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "bigger"
                    } ]
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Contact: {
            isAttachment: !1,
            icon: "user",
            colorType: "m",
            fields: [ "salutation", "first_name", "last_name", "title", "account_id", "phone_work", "phone_mobile", "phone_fax", "phone_house", "phone_other", "email", "email_home", "email_list", "email_other", "primary_address_street", "primary_address_city", "primary_address_zipcode", "primary_address_state", "primary_address_country", "alt_address_street", "alt_address_city", "alt_address_zipcode", "alt_address_state", "alt_address_country", "description", "manager_id", "contact_type", "assigned_contact_id", "birthday", "department", "assistant_name", "assistant_phone", "lead_source", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "assigned_contact_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "account_id",
                one: "accounter",
                many: "accounted",
                types: [ "Account" ]
            }, {
                key: "manager_id",
                one: "manager",
                many: "managed",
                types: [ "Contact" ]
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                salutation: {
                    title: "htmlFormSalutation",
                    type: "select",
                    defaultValue: "",
                    defaultSetter: "firstOptionItem",
                    defaultSetterParam: [ "htmlOptionsSalutation" ],
                    optionList: "htmlOptionsSalutation",
                    validations: [ {
                        expr: "object.salutation.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormSalutation', 40])"
                    } ]
                },
                first_name: {
                    title: "htmlFormFirstName",
                    type: "",
                    defaultValue: "htmlDefaultNewContact",
                    autofocus: !0,
                    validations: [ {
                        expr: "object.first_name.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormFirstName'])"
                    }, {
                        expr: "object.first_name.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormFirstName', 40])"
                    } ]
                },
                last_name: {
                    title: "htmlFormLastName",
                    type: "",
                    defaultValue: "htmlDefaultNewContact",
                    validations: [ {
                        expr: "object.last_name.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormLastName'])"
                    }, {
                        expr: "object.last_name.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormLastName', 80])"
                    } ]
                },
                title: {
                    title: "htmlFormTitle",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.title.length < 128",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormTitle', 128])"
                    } ]
                },
                phone_work: {
                    title: "htmlFormWork",
                    type: "tel",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.phone_work.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormWork', 40])"
                    }, {
                        expr: "object.phone_work.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.phone_work)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormWork'])"
                    } ]
                },
                phone_mobile: {
                    title: "htmlFormMobile",
                    type: "tel",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.phone_mobile.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormMobile', 40])"
                    }, {
                        expr: "object.phone_mobile.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.phone_mobile)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormMobile'])"
                    } ]
                },
                phone_fax: {
                    title: "htmlFormFax",
                    type: "tel",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.phone_fax.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormFax', 40])"
                    }, {
                        expr: "object.phone_fax.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.phone_fax)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormFax'])"
                    } ]
                },
                phone_house: {
                    title: "htmlFormHouse",
                    type: "tel",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.phone_house.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormHouse', 40])"
                    }, {
                        expr: "object.phone_house.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.phone_house)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormHouse'])"
                    } ]
                },
                phone_other: {
                    title: "htmlFormOther",
                    type: "tel",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.phone_other.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormOther', 40])"
                    }, {
                        expr: "object.phone_other.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.phone_other)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormOther'])"
                    } ]
                },
                email: {
                    title: "htmlFormEmail",
                    type: "mail",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.email.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormEmail', 80])"
                    }, {
                        expr: "object.email.length == 0 || /^[\\w._-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}$/.test(object.email)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorEmailFormat', ['htmlFormEmail'])"
                    } ]
                },
                email_home: {
                    title: "htmlFormHome",
                    type: "mail",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.email_home.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormHome', 80])"
                    }, {
                        expr: "object.email_home.length == 0 || /^[\\w._-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}$/.test(object.email_home)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorEmailFormat', ['htmlFormHome'])"
                    } ]
                },
                email_list: {
                    title: "htmlFormList",
                    type: "mail",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.email_list.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormList', 80])"
                    }, {
                        expr: "object.email_list.length == 0 || /^[\\w._-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}$/.test(object.email_list)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorEmailFormat', ['htmlFormList'])"
                    } ]
                },
                email_other: {
                    title: "htmlFormOther",
                    type: "mail",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.email_other.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormOther', 80])"
                    }, {
                        expr: "object.email_other.length == 0 || /^[\\w._-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}$/.test(object.email_other)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorEmailFormat', ['htmlFormOther'])"
                    } ]
                },
                primary_address_street: {
                    title: "htmlFormStreet",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_street.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormStreet', 255])"
                    } ]
                },
                primary_address_city: {
                    title: "htmlFormCity",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_city.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCity', 40])"
                    } ]
                },
                primary_address_zipcode: {
                    title: "htmlFormZipCode",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_zipcode.length < 20",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormZipCode', 20])"
                    } ]
                },
                primary_address_state: {
                    title: "htmlFormState",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_state.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormState', 80])"
                    } ]
                },
                primary_address_country: {
                    title: "htmlFormCountry",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_country.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCountry', 80])"
                    } ]
                },
                alt_address_street: {
                    title: "htmlFormStreet",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_street.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormStreet', 255])"
                    } ]
                },
                alt_address_city: {
                    title: "htmlFormCity",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_city.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCity', 40])"
                    } ]
                },
                alt_address_zipcode: {
                    title: "htmlFormZipCode",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_zipcode.length < 20",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormZipCode', 20])"
                    } ]
                },
                alt_address_state: {
                    title: "htmlFormState",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_state.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormState', 80])"
                    } ]
                },
                alt_address_country: {
                    title: "htmlFormCountry",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_country.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCountry', 80])"
                    } ]
                },
                description: {
                    title: "htmlFormDescription",
                    type: "textarea",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.description.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormDescription', 32000])"
                    } ]
                },
                birthday: {
                    title: "htmlFormBirthday",
                    type: "date",
                    defaultValue: "",
                    defaultSetter: "now"
                },
                department: {
                    title: "htmlFormDepartment",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.department.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormDepartment', 80])"
                    } ]
                },
                assistant_name: {
                    title: "htmlFormAssistantName",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.assistant_name.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormAssistantName', 40])"
                    } ]
                },
                assistant_phone: {
                    title: "htmlFormAssistantPhone",
                    type: "tel",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.assistant_phone.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormAssistantPhone', 40])"
                    }, {
                        expr: "object.assistant_phone.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.assistant_phone)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormAssistantPhone'])"
                    } ]
                },
                lead_source: {
                    title: "htmlFormLeadSource",
                    type: "select",
                    defaultValue: "",
                    defaultSetter: "firstOptionItem",
                    defaultSetterParam: [ "htmlOptionsLeadSource" ],
                    optionList: "htmlOptionsLeadSource",
                    validations: [ {
                        expr: "object.lead_source.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormLeadSource', 40])"
                    } ]
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [ {
                key: "contact_type",
                fields: [],
                force: !1,
                getter: "contactType"
            } ],
            editObjectGroups: [ {
                key: "details",
                title: "htmlFieldsetDetails",
                fields: [ "salutation", "first_name", "last_name", "title", "birthday" ]
            }, {
                key: "phones",
                title: "htmlFieldsetPhones",
                fields: [ "phone_work", "phone_mobile", "phone_fax", "phone_house", "phone_other" ]
            }, {
                key: "emails",
                title: "htmlFieldsetEmails",
                fields: [ "email", "email_home", "email_list", "email_other" ]
            }, {
                key: "primary_address",
                title: "htmlFieldsetPrimaryAddress",
                fields: [ "primary_address_street", "primary_address_city", "primary_address_zipcode", "primary_address_state", "primary_address_country" ]
            }, {
                key: "alt_address",
                title: "htmlFieldsetAlternateAddress",
                fields: [ "alt_address_street", "alt_address_city", "alt_address_zipcode", "alt_address_state", "alt_address_country" ]
            }, {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "description", "lead_source" ]
            }, {
                key: "work",
                title: "htmlFieldsetWork",
                fields: [ "department", "assistant_name", "assistant_phone" ]
            } ],
            displayNameList: [ [ "last_name", "first_name" ], [ "first_name", "last_name" ], [ "salutation", "first_name", "last_name" ], [ "salutation", "last_name", "first_name" ] ],
            displayDescription: [ "description", "email" ],
            displayResumedObjectGroups: [ {
                key: "work",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "account_id",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "department",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            }, {
                key: "phones",
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "phone_work",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "phone_house",
                    title: !1,
                    prefix: "",
                    suffix: "htmlFormHouseAbbrev",
                    size: ""
                }, {
                    key: "phone_mobile",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "email",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            } ],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "",
                name: !0,
                title: "",
                size: "big",
                type: "",
                brSeparated: !0,
                fields: []
            }, {
                key: "work",
                synchro: !0,
                icon: "",
                name: !1,
                title: "",
                size: "smaller",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "account_id",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "department",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            }, {
                key: "phones",
                synchro: !1,
                icon: "",
                name: !1,
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "phone_work",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "phone_house",
                    title: !1,
                    prefix: "",
                    suffix: "htmlFormHouseAbbrev",
                    size: ""
                }, {
                    key: "phone_mobile",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "email",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "user",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "title",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "big"
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "account_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "department",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "phone_work",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "phone_house",
                        title: !1,
                        prefix: "",
                        suffix: "htmlFormHouseAbbrev",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "phone_mobile",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "email",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "c",
                brSeparated: !0,
                groups: [ {
                    title: "htmlFormTitleContactDetails",
                    size: "big",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "primary_address_street",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "primary_address_city",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "primary_address_zipcode",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "primary_address_state",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "primary_address_country",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "phone_fax",
                        title: !1,
                        prefix: "",
                        suffix: "htmlFormFaxAbbrev",
                        size: ""
                    }, {
                        key: "assistant_name",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "assistant_phone",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "e",
                brSeparated: !0,
                groups: [ {
                    title: "htmlFormTitlePersonal",
                    size: "big",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "birthday",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "g",
                brSeparated: !0,
                groups: [ {
                    title: "htmlFormTitleOtherContactDetails",
                    size: "big",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "alt_address_street",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "alt_address_city",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "alt_address_zipcode",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "alt_address_state",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "alt_address_country",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "phone_other",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "lead_source",
                        title: !1,
                        prefix: "htmlTextContactOrigin",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Account: {
            isAttachment: !1,
            icon: "building-o",
            colorType: "m",
            fields: [ "company_name", "phone", "fax", "web_url", "bil_addr_street", "bil_addr_city", "bil_addr_postal_code", "bil_addr_state", "bil_addr_country", "description", "annual_revenue", "nb_employees", "industry", "sic", "type", "parent_id", "assigned_contact_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "assigned_contact_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "parent_id",
                one: "parent",
                many: "child",
                types: [ "Account" ],
                cascadeDelete: "many"
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                company_name: {
                    title: "htmlFormCompanyName",
                    type: "",
                    autofocus: !0,
                    defaultValue: "htmlDefaultNewAccount",
                    validations: [ {
                        expr: "object.company_name.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormCompanyName'])"
                    }, {
                        expr: "object.company_name.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCompanyName', 255])"
                    } ]
                },
                fax: {
                    title: "htmlFormFax",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.fax.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormFax', 40])"
                    }, {
                        expr: "object.fax.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.fax)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormFax'])"
                    } ]
                },
                phone: {
                    title: "htmlFormPhone",
                    type: "tel",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.phone.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormPhone', 40])"
                    }, {
                        expr: "object.phone.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.phone)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormPhone'])"
                    } ]
                },
                web_url: {
                    title: "htmlFormWebsite",
                    type: "url",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.web_url.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormWebsite', 255])"
                    } ]
                },
                bil_addr_street: {
                    title: "htmlFormStreet",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.bil_addr_street.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormStreet', 255])"
                    } ]
                },
                bil_addr_city: {
                    title: "htmlFormCity",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.bil_addr_city.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCity', 40])"
                    } ]
                },
                bil_addr_postal_code: {
                    title: "htmlFormZipCode",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.bil_addr_postal_code.length < 20",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormZipCode', 20])"
                    } ]
                },
                bil_addr_state: {
                    title: "htmlFormState",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.bil_addr_state.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormState', 80])"
                    } ]
                },
                bil_addr_country: {
                    title: "htmlFormCountry",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.bil_addr_country.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCountry', 80])"
                    } ]
                },
                description: {
                    title: "htmlFormDescription",
                    type: "textarea",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.description.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormDescription', 32000])"
                    } ]
                },
                annual_revenue: {
                    title: "htmlFormAnnualIncome",
                    type: "currency",
                    defaultValue: 0,
                    validations: [ {
                        expr: "/^\\d+$/.test(object.annual_revenue) && object.annual_revenue >= 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequireInteger', ['htmlFormAnnualIncome'])"
                    } ]
                },
                nb_employees: {
                    title: "htmlFormEmployeeNumber",
                    type: "number",
                    defaultValue: 0,
                    validations: [ {
                        expr: "/^\\d+$/.test(object.nb_employees) && object.nb_employees >= 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequireInteger', ['htmlFormEmployeeNumber'])"
                    } ]
                },
                industry: {
                    title: "htmlFormIndustry",
                    type: "select",
                    defaultValue: "",
                    defaultSetter: "firstOptionItem",
                    defaultSetterParam: [ "htmlOptionsIndustry" ],
                    optionList: "htmlOptionsIndustry",
                    validations: [ {
                        expr: "object.industry.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormIndustry', 40])"
                    } ]
                },
                sic: {
                    title: "htmlFormSicCode",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.sic.length < 20",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormSicCode', 20])"
                    } ]
                },
                type: {
                    title: "htmlFormType",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.type.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormType', 40])"
                    } ]
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [ {
                key: "web_url",
                fields: [ "web_url" ],
                force: !0,
                getter: "httpPrefixUrl"
            } ],
            editObjectGroups: [ {
                key: "title",
                title: "htmlFieldsetTitle",
                fields: [ "company_name" ]
            }, {
                key: "phones",
                title: "htmlFieldsetPhones",
                fields: [ "phone", "fax" ]
            }, {
                key: "bil_addr",
                title: "htmlFieldsetBillingAddress",
                fields: [ "bil_addr_street", "bil_addr_city", "bil_addr_postal_code", "bil_addr_state", "bil_addr_country" ]
            }, {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "description", "web_url" ]
            }, {
                key: "work",
                title: "htmlFieldsetWork",
                fields: [ "annual_revenue", "nb_employees", "industry", "sic", "type" ]
            } ],
            displayNameList: [ [ "company_name" ] ],
            displayDescription: [ "description" ],
            displayResumedObjectGroups: [ {
                key: "phones",
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "phone",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "web_url",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            } ],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "",
                name: !0,
                title: "",
                size: "big",
                type: "",
                brSeparated: !0,
                fields: []
            }, {
                key: "phones",
                synchro: !1,
                icon: "",
                name: !1,
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "phone",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "web_url",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "building-o",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "phone",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "fax",
                        title: !1,
                        prefix: "",
                        suffix: "htmlFormFaxAbbrev",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "web_url",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "c",
                brSeparated: !0,
                groups: [ {
                    title: "htmlFormTitleSegmentation",
                    size: "big",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "industry",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "nb_employees",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "annual_revenue",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "sic",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "type",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "e",
                brSeparated: !0,
                groups: [ {
                    title: "htmlFormTitleAddress",
                    size: "big",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "bil_addr_street",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "bil_addr_city",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "bil_addr_postal_code",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "bil_addr_state",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "bil_addr_country",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Event: {
            isAttachment: !1,
            icon: "comments",
            colorType: "b",
            fields: [ "name", "location", "date_start", "date_end", "duration_hours", "duration_minutes", "description", "what_id", "owner_id", "assigned_contact_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "owner_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "assigned_contact_id",
                one: "leader",
                many: "led",
                types: [ "Contact" ]
            }, {
                key: "what_id",
                one: "affecter",
                many: "affected",
                types: [ "Account", "Opportunity" ]
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                name: {
                    title: "htmlFormName",
                    type: "",
                    defaultValue: "htmlDefaultEventName",
                    autofocus: !0,
                    validations: [ {
                        expr: "object.name.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormName'])"
                    }, {
                        expr: "object.name.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormName', 255])"
                    } ]
                },
                location: {
                    title: "htmlFormLocation",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.location.length < 200",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormLocation', 200])"
                    } ]
                },
                date_start: {
                    title: "htmlFormDateStart",
                    type: "datetime",
                    defaultValue: "",
                    defaultSetter: "nextHour",
                    calculations: [ {
                        toField: "date_end",
                        fromFields: [ "date_start", "duration_hours", "duration_minutes" ],
                        getter: "dateEndFromStart"
                    }, {
                        toField: "duration_hours",
                        fromFields: [ "date_start", "date_end" ],
                        getter: "diffHours"
                    }, {
                        toField: "duration_minutes",
                        fromFields: [ "date_start", "date_end" ],
                        getter: "diffMinutesInHour"
                    } ],
                    validations: [ {
                        expr: "object.date_start.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormDateStart'])"
                    }, {
                        expr: "a4pDateParse(object.date_start).getTime() < a4pDateParse(object.date_end).getTime()",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorDatesOrder', ['htmlFormDateStart', 'htmlFormDateEnd'])"
                    } ]
                },
                date_end: {
                    title: "htmlFormDateEnd",
                    type: "datetime",
                    defaultValue: "",
                    defaultSetter: "nextNextHour",
                    calculations: [ {
                        toField: "date_start",
                        fromFields: [ "date_start", "date_end", "duration_hours", "duration_minutes" ],
                        getter: "dateStartFromEnd"
                    }, {
                        toField: "duration_hours",
                        fromFields: [ "date_start", "date_end" ],
                        getter: "diffHours"
                    }, {
                        toField: "duration_minutes",
                        fromFields: [ "date_start", "date_end" ],
                        getter: "diffMinutesInHour"
                    } ],
                    validations: [ {
                        expr: "object.date_end.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormDateEnd'])"
                    }, {
                        expr: "a4pDateParse(object.date_start).getTime() < a4pDateParse(object.date_end).getTime()",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorDatesOrder', ['htmlFormDateStart', 'htmlFormDateEnd'])"
                    } ]
                },
                description: {
                    title: "htmlFormDescription",
                    type: "textarea",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.description.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormDescription', 32000])"
                    } ]
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [ {
                key: "duration_hours",
                fields: [ "date_start", "date_end" ],
                force: !0,
                getter: "diffHours"
            }, {
                key: "duration_minutes",
                fields: [ "date_start", "date_end" ],
                force: !0,
                getter: "diffMinutesInHour"
            } ],
            editObjectGroups: [ {
                key: "title",
                title: "htmlFieldsetDetails",
                fields: [ "name", "location", "date_start", "date_end" ]
            }, {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "description" ]
            } ],
            displayNameList: [ [ "date_start", "name" ], [ "name" ] ],
            displayDescription: [ "description" ],
            displayResumedObjectGroups: [ {
                key: "title",
                icon: "map-marker",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "location",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            }, {
                key: "time",
                icon: "clock-o",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "date_start",
                    type: "dateTIME",
                    title: !1,
                    prefix: "",
                    suffix: "rangeSeparator",
                    size: "smaller"
                }, {
                    key: "date_end",
                    type: "samedayTIME",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "smaller"
                } ]
            }, {
                key: "attendees",
                icon: "user",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "attendee",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            } ],
            displaySummarizedObjectGroups: [ {
                key: "title",
                icon: "",
                synchro: !0,
                name: !0,
                title: "",
                size: "big",
                type: "a",
                brSeparated: !0,
                fields: []
            }, {
                key: "location",
                icon: "map-marker",
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "location",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            }, {
                key: "time",
                icon: "clock-o",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "date_start",
                    type: "dateTIME",
                    title: !1,
                    prefix: "",
                    suffix: "rangeSeparator",
                    size: "smaller"
                }, {
                    key: "date_end",
                    type: "samedayTIME",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "smaller"
                } ]
            }, {
                key: "attendees",
                icon: "user",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "attendee",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "comments",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                }, {
                    icon: "map-marker",
                    title: "",
                    size: "",
                    fields: [ {
                        key: "location",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    } ]
                }, {
                    icon: "clock-o",
                    title: "",
                    size: "",
                    fields: [ {
                        key: "date_start",
                        type: "dateTIME",
                        title: !1,
                        prefix: "",
                        suffix: "rangeSeparator",
                        size: "small"
                    }, {
                        key: "date_end",
                        type: "samedayTIME",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    } ]
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "leader",
                        title: !1,
                        prefix: "htmlTextContactOrigin",
                        suffix: "",
                        size: ""
                    }, {
                        key: "leaderType",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Task: {
            isAttachment: !1,
            icon: "tasks",
            colorType: "b",
            fields: [ "name", "date_start", "is_reminder_set", "date_reminder", "description", "status", "what_id", "owner_id", "assigned_contact_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "owner_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "assigned_contact_id",
                one: "leader",
                many: "led",
                types: [ "Contact" ]
            }, {
                key: "what_id",
                one: "affecter",
                many: "affected",
                types: [ "Account", "Opportunity" ]
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                name: {
                    title: "htmlFormName",
                    type: "",
                    defaultValue: "htmlDefaultTaskName",
                    autofocus: !0,
                    validations: [ {
                        expr: "object.name.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormName'])"
                    }, {
                        expr: "object.name.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormName', 255])"
                    } ]
                },
                date_start: {
                    title: "htmlFormDueDate",
                    type: "date",
                    defaultValue: "",
                    defaultSetter: "tomorrow",
                    validations: [ {
                        expr: "object.date_start.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormDateStart'])"
                    } ]
                },
                is_reminder_set: {
                    title: "htmlFormReminderSet",
                    type: "boolean",
                    defaultValue: !1
                },
                date_reminder: {
                    title: "htmlFormDateReminder",
                    type: "datetime",
                    defaultValue: "",
                    defaultSetter: "tomorrowPrevHour",
                    validations: [ {
                        expr: "!object.is_reminder_set || (object.date_reminder.length > 0)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormDateReminder'])"
                    }, {
                        expr: "!object.is_reminder_set || (a4pDateParse(object.date_reminder).getTime() < a4pDateParse(object.date_start).getTime())",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorDatesOrder', ['htmlFormDateStart', 'htmlFormDateReminder'])"
                    } ]
                },
                description: {
                    title: "htmlFormDescription",
                    type: "textarea",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.description.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormDescription', 32000])"
                    } ]
                },
                status: {
                    title: "htmlFormStatus",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.status.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormStatus', 255])"
                    } ]
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [],
            editObjectGroups: [ {
                key: "title",
                title: "htmlFieldsetDetails",
                fields: [ "name", "date_start", "is_reminder_set", "date_reminder" ]
            }, {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "description" ]
            }, {
                key: "other",
                title: "htmlFieldsetOther",
                fields: [ "status" ]
            } ],
            displayNameList: [ [ "name" ] ],
            displayDescription: [ "description" ],
            displayResumedObjectGroups: [ {
                key: "title",
                icon: "map-marker",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "location",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            }, {
                key: "time",
                icon: "clock-o",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "date_start",
                    type: "dateTIME",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "smaller"
                } ]
            } ],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "map-marker",
                name: !0,
                title: "",
                size: "",
                type: "a",
                brSeparated: !0,
                fields: [ {
                    key: "location",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            }, {
                key: "time",
                icon: "clock-o",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "date_start",
                    type: "dateTIME",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "smaller"
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "tasks",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                }, {
                    icon: "map-marker",
                    title: "",
                    size: "",
                    fields: [ {
                        key: "location",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    } ]
                }, {
                    icon: "clock-o",
                    title: "",
                    size: "",
                    fields: [ {
                        key: "date_start",
                        type: "dateTIME",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    } ]
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "date_reminder",
                        title: !1,
                        prefix: "htmlTextReminder",
                        suffix: "",
                        size: ""
                    }, {
                        key: "is_reminder_set",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Opportunity: {
            isAttachment: !1,
            icon: "flag",
            colorType: "m",
            fields: [ "name", "date_closed", "stage", "amount", "next_step", "probability", "type", "description", "account_id", "contact_id", "assigned_contact_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "assigned_contact_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "contact_id",
                one: "accounter",
                many: "accounted",
                types: [ "Contact" ]
            }, {
                key: "account_id",
                one: "accounter",
                many: "accounted",
                types: [ "Account" ]
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                name: {
                    title: "htmlFormName",
                    type: "",
                    defaultValue: "htmlDefaultOpportunityName",
                    autofocus: !0,
                    validations: [ {
                        expr: "object.name.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormName'])"
                    }, {
                        expr: "object.name.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormName', 255])"
                    } ]
                },
                date_closed: {
                    title: "htmlFormDateClosed",
                    type: "date",
                    defaultValue: "",
                    defaultSetter: "tomorrow",
                    validations: [ {
                        expr: "object.date_closed.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormDateClosed'])"
                    } ]
                },
                stage: {
                    title: "htmlFormStage",
                    type: "select",
                    defaultSetter: "firstOptionItem",
                    defaultSetterParam: [ "htmlOptionsOpportunityStage" ],
                    optionList: "htmlOptionsOpportunityStage",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.stage.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormStage'])"
                    }, {
                        expr: "object.stage.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormStage', 40])"
                    } ]
                },
                amount: {
                    title: "htmlFormAmount",
                    type: "currency",
                    defaultValue: 0,
                    validations: [ {
                        expr: "object.amount != null && /^(\\d+)([.,]\\d{1,2})?$/.test(object.amount) && object.amount >= 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequireDouble', ['htmlFormAmount'])"
                    } ]
                },
                next_step: {
                    title: "htmlFormNextStep",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.next_step.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormNextStep', 255])"
                    } ]
                },
                probability: {
                    title: "htmlFormProbability",
                    type: "probability",
                    defaultValue: 100,
                    validations: [ {
                        expr: "/^\\d+$/.test(object.probability) && object.probability >= 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequireInteger', ['htmlFormProbability'])"
                    }, {
                        expr: "object.probability <= 100",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxValue', ['htmlFormProbability', 100])"
                    } ]
                },
                type: {
                    title: "htmlFormType",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.type.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormType', 40])"
                    } ]
                },
                description: {
                    title: "htmlFormDescription",
                    type: "textarea",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.description.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormDescription', 32000])"
                    } ]
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [],
            editObjectGroups: [ {
                key: "details",
                title: "htmlFieldsetDetails",
                fields: [ "name" ]
            }, {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "description" ]
            }, {
                key: "work",
                title: "htmlFieldsetWork",
                fields: [ "date_closed", "stage", "amount", "next_step", "probability", "type" ]
            } ],
            displayNameList: [ [ "name" ] ],
            displayDescription: [ "amount", "description" ],
            displayResumedObjectGroups: [ {
                key: "title",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "type",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            }, {
                key: "amount",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "amount",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            }, {
                key: "probability",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "probability",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            }, {
                key: "closed",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "date_closed",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            } ],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "",
                name: !0,
                title: "",
                size: "big",
                type: "",
                brSeparated: !0,
                fields: []
            }, {
                key: "amount",
                synchro: !1,
                icon: "",
                name: !1,
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "amount",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "probability",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            }, {
                key: "closed",
                synchro: !1,
                icon: "",
                name: !1,
                title: "",
                size: "smaller",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "date_closed",
                    title: !0,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "flag",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "type",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "amount",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "big"
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "probability",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    }, {
                        key: "date_closed",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    }, {
                        key: "stage",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    }, {
                        key: "next_step",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    } ]
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Lead: {
            isAttachment: !1,
            icon: "trophy",
            colorType: "m",
            fields: [ "salutation", "first_name", "last_name", "description", "lead_source", "email", "fax", "phone", "phone_mobile", "web_url", "company_name", "industry", "annual_revenue", "nb_employees", "primary_address_city", "primary_address_country", "primary_address_state", "primary_address_street", "primary_address_zipcode", "is_converted", "converted_account_id", "converted_contact_id", "converted_opportunity_id", "converted_date", "assigned_contact_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "assigned_contact_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "converted_account_id",
                one: "converted_to",
                many: "converted_from",
                types: [ "Account" ]
            }, {
                key: "converted_contact_id",
                one: "converted_to",
                many: "converted_from",
                types: [ "Contact" ]
            }, {
                key: "converted_opportunity_id",
                one: "converted_to",
                many: "converted_from",
                types: [ "Opportunity" ]
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                salutation: {
                    title: "htmlFormSalutation",
                    type: "select",
                    defaultValue: "",
                    defaultSetter: "firstOptionItem",
                    defaultSetterParam: [ "htmlOptionsSalutation" ],
                    optionList: "htmlOptionsSalutation",
                    validations: [ {
                        expr: "object.salutation.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormSalutation', 40])"
                    } ]
                },
                first_name: {
                    title: "htmlFormFirstName",
                    type: "",
                    autofocus: !0,
                    defaultValue: "htmlDefaultNewLead",
                    validations: [ {
                        expr: "object.first_name.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormFirstName'])"
                    }, {
                        expr: "object.first_name.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormFirstName', 40])"
                    } ]
                },
                last_name: {
                    title: "htmlFormLastName",
                    type: "",
                    defaultValue: "htmlDefaultNewLead",
                    validations: [ {
                        expr: "object.last_name.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormLastName'])"
                    }, {
                        expr: "object.last_name.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormLastName', 80])"
                    } ]
                },
                description: {
                    title: "htmlFormDescription",
                    type: "textarea",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.description.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormDescription', 32000])"
                    } ]
                },
                lead_source: {
                    title: "htmlFormLeadSource",
                    type: "select",
                    defaultValue: "",
                    defaultSetter: "firstOptionItem",
                    defaultSetterParam: [ "htmlOptionsLeadSource" ],
                    optionList: "htmlOptionsLeadSource",
                    validations: [ {
                        expr: "object.lead_source.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormLeadSource', 40])"
                    } ]
                },
                email: {
                    title: "htmlFormEmail",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.email.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormEmail', 80])"
                    }, {
                        expr: "object.email.length == 0 || /^[\\w._-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}$/.test(object.email)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorEmailFormat', ['htmlFormEmail'])"
                    } ]
                },
                fax: {
                    title: "htmlFormFax",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.fax.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormFax', 40])"
                    }, {
                        expr: "object.fax.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.fax)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormFax'])"
                    } ]
                },
                phone: {
                    title: "htmlFormPhone",
                    type: "tel",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.phone.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormPhone', 40])"
                    }, {
                        expr: "object.phone.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.phone)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormPhone'])"
                    } ]
                },
                phone_mobile: {
                    title: "htmlFormMobile",
                    type: "tel",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.phone_mobile.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormMobile', 40])"
                    }, {
                        expr: "object.phone_mobile.length == 0 || /^[\\w\\s+()-.]{0,40}$/.test(object.phone_mobile)",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorPhoneFormat', ['htmlFormMobile'])"
                    } ]
                },
                web_url: {
                    title: "htmlFormWebsite",
                    type: "url",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.web_url.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormWebsite', 255])"
                    } ]
                },
                company_name: {
                    title: "htmlFormCompanyName",
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.company_name.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCompanyName', 255])"
                    } ]
                },
                industry: {
                    title: "htmlFormIndustry",
                    type: "select",
                    defaultValue: "",
                    defaultSetter: "firstOptionItem",
                    defaultSetterParam: [ "htmlOptionsIndustry" ],
                    optionList: "htmlOptionsIndustry",
                    validations: [ {
                        expr: "object.industry.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormIndustry', 40])"
                    } ]
                },
                annual_revenue: {
                    title: "htmlFormAnnualIncome",
                    type: "currency",
                    defaultValue: 0,
                    validations: [ {
                        expr: "/^\\d+$/.test(object.annual_revenue) && object.annual_revenue >= 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequireInteger', ['htmlFormAnnualIncome'])"
                    } ]
                },
                nb_employees: {
                    title: "htmlFormEmployeeNumber",
                    type: "number",
                    defaultValue: 0,
                    validations: [ {
                        expr: "/^\\d+$/.test(object.nb_employees) && object.nb_employees >= 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequireInteger', ['htmlFormEmployeeNumber'])"
                    } ]
                },
                primary_address_street: {
                    title: "htmlFormStreet",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_street.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormStreet', 255])"
                    } ]
                },
                primary_address_city: {
                    title: "htmlFormCity",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_city.length < 40",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCity', 40])"
                    } ]
                },
                primary_address_zipcode: {
                    title: "htmlFormZipCode",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_zipcode.length < 20",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormZipCode', 20])"
                    } ]
                },
                primary_address_state: {
                    title: "htmlFormState",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_state.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormState', 80])"
                    } ]
                },
                primary_address_country: {
                    title: "htmlFormCountry",
                    type: "address",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.primary_address_country.length < 80",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormCountry', 80])"
                    } ]
                },
                is_converted: {
                    title: "",
                    type: "boolean",
                    defaultValue: !1
                },
                converted_date: {
                    title: "htmlFormConvertedDate",
                    type: "date",
                    defaultValue: ""
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [ {
                key: "web_url",
                fields: [ "web_url" ],
                force: !0,
                getter: "httpPrefixUrl"
            } ],
            editObjectGroups: [ {
                key: "details",
                title: "htmlFieldsetDetails",
                fields: [ "salutation", "first_name", "last_name" ]
            }, {
                key: "contact",
                title: "htmlFieldsetContact",
                fields: [ "phone", "phone_mobile", "fax", "email" ]
            }, {
                key: "address",
                title: "htmlFieldsetAddress",
                fields: [ "primary_address_street", "primary_address_city", "primary_address_zipcode", "primary_address_state", "primary_address_country" ]
            }, {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "description", "lead_source", "web_url" ]
            }, {
                key: "work",
                title: "htmlFieldsetWork",
                fields: [ "company_name", "annual_revenue", "nb_employees", "industry" ]
            } ],
            displayNameList: [ [ "last_name", "first_name" ], [ "first_name", "last_name" ], [ "salutation", "first_name", "last_name" ], [ "salutation", "last_name", "first_name" ] ],
            displayDescription: [ "description" ],
            displayResumedObjectGroups: [ {
                key: "title",
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "company_name",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "web_url",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            }, {
                key: "phones",
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "phone",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "phone_mobile",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "email",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            } ],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "trophy",
                name: !0,
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: [ {
                    key: "company_name",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "web_url",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "small"
                } ]
            }, {
                key: "phones",
                synchro: !1,
                icon: "",
                name: !1,
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "phone",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "phone_mobile",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                }, {
                    key: "email",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: ""
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "trophy",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "title",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "big"
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "company_name",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "web_url",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "small"
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "phone",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "phone_mobile",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "email",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "fax",
                        title: !1,
                        prefix: "",
                        suffix: "htmlFormFaxAbbrev",
                        size: ""
                    } ]
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "c",
                brSeparated: !0,
                groups: [ {
                    title: "htmlFormTitleContactDetails",
                    size: "big",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "primary_address_street",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "primary_address_city",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "primary_address_zipcode",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "primary_address_state",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "primary_address_country",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "htmlFormTitleSegmentation",
                    size: "big",
                    fields: []
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "industry",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "nb_employees",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "annual_revenue",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "lead_source",
                        title: !1,
                        prefix: "htmlTextContactOrigin",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "converted_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Document: {
            isAttachment: !1,
            icon: "book",
            colorType: "j",
            fields: [ "document_type", "name", "mimetype", "description", "length", "path", "extension", "rootname", "filePath", "fileUrl", "parent_id", "owner_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "owner_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "parent_id",
                one: "parent",
                many: "child",
                types: [ "Account", "Contact", "Event", "Opportunity" ],
                cascadeDelete: "many"
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                rootname: {
                    title: "htmlFormName",
                    type: "",
                    autofocus: !0,
                    defaultValue: "",
                    validations: [ {
                        expr: "object.rootname.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormName'])"
                    } ]
                },
                description: {
                    title: "htmlFormDescription",
                    type: "textarea",
                    defaultValue: ""
                },
                length: {
                    title: "",
                    type: "number",
                    defaultValue: 0
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [ {
                key: "document_type",
                fields: [],
                force: !1,
                getter: "attachmentType"
            }, {
                key: "extension",
                fields: [ "name" ],
                force: !1,
                getter: "fileExtension"
            }, {
                key: "rootname",
                fields: [ "name" ],
                force: !1,
                getter: "fileRootname"
            }, {
                key: "name",
                fields: [ "rootname", "extension" ],
                force: !0,
                getter: "fileName"
            }, {
                key: "mimetype",
                fields: [ "name" ],
                force: !1,
                getter: "fileFirstMimetype"
            }, {
                key: "path",
                fields: [],
                force: !1,
                getter: "dirPath"
            }, {
                key: "filePath",
                fields: [ "path", "id", "extension" ],
                force: !1,
                getter: "filePath"
            }, {
                key: "fileUrl",
                fields: [ "filePath" ],
                force: !1,
                getter: "fileUrl"
            } ],
            editObjectGroups: [ {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "rootname", "description" ]
            } ],
            displayNameList: [ [ "name" ] ],
            displayDescription: [ "description" ],
            displayResumedObjectGroups: [],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "",
                name: !0,
                title: "",
                size: "big",
                type: "",
                brSeparated: !1,
                fields: []
            }, {
                key: "data",
                title: "",
                type: "",
                size: "smaller",
                brSeparated: !0,
                fields: [ {
                    key: "created_by_id",
                    title: !1,
                    prefix: "htmlFormCreatedBy",
                    suffix: "",
                    size: ""
                }, {
                    key: "created_date",
                    title: !1,
                    prefix: "htmlFormCreatedOn",
                    suffix: "",
                    size: ""
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "book",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Note: {
            isAttachment: !1,
            icon: "file-text-o",
            colorType: "j",
            fields: [ "title", "when", "description", "parent_id", "owner_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "owner_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "parent_id",
                one: "parent",
                many: "child",
                types: [ "Account", "Contact", "Event", "Opportunity" ],
                cascadeDelete: "many"
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                title: {
                    title: "htmlFormTitle",
                    autofocus: !0,
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.title.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormTitle'])"
                    }, {
                        expr: "object.title.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormTitle', 255])"
                    } ]
                },
                description: {
                    title: "htmlFormDescription",
                    type: "textarea",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.description.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormDescription', 32000])"
                    } ]
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [],
            editObjectGroups: [ {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "title", "description" ]
            } ],
            displayNameList: [ [ "title" ] ],
            displayDescription: [ "description" ],
            displayResumedObjectGroups: [],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "file-text-o",
                name: !0,
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: []
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "file-text-o",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "c",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "message",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Report: {
            isAttachment: !1,
            icon: "book",
            colorType: "j",
            fields: [ "title", "when", "description", "message", "contact_ids", "document_ids", "ratings", "parent_id", "owner_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "owner_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "parent_id",
                one: "parent",
                many: "child",
                types: [ "Account", "Contact", "Event", "Opportunity" ],
                cascadeDelete: "many"
            }, {
                key: "contact_ids",
                one: "mail_to",
                many: "mailed_from",
                types: [ "Contact" ]
            }, {
                key: "document_ids",
                one: "join_to",
                many: "joined_from",
                types: [ "Document" ]
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                title: {
                    title: "htmlFormTitle",
                    autofocus: !0,
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.title.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormTitle'])"
                    }, {
                        expr: "object.title.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormTitle', 255])"
                    } ]
                },
                description: {
                    title: "htmlFormDescription",
                    type: "textarea",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.description.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormDescription', 32000])"
                    } ]
                },
                message: {
                    title: "htmlFormMessage",
                    type: "textarea",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.message.length < 32000",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormMessage', 32000])"
                    } ]
                },
                ratings: {
                    title: "htmlTextRatings",
                    type: "rating",
                    defaultValue: {
                        code: "Feeling",
                        name: "Feeling",
                        type: "star",
                        value: 0
                    }
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [],
            editObjectGroups: [ {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "title", "description", "message" ]
            } ],
            displayNameList: [ [ "title" ] ],
            displayDescription: [ "description" ],
            displayResumedObjectGroups: [],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "book",
                name: !0,
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: []
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "book",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "description",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "c",
                brSeparated: !0,
                groups: [ {
                    title: "htmlTitleMailedPeople",
                    size: "big",
                    fields: [ {
                        key: "contact_ids",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "",
                        separator: " , "
                    } ]
                }, {
                    title: "htmlTitleJoinedDoc",
                    size: "big",
                    fields: [ {
                        key: "document_ids",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "",
                        separator: " , "
                    } ]
                }, {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "ratings",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "",
                        separator: "br"
                    } ]
                } ]
            }, {
                type: "e",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "message",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Plan: {
            isAttachment: !1,
            icon: "th-list",
            colorType: "j",
            fields: [ "title", "pos", "parent_id", "owner_id", "created_by_id", "created_date", "last_modified_by_id", "last_modified_date" ],
            linkFields: [ {
                key: "owner_id",
                one: "owner",
                many: "owned",
                types: [ "Contact" ]
            }, {
                key: "parent_id",
                one: "parent",
                many: "child",
                types: [ "Event", "Plan" ],
                cascadeDelete: "many"
            }, {
                key: "created_by_id",
                one: "creator",
                many: "created",
                types: [ "Contact" ]
            }, {
                key: "last_modified_by_id",
                one: "modifier",
                many: "modified",
                types: [ "Contact" ]
            } ],
            editObjectFields: {
                title: {
                    title: "htmlFormTitle",
                    autofocus: !0,
                    type: "",
                    defaultValue: "",
                    validations: [ {
                        expr: "object.title.length > 0",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorRequired', ['htmlFormTitle'])"
                    }, {
                        expr: "object.title.length < 255",
                        errorKey: "Model.createErrMsg(scope, 'htmlErrorMaxLength', ['htmlFormTitle', 255])"
                    } ]
                },
                created_date: {
                    title: "htmlFormCreatedDate",
                    type: "date",
                    defaultValue: ""
                },
                last_modified_date: {
                    title: "htmlFormLastModifiedDate",
                    type: "date",
                    defaultValue: ""
                }
            },
            calculateObjectFields: [],
            editObjectGroups: [ {
                key: "description",
                title: "htmlFieldsetDescription",
                fields: [ "title" ]
            } ],
            displayNameList: [ [ "title" ] ],
            displayDescription: [],
            displayResumedObjectGroups: [],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "th-list",
                name: !0,
                title: "",
                size: "",
                type: "",
                brSeparated: !1,
                fields: []
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "th-list",
                    name: !0,
                    title: "",
                    size: "bigger",
                    fields: []
                } ]
            }, {
                type: "d",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "",
                    fields: [ {
                        key: "pos",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            }, {
                type: "z",
                brSeparated: !0,
                groups: [ {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "created_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "created_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                }, {
                    title: "",
                    size: "smaller",
                    fields: [ {
                        key: "last_modified_by_id",
                        title: !0,
                        prefix: "",
                        suffix: "",
                        size: ""
                    }, {
                        key: "last_modified_date",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: ""
                    } ]
                } ]
            } ]
        },
        Attachee: {
            isAttachment: !0,
            icon: "file",
            colorType: "m",
            fields: [ "event_id", "document_id" ],
            linkFields: [ {
                key: "event_id",
                one: "attached",
                many: "attachee",
                types: [ "Account", "Contact", "Event", "Opportunity" ],
                cascadeDelete: "many"
            }, {
                key: "document_id",
                one: "attachee",
                many: "attached",
                types: [ "Document" ],
                cascadeDelete: "many"
            } ],
            attachee: "document_id",
            attached: "event_id",
            editObjectFields: {},
            calculateObjectFields: [],
            editObjectGroups: [],
            displayNameList: [ [] ],
            displayDescription: [],
            displayResumedObjectGroups: [],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "file",
                name: !1,
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "event_id",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "",
                    separator: ""
                }, {
                    key: "document_id",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "",
                    separator: ""
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "file",
                    name: !1,
                    title: "",
                    size: "bigger",
                    fields: [ {
                        key: "event_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "",
                        separator: ""
                    }, {
                        key: "document_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "",
                        separator: ""
                    } ]
                } ]
            } ]
        },
        Attendee: {
            isAttachment: !0,
            icon: "user",
            colorType: "m",
            fields: [ "event_id", "relation_id" ],
            linkFields: [ {
                key: "event_id",
                one: "attended",
                many: "attendee",
                types: [ "Event" ],
                cascadeDelete: "many"
            }, {
                key: "relation_id",
                one: "attendee",
                many: "attended",
                types: [ "Contact" ],
                cascadeDelete: "many"
            } ],
            attachee: "relation_id",
            attached: "event_id",
            editObjectFields: {},
            calculateObjectFields: [],
            editObjectGroups: [],
            displayNameList: [ [] ],
            displayDescription: [],
            displayResumedObjectGroups: [],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "user",
                name: !1,
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "event_id",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "",
                    separator: ""
                }, {
                    key: "relation_id",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "",
                    separator: ""
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "user",
                    name: !1,
                    title: "",
                    size: "bigger",
                    fields: [ {
                        key: "event_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "",
                        separator: ""
                    }, {
                        key: "relation_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "",
                        separator: ""
                    } ]
                } ]
            } ]
        },
        Plannee: {
            isAttachment: !0,
            icon: "file",
            colorType: "m",
            fields: [ "parent_id", "object_id" ],
            linkFields: [ {
                key: "parent_id",
                one: "planned",
                many: "plannee",
                types: [ "Event", "Plan" ],
                cascadeDelete: "many"
            }, {
                key: "object_id",
                one: "plannee",
                many: "planned",
                types: [ "Document", "Note", "Report" ],
                cascadeDelete: "many"
            } ],
            attachee: "object_id",
            attached: "parent_id",
            editObjectFields: {},
            calculateObjectFields: [],
            editObjectGroups: [],
            displayNameList: [ [] ],
            displayDescription: [],
            displayResumedObjectGroups: [],
            displaySummarizedObjectGroups: [ {
                key: "title",
                synchro: !0,
                icon: "file",
                name: !1,
                title: "",
                size: "",
                type: "",
                brSeparated: !0,
                fields: [ {
                    key: "parent_id",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "",
                    separator: ""
                }, {
                    key: "object_id",
                    title: !1,
                    prefix: "",
                    suffix: "",
                    size: "",
                    separator: ""
                } ]
            } ],
            displayDetailedObjectCards: [ {
                type: "a",
                brSeparated: !0,
                groups: [ {
                    synchro: !0,
                    icon: "file",
                    name: !1,
                    title: "",
                    size: "bigger",
                    fields: [ {
                        key: "parent_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "",
                        separator: ""
                    }, {
                        key: "object_id",
                        title: !1,
                        prefix: "",
                        suffix: "",
                        size: "",
                        separator: ""
                    } ]
                } ]
            } ]
        }
    }, Model.objectArrays = {
        Facet: {
            facets_ids: !0,
            items_ids: !0
        },
        Contact: {},
        Account: {},
        Event: {},
        Task: {},
        Opportunity: {},
        Lead: {},
        Document: {},
        Note: {},
        Report: {
            contact_ids: !0,
            document_ids: !0,
            ratings: !0
        },
        Plan: {},
        Attendee: {},
        Attachee: {},
        Plannee: {}
    }, Model.allPossibleLinkActionList = [ {
        fromType: "Account",
        fromLink: "child",
        toType: "Account"
    }, {
        fromType: "Account",
        fromLink: "parent",
        toType: "Account"
    }, {
        fromType: "Account",
        fromLink: "accounted",
        toType: "Contact"
    }, {
        fromType: "Account",
        fromLink: "attachee",
        toType: "Document"
    }, {
        fromType: "Account",
        fromLink: "child",
        toType: "Document"
    }, {
        fromType: "Account",
        fromLink: "affected",
        toType: "Event"
    }, {
        fromType: "Account",
        fromLink: "faceter",
        toType: "Facet"
    }, {
        fromType: "Account",
        fromLink: "child",
        toType: "Note"
    }, {
        fromType: "Account",
        fromLink: "accounted",
        toType: "Opportunity"
    }, {
        fromType: "Account",
        fromLink: "child",
        toType: "Report"
    }, {
        fromType: "Account",
        fromLink: "affected",
        toType: "Task"
    }, {
        fromType: "Contact",
        fromLink: "accounter",
        toType: "Account"
    }, {
        fromType: "Contact",
        fromLink: "manager",
        toType: "Contact"
    }, {
        fromType: "Contact",
        fromLink: "managed",
        toType: "Contact"
    }, {
        fromType: "Contact",
        fromLink: "attachee",
        toType: "Document"
    }, {
        fromType: "Contact",
        fromLink: "child",
        toType: "Document"
    }, {
        fromType: "Contact",
        fromLink: "attended",
        toType: "Event"
    }, {
        fromType: "Contact",
        fromLink: "led",
        toType: "Event"
    }, {
        fromType: "Contact",
        fromLink: "faceter",
        toType: "Facet"
    }, {
        fromType: "Contact",
        fromLink: "child",
        toType: "Note"
    }, {
        fromType: "Contact",
        fromLink: "accounted",
        toType: "Opportunity"
    }, {
        fromType: "Contact",
        fromLink: "mailed_from",
        toType: "Report"
    }, {
        fromType: "Contact",
        fromLink: "child",
        toType: "Report"
    }, {
        fromType: "Contact",
        fromLink: "led",
        toType: "Task"
    }, {
        fromType: "Document",
        fromLink: "attached",
        toType: "Account"
    }, {
        fromType: "Document",
        fromLink: "parent",
        toType: "Account"
    }, {
        fromType: "Document",
        fromLink: "attached",
        toType: "Contact"
    }, {
        fromType: "Document",
        fromLink: "parent",
        toType: "Contact"
    }, {
        fromType: "Document",
        fromLink: "attached",
        toType: "Event"
    }, {
        fromType: "Document",
        fromLink: "planned",
        toType: "Event"
    }, {
        fromType: "Document",
        fromLink: "parent",
        toType: "Event"
    }, {
        fromType: "Document",
        fromLink: "faceter",
        toType: "Facet"
    }, {
        fromType: "Document",
        fromLink: "attached",
        toType: "Opportunity"
    }, {
        fromType: "Document",
        fromLink: "parent",
        toType: "Opportunity"
    }, {
        fromType: "Document",
        fromLink: "planned",
        toType: "Plan"
    }, {
        fromType: "Document",
        fromLink: "joined_from",
        toType: "Report"
    }, {
        fromType: "Event",
        fromLink: "affecter",
        toType: "Account"
    }, {
        fromType: "Event",
        fromLink: "attendee",
        toType: "Contact"
    }, {
        fromType: "Event",
        fromLink: "leader",
        toType: "Contact"
    }, {
        fromType: "Event",
        fromLink: "attachee",
        toType: "Document"
    }, {
        fromType: "Event",
        fromLink: "plannee",
        toType: "Document"
    }, {
        fromType: "Event",
        fromLink: "child",
        toType: "Document"
    }, {
        fromType: "Event",
        fromLink: "faceter",
        toType: "Facet"
    }, {
        fromType: "Event",
        fromLink: "plannee",
        toType: "Note"
    }, {
        fromType: "Event",
        fromLink: "child",
        toType: "Note"
    }, {
        fromType: "Event",
        fromLink: "affecter",
        toType: "Opportunity"
    }, {
        fromType: "Event",
        fromLink: "child",
        toType: "Plan"
    }, {
        fromType: "Event",
        fromLink: "plannee",
        toType: "Report"
    }, {
        fromType: "Event",
        fromLink: "child",
        toType: "Report"
    }, {
        fromType: "Facet",
        fromLink: "faceted",
        toType: "Account"
    }, {
        fromType: "Facet",
        fromLink: "faceted",
        toType: "Contact"
    }, {
        fromType: "Facet",
        fromLink: "faceted",
        toType: "Document"
    }, {
        fromType: "Facet",
        fromLink: "faceted",
        toType: "Event"
    }, {
        fromType: "Facet",
        fromLink: "child",
        toType: "Facet"
    }, {
        fromType: "Facet",
        fromLink: "parent",
        toType: "Facet"
    }, {
        fromType: "Facet",
        fromLink: "faceted",
        toType: "Lead"
    }, {
        fromType: "Facet",
        fromLink: "faceted",
        toType: "Opportunity"
    }, {
        fromType: "Facet",
        fromLink: "faceted",
        toType: "Task"
    }, {
        fromType: "Lead",
        fromLink: "faceter",
        toType: "Facet"
    }, {
        fromType: "Note",
        fromLink: "parent",
        toType: "Account"
    }, {
        fromType: "Note",
        fromLink: "parent",
        toType: "Contact"
    }, {
        fromType: "Note",
        fromLink: "planned",
        toType: "Event"
    }, {
        fromType: "Note",
        fromLink: "parent",
        toType: "Event"
    }, {
        fromType: "Note",
        fromLink: "parent",
        toType: "Opportunity"
    }, {
        fromType: "Note",
        fromLink: "planned",
        toType: "Plan"
    }, {
        fromType: "Opportunity",
        fromLink: "accounter",
        toType: "Account"
    }, {
        fromType: "Opportunity",
        fromLink: "accounter",
        toType: "Contact"
    }, {
        fromType: "Opportunity",
        fromLink: "attachee",
        toType: "Document"
    }, {
        fromType: "Opportunity",
        fromLink: "child",
        toType: "Document"
    }, {
        fromType: "Opportunity",
        fromLink: "affected",
        toType: "Event"
    }, {
        fromType: "Opportunity",
        fromLink: "faceter",
        toType: "Facet"
    }, {
        fromType: "Opportunity",
        fromLink: "child",
        toType: "Note"
    }, {
        fromType: "Opportunity",
        fromLink: "child",
        toType: "Report"
    }, {
        fromType: "Opportunity",
        fromLink: "affected",
        toType: "Task"
    }, {
        fromType: "Plan",
        fromLink: "plannee",
        toType: "Document"
    }, {
        fromType: "Plan",
        fromLink: "parent",
        toType: "Event"
    }, {
        fromType: "Plan",
        fromLink: "plannee",
        toType: "Note"
    }, {
        fromType: "Plan",
        fromLink: "parent",
        toType: "Plan"
    }, {
        fromType: "Plan",
        fromLink: "child",
        toType: "Plan"
    }, {
        fromType: "Plan",
        fromLink: "plannee",
        toType: "Report"
    }, {
        fromType: "Report",
        fromLink: "parent",
        toType: "Account"
    }, {
        fromType: "Report",
        fromLink: "mail_to",
        toType: "Contact"
    }, {
        fromType: "Report",
        fromLink: "parent",
        toType: "Contact"
    }, {
        fromType: "Report",
        fromLink: "join_to",
        toType: "Document"
    }, {
        fromType: "Report",
        fromLink: "planned",
        toType: "Event"
    }, {
        fromType: "Report",
        fromLink: "parent",
        toType: "Event"
    }, {
        fromType: "Report",
        fromLink: "parent",
        toType: "Opportunity"
    }, {
        fromType: "Report",
        fromLink: "planned",
        toType: "Plan"
    }, {
        fromType: "Task",
        fromLink: "affecter",
        toType: "Account"
    }, {
        fromType: "Task",
        fromLink: "leader",
        toType: "Contact"
    }, {
        fromType: "Task",
        fromLink: "faceter",
        toType: "Facet"
    }, {
        fromType: "Task",
        fromLink: "affecter",
        toType: "Opportunity"
    } ], Model.linkActionMap = {};
    for (var i = 0, n = Model.allPossibleLinkActionList.length; n > i; i++) {
        var desc = Model.allPossibleLinkActionList[i];
        a4p.isUndefined(Model.linkActionMap[desc.fromType]) && (Model.linkActionMap[desc.fromType] = {}), 
        a4p.isUndefined(Model.linkActionMap[desc.fromType][desc.toType]) && (Model.linkActionMap[desc.fromType][desc.toType] = []), 
        Model.linkActionMap[desc.fromType][desc.toType].push(desc.fromLink);
    }
    Model.allTypes = [], Model.objectTypes = [], Model.attachTypes = [], Model.isAttachType = {}, 
    Model.isAutonomousType = {};
    for (var a4p_type in Model.a4p_types) if (Model.a4p_types.hasOwnProperty(a4p_type)) {
        var desc = Model.a4p_types[a4p_type];
        desc.displayName = desc.displayNameList[0] || [], desc.isAttachment ? (Model.attachTypes.push(a4p_type), 
        Model.isAttachType[a4p_type] = !0) : (Model.objectTypes.push(a4p_type), Model.isAttachType[a4p_type] = !1), 
        Model.allTypes.push(a4p_type), desc.isAutonomousType = !0, desc.linkDescs = {};
        for (var linkIdx = 0; linkIdx < desc.linkFields.length; linkIdx++) {
            var linkDesc = desc.linkFields[linkIdx];
            desc.linkDescs[linkDesc.key] = linkDesc, "many" != linkDesc.cascadeDelete || 1 == linkDesc.types.length && linkDesc.types[0] == a4p_type || (desc.isAutonomousType = !1);
        }
    }
    return Model.formatEventName = function(date_start, name) {
        var date = "";
        return date_start && (date = date_start.substring(0, 16)), name = date + " " + name;
    }, Model.getTypeIcon = function(type) {
        var result = "";
        return type && a4p.isDefined(Model.a4p_types[type]) && (result = Model.a4p_types[type].icon), 
        result;
    }, Model.getTypeColor = function(type) {
        var result = "";
        return type && a4p.isDefined(Model.a4p_types[type]) && (result = Model.a4p_types[type].colorType), 
        result;
    }, Model.getItemIcon = function(item) {
        var result = "";
        return null != item && a4p.isDefined(Model.a4p_types[item.a4p_type]) && (result = Model.a4p_types[item.a4p_type].icon), 
        result;
    }, Model.getItemColor = function(item) {
        var result = "";
        return null != item && a4p.isDefined(Model.a4p_types[item.a4p_type]) && (result = Model.a4p_types[item.a4p_type].colorType), 
        result;
    }, Model.getItemHtmlDescription = function(item) {
        var result = "";
        if (null != item && a4p.isDefined(Model.a4p_types[item.a4p_type])) {
            for (var fieldNameIdx = 0; fieldNameIdx < Model.a4p_types[item.a4p_type].displayDescription.length; fieldNameIdx++) {
                var fieldName = Model.a4p_types[item.a4p_type].displayDescription[fieldNameIdx];
                result = result + " " + item[fieldName];
            }
            result = "<p>" + result.trim() + "</p>";
        }
        return result;
    }, Model.files = {
        Document: {
            filePath: "filePath",
            fileName: "name",
            fileExtension: "extension",
            parent: "parent_id"
        }
    }, Model.mimetypes = {
        "3dm": [ "x-world/x-3dmf" ],
        "3dmf": [ "x-world/x-3dmf" ],
        a: [ "application/octet-stream" ],
        aab: [ "application/x-authorware-bin" ],
        aam: [ "application/x-authorware-map" ],
        aas: [ "application/x-authorware-seg" ],
        abc: [ "text/vnd.abc" ],
        acgi: [ "text/html" ],
        afl: [ "video/animaflex" ],
        ai: [ "application/postscript" ],
        aif: [ "audio/aiff", "audio/x-aiff" ],
        aifc: [ "audio/aiff", "audio/x-aiff" ],
        aiff: [ "audio/aiff", "audio/x-aiff" ],
        aim: [ "application/x-aim" ],
        aip: [ "text/x-audiosoft-intra" ],
        ani: [ "application/x-navi-animation" ],
        aos: [ "application/x-nokia-9000-communicator-add-on-software" ],
        aps: [ "application/mime" ],
        arc: [ "application/octet-stream" ],
        arj: [ "application/arj", "application/octet-stream" ],
        art: [ "image/x-jg" ],
        asf: [ "video/x-ms-asf" ],
        asm: [ "text/x-asm" ],
        asp: [ "text/asp" ],
        asx: [ "application/x-mplayer2", "video/x-ms-asf", "video/x-ms-asf-plugin" ],
        au: [ "audio/basic", "audio/x-au" ],
        avi: [ "video/avi", "video/msvideo", "video/x-msvideo", "application/x-troff-msvideo" ],
        avs: [ "video/avs-video" ],
        bcpio: [ "application/x-bcpio" ],
        bin: [ "application/octet-stream", "application/mac-binary", "application/macbinary", "application/x-binary", "application/x-macbinary" ],
        bm: [ "image/bmp" ],
        bmp: [ "image/bmp", "image/x-windows-bmp" ],
        boo: [ "application/book" ],
        book: [ "application/book" ],
        boz: [ "application/x-bzip2" ],
        bsh: [ "application/x-bsh" ],
        bz: [ "application/x-bzip" ],
        bz2: [ "application/x-bzip2" ],
        c: [ "text/plain", "text/x-c" ],
        "c++": [ "text/plain" ],
        cat: [ "application/vnd.ms-pki.seccat" ],
        cc: [ "text/plain", "text/x-c" ],
        ccad: [ "application/clariscad" ],
        cco: [ "application/x-cocoa" ],
        cdf: [ "application/cdf", "application/x-cdf", "application/x-netcdf" ],
        cer: [ "application/pkix-cert", "application/x-x509-ca-cert" ],
        cha: [ "application/x-chat" ],
        chat: [ "application/x-chat" ],
        "class": [ "application/java", "application/java-byte-code", "application/x-java-class" ],
        com: [ "application/octet-stream", "text/plain" ],
        conf: [ "text/plain" ],
        cpio: [ "application/x-cpio" ],
        cpp: [ "text/x-c" ],
        cpt: [ "application/mac-compactpro", "application/x-compactpro", "application/x-cpt" ],
        crl: [ "application/pkcs-crl", "application/pkix-crl" ],
        crt: [ "application/pkix-cert", "application/x-x509-ca-cert", "application/x-x509-user-cert" ],
        csh: [ "application/x-csh", "text/x-script.csh" ],
        css: [ "application/x-pointplus", "text/css" ],
        cxx: [ "text/plain" ],
        dcr: [ "application/x-director" ],
        deepv: [ "application/x-deepv" ],
        def: [ "text/plain" ],
        der: [ "application/x-x509-ca-cert" ],
        dif: [ "video/x-dv" ],
        dir: [ "application/x-director" ],
        dl: [ "video/dl", "video/x-dl" ],
        doc: [ "application/msword" ],
        docx: [ "application/msword" ],
        dot: [ "application/msword" ],
        dp: [ "application/commonground" ],
        drw: [ "application/drafting" ],
        dump: [ "application/octet-stream" ],
        dv: [ "video/x-dv" ],
        dvi: [ "application/x-dvi" ],
        dwf: [ "drawing/x-dwf", "model/vnd.dwf" ],
        dwg: [ "application/acad", "image/vnd.dwg", "image/x-dwg" ],
        dxf: [ "application/dxf", "image/vnd.dwg", "image/x-dwg" ],
        dxr: [ "application/x-director" ],
        el: [ "text/x-script.elisp" ],
        elc: [ "application/x-bytecode.elisp", "application/x-elc" ],
        env: [ "application/x-envoy" ],
        eps: [ "application/postscript" ],
        es: [ "application/x-esrehber" ],
        etx: [ "text/x-setext" ],
        evy: [ "application/envoy", "application/x-envoy" ],
        exe: [ "application/octet-stream" ],
        f: [ "text/plain", "text/x-fortran" ],
        f77: [ "text/x-fortran" ],
        f90: [ "text/plain", "text/x-fortran" ],
        fdf: [ "application/vnd.fdf" ],
        fif: [ "application/fractals", "image/fif" ],
        fli: [ "video/fli", "video/x-fli" ],
        flo: [ "image/florian" ],
        flx: [ "text/vnd.fmi.flexstor" ],
        fmf: [ "video/x-atomic3d-feature" ],
        "for": [ "text/plain", "text/x-fortran" ],
        fpx: [ "image/vnd.fpx", "image/vnd.net-fpx" ],
        frl: [ "application/freeloader" ],
        funk: [ "audio/make" ],
        g: [ "text/plain" ],
        g3: [ "image/g3fax" ],
        gif: [ "image/gif" ],
        gl: [ "video/gl", "video/x-gl" ],
        gsd: [ "audio/x-gsm" ],
        gsm: [ "audio/x-gsm" ],
        gsp: [ "application/x-gsp" ],
        gss: [ "application/x-gss" ],
        gtar: [ "application/x-gtar" ],
        gz: [ "application/x-compressed", "application/x-gzip" ],
        gzip: [ "application/x-gzip", "multipart/x-gzip" ],
        h: [ "text/plain", "text/x-h" ],
        hdf: [ "application/x-hdf" ],
        help: [ "application/x-helpfile" ],
        hgl: [ "application/vnd.hp-hpgl" ],
        hh: [ "text/plain", "text/x-h" ],
        hlb: [ "text/x-script" ],
        hlp: [ "application/hlp", "application/x-helpfile", "application/x-winhelp" ],
        hpg: [ "application/vnd.hp-hpgl" ],
        hpgl: [ "application/vnd.hp-hpgl" ],
        hqx: [ "application/binhex", "application/binhex4", "application/mac-binhex", "application/mac-binhex40", "application/x-binhex40", "application/x-mac-binhex40" ],
        hta: [ "application/hta" ],
        htc: [ "text/x-component" ],
        htm: [ "text/html" ],
        html: [ "text/html" ],
        htmls: [ "text/html" ],
        htt: [ "text/webviewhtml" ],
        htx: [ "text/html" ],
        ice: [ "x-conference/x-cooltalk" ],
        ico: [ "image/x-icon" ],
        idc: [ "text/plain" ],
        ief: [ "image/ief" ],
        iefs: [ "image/ief" ],
        iges: [ "application/iges", "model/iges" ],
        igs: [ "application/iges", "model/iges" ],
        ima: [ "application/x-ima" ],
        imap: [ "application/x-httpd-imap" ],
        inf: [ "application/inf" ],
        ins: [ "application/x-internett-signup" ],
        ip: [ "application/x-ip2" ],
        isu: [ "video/x-isvideo" ],
        it: [ "audio/it" ],
        iv: [ "application/x-inventor" ],
        ivr: [ "i-world/i-vrml" ],
        ivy: [ "application/x-livescreen" ],
        jam: [ "audio/x-jam" ],
        jav: [ "text/plain", "text/x-java-source" ],
        java: [ "text/plain", "text/x-java-source" ],
        jcm: [ "application/x-java-commerce" ],
        jfif: [ "image/jpeg", "image/pjpeg" ],
        "jfif-tbnl": [ "image/jpeg" ],
        jpe: [ "image/jpeg", "image/pjpeg" ],
        jpeg: [ "image/jpeg", "image/pjpeg" ],
        jpg: [ "image/jpeg", "image/pjpeg" ],
        jps: [ "image/x-jps" ],
        js: [ "application/x-javascript" ],
        jut: [ "image/jutvision" ],
        kar: [ "audio/midi", "music/x-karaoke" ],
        ksh: [ "application/x-ksh", "text/x-script.ksh" ],
        la: [ "audio/nspaudio", "audio/x-nspaudio" ],
        lam: [ "audio/x-liveaudio" ],
        latex: [ "application/x-latex" ],
        lha: [ "application/lha", "application/octet-stream", "application/x-lha" ],
        lhx: [ "application/octet-stream" ],
        list: [ "text/plain" ],
        lma: [ "audio/nspaudio", "audio/x-nspaudio" ],
        log: [ "text/plain" ],
        lsp: [ "application/x-lisp", "text/x-script.lisp" ],
        lst: [ "text/plain" ],
        lsx: [ "text/x-la-asf" ],
        ltx: [ "application/x-latex" ],
        lzh: [ "application/octet-stream", "application/x-lzh" ],
        lzx: [ "application/lzx", "application/octet-stream", "application/x-lzx" ],
        m: [ "text/plain", "text/x-m" ],
        m1v: [ "video/mpeg" ],
        m2a: [ "audio/mpeg" ],
        m2v: [ "video/mpeg" ],
        m3u: [ "audio/x-mpequrl" ],
        man: [ "application/x-troff-man" ],
        map: [ "application/x-navimap" ],
        mar: [ "text/plain" ],
        mbd: [ "application/mbedlet" ],
        mc$: [ "application/x-magic-cap-package-1.0" ],
        mcd: [ "application/mcad", "application/x-mathcad" ],
        mcf: [ "image/vasa", "text/mcf" ],
        mcp: [ "application/netmc" ],
        me: [ "application/x-troff-me" ],
        mht: [ "message/rfc822" ],
        mhtml: [ "message/rfc822" ],
        mid: [ "application/x-midi", "audio/midi", "audio/x-mid", "audio/x-midi", "music/crescendo", "x-music/x-midi" ],
        midi: [ "application/x-midi", "audio/midi", "audio/x-mid", "audio/x-midi", "music/crescendo", "x-music/x-midi" ],
        mif: [ "application/x-frame", "application/x-mif" ],
        mime: [ "message/rfc822", "www/mime" ],
        mjf: [ "audio/x-vnd.audioexplosion.mjuicemediafile" ],
        mjpg: [ "video/x-motion-jpeg" ],
        mm: [ "application/base64", "application/x-meme" ],
        mme: [ "application/base64" ],
        mod: [ "audio/mod", "audio/x-mod" ],
        moov: [ "video/quicktime" ],
        mov: [ "video/quicktime" ],
        movie: [ "video/x-sgi-movie" ],
        mp2: [ "audio/mpeg", "audio/x-mpeg", "video/mpeg", "video/x-mpeg", "video/x-mpeq2a" ],
        mp3: [ "audio/mpeg3", "audio/x-mpeg-3", "video/mpeg", "video/x-mpeg" ],
        mp4: [ "video/mp4" ],
        mpa: [ "audio/mpeg", "video/mpeg" ],
        mpc: [ "application/x-project" ],
        mpe: [ "video/mpeg" ],
        mpeg: [ "video/mpeg" ],
        mpg: [ "audio/mpeg", "video/mpeg" ],
        mpga: [ "audio/mpeg" ],
        mpp: [ "application/vnd.ms-project" ],
        mpt: [ "application/x-project" ],
        mpv: [ "application/x-project" ],
        mpx: [ "application/x-project" ],
        mrc: [ "application/marc" ],
        ms: [ "application/x-troff-ms" ],
        mv: [ "video/x-sgi-movie" ],
        my: [ "audio/make" ],
        mzz: [ "application/x-vnd.audioexplosion.mzz" ],
        nap: [ "image/naplps" ],
        naplps: [ "image/naplps" ],
        nc: [ "application/x-netcdf" ],
        ncm: [ "application/vnd.nokia.configuration-message" ],
        nif: [ "image/x-niff" ],
        niff: [ "image/x-niff" ],
        nix: [ "application/x-mix-transfer" ],
        nsc: [ "application/x-conference" ],
        nvd: [ "application/x-navidoc" ],
        o: [ "application/octet-stream" ],
        oda: [ "application/oda" ],
        ogv: [ "video/ogg" ],
        omc: [ "application/x-omc" ],
        omcd: [ "application/x-omcdatamaker" ],
        omcr: [ "application/x-omcregerator" ],
        p: [ "text/x-pascal" ],
        p10: [ "application/pkcs10", "application/x-pkcs10" ],
        p12: [ "application/pkcs-12", "application/x-pkcs12" ],
        p7a: [ "application/x-pkcs7-signature" ],
        p7c: [ "application/pkcs7-mime", "application/x-pkcs7-mime" ],
        p7m: [ "application/pkcs7-mime", "application/x-pkcs7-mime" ],
        p7r: [ "application/x-pkcs7-certreqresp" ],
        p7s: [ "application/pkcs7-signature" ],
        part: [ "application/pro_eng" ],
        pas: [ "text/pascal" ],
        pbm: [ "image/x-portable-bitmap" ],
        pcl: [ "application/vnd.hp-pcl", "application/x-pcl" ],
        pct: [ "image/x-pict" ],
        pcx: [ "image/x-pcx" ],
        pdb: [ "chemical/x-pdb" ],
        pdf: [ "application/pdf" ],
        pfunk: [ "audio/make", "audio/make.my.funk" ],
        pgm: [ "image/x-portable-graymap", "image/x-portable-greymap" ],
        pic: [ "image/pict" ],
        pict: [ "image/pict" ],
        pkg: [ "application/x-newton-compatible-pkg" ],
        pko: [ "application/vnd.ms-pki.pko" ],
        pl: [ "text/plain", "text/x-script.perl" ],
        plx: [ "application/x-pixclscript" ],
        pm: [ "image/x-xpixmap", "text/x-script.perl-module" ],
        pm4: [ "application/x-pagemaker" ],
        pm5: [ "application/x-pagemaker" ],
        png: [ "image/png" ],
        pnm: [ "application/x-portable-anymap", "image/x-portable-anymap" ],
        pot: [ "application/mspowerpoint", "application/vnd.ms-powerpoint" ],
        pov: [ "model/x-pov" ],
        ppa: [ "application/vnd.ms-powerpoint" ],
        ppm: [ "image/x-portable-pixmap" ],
        pps: [ "application/mspowerpoint", "application/vnd.ms-powerpoint" ],
        ppt: [ "application/mspowerpoint", "application/powerpoint", "application/vnd.ms-powerpoint", "application/x-mspowerpoint" ],
        ppz: [ "application/mspowerpoint" ],
        pre: [ "application/x-freelance" ],
        prt: [ "application/pro_eng" ],
        ps: [ "application/postscript" ],
        psd: [ "application/octet-stream" ],
        pvu: [ "paleovu/x-pv" ],
        pwz: [ "application/vnd.ms-powerpoint" ],
        py: [ "text/x-script.phyton" ],
        pyc: [ "applicaiton/x-bytecode.python" ],
        qcp: [ "audio/vnd.qcelp" ],
        qd3: [ "x-world/x-3dmf" ],
        qd3d: [ "x-world/x-3dmf" ],
        qif: [ "image/x-quicktime" ],
        qt: [ "video/quicktime" ],
        qtc: [ "video/x-qtc" ],
        qti: [ "image/x-quicktime" ],
        qtif: [ "image/x-quicktime" ],
        ra: [ "audio/x-pn-realaudio", "audio/x-pn-realaudio-plugin", "audio/x-realaudio" ],
        ram: [ "audio/x-pn-realaudio" ],
        ras: [ "application/x-cmu-raster", "image/cmu-raster", "image/x-cmu-raster" ],
        rast: [ "image/cmu-raster" ],
        rexx: [ "text/x-script.rexx" ],
        rf: [ "image/vnd.rn-realflash" ],
        rgb: [ "image/x-rgb" ],
        rm: [ "application/vnd.rn-realmedia", "audio/x-pn-realaudio" ],
        rmi: [ "audio/mid" ],
        rmm: [ "audio/x-pn-realaudio" ],
        rmp: [ "audio/x-pn-realaudio", "audio/x-pn-realaudio-plugin" ],
        rng: [ "application/ringing-tones", "application/vnd.nokia.ringing-tone" ],
        rnx: [ "application/vnd.rn-realplayer" ],
        roff: [ "application/x-troff" ],
        rp: [ "image/vnd.rn-realpix" ],
        rpm: [ "audio/x-pn-realaudio-plugin" ],
        rt: [ "text/richtext", "text/vnd.rn-realtext" ],
        rtf: [ "application/rtf", "application/x-rtf", "text/richtext" ],
        rtx: [ "application/rtf", "text/richtext" ],
        rv: [ "video/vnd.rn-realvideo" ],
        s: [ "text/x-asm" ],
        s3m: [ "audio/s3m" ],
        saveme: [ "application/octet-stream" ],
        sbk: [ "application/x-tbook" ],
        scm: [ "application/x-lotusscreencam", "text/x-script.guile", "text/x-script.scheme", "video/x-scm" ],
        sdml: [ "text/plain" ],
        sdp: [ "application/sdp", "application/x-sdp" ],
        sdr: [ "application/sounder" ],
        sea: [ "application/sea", "application/x-sea" ],
        set: [ "application/set" ],
        sgm: [ "text/sgml", "text/x-sgml" ],
        sgml: [ "text/sgml", "text/x-sgml" ],
        sh: [ "application/x-bsh", "application/x-sh", "application/x-shar", "text/x-script.sh" ],
        shar: [ "application/x-bsh", "application/x-shar" ],
        shtml: [ "text/html", "text/x-server-parsed-html" ],
        sid: [ "audio/x-psid" ],
        sit: [ "application/x-sit", "application/x-stuffit" ],
        skd: [ "application/x-koan" ],
        skm: [ "application/x-koan" ],
        skp: [ "application/x-koan" ],
        skt: [ "application/x-koan" ],
        sl: [ "application/x-seelogo" ],
        smi: [ "application/smil" ],
        smil: [ "application/smil" ],
        snd: [ "audio/basic", "audio/x-adpcm" ],
        sol: [ "application/solids" ],
        spc: [ "application/x-pkcs7-certificates", "text/x-speech" ],
        spl: [ "application/futuresplash" ],
        spr: [ "application/x-sprite" ],
        sprite: [ "application/x-sprite" ],
        src: [ "application/x-wais-source" ],
        ssi: [ "text/x-server-parsed-html" ],
        ssm: [ "application/streamingmedia" ],
        sst: [ "application/vnd.ms-pki.certstore" ],
        step: [ "application/step" ],
        stl: [ "application/sla", "application/vnd.ms-pki.stl", "application/x-navistyle" ],
        stp: [ "application/step" ],
        sv4cpio: [ "application/x-sv4cpio" ],
        sv4crc: [ "application/x-sv4crc" ],
        svf: [ "image/vnd.dwg", "image/x-dwg" ],
        svr: [ "application/x-world", "x-world/x-svr" ],
        swf: [ "application/x-shockwave-flash" ],
        t: [ "application/x-troff" ],
        talk: [ "text/x-speech" ],
        tar: [ "application/x-tar" ],
        tbk: [ "application/toolbook", "application/x-tbook" ],
        tcl: [ "application/x-tcl", "text/x-script.tcl" ],
        tcsh: [ "text/x-script.tcsh" ],
        tex: [ "application/x-tex" ],
        texi: [ "application/x-texinfo" ],
        texinfo: [ "application/x-texinfo" ],
        text: [ "application/plain", "text/plain" ],
        tgz: [ "application/gnutar", "application/x-compressed" ],
        tif: [ "image/tiff", "image/x-tiff" ],
        tiff: [ "image/tiff", "image/x-tiff" ],
        tr: [ "application/x-troff" ],
        tsi: [ "audio/tsp-audio" ],
        tsp: [ "application/dsptype", "audio/tsplayer" ],
        tsv: [ "text/tab-separated-values" ],
        turbot: [ "image/florian" ],
        txt: [ "text/plain" ],
        uil: [ "text/x-uil" ],
        uni: [ "text/uri-list" ],
        unis: [ "text/uri-list" ],
        unv: [ "application/i-deas" ],
        uri: [ "text/uri-list" ],
        uris: [ "text/uri-list" ],
        ustar: [ "application/x-ustar", "multipart/x-ustar" ],
        uu: [ "application/octet-stream", "text/x-uuencode" ],
        uue: [ "text/x-uuencode" ],
        vcd: [ "application/x-cdlink" ],
        vcs: [ "text/x-vcalendar" ],
        vda: [ "application/vda" ],
        vdo: [ "video/vdo" ],
        vew: [ "application/groupwise" ],
        viv: [ "video/vivo", "video/vnd.vivo" ],
        vivo: [ "video/vivo", "video/vnd.vivo" ],
        vmd: [ "application/vocaltec-media-desc" ],
        vmf: [ "application/vocaltec-media-file" ],
        voc: [ "audio/voc", "audio/x-voc" ],
        vos: [ "video/vosaic" ],
        vox: [ "audio/voxware" ],
        vqe: [ "audio/x-twinvq-plugin" ],
        vqf: [ "audio/x-twinvq" ],
        vql: [ "audio/x-twinvq-plugin" ],
        vrml: [ "application/x-vrml", "model/vrml", "x-world/x-vrml" ],
        vrt: [ "x-world/x-vrt" ],
        vsd: [ "application/x-visio" ],
        vst: [ "application/x-visio" ],
        vsw: [ "application/x-visio" ],
        w60: [ "application/wordperfect6.0" ],
        w61: [ "application/wordperfect6.1" ],
        w6w: [ "application/msword" ],
        wav: [ "audio/wav", "audio/x-wav" ],
        wb1: [ "application/x-qpro" ],
        wbmp: [ "image/vnd.wap.wbmp" ],
        web: [ "application/vnd.xara" ],
        webm: [ "video/webm" ],
        wiz: [ "application/msword" ],
        wk1: [ "application/x-123" ],
        wmf: [ "windows/metafile" ],
        wml: [ "text/vnd.wap.wml" ],
        wmlc: [ "application/vnd.wap.wmlc" ],
        wmls: [ "text/vnd.wap.wmlscript" ],
        wmlsc: [ "application/vnd.wap.wmlscriptc" ],
        word: [ "application/msword" ],
        wp: [ "application/wordperfect" ],
        wp5: [ "application/wordperfect", "application/wordperfect6.0" ],
        wp6: [ "application/wordperfect" ],
        wpd: [ "application/wordperfect", "application/x-wpwin" ],
        wq1: [ "application/x-lotus" ],
        wri: [ "application/mswrite", "application/x-wri" ],
        wrl: [ "application/x-world", "model/vrml", "x-world/x-vrml" ],
        wrz: [ "model/vrml", "x-world/x-vrml" ],
        wsc: [ "text/scriplet" ],
        wsrc: [ "application/x-wais-source" ],
        wtk: [ "application/x-wintalk" ],
        xbm: [ "image/x-xbitmap", "image/x-xbm", "image/xbm" ],
        xdr: [ "video/x-amt-demorun" ],
        xgz: [ "xgl/drawing" ],
        xif: [ "image/vnd.xiff" ],
        xl: [ "application/excel" ],
        xla: [ "application/excel", "application/x-excel", "application/x-msexcel" ],
        xlb: [ "application/excel", "application/vnd.ms-excel", "application/x-excel" ],
        xlc: [ "application/excel", "application/vnd.ms-excel", "application/x-excel" ],
        xld: [ "application/excel", "application/x-excel" ],
        xlk: [ "application/excel", "application/x-excel" ],
        xll: [ "application/excel", "application/vnd.ms-excel", "application/x-excel" ],
        xlm: [ "application/excel", "application/vnd.ms-excel", "application/x-excel" ],
        xls: [ "application/excel", "application/vnd.ms-excel", "application/x-excel", "application/x-msexcel" ],
        xlt: [ "application/excel", "application/x-excel" ],
        xlv: [ "application/excel", "application/x-excel" ],
        xlw: [ "application/excel", "application/vnd.ms-excel", "application/x-excel", "application/x-msexcel" ],
        xm: [ "audio/xm" ],
        xml: [ "application/xml", "text/xml" ],
        xmz: [ "xgl/movie" ],
        xpix: [ "application/x-vnd.ls-xpix" ],
        xpm: [ "image/x-xpixmap", "image/xpm" ],
        "x-png": [ "image/png" ],
        xsr: [ "video/x-amt-showrun" ],
        xwd: [ "image/x-xwd", "image/x-xwindowdump" ],
        xyz: [ "chemical/x-pdb" ],
        z: [ "application/x-compress", "application/x-compressed" ],
        zip: [ "application/x-compressed", "application/x-zip-compressed", "application/zip", "multipart/x-zip" ],
        zoo: [ "application/octet-stream" ],
        zsh: [ "text/x-script.zsh" ]
    }, Model.isImage = function(fileExtension) {
        var mimeTypes = Model.mimetypes[fileExtension];
        if (a4p.isUndefined(mimeTypes)) return !1;
        for (var i = 0, len = mimeTypes.length; len > i; i++) {
            if ("image/png" == mimeTypes[i]) return !0;
            if ("image/jpeg" == mimeTypes[i]) return !0;
            if ("image/gif" == mimeTypes[i]) return !0;
            if ("image/bmp" == mimeTypes[i]) return !0;
        }
        return !1;
    }, Model.isVideo = function(fileExtension) {
        var mimeTypes = Model.mimetypes[fileExtension];
        if (a4p.isUndefined(mimeTypes)) return !1;
        for (var i = 0, len = mimeTypes.length; len > i; i++) {
            if ("video/mp4" == mimeTypes[i]) return !0;
            if ("video/ogg" == mimeTypes[i]) return !0;
            if ("video/webm" == mimeTypes[i]) return !0;
        }
        return !1;
    }, Model.getErrorMsg = function(scope, errorExpr) {
        return eval(errorExpr);
    }, Model.createErrMsg = function(scope, errorKey, valuesArr) {
        for (var errMsg = Model.translate(scope, errorKey), i = 0; i < valuesArr.length; i++) errMsg = errMsg.replace("{" + i + "}", Model.translate(scope, valuesArr[i]));
        return errMsg;
    }, Model.translate = function(scope, key) {
        var translated = scope.srvLocale.translations[key];
        return void 0 != translated ? translated : key;
    }, Model.validateObject = function(object, expr) {
        return eval(expr);
    }, Model.firstOptionItem = function(srvLocale, defaultSetterParam) {
        var optionList = srvLocale.translations[defaultSetterParam];
        for (var key in optionList) return optionList[key];
    }, Model.now = function() {
        var now = new Date();
        return a4pDateFormat(now);
    }, Model.tomorrow = function() {
        var now = new Date(), dateFrom = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, now.getHours(), 0, 0, 0);
        return a4pDateFormat(dateFrom);
    }, Model.tomorrowPrevHour = function() {
        var now = new Date(), dateFrom = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, now.getHours() - 1, 0, 0, 0);
        return a4pDateFormat(dateFrom);
    }, Model.nextHour = function() {
        var now = new Date(), dateFrom = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours() + 1, 0, 0, 0);
        return a4pDateFormat(dateFrom);
    }, Model.nextNextHour = function() {
        var now = new Date(), dateTo = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours() + 2, 0, 0, 0);
        return a4pDateFormat(dateTo);
    }, Model.contactType = function() {
        return "Contact";
    }, Model.attachmentType = function() {
        return "Attachment";
    }, Model.dateEndFromStart = function(date_start, duration_hours, duration_minutes) {
        var dateStart = a4pDateParse(date_start);
        return a4pDateFormat(new Date(dateStart.getTime() + 1e3 * (3600 * duration_hours + 60 * duration_minutes)));
    }, Model.dateStartFromEnd = function(date_start, date_end, duration_hours, duration_minutes) {
        var dateStart = a4pDateParse(date_start), dateStop = a4pDateParse(date_end);
        return dateStop.getTime() < dateStart.getTime() ? a4pDateFormat(new Date(dateStop.getTime() - 1e3 * (3600 * duration_hours + 60 * duration_minutes))) : date_start;
    }, Model.diffHours = function(date_start, date_end) {
        var dateStart = a4pDateParse(date_start), dateStop = a4pDateParse(date_end);
        return Math.floor((dateStop.getTime() - dateStart.getTime()) / 1e3 / 3600);
    }, Model.diffMinutesInHour = function(date_start, date_end) {
        var dateStart = a4pDateParse(date_start), dateStop = a4pDateParse(date_end), minutes = Math.floor((dateStop.getTime() - dateStart.getTime()) / 1e3 / 60);
        return minutes % 60;
    }, Model.httpPrefixUrl = function(url) {
        if (a4p.isUndefined(url) || 0 == url.length) return url;
        var i = url.indexOf("http:");
        return 0 == i ? url : (i = url.indexOf("https:"), 0 == i ? url : (i = url.indexOf("//"), 
        0 == i ? "http:" + url : "http://" + url));
    }, Model.fileFirstMimetype = function(filename) {
        var extension = Model.fileExtension(filename), mimetypes = Model.mimetypes[extension.toLowerCase()];
        return a4p.isDefined(mimetypes) ? mimetypes[0] : "application/octet-stream";
    }, Model.filePossibleMimetypes = function(filename) {
        var extension = Model.fileExtension(filename), mimetypes = Model.mimetypes[extension.toLowerCase()];
        return a4p.isDefined(mimetypes) ? mimetypes : [ "application/octet-stream", "text/plain" ];
    }, Model.fileExtension = function(filename) {
        var i = filename.lastIndexOf(".");
        return i >= 0 ? filename.substr(1 + i) : "";
    }, Model.fileRootname = function(filename) {
        var i = filename.lastIndexOf(".");
        return i >= 0 ? filename.substr(0, i) : filename;
    }, Model.fileName = function(rootname, extension) {
        return rootname && rootname.length > 0 ? extension && extension.length > 0 ? rootname + "." + extension : rootname : extension && extension.length > 0 ? "." + extension : "";
    }, Model.fileLastname = function(filename) {
        var i = filename.lastIndexOf("/");
        return i >= 0 && (filename = filename.substr(1 + i)), i = filename.lastIndexOf("\\"), 
        i >= 0 && (filename = filename.substr(1 + i)), filename;
    }, Model.fileDirname = function(filename) {
        var i = filename.lastIndexOf("/"), j = filename.lastIndexOf("\\");
        return i >= 0 ? filename = j > i ? filename.substr(0, j) : filename.substr(0, i) : j >= 0 && (filename = filename.substr(0, j)), 
        "";
    }, Model.dirPath = function() {
        return "/a4p/c4p/doc/sf/";
    }, Model.filePath = function(dirPath, id, extension) {
        return normalizedPath(dirPath, id.dbid, extension);
    }, Model.fileUrl = function(filePath) {
        return filePath;
    }, Model;
}(), function($) {
    $.noty = function(options, customContainer) {
        var base = this, $noty = null, isCustom = !1;
        return base.init = function(options) {
            return base.options = $.extend({}, $.noty.defaultOptions, options), base.options.type = base.options.cssPrefix + base.options.type, 
            base.options.id = base.options.type + "_" + new Date().getTime(), base.options.layout = base.options.cssPrefix + "layout_" + base.options.layout, 
            base.options.custom.container && (customContainer = base.options.custom.container), 
            isCustom = "object" === $.type(customContainer) ? !0 : !1, base.addQueue();
        }, base.addQueue = function() {
            var isGrowl = -1 == $.inArray(base.options.layout, $.noty.growls) ? !1 : !0;
            return isGrowl || (base.options.force ? $.noty.queue.unshift({
                options: base.options
            }) : $.noty.queue.push({
                options: base.options
            })), base.render(isGrowl);
        }, base.render = function(isGrowl) {
            var container = isCustom ? customContainer.addClass(base.options.theme + " " + base.options.layout + " noty_custom_container") : $("body");
            if (isGrowl) 0 == $("ul.noty_cont." + base.options.layout).length && container.prepend($("<ul/>").addClass("noty_cont " + base.options.layout)), 
            container = $("ul.noty_cont." + base.options.layout); else {
                if (!$.noty.available) return base.options.id;
                var fromQueue = $.noty.queue.shift();
                if ("object" !== $.type(fromQueue)) return $.noty.available = !0, base.options.id;
                $.noty.available = !1, base.options = fromQueue.options;
            }
            return base.container = container, base.bar = $('<div class="noty_bar"/>').attr("id", base.options.id).addClass(base.options.theme + " " + base.options.layout + " " + base.options.type), 
            $noty = base.bar, $noty.append(base.options.template).find(".noty_text").html(base.options.text), 
            $noty.data("noty_options", base.options), base.options.closeButton ? $noty.addClass("noty_closable").find(".noty_close").show() : $noty.find(".noty_close").remove(), 
            $noty.find(".noty_close").bind("click", function() {
                $noty.trigger("noty.close");
            }), base.options.buttons && (base.options.closeOnSelfClick = base.options.closeOnSelfOver = !1), 
            base.options.closeOnSelfClick && $noty.bind("click", function() {
                $noty.trigger("noty.close");
            }).css("cursor", "pointer"), base.options.closeOnSelfOver && $noty.bind("mouseover", function() {
                $noty.trigger("noty.close");
            }).css("cursor", "pointer"), base.options.buttons && ($buttons = $("<div/>").addClass("noty_buttons"), 
            $noty.find(".noty_message").append($buttons), $.each(base.options.buttons, function(i, button) {
                bclass = button.type ? button.type : "gray", $button = $("<button/>").addClass(bclass).html(button.text).appendTo($noty.find(".noty_buttons")).bind("click", function() {
                    $.isFunction(button.click) && button.click.call($button, $noty);
                });
            })), base.show(isGrowl);
        }, base.show = function(isGrowl) {
            return base.options.modal && $("<div/>").addClass("noty_modal").addClass(base.options.theme).prependTo($("body")).fadeIn("fast"), 
            $noty.close = function() {
                return this.trigger("noty.close");
            }, base.container.prepend(isGrowl ? $("<li/>").append($noty) : $noty), ("noty_layout_topCenter" == base.options.layout || "noty_layout_center" == base.options.layout) && $.noty.reCenter($noty), 
            $noty.bind("noty.setText", function(event, text) {
                $noty.find(".noty_text").html(text), ("noty_layout_topCenter" == base.options.layout || "noty_layout_center" == base.options.layout) && $.noty.reCenter($noty);
            }), $noty.bind("noty.getId", function() {
                return $noty.data("noty_options").id;
            }), $noty.one("noty.close", function() {
                var options = $noty.data("noty_options");
                options.modal && $(".noty_modal").fadeOut("fast", function() {
                    $(this).remove();
                }), $noty.clearQueue().stop().animate($noty.data("noty_options").animateClose, $noty.data("noty_options").speed, $noty.data("noty_options").easing, $noty.data("noty_options").onClose).promise().done(function() {
                    $.inArray($noty.data("noty_options").layout, $.noty.growls) > -1 ? $noty.parent().remove() : ($noty.remove(), 
                    $.noty.available = !0, base.render(!1));
                });
            }), $noty.animate(base.options.animateOpen, base.options.speed, base.options.easing, base.options.onShow), 
            base.options.timeout && $noty.delay(base.options.timeout).promise().done(function() {
                $noty.trigger("noty.close");
            }), base.options.id;
        }, base.init(options);
    }, $.noty.get = function(id) {
        return $("#" + id);
    }, $.noty.close = function(id) {
        $.noty.get(id).trigger("noty.close");
    }, $.noty.setText = function(id, text) {
        $.noty.get(id).trigger("noty.setText", text);
    }, $.noty.closeAll = function() {
        $.noty.clearQueue(), $(".noty_bar").trigger("noty.close");
    }, $.noty.reCenter = function(noty) {
        noty.css({
            left: ($(window).width() - noty.outerWidth()) / 2 + "px"
        });
    }, $.noty.clearQueue = function() {
        $.noty.queue = [];
    }, $.noty.queue = [], $.noty.growls = [ "noty_layout_topLeft", "noty_layout_topRight", "noty_layout_bottomLeft", "noty_layout_bottomRight" ], 
    $.noty.available = !0, $.noty.defaultOptions = {
        layout: "top",
        theme: "noty_theme_default",
        animateOpen: {
            height: "toggle"
        },
        animateClose: {
            height: "toggle"
        },
        easing: "swing",
        text: "",
        type: "alert",
        speed: 500,
        timeout: 5e3,
        closeButton: !1,
        closeOnSelfClick: !0,
        closeOnSelfOver: !1,
        force: !1,
        onShow: !1,
        onClose: !1,
        buttons: !1,
        modal: !1,
        template: '<div class="noty_message"><span class="noty_text"></span><div class="noty_close"></div></div>',
        cssPrefix: "noty_",
        custom: {
            container: null
        }
    }, $.fn.noty = function(options) {
        return this.each(function() {
            new $.noty(options, $(this));
        });
    };
}(jQuery), function($) {
    var mirrored, defaults = {
        className: "autosizejs",
        id: "autosizejs",
        append: "\n",
        callback: !1,
        resizeDelay: 10,
        placeholder: !0
    }, copy = '<textarea tabindex="-1" style="position:absolute; top:-999px; left:0; right:auto; bottom:auto; border:0; padding: 0; -moz-box-sizing:content-box; -webkit-box-sizing:content-box; box-sizing:content-box; word-wrap:break-word; height:0 !important; min-height:0 !important; overflow:hidden; transition:none; -webkit-transition:none; -moz-transition:none;"/>', typographyStyles = [ "fontFamily", "fontSize", "fontWeight", "fontStyle", "letterSpacing", "textTransform", "wordSpacing", "textIndent" ], mirror = $(copy).data("autosize", !0)[0];
    mirror.style.lineHeight = "99px", "99px" === $(mirror).css("lineHeight") && typographyStyles.push("lineHeight"), 
    mirror.style.lineHeight = "", $.fn.autosize = function(options) {
        return this.length ? (options = $.extend({}, defaults, options || {}), mirror.parentNode !== document.body && $(document.body).append(mirror), 
        this.each(function() {
            function setWidth() {
                var width, style = window.getComputedStyle ? window.getComputedStyle(ta, null) : !1;
                style ? (width = ta.getBoundingClientRect().width, (0 === width || "number" != typeof width) && (width = parseInt(style.width, 10)), 
                $.each([ "paddingLeft", "paddingRight", "borderLeftWidth", "borderRightWidth" ], function(i, val) {
                    width -= parseInt(style[val], 10);
                })) : width = Math.max($ta.width(), 0), mirror.style.width = width + "px";
            }
            function initMirror() {
                var styles = {};
                if (mirrored = ta, mirror.className = options.className, mirror.id = options.id, 
                maxHeight = parseInt($ta.css("maxHeight"), 10), $.each(typographyStyles, function(i, val) {
                    styles[val] = $ta.css(val);
                }), $(mirror).css(styles).attr("wrap", $ta.attr("wrap")), setWidth(), window.chrome) {
                    var width = ta.style.width;
                    ta.style.width = "0px";
                    {
                        ta.offsetWidth;
                    }
                    ta.style.width = width;
                }
            }
            function adjust() {
                var height, original;
                mirrored !== ta ? initMirror() : setWidth(), mirror.value = !ta.value && options.placeholder ? ($ta.attr("placeholder") || "") + options.append : ta.value + options.append, 
                mirror.style.overflowY = ta.style.overflowY, original = parseInt(ta.style.height, 10), 
                mirror.scrollTop = 0, mirror.scrollTop = 9e4, height = mirror.scrollTop, maxHeight && height > maxHeight ? (ta.style.overflowY = "scroll", 
                height = maxHeight) : (ta.style.overflowY = "hidden", minHeight > height && (height = minHeight)), 
                height += boxOffset, original !== height && (ta.style.height = height + "px", callback && options.callback.call(ta, ta));
            }
            function resize() {
                clearTimeout(timeout), timeout = setTimeout(function() {
                    var newWidth = $ta.width();
                    newWidth !== width && (width = newWidth, adjust());
                }, parseInt(options.resizeDelay, 10));
            }
            var maxHeight, minHeight, timeout, ta = this, $ta = $(ta), boxOffset = 0, callback = $.isFunction(options.callback), originalStyles = {
                height: ta.style.height,
                overflow: ta.style.overflow,
                overflowY: ta.style.overflowY,
                wordWrap: ta.style.wordWrap,
                resize: ta.style.resize
            }, width = $ta.width();
            $ta.data("autosize") || ($ta.data("autosize", !0), ("border-box" === $ta.css("box-sizing") || "border-box" === $ta.css("-moz-box-sizing") || "border-box" === $ta.css("-webkit-box-sizing")) && (boxOffset = $ta.outerHeight() - $ta.height()), 
            minHeight = Math.max(parseInt($ta.css("minHeight"), 10) - boxOffset || 0, $ta.height()), 
            $ta.css({
                overflow: "hidden",
                overflowY: "hidden",
                wordWrap: "break-word",
                resize: "none" === $ta.css("resize") || "vertical" === $ta.css("resize") ? "none" : "horizontal"
            }), "onpropertychange" in ta ? "oninput" in ta ? $ta.on("input.autosize keyup.autosize", adjust) : $ta.on("propertychange.autosize", function() {
                "value" === event.propertyName && adjust();
            }) : $ta.on("input.autosize", adjust), options.resizeDelay !== !1 && $(window).on("resize.autosize", resize), 
            $ta.on("autosize.resize", adjust), $ta.on("autosize.resizeIncludeStyle", function() {
                mirrored = null, adjust();
            }), $ta.on("autosize.destroy", function() {
                mirrored = null, clearTimeout(timeout), $(window).off("resize", resize), $ta.off("autosize").off(".autosize").css(originalStyles).removeData("autosize");
            }), adjust());
        })) : this;
    };
}(window.jQuery || window.$), LazyLoad = function(e) {
    function u(t, n) {
        var i, r = e.createElement(t);
        for (i in n) n.hasOwnProperty(i) && r.setAttribute(i, n[i]);
        return r;
    }
    function a(e) {
        var n, o, t = r[e];
        t && (n = t.callback, o = t.urls, o.shift(), i = 0, o.length || (n && n.call(t.context, t.obj), 
        r[e] = null, s[e].length && l(e)));
    }
    function f() {
        var n = navigator.userAgent;
        t = {
            async: e.createElement("script").async === !0
        }, (t.webkit = /AppleWebKit\//.test(n)) || (t.ie = /MSIE/.test(n)) || (t.opera = /Opera/.test(n)) || (t.gecko = /Gecko\//.test(n)) || (t.unknown = !0);
    }
    function l(i, o, l, p, d) {
        var y, b, w, E, S, x, v = function() {
            a(i);
        }, m = "css" === i, g = [];
        if (t || f(), o) if (o = "string" == typeof o ? [ o ] : o.concat(), m || t.async || t.gecko || t.opera) s[i].push({
            urls: o,
            callback: l,
            obj: p,
            context: d
        }); else for (y = 0, b = o.length; b > y; ++y) s[i].push({
            urls: [ o[y] ],
            callback: y === b - 1 ? l : null,
            obj: p,
            context: d
        });
        if (!r[i] && (E = r[i] = s[i].shift())) {
            for (n || (n = e.head || e.getElementsByTagName("head")[0]), S = E.urls, y = 0, 
            b = S.length; b > y; ++y) x = S[y], m ? w = t.gecko ? u("style") : u("link", {
                href: x,
                rel: "stylesheet"
            }) : (w = u("script", {
                src: x
            }), w.async = !1), w.className = "lazyload", w.setAttribute("charset", "utf-8"), 
            t.ie && !m ? w.onreadystatechange = function() {
                /loaded|complete/.test(w.readyState) && (w.onreadystatechange = null, v());
            } : m && (t.gecko || t.webkit) ? t.webkit ? (E.urls[y] = w.href, h()) : (w.innerHTML = '@import "' + x + '";', 
            c(w)) : w.onload = w.onerror = v, g.push(w);
            for (y = 0, b = g.length; b > y; ++y) n.appendChild(g[y]);
        }
    }
    function c(e) {
        var t;
        try {
            t = !!e.sheet.cssRules;
        } catch (n) {
            return i += 1, void (200 > i ? setTimeout(function() {
                c(e);
            }, 50) : t && a("css"));
        }
        a("css");
    }
    function h() {
        var t, e = r.css;
        if (e) {
            for (t = o.length; --t >= 0; ) if (o[t].href === e.urls[0]) {
                a("css");
                break;
            }
            i += 1, e && (200 > i ? setTimeout(h, 50) : a("css"));
        }
    }
    var t, n, r = {}, i = 0, s = {
        css: [],
        js: []
    }, o = e.styleSheets;
    return {
        css: function(e, t, n, r) {
            l("css", e, t, n, r);
        },
        js: function(e, t, n, r) {
            l("js", e, t, n, r);
        }
    };
}(this.document), LoadLib = function() {
    function n(e) {
        var n = 0, r = !1;
        for (n = 0; n < t.length; n++) t[n] == e && (r = !0);
        return r ? !0 : (t.push(e), !1);
    }
    var t = [];
    return {
        css: function(e, t, r, i) {
            n(e) || LazyLoad.css(e, t, r, i);
        },
        js: function(e, t, r, i) {
            n(e) || LazyLoad.js(e, t, r, i);
        }
    };
}(this.document);

var WebFontConfig;

if ("undefined" == typeof embed_path || "undefined" == typeof embed_path) var embed_path = getEmbedScriptPath("storyjs-embed.js").split("js/")[0];

!function() {
    "object" == typeof url_config ? createStoryJS(url_config) : "object" == typeof timeline_config ? createStoryJS(timeline_config) : "object" == typeof storyjs_config ? createStoryJS(storyjs_config) : "object" == typeof config && createStoryJS(config);
}();

var c4p;

c4p || (c4p = {}), c4p.Locale = {
    en: {
        htmlGuiderPageTitle: "CRM Pad",
        htmlGuiderFormStaySignedIn: "Stay signed in",
        htmlGuiderTextPasswordForgotten: "Please prompt your email. A link will be sent allowing you to reset your password",
        htmlGuiderTextValidation: "Synchronization is running. Please wait ...",
        htmlGuiderTextWaiting: "<blockquote style='background: none'><p>Patience, persistence and perspiration make an unbeatable combination for success.</p><small>Napoleon Hill</small></blockquote>",
        htmlGuiderNeedHelp: "Question ?",
        htmlErrorRequired: "Field '{0}' is mandatory",
        htmlErrorMaxLength: "Field '{0}' must not exceed {1} characters",
        htmlErrorPhoneFormat: "Field '{0}' must be composed of digits and allows characters '+.-()'",
        htmlErrorFromPickList: "Field '{0}' must be selected among drop down choices",
        htmlErrorEmailFormat: "Field '{0}' must be formatted as 'your_e-mail.address@example.com'",
        htmlErrorDatesOrder: "Fields '{0}' and '{1}' must respect chronological order",
        htmlErrorRequireInteger: "Field '{0}' must be a positive integer",
        htmlErrorRequireDouble: "Field '{0}' must be a positive number allowing '.' and ',' as separators",
        htmlErrorMaxValue: "Field '{0}' cannot be superior to {1}",
        htmlRequiredSubject: "Subject required",
        htmlRequiredMessage: "Message required",
        htmlRequiredDuration: "Duration required",
        htmlRequiredPositiveDuration: "Duration must be positive",
        htmlInvalidEmail: "The address {0} is invalid",
        htmlNoEmailAddr: "{0} has no email address",
        htmlTextOr: "or",
        htmlTextAlreadyRegistered: "already registered ?",
        htmlButtonRegister: "Register",
        htmlButtonLogin: "Sign in",
        htmlButtonPasswordForgotten: "Password forgotten ?",
        htmlButtonRequestPassword: "Send reset link",
        htmlButtonChangeUser: "Switch account",
        htmlButtonOK: "OK",
        htmlButtonSendEmail: "Send email",
        htmlButtonSend: "Send",
        htmlCalendarDayTextNoEvent: "No event scheduled today. Go on your calendar to create one.",
        htmlCalendarDayTextAllDayEvent: "All day",
        htmlCalendarDayTextEvents: "Scheduled this day",
        htmlCalendarListPageTitle: "Next events",
        htmlCalendarMonthTextWeekAbrev: "W",
        htmlCalendarMonthTextMore: "more...",
        htmlConfigPageTitle: "Settings for account",
        htmlConfigTextDemo: "Demo",
        htmlConfigTextLang: "Language",
        htmlConfigTextNameComposition: "Name composition of",
        htmlConfigTextAuth: "Secure mode",
        htmlConfigTextYes: "Yes",
        htmlConfigTextNo: "No",
        htmlConfigTextModifyPINCode: "Modify PIN Code",
        htmlConfigTextCrmUse: "Use data from CRM",
        htmlConfigCrmList: {
            c4p: "Apps4pro",
            sf: "SalesForce",
            ios: "Device"
        },
        htmlConfigTextErrorReport: "Your error report",
        htmlConfigTextFeedback: "Your feedback",
        htmlConfigTextBeta: "Beta mode",
        htmlConfigTextTheme: "Your theme",
        htmlConfigTextSize: "Global size of text",
        htmlConfigCheckList: {
            exposeBetaFunctionalities: "Beta mode",
            exposeCreateAccount: "Show create account network activities",
            exposeRequestPassword: "Show request password network activities",
            exposeUserFeedback: "Show user feedback network activities",
            exposeFileStorage: "Show file storage network activities",
            exposeDataSynchro: "Show data synchro network activities",
            exposeGoogleMap: "Show Google maps",
            exposeTimeline: "Show timeline page",
            exposeFacetDialog: "Show selection dialogs in facet like mode",
            exposeDraggableHover: "Show blue color if hover a draggable item",
            exposeDraggableBorder: "Show blue border around any draggable item",
            exposeAllFacets: "Show all facets",
            phoneFormatIfSmall: "Activate iPhone format on small size instead of portrait orientation"
        },
        htmlConfigTextAppVersion: "Version",
        htmlViewNrelatedPageTitle: "Related items",
        htmlViewNrelatedPageTitleNew: "New relations",
        htmlViewNlinkItemTextNoRelation: "Create one relation with '{0}'. Use the drag & drop.",
        htmlViewNlinkItemTextRemoveLink: "Remove link kind:",
        htmlCardsTextActionAs: "as",
        htmlDialogTextImport: "Import...",
        htmlDialogAddAccountPageTitle: "Account import",
        htmlDialogAddContactPageTitle: "Contact import",
        htmlDialogAddRatingsPluralRating: {
            "0": "Observation",
            one: "Observation",
            other: "Observations"
        },
        htmlDialogDupMeetingPageTitle: "Event duplication",
        htmlDialogDupMeetingTextInitiator: "Same initiator",
        htmlDialogDupMeetingTextLeader: "Same leader",
        htmlDialogDupMeetingTextAttachments: "Keep documents",
        htmlDialogDupMeetingTextAttendees: "Keep attendees",
        htmlDialogEmailAttachment: "Attachment(s)",
        htmlDialogEmailMailedPeople: "Recipients",
        htmlDialogEmailJoinedDoc: "Attachments",
        htmlDialogErrRptPageTitle: "Error report",
        htmlDialogNotePageTitleReport: "Report",
        htmlDialogNotePageTitleNote: "Note",
        htmlDialogNoteReportObservation: "Observations:",
        htmlDialogSelectCrmUse: "Available Crm(s)",
        htmlDialogSelectObjectsSugestionFilterIn: "In suggested group(s):",
        htmlDialogPINModePageTitle: "Secure mode",
        htmlDialogPINModeInit: "Choose your PIN code",
        htmlDialogPINModeOld: "Old PIN code",
        htmlDialogPINModeNew: "New PIN code",
        htmlDialogPINModeLocked: "Please enter your PIN code",
        htmlDialogPINModeRequired: "PIN code must be non-empty",
        htmlDialogPINModeKO: "PIN code is incorrect",
        htmlDialogPINModeDifferent: "New PIN code must be different from old one",
        htmlTitleNewObject: {
            Facet: "Tag creation",
            Contact: "Contact creation",
            Account: "Account creation",
            Opportunity: "Opportunity creation",
            Lead: "Lead creation",
            Event: "Event creation",
            Task: "Task creation",
            Document: "Document creation",
            Note: "Note creation",
            Report: "Report creation",
            Email: "Email creation",
            Picture: "Picture creation",
            Plan: "Plan creation",
            Attendee: "Attendee creation",
            Attachee: "Attachment creation",
            Plannee: "Point creation"
        },
        htmlTitleEditObject: {
            Facet: "Tag edit",
            Contact: "Contact edit",
            Account: "Account edit",
            Opportunity: "Opportunity edit",
            Lead: "Lead edit",
            Event: "Event edit",
            Task: "Task edit",
            Document: "Document edit",
            Note: "Note edit",
            Report: "Report edit",
            Email: "Email edit",
            Picture: "Picture edit",
            Plan: "Plan edit",
            Attendee: "Attendee edit",
            Attachee: "Attachment edit",
            Plannee: "Point edit"
        },
        pluralHtmlTextReportPeople: {
            "0": "No person met",
            one: "1 person met: ",
            other: "{} person met: "
        },
        pluralHtmlTextReportDoc: {
            "0": "No attached document",
            one: "1 attached document:",
            other: "{} attached documents:"
        },
        htmlFacetName: {
            all: "All",
            objects: "Objects",
            recents: "Recents",
            top20: "Top 20",
            mine: "My objects",
            favorites: "Favorites",
            biblio: "Library",
            month: "Monthly",
            week: "Weekly",
            fileDir: "On Disk",
            sameCompany: "Same company",
            sameManager: "Same manager",
            sameTeam: "Same team",
            eventAttendees: "Attendees of the event",
            eventAttachments: "Attachments of the event"
        },
        htmlSlideName: {
            index: "Index",
            meeting: "Meeting",
            timeline: "Timeline",
            config: "Settings",
            calendar: "Calendar",
            leads: "Leads",
            accounts: "Accounts",
            contacts: "Contacts",
            documents: "Documents",
            events: "Events",
            tasks: "Tasks",
            favorites: "Bookmarks",
            opportunities: "Opportunities",
            notes: "Notes",
            reports: "Reports",
            facets: "Tags"
        },
        htmlActionName: {
            dayView: "Day",
            monthView: "Month",
            listView: "List",
            viewDocument: "View document",
            setItemAndGoTimeline: "Timeline",
            setItemAndGoCalendar: "Calendar",
            gotoMeeting: "Meeting",
            shareDocumentByChatter: "Share by chatter",
            createNewEmail: "Send by email",
            sendICal: "Send invitation",
            createNewPicture: "New picture",
            createNewNote: "New note",
            createNewReport: "New report",
            editItem: "Edit",
            addDocuments: "Attach document",
            toggleFavorite: "Bookmark",
            setItemAndGoMeeting: "Set to meeting",
            addContacts: "Add Contact",
            dupMeeting: "Next meeting"
        },
        htmlTitleType: {
            Facet: "Tags",
            Contact: "Contacts",
            Account: "Accounts",
            Opportunity: "Opportunities",
            Lead: "Leads",
            Event: "Events",
            Task: "Tasks",
            Document: "Documents",
            Note: "Notes",
            Report: "Reports",
            Email: "Emails",
            Picture: "Pictures",
            Plan: "Plans",
            Attendee: "Attendees",
            Attachee: "Attachments",
            Plannee: "Points"
        },
        htmlShortLinkName: {
            faceter: "Tag",
            faceted: "Tagged",
            creator: "Creator",
            created: "Created",
            modifier: "Modifier",
            modified: "Modified",
            parent: "Parent",
            child: "Child",
            owner: "Owner",
            owned: "Owned",
            accounter: "Accounter",
            accounted: "Accounted",
            manager: "Manager",
            managed: "Managed",
            leader: "Leader",
            led: "Led",
            affecter: "Affecter",
            affected: "Affected",
            attended: "Attended",
            attendee: "Attendee",
            attached: "Attacher",
            attachee: "Attachment",
            planned: "Planner",
            plannee: "Point",
            mail_to: "Mailer",
            mailed_from: "Mailed",
            join_to: "Joiner",
            joined_from: "Joined",
            converted_to: "Converted to",
            converted_from: "Converted from"
        },
        htmlTitleSelection: {
            Facet: "Tag selection",
            Contact: "Contact selection",
            Account: "Account selection",
            Opportunity: "Opportunity selection",
            Lead: "Lead selection",
            Event: "Event selection",
            Task: "Task selection",
            Document: "Document selection",
            Note: "Note selection",
            Report: "Report selection",
            Plan: "Plan selection",
            Attendee: "Attendee selection",
            Attachee: "Attachment selection",
            Plannee: "Point selection"
        },
        htmlTypeName: {
            Facet: "Tag",
            Contact: "Contact",
            Account: "Account",
            Opportunity: "Opportunity",
            Lead: "Lead",
            Event: "Event",
            Task: "Task",
            Document: "Document",
            Note: "Note",
            Report: "Report",
            Plan: "Plan",
            Attendee: "Attendee",
            Attachee: "Attachment",
            Plannee: "Point"
        },
        htmlSuggestionName: {
            eventAttendees: "Attendees of the event",
            eventAttachments: "Attachments of the event",
            sameCompany: "Same company",
            sameManager: "Same manager",
            sameTeam: "Same team",
            all: "All"
        },
        htmlMsgServerPb: "Server problem. Please contact admin.",
        htmlMsgUserLoginRequired: "User email is required or incorrect.",
        htmlMsgUserEmailRequired: "User email is required.",
        htmlMsgNoConnectionWithSF: "No current connection with SalesForce.",
        htmlMsgRequestFormatInvalid: "Client software might be outdated: invalid request.",
        htmlMsgNoMultipleRefreshForSameUser: "Another synchronization is already running for the same user.",
        htmlMsgWpUserSendingEmailPb: "Sending email password failure in Apps4Pro web site.",
        htmlMsgNoRefreshInDemoMode: "Synchronization is not accessible in demo mode.",
        htmlMsgSynchronizationServerPb: "Synchronization server problem. Please contact admin.",
        htmlMsgSynchronizationUserPb: "Synchronization problem. User invalid. Please contact admin.",
        htmlMsgUserLoginNotExists: "User doesn't exists in database.",
        htmlMsgSynchronizationWpPb: "Problem in Apps4Pro web site. Please contact admin.",
        htmlMsgSynchronizationDbPb: "Synchronization problem with database. Please contact admin.",
        htmlMsgW4pUserAlreadyExists: "User already exists in database. Please contact admin.",
        htmlMsgW4pUserCreationPb: "User creation failure in database.",
        htmlMsgW4pUserRightsCreationPb: "User rights creation failure in database.",
        htmlMsgW4pUserRightsUpdatePb: "User rights update failure in database.",
        htmlMsgPasswordRequired: "User password is required.",
        htmlMsgWpUserCreationPb: "User creation failure in Apps4Pro web site.",
        htmlMsgLoadLocalePb: "Initializing Locale failed: use previous values.",
        htmlMsgLoadLocaleReady: "Locale {0} ready.",
        htmlMsgInitializingFileStorage: "Initializing File Storage with a space of {0} bytes ...",
        htmlMsgLoadFileStoragePb: "Creation of File Storage failed. The application can not start !",
        htmlMsgFeedbackMessageEmpty: "Your message text is empty",
        htmlMsgFeedbackContactEmpty: "Sorry, we need valid email",
        htmlMsgFeedbackEmail: "Thank you for your feedback !",
        htmlMsgFeedbackPhone: "If you could be join by phone",
        htmlMsgFeedbackMoreObjects: "Hi!\nPlease i need more objects, like :\n ... which one ?",
        htmlMsgFeedbackMoreObjectsQuestion: "... more?",
        htmlMsgFeedbackSFConnector: "Hi there!\nPlease connect to my Salesforce.com data.",
        htmlMsgFeedbackOtherConnector: "Hi team!\nPlease connect to my CRM data :\n ... which one ? ",
        htmlMsgFeedbackOtherConnectorQuestion: "Do you want to connect to your system ?",
        htmlMsgFeedbackSuggestion: "Hi team!\nI need some helpfull topics like :\n ... which one ?",
        htmlMsgFeedbackSuggestionQuestion: "Need more suggestion ?",
        htmlMsgRejectImportNotLogged: "Import rejected: you are not logged in.",
        htmlMsgImportFile: "Import of file {0}",
        htmlMsgFileImport: "File import",
        htmlMsgSynchronizationOK: "Synchronization OK.",
        htmlMsgInvalidPassword: "User password is invalid.",
        htmlMsgSynchronizationClientPb: "Synchronization client problem.\nDo you have internet available ?\nSend us an email : help@apps4pro.com",
        htmlMsgMaintenancePb: "Server is momentarily stopped. Please retry later.",
        htmlMsgSendingEmailPb: "Sending email failure in server.",
        htmlMsgTakePicturePb: "Take picture problem.",
        htmlMsgMakeNotePb: "Make note problem.",
        htmlMsgMakeReportPb: "Make report problem.",
        htmlMsgFileImportPb: "File importation problem.",
        htmlMsgTakePictureOK: "Take picture success.",
        htmlMsgFileImportOK: "File importation success.",
        htmlMsgDummyPicture: "No camera could be detected. A sample will be use instead.",
        htmlMsgNbObjectsInserted: "{0} object inserted",
        htmlMsgRenameFileOK: "File rename success.",
        htmlMsgRenameFilePb: "File rename problem.",
        htmlMsgRemoveFileOK: "File remove success.",
        htmlMsgRemoveFilePb: "File remove problem.",
        htmlMsgClearFileStorageOK: "File storage clearing success.",
        htmlMsgClearFileStoragePb: "File storage clearing problem.",
        htmlMsgObjectInvalid: "Form may contains errors",
        htmlMsgTitleRequired: "Title required",
        htmlMsgStartDateInvalid: "Invalid start date",
        htmlMsgEndDateInvalid: "Invalid end date",
        htmlMsgEmailsRequired: "Email required",
        htmlTitle: {
            Facet: "Tag",
            Contact: "Contact",
            Account: "Account",
            Opportunity: "Opportunity",
            Lead: "Lead",
            Event: "Event",
            Task: "Task",
            Document: "Document",
            Note: "Note",
            Report: "Report",
            Plan: "Plan",
            Attendee: "Attendee",
            Attachee: "Attachment",
            Plannee: "Point"
        },
        htmlLinkName: {
            faceter: "Tag for {0}",
            faceted: "Tagged by {0}",
            creator: "Creator of {0}",
            created: "Created by {0}",
            modifier: "Modifier of {0}",
            modified: "Modified by {0}",
            parent: "Parent of {0}",
            child: "Child of {0}",
            owner: "Owner of {0}",
            owned: "Owned by {0}",
            accounter: "Accounter of {0}",
            accounted: "Accounted by {0}",
            manager: "Manager of {0}",
            managed: "Managed by {0}",
            leader: "Leader of {0}",
            led: "Led by {0}",
            affecter: "Affecter of {0}",
            affected: "Affected by {0}",
            attended: "Attended by {0}",
            attendee: "Attendees of {0}",
            attached: "Attached by {0}",
            attachee: "Attachments of {0}",
            planned: "Planned by {0}",
            plannee: "Points of {0}",
            mail_to: "Mailed by {0}",
            mailed_from: "Mailer of {0}",
            join_to: "Joined by {0}",
            joined_from: "Joiner of {0}",
            converted_to: "Convertion of {0}",
            converted_from: "Converted into {0}"
        },
        htmlTitleDialogFeed: "Write Post",
        htmlTitleDialogEmail: "Write Email",
        htmlFormTitleRelated: "Linked relations",
        htmlFormTitleContactDetails: "Contact details",
        htmlFormTitlePersonal: "Personal",
        htmlFormTitleOtherContactDetails: "Other details",
        htmlFormTitleSegmentation: "Segmentation",
        htmlFormTitleAddress: "Address",
        htmlTitleConfig: "Configuration",
        htmlTitleConfigYourAccount: "Your account",
        htmlTitleConfigSystemStatus: "System status",
        htmlTitleLibrary: "Library",
        htmlTitleCalendar: "Calendar",
        htmlTitleShareByEmail: "Share by email",
        htmlTitleShareByChatter: "Share by chatter",
        htmlTitleTypeNote: "Note",
        htmlTitleTypeReport: "Report",
        htmlTitleReportOf: "Report > {0}",
        htmlTitleNoteOf: "Note > {0}",
        htmlTitleFeedback: "Feedback",
        htmlFieldsetAddress: "Address",
        htmlFieldsetContact: "Contact",
        htmlFieldsetOther: "Other",
        htmlFieldsetDetails: "Details",
        htmlFieldsetTitle: "Title",
        htmlFieldsetPhones: "Phones",
        htmlFieldsetEmails: "Emails",
        htmlFieldsetPrimaryAddress: "Primary address",
        htmlFieldsetAlternateAddress: "Alternate address",
        htmlFieldsetBillingAddress: "Billing address",
        htmlFieldsetDescription: "Description",
        htmlFieldsetWork: "Professional",
        htmlFormEmail: "Email",
        htmlFormEmailPlaceHolder: "Email",
        htmlFormPassword: "Password",
        htmlFormPasswordPlaceHolder: "Password",
        htmlFormTo: "To",
        htmlFormToPlaceHolder: "To",
        htmlFormSubject: "Subject",
        htmlFormSubjectPlaceHolder: "Subject",
        htmlFormMessage: "Message",
        htmlFormMessagePlaceHolder: "Your message...",
        htmlFormSearch: "Search",
        htmlFormSearchPlaceHolder: "Search",
        htmlFormTitle: "Title",
        htmlFormTitlePlaceHolder: "Title",
        htmlFormPhone: "Phone",
        htmlFormPhonePlaceHolder: "Phone",
        htmlFormBack: "Back",
        htmlFormSalutation: "Civility",
        htmlFormFirstName: "First name",
        htmlFormLastName: "Last Name",
        htmlFormContactType: "Type",
        htmlFormCompany: "Company",
        htmlFormWork: "Work",
        htmlFormMobile: "Mobile",
        htmlFormFax: "Fax",
        htmlFormFaxAbbrev: "(fax)",
        htmlFormHouse: "House",
        htmlFormHouseAbbrev: "(home)",
        htmlFormOther: "Other",
        htmlFormHome: "Home",
        htmlFormList: "List",
        htmlFormStreet: "Street",
        htmlFormCity: "City",
        htmlFormState: "State",
        htmlFormZipCode: "Zip code",
        htmlFormCountry: "Country",
        htmlFormBirthday: "Birthday",
        htmlFormDepartment: "Department",
        htmlFormDivision: "Division",
        htmlFormAssistantName: "Assistant",
        htmlFormAssistantPhone: "Assistant Phone",
        htmlFormLeadSource: "Lead Source",
        htmlFormCreatedBy: "Created by ",
        htmlFormCreatedOn: "On ",
        htmlFormCreatedDate: ", on ",
        htmlFormLastModifiedBy: "Modified by ",
        htmlFormLastModifiedDate: ", on ",
        htmlFormConvertedDate: "Converted on ",
        htmlFormWhenDate: " written on ",
        htmlFormCompanyName: "Company",
        htmlFormType: "Type",
        htmlFormIndustry: "Industry",
        htmlFormAnnualIncome: "Annual income",
        htmlFormWebsite: "Web site",
        htmlFormEmployeeNumber: "Employee number",
        htmlFormSicCode: "Sic code",
        htmlFormDateEntered: "Date entered",
        htmlFormPrefix: "Prefix",
        htmlFormName: "Name",
        htmlFormAmount: "Amount",
        htmlFormCurrencyCode: "Currency code",
        htmlFormProbability: "Probability",
        htmlFormStage: "Stage",
        htmlFormNextStep: "Next step",
        htmlFormDateClosed: "Date closed",
        htmlFormDueDate: "Due date",
        htmlFormLength: "Length (bytes)",
        htmlFormLastUpdate: "Last update",
        htmlFormLocation: "Location",
        htmlFormUrl: "Url",
        htmlFormDurationHours: "Duration (hours)",
        htmlFormDurationMinutes: "Duration (minutes)",
        htmlFormDateStart: "From",
        htmlFormDateEnd: "to",
        htmlFormStatus: "Status",
        htmlFormDateReminder: "Date Reminder",
        htmlFormReminderSet: "Add reminder",
        htmlFormDescription: "Description",
        htmlTextInitializingLocale: "Initializing Locale ...",
        htmlTextInitializingData: "Initializing Data ...",
        htmlTextDemoModeImpossible: "Some features are unavailable in demo mode.",
        htmlTextDemoModeMoreData: "More data ?",
        htmlTextHours: "Hours",
        htmlTextMinutes: "Minutes",
        htmlDayOfWeek: {
            "0": "Sunday",
            "1": "Monday",
            "2": "Tuesday",
            "3": "Wednesday",
            "4": "Thursday",
            "5": "Friday",
            "6": "Saturday"
        },
        htmlTextMonday: "Monday",
        htmlTextTuesday: "Tuesday",
        htmlTextWednesday: "Wednesday",
        htmlTextThursday: "Thursday",
        htmlTextFriday: "Friday",
        htmlTextSaturday: "Saturday",
        htmlTextSunday: "Sunday",
        htmlTextShortMonday: "Mon",
        htmlTextShortTuesday: "Tue",
        htmlTextShortWednesday: "Wed",
        htmlTextShortThursday: "Thu",
        htmlTextShortFriday: "Fri",
        htmlTextShortSaturday: "Sat",
        htmlTextShortSunday: "Sun",
        htmlMonth: {
            "0": "January",
            "1": "February",
            "2": "March",
            "3": "April",
            "4": "May",
            "5": "June",
            "6": "July",
            "7": "August",
            "8": "September",
            "9": "October",
            "10": "November",
            "11": "December"
        },
        htmlTextJanuary: "January",
        htmlTextFebruary: "February",
        htmlTextMarch: "March",
        htmlTextApril: "April",
        htmlTextMay: "May",
        htmlTextJune: "June",
        htmlTextJuly: "July",
        htmlTextAugust: "August",
        htmlTextSeptember: "September",
        htmlTextOctober: "October",
        htmlTextNovember: "November",
        htmlTextDecember: "December",
        htmlTextShortJanuary: "Jan",
        htmlTextShortFebruary: "Feb",
        htmlTextShortMarch: "Mar",
        htmlTextShortApril: "Apr",
        htmlTextShortMay: "May",
        htmlTextShortJune: "Jun",
        htmlTextShortJuly: "Jul",
        htmlTextShortAugust: "Aug",
        htmlTextShortSeptember: "Sep",
        htmlTextShortOctober: "Oct",
        htmlTextShortNovember: "Nov",
        htmlTextShortDecember: "Dec",
        htmlTextToday: "Today",
        htmlTextLastRefresh: "Last",
        htmlTextLastRefreshNone: "...",
        htmlTextYesterday: "Yesterday",
        htmlTextTomorrow: "Tomorrow",
        htmlTextConfirmActiveCrm: "Do you want to toggle CRM use (this will clear and reload all data):",
        htmlTextConfirmDelete: "Do you want to remove item(s):",
        htmlTextConfirmDeleteLink: "The link between '{0}' and '{1}'",
        htmlTextConfirmRemoveLink: "Do you want to remove:",
        htmlTextConfirmSwitchUser: "Are you sure to switch user ? You will loose your device data.",
        htmlTextManager: "Manager",
        htmlTextTeam: "Team",
        htmlTextAttendee: "Attendee",
        htmlTextContactWithoutCompany: "No account linked",
        htmlTextContactOrigin: "Origin: ",
        htmlTextReminder: "Reminder: ",
        htmlTextRatings: "Observations",
        htmlTextRatingsFeeling: "Feeling",
        htmlTextRatingsQuality: "Quality",
        htmlTextRatingsEnvironment: "Environment",
        htmlTextRatingsObjectiveAchieved: "Objective achieved",
        htmlTextRatingsMeetingDone: "Meeting done",
        htmlTextDefaultEventName: "New event",
        htmlTextTheme: {
            "c4p-cosmo": "App4pro Cosmo",
            "c4p-default": "App4pro Default",
            "c4p-amelia": "App4pro Amelia",
            "c4p-apps4pro": "App4pro official"
        },
        htmlTextGuiderSlide01: "<h5>Organize. Share. Sale.</h5><p>Save time on the ground </p><p>Work with or without connection. </p><p>Organize your schedule, prepare carefully your appointments, collect information, follow your prospects and customers ... on your tablet or your smartphone. </p>",
        htmlTextGuiderSlide02: "<h5>Connect your CRM.</h5><p>Visualization and intuitive handling of your data</p><p>Contacts, accounts, opportunities, etc.. <br />Library documents, images, videos <br />Secure connection and encrypted local store <br />Complete offline use.</p>",
        htmlTextGuiderSlide03: "<h5>Schedule your meeting.</h5><p><br />Combine it your participants, documents, etc.. <br />Write notes, reports shooting<br /><br />Share and Sale !</p>",
        htmlTextGuiderCalendar: "<ol><li>My sales information.</li><li>Seeing my calendar day at a glance. I can add a meeting.</li><li>Starting a meeting show.</li></ol>",
        htmlTextGuiderEvent: "<ol><li>Adding attendees, documents...</li><li>I start my show.</li></ol>",
        htmlTextGuiderMeeting: "<ol><li>Show documents.</li><li>Take notes, pictures...</li><li>Share with my customers.</li></ol>",
        htmlFormGuiderTextSuccessCreateAccount: "Account successfully created. Your creadentials have been sent to your email address",
        htmlFormGuiderTextSuccessRequestPassword: "A link allowing you to change your password has been sent to your email address",
        htmlFormGuiderSlide1Title: "Mobile CRM",
        htmlFormGuiderSlide1Text: "Follow up your clients and opportunities. Look at important information even when you're not in the office, online or offline.",
        htmlFavorites: "Favorites",
        htmlDefaultEventName: "New Event",
        htmlDefaultTaskName: "New task",
        htmlDefaultNewLead: "New lead",
        htmlDefaultNewContact: "New contact",
        htmlDefaultNewAccount: "New account",
        htmlDefaultOpportunityName: "New opportunity",
        htmlDefaultStage: "Prospecting",
        htmlOptionsSalutation: {
            mr: "Mr.",
            ms: "Ms.",
            mrs: "Mrs.",
            dr: "Dr.",
            prof: "Prof."
        },
        htmlOptionsLeadSource: {
            none: "Direct contact",
            advertisement: "Advertisement",
            employeeReferral: "Employee Referral",
            externalReferral: "External Referral",
            partner: "Partner",
            publicRelations: "Public Relations",
            seminarInternal: "Seminar Internal",
            seminarPartner: "Seminar Partner",
            tradeShow: "Trade Show",
            web: "Web",
            wordOfMouth: "Word of mouth",
            other: "Other"
        },
        htmlOptionsIndustry: {
            agriculture: "Agriculture",
            apparel: "Apparel",
            banking: "Banking",
            biotechnology: "Biotechnology",
            chemicals: "Chemicals",
            communications: "Communications",
            construction: "Construction",
            consulting: "Consulting",
            education: "Education",
            electronics: "Electronics",
            energy: "Energy",
            engineering: "Engineering",
            entertainment: "Entertainment",
            environmental: "Environmental",
            finance: "Finance",
            foodBeverage: "Food & Beverage",
            government: "Government",
            healthcare: "Healthcare",
            hospitality: "Hospitality",
            insurance: "Insurance",
            machinery: "Machinery",
            manufacturing: "Manufacturing",
            media: "Media",
            notForProfit: "Not for Profit",
            recreation: "Recreation",
            retail: "Retail",
            shipping: "Shipping",
            technology: "Technology",
            telecommunications: "Telecommunications",
            transportation: "Transportation",
            utilities: "Utilities",
            other: "Other"
        },
        htmlOptionsOpportunityStage: {
            prospecting: "Prospecting",
            qualification: "Qualification",
            needsAnalysis: "Needs Analysis",
            valueProposition: "Value Proposition",
            decisionMakers: "Id. Decision Makers",
            perceptionAnalysis: "Perception Analysis",
            quote: "Proposal/Price Quote",
            negotiation: "Negotiation/Review",
            won: "Closed Won",
            lost: "Closed Lost"
        },
        htmlRecently: {
            hour: "Less than 1 hour",
            day: "Less than 1 day",
            week: "Less than 1 week",
            month: "Less than 1 month",
            year: "Less than 1 year",
            epoch: "More than 1 year"
        },
        htmlGotoMeeting: "Go to meeting",
        htmlCreateEmptyMeeting: "Create an empty meeting",
        htmlGotoMeetingWith: "Go to meeting with",
        htmlUseExistingMeeting: "Use an existing meeting",
        htmlMeetingPlan: "Plan",
        htmlMeetingLinkObject: "Event Linked object",
        htmlMeetingTitle: "Title",
        htmlMeetingNoTitle: "No title",
        htmlMeetingNoElementSelected: 'No object attached, drag and drop one (click on "add+" )',
        htmlMeetingDropItemHere: "Drop item here",
        htmlMeetingChange: "Change...",
        htmlMeetingMoveItem: "Move item here",
        htmlMeetingAdd: "Add",
        rangeSeparator: " - "
    },
    fr: {
        htmlGuiderPageTitle: "CRM Pad",
        htmlGuiderFormStaySignedIn: "Rester connecté",
        htmlGuiderTextPasswordForgotten: "Veuillez saisir votre email. Un lien permettant de regénérer votre mot de passe vous sera envoyé",
        htmlGuiderTextValidation: "Synchronisation en cours. Veuillez patientez ...",
        htmlGuiderTextWaiting: "<blockquote style='background: none'><p>La patience, la persistance et la transpiration sont les clés du succès.</p><small>Napoleon Hill</small></blockquote>",
        htmlGuiderNeedHelp: "Question ?",
        htmlErrorRequired: "Le champ '{0}' est obligatoire",
        htmlErrorMaxLength: "Le champ '{0}' ne doit pas dépasser {1} caractères",
        htmlErrorPhoneFormat: "Le champ '{0}' doit uniquement être composé de chiffres et des caractères '+.-()'",
        htmlErrorFromPickList: "Le champ '{0}' doit être sélectionné parmi les propositions de la liste déroulante",
        htmlErrorEmailFormat: "Le champ '{0}' doit être au format 'votre.adresse_e-mail@exemple.fr'",
        htmlErrorDatesOrder: "Les champs '{0}' et '{1}' doivent respecter un ordre chronologique",
        htmlErrorRequireInteger: "Le champ '{0}' doit être un entier positif",
        htmlErrorRequireDouble: "Le champ '{0}' doit être un nombre positif autorisant '.' et ',' comme séparateurs",
        htmlErrorMaxValue: "Le champ '{0}' ne peut pas dépasser {1}",
        htmlRequiredSubject: "Sujet requis",
        htmlRequiredMessage: "Message requis",
        htmlRequiredDuration: "Durée requise",
        htmlRequiredPositiveDuration: "La durée doit être positive",
        htmlInvalidEmail: "L'adresse {0} est invalide",
        htmlNoEmailAddr: "{0} ne possède pas d'adresse email",
        htmlTextOr: "ou",
        htmlTextAlreadyRegistered: "déjà enregistré ?",
        htmlButtonRegister: "Inscription",
        htmlButtonLogin: "Connexion",
        htmlButtonPasswordForgotten: "Mot de passe oublié ?",
        htmlButtonRequestPassword: "Envoyer le lien",
        htmlButtonChangeUser: "Changer de compte",
        htmlButtonOK: "OK",
        htmlButtonSendEmail: "Envoyer un courriel",
        htmlButtonSend: "Envoyer",
        htmlCalendarDayTextNoEvent: "Aucun événement plannifié ce jour. Allez sur votre calendrier pour en créer un.",
        htmlCalendarDayTextAllDayEvent: "Toute la journée",
        htmlCalendarDayTextEvents: "Plannifié(s) ce jour",
        htmlCalendarListPageTitle: "Prochainement",
        htmlCalendarMonthTextWeekAbrev: "S",
        htmlCalendarMonthTextMore: "plus...",
        htmlConfigPageTitle: "Paramètres du compte",
        htmlConfigTextDemo: "Démo",
        htmlConfigTextLang: "Langue",
        htmlConfigTextNameComposition: "Composition des noms de ",
        htmlConfigTextAuth: "Mode sécurisé",
        htmlConfigTextYes: "Oui",
        htmlConfigTextNo: "Non",
        htmlConfigTextModifyPINCode: "Modifiez votre code",
        htmlConfigTextCrmUse: "Utiliser les données du CRM",
        htmlConfigCrmList: {
            c4p: "Apps4pro",
            sf: "SalesForce",
            ios: "Local"
        },
        htmlConfigTextErrorReport: "Votre rapport d'erreur",
        htmlConfigTextFeedback: "Votre avis",
        htmlConfigTextBeta: "Mode beta",
        htmlConfigTextTheme: "Votre thème",
        htmlConfigTextSize: "Taille générale du texte",
        htmlConfigCheckList: {
            exposeBetaFunctionalities: "Mode beta",
            exposeCreateAccount: "Log réseau des créations de compte",
            exposeRequestPassword: "Log réseau des demandes de mot de passe",
            exposeUserFeedback: "Log réseau des observations utilisateur",
            exposeFileStorage: "Log réseau des accès disque",
            exposeDataSynchro: "Log réseau des synchronisations",
            exposeGoogleMap: "Afficher les cartes Google",
            exposeTimeline: "Afficher la page timeline",
            exposeFacetDialog: "Afficher les dialogues de sélection façon facette",
            exposeDraggableHover: "Afficher la couleur bleue si pointeur sur un objet déplaçable",
            exposeDraggableBorder: "Afficher une bordure bleue autour de tout objet déplaçable",
            exposeAllFacets: "Afficher toutes les facettes",
            phoneFormatIfSmall: "Activer le format iPhone selon une petite taille plutôt que l'orientation portrait"
        },
        htmlConfigTextAppVersion: "Version",
        htmlViewNrelatedPageTitle: "Informations associées",
        htmlViewNrelatedPageTitleNew: "Nouvelles relations",
        htmlViewNlinkItemTextNoRelation: "Créez une relation avec '{0}'. Faites un glisser-déposer.",
        htmlViewNlinkItemTextRemoveLink: "Supprimer un lien de type :",
        htmlCardsTextActionAs: "en tant que",
        htmlDialogTextImport: "Importer...",
        htmlDialogAddAccountPageTitle: "Import d'un Contact",
        htmlDialogAddContactPageTitle: "Import d'un Compte",
        htmlDialogAddRatingsPluralRating: {
            "0": "Appréciation",
            one: "Appréciation",
            other: "Appréciations"
        },
        htmlDialogDupMeetingPageTitle: "Duplication d'événement",
        htmlDialogDupMeetingTextInitiator: "Même initiateur",
        htmlDialogDupMeetingTextLeader: "Même animateur",
        htmlDialogDupMeetingTextAttachments: "Conserver documents",
        htmlDialogDupMeetingTextAttendees: "Conserver participants",
        htmlDialogEmailAttachment: "Pièce(s) jointe(s)",
        htmlDialogEmailMailedPeople: "Destinataires",
        htmlDialogEmailJoinedDoc: "Pièces jointes",
        htmlDialogErrRptPageTitle: "Rapport d'erreur",
        htmlDialogNotePageTitleReport: "Compte-rendu",
        htmlDialogNotePageTitleNote: "Note",
        htmlDialogNoteReportObservation: "Appréciations :",
        htmlDialogSelectCrmUse: "Crm(s) disponible(s)",
        htmlDialogSelectObjectsSugestionFilterIn: "Dans le(s) groupe(s) suggéré(s) :",
        htmlDialogPINModePageTitle: "Mode sécurisé",
        htmlDialogPINModeInit: "Veuillez saisir un code PIN",
        htmlDialogPINModeOld: "Ancien code PIN",
        htmlDialogPINModeNew: "Nouveau code PIN",
        htmlDialogPINModeLocked: "Veuillez saisir votre code PIN",
        htmlDialogPINModeRequired: "Le code PIN ne doit pas être vide",
        htmlDialogPINModeKO: "Le code PIN est incorrect",
        htmlDialogPINModeDifferent: "Le nouveau code PIN doit être différent de l'ancien",
        htmlTitleNewObject: {
            Facet: "Création de tag",
            Contact: "Création de contact",
            Account: "Création de compte",
            Opportunity: "Création de d'opportunité",
            Lead: "Création de piste",
            Event: "Création d'événement",
            Task: "Création de tâche",
            Document: "Création de document",
            Note: "Création de note",
            Report: "Création de comptes-rendu",
            Email: "Création de courriel",
            Picture: "Création d'image",
            Plan: "Création de plan",
            Attendee: "Création de participant",
            Attachee: "Création de pièce jointe",
            Plannee: "Création de point"
        },
        htmlTitleEditObject: {
            Facet: "Edition de tag",
            Contact: "Edition de contact",
            Account: "Edition de compte",
            Opportunity: "Edition de d'opportunité",
            Lead: "Edition de piste",
            Event: "Edition d'événement",
            Task: "Edition de tâche",
            Document: "Edition de document",
            Note: "Edition de note",
            Report: "Edition de comptes-rendu",
            Email: "Edition de courriel",
            Picture: "Edition d'image",
            Plan: "Edition de plan",
            Attendee: "Edition de participant",
            Attachee: "Edition de pièce jointe",
            Plannee: "Edition de point"
        },
        pluralHtmlTextReportPeople: {
            "0": "Aucune personne rencontrée",
            one: "1 personne rencontrée :",
            other: "{} personnes rencontrées :"
        },
        pluralHtmlTextReportDoc: {
            "0": "Aucun document joint",
            one: "1 document joint :",
            other: "{} documents joints :"
        },
        htmlFacetName: {
            all: "Tous",
            objects: "Objets",
            recents: "Récents",
            top20: "Top 20",
            mine: "Mes objets",
            favorites: "Favoris",
            biblio: "Bibliothèque",
            month: "Mensuel",
            week: "Hebdomadaire",
            fileDir: "Sur Disque",
            sameCompany: "Même entreprise",
            sameManager: "Même manager",
            sameTeam: "Même équipe",
            eventAttendees: "Participants de l'événement",
            eventAttachments: "Documents de l'événement"
        },
        htmlSlideName: {
            index: "Index",
            meeting: "Réunion",
            timeline: "Chronologie",
            config: "Paramètres",
            calendar: "Calendrier",
            leads: "Pistes",
            accounts: "Comptes",
            contacts: "Contacts",
            documents: "Documents",
            events: "Evénements",
            tasks: "Tâches",
            favorites: "Favoris",
            opportunities: "Opportunités",
            notes: "Notes",
            reports: "Comptes-rendus",
            facets: "Tags"
        },
        htmlActionName: {
            dayView: "Jour",
            monthView: "Mois",
            listView: "Liste",
            viewDocument: "Visualiser document",
            setItemAndGoTimeline: "Chronologie",
            setItemAndGoCalendar: "Calendrier",
            gotoMeeting: "Réunion",
            shareDocumentByChatter: "Partager par chatter",
            createNewEmail: "Envoyer par email",
            sendICal: "Envoyer invitations",
            createNewPicture: "Nouvelle photo",
            createNewNote: "Nouvelle note",
            createNewReport: "Nouveau compte-rendu",
            editItem: "Editer",
            addDocuments: "Attacher document",
            toggleFavorite: "Favori",
            setItemAndGoMeeting: "Attacher & réunion",
            addContacts: "Ajouter contact",
            dupMeeting: "Prochain rendez-vous"
        },
        htmlTitleType: {
            Facet: "Tags",
            Contact: "Contacts",
            Account: "Comptes",
            Opportunity: "Opportunités",
            Lead: "Pistes",
            Event: "Evénements",
            Task: "Tâches",
            Document: "Documents",
            Note: "Notes",
            Report: "Comptes-rendus",
            Email: "Courriels",
            Picture: "Images",
            Plan: "Plans",
            Attendee: "Participants",
            Attachee: "Pièces jointes",
            Plannee: "Points"
        },
        htmlShortLinkName: {
            faceter: "Tag",
            faceted: "Taggé",
            creator: "Créateur",
            created: "Créé",
            modifier: "Modificateur",
            modified: "Modifié",
            parent: "Parent",
            child: "Enfant",
            owner: "Propriétaire",
            owned: "Propriété",
            accounter: "Gérant",
            accounted: "Géré",
            manager: "Manager",
            managed: "Managé",
            leader: "Meneur",
            led: "Mené",
            affecter: "Responsable",
            affected: "Affecté",
            attended: "Invitant",
            attendee: "Invité",
            attached: "Attachant",
            attachee: "Attachement",
            planned: "Planificateur",
            plannee: "Point",
            mail_to: "Emetteur",
            mailed_from: "Destinataire",
            join_to: "Joigneur",
            joined_from: "Joint",
            converted_to: "Converti",
            converted_from: "Source"
        },
        htmlTitleSelection: {
            Facet: "Sélection de Tag",
            Contact: "Sélection de Contact",
            Account: "Sélection de Compte",
            Opportunity: "Sélection d'Opportunité",
            Lead: "Sélection de Piste",
            Event: "Sélection d'Evénement",
            Task: "Sélection de Tâche",
            Document: "Sélection de Document",
            Note: "Sélection de Note",
            Report: "Sélection de Compte-rendu",
            Plan: "Sélection de Plan",
            Attendee: "Sélection de Participant",
            Attachee: "Sélection de Pièce jointe",
            Plannee: "Sélection de Point"
        },
        htmlTypeName: {
            Facet: "Tag",
            Contact: "Contact",
            Account: "Compte",
            Opportunity: "Opportunité",
            Lead: "Piste",
            Event: "Evénement",
            Task: "Tâche",
            Document: "Document",
            Note: "Note",
            Report: "Compte-rendu",
            Plan: "Plan",
            Attendee: "Participant",
            Attachee: "Pièce jointe",
            Plannee: "Point"
        },
        htmlSuggestionName: {
            eventAttendees: "Participants à l'événement",
            eventAttachments: "Documents de l'événement",
            sameCompany: "Même entreprise",
            sameManager: "Même manager",
            sameTeam: "Même équipe",
            all: "Tous"
        },
        htmlMsgServerPb: "Problème sur le serveur. Veuillez contacter votre administrateur.",
        htmlMsgUserLoginRequired: "Courriel requis ou incorrect.",
        htmlMsgUserEmailRequired: "Courriel requis.",
        htmlMsgNoConnectionWithSF: "Pas de connexion active avec SalesForce.",
        htmlMsgRequestFormatInvalid: "Logiciel client probablement périmé : requête invalide.",
        htmlMsgNoMultipleRefreshForSameUser: "Une autre synchronisation est déjà en cours pour le même utilisateur.",
        htmlMsgWpUserSendingEmailPb: "Le courriel avec mot de passe n'a pas été envoyé depuis le site web Apps4pro.",
        htmlMsgNoRefreshInDemoMode: "Synchronisation non accessible en mode démonstration.",
        htmlMsgSynchronizationServerPb: "Problème de Synchronisation sur le serveur. Veuillez contacter votre administrateur.",
        htmlMsgSynchronizationUserPb: "Problème de Synchronisation : utilisateur invalide. Veuillez contacter votre administrateur.",
        htmlMsgUserLoginNotExists: "Le compte utilisateur n'existe pas en base de données.",
        htmlMsgSynchronizationWpPb: "Problème sur le site web Apps4pro. Veuillez contacter votre administrateur.",
        htmlMsgSynchronizationDbPb: "Problème de Synchronisation en base de données. Veuillez contacter votre administrateur.",
        htmlMsgW4pUserAlreadyExists: "Le compte utilisateur existe déjà en base de données.",
        htmlMsgW4pUserCreationPb: "Le compte utilisateur n'a pas été créé en base de données.",
        htmlMsgW4pUserRightsCreationPb: "Les droits utilisateur n'ont pas été créés en base de données.",
        htmlMsgW4pUserRightsUpdatePb: "Les droits utilisateur n'ont pas été modifiés en base de données.",
        htmlMsgPasswordRequired: "Mot de passe requis.",
        htmlMsgWpUserCreationPb: "Le compte utilisateur n'a pas été créé sur le site web Apps4pro.",
        htmlMsgLoadLocalePb: "Problème d'initialisation de la Locale : utilisation des valeurs précédentes.",
        htmlMsgLoadLocaleReady: "Locale {0} prête.",
        htmlMsgInitializingFileStorage: "Initialisation du File Storage avec un espace de {0} octets ...",
        htmlMsgLoadFileStoragePb: "Problème de chargement du File Storage. L'application ne peut pas démarrer !",
        htmlMsgFeedbackMessageEmpty: "Votre message est vide",
        htmlMsgFeedbackContactEmpty: "Merci d'indiquer une mail valide",
        htmlMsgFeedbackEmail: "Merci pour votre retour !",
        htmlMsgFeedbackPhone: "Si vous pouvez être joint par téléphone",
        htmlMsgFeedbackMoreObjects: "Bonjour\nJ'ai besoin de plus d'objets :\n ... comme ?",
        htmlMsgFeedbackMoreObjectsQuestion: "... besoin d'un autre objet ?",
        htmlMsgFeedbackSFConnector: "Bonjour\nJe veux me connecter a mes donnees Salesforce.com.",
        htmlMsgFeedbackOtherConnector: "Bonjour\nJe veux me connecter a mon CRM :\n ... lequel ? ",
        htmlMsgFeedbackOtherConnectorQuestion: "Vous voulez vous connecter avec votre CRM ?",
        htmlMsgFeedbackSuggestion: "Bonjour\nJ'adorerais avoir des infos sur :\n ... lesquelles ?",
        htmlMsgFeedbackSuggestionQuestion: "Plus de suggestion ?",
        htmlMsgRejectImportNotLogged: "Import rejeté : vous n'êtes pas connecté.",
        htmlMsgImportFile: "Import du fichier {0}",
        htmlMsgFileImport: "Import de fichier",
        htmlMsgSynchronizationOK: "Synchronisation OK.",
        htmlMsgInvalidPassword: "Mot de passe invalide.",
        htmlMsgSynchronizationClientPb: "Problème de Synchronisation sur le client.\nDo you have internet available ?\nSend us an email : help@apps4pro.com",
        htmlMsgMaintenancePb: "Serveur temporairement arrêté. Essayez plus tard.",
        htmlMsgSendingEmailPb: "Le courriel n'a pas été envoyé depuis le serveur.",
        htmlMsgTakePicturePb: "Problème de prise de photo.",
        htmlMsgMakeNotePb: "Problème de création de note.",
        htmlMsgMakeReportPb: "Problème de création de rapport.",
        htmlMsgFileImportPb: "Problème d'importation de fichier.",
        htmlMsgTakePictureOK: "Prise de photo réussie.",
        htmlMsgFileImportOK: "Import de fichier réussi.",
        htmlMsgDummyPicture: "Aucun appareil photo détecté. Une image exemple sera utilisée.",
        htmlMsgNbObjectsInserted: "{0} objet(s) inséré(s)",
        htmlMsgRenameFileOK: "Renommage de fichier réussi.",
        htmlMsgRenameFilePb: "Problème de renommage de fichier.",
        htmlMsgRemoveFileOK: "Suppression de fichier réussie.",
        htmlMsgRemoveFilePb: "Problème de suppression de fichier.",
        htmlMsgClearFileStorageOK: "Vidage de l'espace fichiers réussi.",
        htmlMsgClearFileStoragePb: "Problème de vidage de l'espace fichiers.",
        htmlMsgObjectInvalid: "Le formulaire comporte des erreurs",
        htmlMsgTitleRequired: "Titre requis",
        htmlMsgStartDateInvalid: "Date de début invalide",
        htmlMsgEndDateInvalid: "Date de fin invalide",
        htmlMsgEmailsRequired: "Email requis",
        htmlTitle: {
            Facet: "Tag",
            Contact: "Contact",
            Account: "Compte",
            Opportunity: "Opportunité",
            Lead: "Piste",
            Event: "Evénement",
            Task: "Tâche",
            Document: "Document",
            Note: "Note",
            Report: "Compte-rendu",
            Plan: "Plan",
            Attendee: "Participant",
            Attachee: "Attachement",
            Plannee: "Point"
        },
        htmlLinkName: {
            faceter: "Tag sur {0}",
            faceted: "Taggé par {0}",
            creator: "Créateur de {0}",
            created: "Créé par {0}",
            modifier: "Editeur de {0}",
            modified: "Edité par {0}",
            parent: "Parent de {0}",
            child: "Enfant de {0}",
            owner: "Possesseur de {0}",
            owned: "Possédé par {0}",
            accounter: "Gérant de {0}",
            accounted: "Géré par {0}",
            manager: "Manager de {0}",
            managed: "Managé par {0}",
            leader: "Meneur de {0}",
            led: "Mené par {0}",
            affecter: "Affecté à {0}",
            affected: "Evénements affectés à {0}",
            attended: "Evénements ayant le participant {0}",
            attendee: "Participants à {0}",
            attached: "Evénements ayant la pièce jointe {0}",
            attachee: "Attachés à {0}",
            planned: "Evénements ayant le plan {0}",
            plannee: "Points à {0}",
            mail_to: "Mailé par {0}",
            mailed_from: "Mailé de {0}",
            join_to: "Rapporté par {0}",
            joined_from: "Rapport de {0}",
            converted_to: "Convertion de {0}",
            converted_from: "Converti en {0}"
        },
        htmlTitleDialogFeed: "Ecrire un post",
        htmlTitleDialogEmail: "Ecrire un mail",
        htmlFormTitleRelated: "Relations associées",
        htmlFormTitleContactDetails: "Coordonnées",
        htmlFormTitlePersonal: "Informations personnelles",
        htmlFormTitleOtherContactDetails: "Autres coordonnées",
        htmlFormTitleSegmentation: "Segmentation",
        htmlFormTitleAddress: "Adresse",
        htmlTitleConfig: "Configuration",
        htmlTitleConfigYourAccount: "Votre compte",
        htmlTitleConfigSystemStatus: "Etat du système",
        htmlTitleLibrary: "Bibliothèque",
        htmlTitleCalendar: "Calendrier",
        htmlTitleShareByEmail: "Partager par email",
        htmlTitleShareByChatter: "Partager par chatter",
        htmlTitleTypeNote: "Une note",
        htmlTitleTypeReport: "Un compte-rendu",
        htmlTitleReportOf: "Compte-rendu de {0}",
        htmlTitleNoteOf: "Note de {0}",
        htmlTitleFeedback: "Avis utilisateur",
        htmlFieldsetAddress: "Adresse",
        htmlFieldsetContact: "Contact",
        htmlFieldsetOther: "Autre",
        htmlFieldsetDetails: "Détails",
        htmlFieldsetTitle: "Titre",
        htmlFieldsetPhones: "Téléphones",
        htmlFieldsetEmails: "Adresses e-mail",
        htmlFieldsetPrimaryAddress: "Adresse principale",
        htmlFieldsetAlternateAddress: "Adresse secondaire",
        htmlFieldsetBillingAddress: "Adresse de facturation",
        htmlFieldsetDescription: "Description",
        htmlFieldsetWork: "Professionnel",
        htmlFormEmail: "Email",
        htmlFormEmailPlaceHolder: "Email",
        htmlFormPassword: "Mot de passe",
        htmlFormPasswordPlaceHolder: "Mot de passe",
        htmlFormTo: "A",
        htmlFormToPlaceHolder: "A",
        htmlFormSubject: "Sujet",
        htmlFormSubjectPlaceHolder: "Sujet",
        htmlFormMessage: "Message",
        htmlFormMessagePlaceholder: "Votre message...",
        htmlFormSearch: "Rechercher",
        htmlFormSearchPlaceHolder: "Rechercher",
        htmlFormTitle: "Titre",
        htmlFormTitlePlaceHolder: "Titre",
        htmlFormPhone: "Téléphone",
        htmlFormPhonePlaceHolder: "Téléphone",
        htmlFormBack: "Back",
        htmlFormSalutation: "Civilité",
        htmlFormFirstName: "Prénom",
        htmlFormLastName: "Nom",
        htmlFormContactType: "Type",
        htmlFormCompany: "Société",
        htmlFormWork: "Bureau",
        htmlFormMobile: "Mobile",
        htmlFormFax: "Fax",
        htmlFormFaxAbbrev: "(fax)",
        htmlFormHouse: "Domicile",
        htmlFormHouseAbbrev: "(dom)",
        htmlFormOther: "Autre",
        htmlFormHome: "Domicile",
        htmlFormList: "Liste",
        htmlFormStreet: "Rue",
        htmlFormCity: "Ville",
        htmlFormState: "Region",
        htmlFormZipCode: "Code postal",
        htmlFormCountry: "Pays",
        htmlFormBirthday: "Date de naissance",
        htmlFormDepartment: "Département",
        htmlFormDivision: "Division",
        htmlFormAssistantName: "Assistant",
        htmlFormAssistantPhone: "Asst. Téléphone",
        htmlFormLeadSource: "Origine",
        htmlFormCreatedBy: "Créé par",
        htmlFormCreatedDate: ", le ",
        htmlFormCreatedOn: "Le ",
        htmlFormLastModifiedBy: "Modifié par ",
        htmlFormLastModifiedDate: ", le ",
        htmlFormConvertedDate: "Converti le ",
        htmlFormWhenDate: " écrit le ",
        htmlFormCompanyName: "Société",
        htmlFormType: "Type",
        htmlFormIndustry: "Secteur d'activité",
        htmlFormAnnualIncome: "Revenu annuel",
        htmlFormWebsite: "Site web",
        htmlFormEmployeeNumber: "Nombre d'employés",
        htmlFormSicCode: "Code NAF",
        htmlFormDateEntered: "Date de début",
        htmlFormPrefix: "Préfixe",
        htmlFormName: "Nom ",
        htmlFormAmount: "Montant",
        htmlFormCurrencyCode: "Code devise",
        htmlFormProbability: "Probabilité",
        htmlFormStage: "Etat",
        htmlFormNextStep: "Prochaine étape",
        htmlFormDateClosed: "Date de fin",
        htmlFormDueDate: "Date d'objectif",
        htmlFormLength: "Taille (bytes)",
        htmlFormLastUpdate: "Dernière modification",
        htmlFormLocation: "Lieu",
        htmlFormUrl: "Url",
        htmlFormDurationHours: "Durée (heures)",
        htmlFormDurationMinutes: "Durée (minutes)",
        htmlFormDateStart: "Du",
        htmlFormDateEnd: "Au",
        htmlFormStatus: "Statut",
        htmlFormDateReminder: "Date de Rappel",
        htmlFormReminderSet: "Ajouter rappel",
        htmlFormDescription: "Description",
        htmlTextInitializingLocale: "Initialisation des paramètres régionaux...",
        htmlTextInitializingData: "Initialisation des données...",
        htmlTextDemoModeImpossible: "Certaines fonctionnalités ne sont pas disponibles en mode démo.",
        htmlTextDemoModeMoreData: "Plus de data ?",
        htmlTextHours: "Heures",
        htmlTextMinutes: "Minutes",
        htmlDayOfWeek: {
            "0": "Dimanche",
            "1": "Lundi",
            "2": "Mardi",
            "3": "Mercredi",
            "4": "Jeudi",
            "5": "Vendredi",
            "6": "Samedi"
        },
        htmlTextMonday: "Lundi",
        htmlTextTuesday: "Mardi",
        htmlTextWednesday: "Mercredi",
        htmlTextThursday: "Jeudi",
        htmlTextFriday: "Vendredi",
        htmlTextSaturday: "Samedi",
        htmlTextSunday: "Dimanche",
        htmlTextShortMonday: "Lun",
        htmlTextShortTuesday: "Mar",
        htmlTextShortWednesday: "Mer",
        htmlTextShortThursday: "Jeu",
        htmlTextShortFriday: "Ven",
        htmlTextShortSaturday: "Sam",
        htmlTextShortSunday: "Dim",
        htmlMonth: {
            "0": "Janvier",
            "1": "Février",
            "2": "Mars",
            "3": "Avril",
            "4": "Mai",
            "5": "Juin",
            "6": "Juillet",
            "7": "Aout",
            "8": "Septembre",
            "9": "Octobre",
            "10": "Novembre",
            "11": "Décembre"
        },
        htmlTextJanuary: "Janvier",
        htmlTextFebruary: "Février",
        htmlTextMarch: "Mars",
        htmlTextApril: "Avril",
        htmlTextMay: "Mai",
        htmlTextJune: "Juin",
        htmlTextJuly: "Juillet",
        htmlTextAugust: "Aout",
        htmlTextSeptember: "Septembre",
        htmlTextOctober: "Octobre",
        htmlTextNovember: "Novembre",
        htmlTextDecember: "Décembre",
        htmlTextShortJanuary: "Jan",
        htmlTextShortFebruary: "Fev",
        htmlTextShortMarch: "Mar",
        htmlTextShortApril: "Avr",
        htmlTextShortMay: "Mai",
        htmlTextShortJune: "Jun",
        htmlTextShortJuly: "Jul",
        htmlTextShortAugust: "Aou",
        htmlTextShortSeptember: "Sep",
        htmlTextShortOctober: "Oct",
        htmlTextShortNovember: "Nov",
        htmlTextShortDecember: "Dec",
        htmlTextToday: "Auj.",
        htmlTextLastRefresh: "Dernière",
        htmlTextLastRefreshNone: "...",
        htmlTextYesterday: "Hier",
        htmlTextTomorrow: "Demain",
        htmlTextConfirmActiveCrm: "Voulez-vous changer l'usage du CRM (cela videra et rechargera toutes les données) :",
        htmlTextConfirmDelete: "Voulez-vous supprimer:",
        htmlTextConfirmDeleteLink: "Le lien entre '{0}' et '{1}' ?",
        htmlTextConfirmRemoveLink: "Voulez-vous supprimer:",
        htmlTextConfirmSwitchUser: "Etes vous sur de vouloir changer d'utilisateur ? Vous allez perdre vos données locales.",
        htmlTextManager: "Manager",
        htmlTextTeam: "Equipe",
        htmlTextAttendee: "Invité",
        htmlTextContactWithoutCompany: "Pas de société liée",
        htmlTextContactOrigin: "Origine: ",
        htmlTextReminder: "Rappel: ",
        htmlTextRatings: "Appréciations",
        htmlTextRatingsFeeling: "Ressenti",
        htmlTextRatingsQuality: "Qualité",
        htmlTextRatingsEnvironment: "Environnement",
        htmlTextRatingsObjectiveAchieved: "Objectif atteint",
        htmlTextRatingsMeetingDone: "Rencontré effectivement",
        htmlTextDefaultEventName: "Nouveau rendez-vous",
        htmlTextTheme: {
            "c4p-cosmo": "App4pro Cosmo",
            "c4p-default": "App4pro Défaut",
            "c4p-amelia": "App4pro Amelia",
            "c4p-apps4pro": "App4pro Officiel"
        },
        htmlTextGuiderSlide01: "<h5>Organiser. Partager. Vendre.</h5><p>Vos donn&eacute;es CRM sur le terrain. Travaillez avec ou sans connexion. <br />Organisez votre agenda, pr&eacute;parez soigneusement vos rendez-vous.<br>Collectez des informations, prenez des notes, suivez vos prospects et vos clients &#8230; sur votre tablette ou sur votre smartphone.</p>",
        htmlTextGuiderSlide02: "<h5>Votre CRM interactif.</h5><p>Visualisation et manipulation intuitive de vos donn&eacute;es <br />Contacts, comptes, opportunit&eacute;s, etc. <br />Biblioth&egrave;que de documents, d&rsquo;images, de vid&eacute;os<br />Connexion s&eacute;curis&eacute;e et stockage local crypt&eacute;<br />Utilisation compl&egrave;te hors connexion.</p>",
        htmlTextGuiderSlide03: "<h5>Planifier vos r&eacute;unions.</h5><p><br />Associez y vos participants, vos documents, etc. <br />R&eacute;digez des notes, prenez des photos.<br /><br />Partagez et vendez !</p>",
        htmlTextGuiderCalendar: "<ol><li>L'agenda de ma journée en un coup d'oeil. Je peux rajouter un rendez-vous.</li><li>Je consulte mes informations commerciales.</li><li>Je peux commencer une présentation.</li></ol>",
        htmlTextGuiderEvent: "<ol><li>J'ajoute des invités, des documents...</li><li>Je commence une présentation.</li></ol>",
        htmlTextGuiderMeeting: "<ol><li>Présenter des documents.</li><li>Prendre des notes, des photos...</li><li>Partager avec mes clients.</li></ol>",
        htmlFormGuiderTextSuccessCreateAccount: "Votre compte a été créé avec succès. Vos identifiants de connexion ont été envoyés à votre adresse email",
        htmlFormGuiderTextSuccessRequestPassword: "Un lien permettant de changer votre mot de passe vient d'être envoyé à votre adresse mail",
        htmlFormGuiderSlide1Title: "CRM Mobile",
        htmlFormGuiderSlide1Text: "Suivez vos clients et vos opportunités. Consultez les informations importantes, même quand vous n'êtes pas au bureau, en mode connecté ou déconnecté.",
        htmlFavorites: "Favoris",
        htmlDefaultEventName: "Nouvel événement",
        htmlDefaultTaskName: "Nouvelle tâche",
        htmlDefaultNewLead: "Nouvelle piste",
        htmlDefaultNewContact: "Nouveau contact",
        htmlDefaultNewAccount: "Nouveau compte",
        htmlDefaultOpportunityName: "Nouvelle opportunité",
        htmlDefaultStage: "En prospection",
        htmlOptionsSalutation: {
            mr: "Mr",
            ms: "Mme",
            mrs: "Mlle",
            dr: "Dr",
            prof: "Prof"
        },
        htmlOptionsLeadSource: {
            none: "Contact direct",
            advertisement: "Publicité",
            employeeReferral: "Référence collègue",
            externalReferral: "Référence externe",
            partner: "Partenaire",
            publicRelations: "Relations publiques",
            seminarInternal: "Séminaire interne",
            seminarPartner: "Séminaire",
            tradeShow: "Forum",
            web: "Web",
            wordOfMouth: "Bouche à oreille",
            other: "Autre"
        },
        htmlOptionsIndustry: {
            agriculture: "Agriculture",
            apparel: "Apparel",
            banking: "Banking",
            biotechnology: "Biotechnology",
            chemicals: "Chemicals",
            communications: "Communications",
            construction: "Construction",
            consulting: "Consulting",
            education: "Education",
            electronics: "Electronics",
            energy: "Energy",
            engineering: "Engineering",
            entertainment: "Entertainment",
            environmental: "Environmental",
            finance: "Finance",
            foodBeverage: "Food & Beverage",
            government: "Government",
            healthcare: "Healthcare",
            hospitality: "Hospitality",
            insurance: "Insurance",
            machinery: "Machinery",
            manufacturing: "Manufacturing",
            media: "Media",
            notForProfit: "Not for Profit",
            recreation: "Recreation",
            retail: "Retail",
            shipping: "Shipping",
            technology: "Technology",
            telecommunications: "Telecommunications",
            transportation: "Transportation",
            utilities: "Utilities",
            other: "Other"
        },
        htmlOptionsOpportunityStage: {
            prospecting: "En prospect",
            qualification: "Qualification",
            needsAnalysis: "Besoin analyse",
            valueProposition: "Faire une proposition",
            decisionMakers: "Id. décideurs",
            perceptionAnalysis: "Préétude",
            quote: "Estimation",
            negotiation: "Négociation/revue",
            won: "Gagné",
            lost: "Perdu"
        },
        htmlRecently: {
            hour: "Moins d'une heure",
            day: "Moins d'un jour",
            week: "Moins d'une semaine",
            month: "Moins d'un mois",
            year: "Moins d'une année",
            epoch: "Plus d'une année"
        },
        htmlGotoMeeting: "Partir en rendez-vous",
        htmlCreateEmptyMeeting: "Créer un nouveau rendez-vous",
        htmlGotoMeetingWith: "Partir en rendez-vous avec",
        htmlUseExistingMeeting: "Utiliser un rendez-vous existant",
        htmlMeetingPlan: "Plan",
        htmlMeetingLinkObject: "Objets liés",
        htmlMeetingTitle: "Titre",
        htmlMeetingNoTitle: "Pas de titre",
        htmlMeetingNoElementSelected: 'Pas d\'objet attaché, glissez-en un (Cliqué sur "+" )',
        htmlMeetingDropItemHere: "Déposé un objet ici",
        htmlMeetingChange: "Changer...",
        htmlMeetingMoveItem: "Déplacez l'objet ici",
        htmlMeetingAdd: "Ajouter",
        rangeSeparator: " - "
    }
};

var c4p;

c4p || (c4p = {}), c4p.Demo = {
    index: {
        sf: {
            "005i0000000I8cAAAS": 0,
            "005i0000000I8c5AAC": 1,
            "003i00000030XVHAA2": 2,
            "003i00000030XVJAA2": 3,
            "003i0000005LREeAAO": 4,
            "003i0000005LRDvAAO": 5,
            "003i0000005LREPAA4": 6,
            "003i0000005LREUAA4": 7,
            "003i0000005LPABAA4": 8,
            "003i0000005LAirAAG": 9,
            "003i0000005LJ6aAAG": 10,
            "003i0000005LOh4AAG": 11,
            "003i0000005LREoAAO": 12,
            "003i0000005LOdWAAW": 13,
            "003i0000005LPzxAAG": 14,
            "003i0000005LOdRAAW": 15,
            "003i0000005LQPrAAO": 16,
            "003i0000005LQPqAAO": 17,
            "003i0000005LREjAAO": 18,
            "003i0000005LREAAA4": 19,
            "003i00000030XVIAA2": 20,
            "003i00000030XVQAA2": 21,
            "003i00000030XVGAA2": 22,
            "003i00000030XVDAA2": 23,
            "003i00000030XVFAA2": 24,
            "003i00000030XVRAA2": 25,
            "003i00000030XVEAA2": 26,
            "003i00000030XVWAA2": 27,
            "003i00000030XVLAA2": 28,
            "003i00000030XVSAA2": 29,
            "003i00000030XVUAA2": 30,
            "003i00000030XVKAA2": 31,
            "003i00000030XVPAA2": 32,
            "003i00000030XVNAA2": 33,
            "003i00000030XVTAA2": 34,
            "003i00000030XVVAA2": 35,
            "003i00000030XVMAA2": 36,
            "003i00000030XVOAA2": 37,
            "001i0000005MiYuAAK": 38,
            "001i0000005MiYzAAK": 39,
            "001i0000005MiZ4AAK": 40,
            "001i0000003TYrNAAW": 41,
            "001i0000005MiYpAAK": 42,
            "001i0000003TYrOAAW": 43,
            "001i0000003TYrIAAW": 44,
            "001i0000003TYrMAAW": 45,
            "001i0000003TYrKAAW": 46,
            "001i0000003TYrLAAW": 47,
            "001i0000003TYrJAAW": 48,
            "001i0000003TYrSAAW": 49,
            "001i0000003TYrRAAW": 50,
            "001i0000003TYrPAAW": 51,
            "001i0000003TYrHAAW": 52,
            "001i0000003TYrQAAW": 53,
            "00Ui00000013wRCEAY": 54,
            "00Ui00000014DWTEA2": 55,
            "00Ui00000014DY5EAM": 56,
            "00Ui00000014DWdEAM": 57,
            "00Ui00000014DWxEAM": 58,
            "00Ui00000014DW4EAM": 59,
            "00Ui00000013wQTEAY": 60,
            "00Ui00000014DVaEAM": 61,
            "00Ui00000014DXqEAM": 62,
            "00Ui00000014DX2EAM": 63,
            "00Ui00000014DWOEA2": 64,
            "00Ui00000014DVuEAM": 65,
            "00Ui00000014DVpEAM": 66,
            "00Ui00000014DWnEAM": 67,
            "00Ui00000014DVzEAM": 68,
            "00Ui00000014DX7EAM": 69,
            "00Ui00000014DXCEA2": 70,
            "00Ui00000014DWEEA2": 71,
            "00Ui00000014DY0EAM": 72,
            "00Ui00000014DWYEA2": 73,
            "00Ui00000014DXlEAM": 74,
            "006i0000002ZNI8AAO": 75,
            "006i0000002ZNHwAAO": 76,
            "006i0000002ZNIIAA4": 77,
            "006i0000002ZNI3AAO": 78,
            "006i0000002ZNI1AAO": 79,
            "006i0000002ZNIHAA4": 80,
            "006i0000002ZNI6AAO": 81,
            "006i0000002ZNHvAAO": 82,
            "006i0000002ZNIGAA4": 83,
            "006i0000002ZNIMAA4": 84,
            "006i0000002ZNI0AAO": 85,
            "006i0000002ZNI5AAO": 86,
            "006i0000002ZNI4AAO": 87,
            "006i0000002ZNIJAA4": 88,
            "006i0000002ZNHyAAO": 89,
            "006i0000002ZNHxAAO": 90,
            "006i0000002ZNIBAA4": 91,
            "006i0000002ZNILAA4": 92,
            "006i0000002ZNHzAAO": 93,
            "006i0000002ZNIAAA4": 94,
            "006i0000002ZNIKAA4": 95,
            "006i0000002ZNHsAAO": 96,
            "006i0000002ZNI2AAO": 97,
            "006i0000002ZNI7AAO": 98,
            "006i0000002ZNIFAA4": 99,
            "006i0000002ZNHtAAO": 100,
            "006i0000002ZNI9AAO": 101,
            "006i0000002ZNIEAA4": 102,
            "006i0000002ZNIDAA4": 103,
            "006i0000002ZNHuAAO": 104,
            "006i0000002ZNICAA4": 105,
            "00Pi0000000KnMpEAK": 106,
            "00Pi0000000KnMzEAK": 107,
            "00Pi0000000KnMuEAK": 108,
            DUMMY_SF_ID_001: 109,
            DUMMY_SF_ID_002: 110,
            DUMMY_SF_ID_003: 111,
            DUMMY_SF_ID_004: 112,
            DUMMY_SF_ID_005: 113,
            DUMMY_SF_ID_006: 114,
            DUMMY_SF_ID_007: 115,
            DUMMY_SF_ID_008: 116,
            "0REi0000000PHWHGA4": 117,
            DUMMY_SF_ID_009: 118,
            DUMMY_SF_ID_010: 119,
            DUMMY_SF_ID_011: 120,
            DUMMY_SF_ID_012: 121,
            DUMMY_SF_ID_013: 122,
            DUMMY_SF_ID_014: 123
        }
    },
    objects: [ {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "005i0000000I8cAAAS",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "005i0000000I8cAAAS",
                account_id: "",
                manager_id: "",
                assigned_contact_id: "",
                description: "I’m here to help you get started with Chatter. I’ll introduce you to features, create sample posts, and suggest tips and best practices.  I'm an automated user so you don't need to worry about privacy! I can't see any of your posts or files.  If I'm too noisy, have your admin or moderator deactivate me and I'll stop posting.",
                primary_address_city: "San Francisco",
                primary_address_country: "USA",
                primary_address_state: "CA",
                primary_address_street: "Landmark @ One Market",
                primary_address_zipcode: "94105",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "noreply@chatter.salesforce.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "",
                salutation: "",
                title: "",
                first_name: "Chatter",
                last_name: "Expert",
                contact_type: "User",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28T13:18:19Z",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-02-28T13:18:19Z"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "005i0000000I8c5AAC",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "005i0000000I8c5AAC",
                account_id: "",
                manager_id: "",
                assigned_contact_id: "",
                description: "",
                primary_address_city: "",
                primary_address_country: "FR",
                primary_address_state: "A3",
                primary_address_street: "",
                primary_address_zipcode: "37000",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "applog100@gmail.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "",
                salutation: "",
                title: "",
                first_name: "Balthazar",
                last_name: "Zemettier",
                contact_type: "User",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28T13:18:05Z",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-10T11:49:56Z"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVHAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVHAA2",
                account_id: "001i0000003TYrNAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "Lawrence",
                primary_address_country: "USA",
                primary_address_state: "KS",
                primary_address_street: "1301 Hoch Drive",
                primary_address_zipcode: "66045",
                alt_address_city: "Lawrence",
                alt_address_country: "USA",
                alt_address_state: "KS",
                alt_address_street: "1301 Hoch Drive",
                alt_address_zipcode: "66045",
                email: "jtaylor@film.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "(785) 265-5350",
                phone_other: "",
                phone_work: "(785) 241-6200",
                salutation: "Mr",
                title: "SVP, Operations",
                first_name: "John",
                last_name: "Taylor",
                contact_type: "Contact",
                birthday: "false",
                department: "Internal Operations",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "Purchased List",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-23 16:04:18"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVJAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVJAA2",
                account_id: "001i0000003TYrOAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "Chicago",
                primary_address_country: "USA",
                primary_address_state: "",
                primary_address_street: "2334 N. Michigan Avenue, Suite 1500",
                primary_address_zipcode: "IL 60601",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "krouvmedjian_adele@bizfirmcorp.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "(312) 596-1500",
                phone_house: "",
                phone_mobile: "(312) 596-1563",
                phone_other: "",
                phone_work: "(312) 596-1000",
                salutation: "Mr.",
                title: "VP, Facilities",
                first_name: "Adèle",
                last_name: "Krouvmedjian",
                contact_type: "Contact",
                birthday: "1948-12-18",
                department: "Facilities",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "External Referral",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-04 11:35:18"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i0000005LREeAAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i0000005LREeAAO",
                account_id: "001i0000005MiYuAAK",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "sjackson@orpkick.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "",
                salutation: "Ms.",
                title: "",
                first_name: "Sarah",
                last_name: "Jackson",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:26:13",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:43:36"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i0000005LRDvAAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i0000005LRDvAAO",
                account_id: "001i0000005MiZ4AAK",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "pdemaud@rpdrive.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "",
                salutation: "Mr.",
                title: "",
                first_name: "Paul",
                last_name: "D'Emaud",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:25:20",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:41:40"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i0000005LREPAA4",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i0000005LREPAA4",
                account_id: "001i0000003TYrIAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "UK",
                primary_address_street: "Kings Park, 17th Avenue, Team Valley Trading Estate,  Gateshead, Tyne and Wear NE26 3HS  United Kingdom",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "rbrown@arp.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "+44 191 4956203",
                salutation: "Mr.",
                title: "",
                first_name: "Robert",
                last_name: "Brown",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:25:48",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:42:53"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i0000005LREUAA4",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i0000005LREUAA4",
                account_id: "001i0000003TYrOAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "Chicago",
                primary_address_country: "",
                primary_address_state: "IL",
                primary_address_street: "2334 N. Michigan Avenue, Suite 1500  Chicago, IL 60601, USA",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "rwhite@businessfirmcorp.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "(312) 596-1000",
                salutation: "Ms.",
                title: "",
                first_name: "Rosie",
                last_name: "White",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:26:01",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-25 14:47:00"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i0000005LPABAA4",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i0000005LPABAA4",
                account_id: "001i0000005MiYzAAK",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "msantamaria@plotcorp.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "",
                salutation: "Ms.",
                title: "",
                first_name: "Marina",
                last_name: "Santamaria",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:24:03",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-25 14:47:39"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i0000005LAirAAG",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i0000005LAirAAG",
                account_id: "001i0000005MiYzAAK",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "mjones@plotcorp.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "",
                salutation: "Ms.",
                title: "",
                first_name: "Mary",
                last_name: "Jones",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:24:18",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:32:18"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i0000005LJ6aAAG",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i0000005LJ6aAAG",
                account_id: "001i0000003TYrLAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "Burlington",
                primary_address_country: "USA",
                primary_address_state: "NC",
                primary_address_street: "525 S. Lexington Ave",
                primary_address_zipcode: "27215",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "pwilliamson@bestwest.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "(336) 222-7000",
                salutation: "Ms.",
                title: "",
                first_name: "Patty",
                last_name: "Williamson",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:25:08",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:41:06"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i0000005LOh4AAG",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i0000005LOh4AAG",
                account_id: "001i0000005MiZ4AAK",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "wberthelaud@rpdrive.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "",
                salutation: "Mr.",
                title: "",
                first_name: "William",
                last_name: "Berthelaud",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:23:47",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-25 14:46:37"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i0000005LREoAAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i0000005LREoAAO",
                account_id: "001i0000003TYrIAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "UK",
                primary_address_street: "Kings Park, 17th Avenue, Team Valley Trading Estate,  Gateshead, Tyne and Wear NE26 3HS  United Kingdom",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "sbernard@arp.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "+44 191 4956203",
                salutation: "Mr.",
                title: "",
                first_name: "Sylvain",
                last_name: "Bernard",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:26:44",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:44:22"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i0000005LOdWAAW",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i0000005LOdWAAW",
                account_id: "001i0000003TYrHAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "Mountain View",
                primary_address_country: "",
                primary_address_state: "CA",
                primary_address_street: "345 Shoreline Park  Mountain View, CA 94043  USA",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "nvbladovskaya@cortopia.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "(650) 867-3450",
                salutation: "Ms.",
                title: "",
                first_name: "natalia",
                last_name: "Vladovskaya",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:23:13",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:40:39"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i0000005LPzxAAG",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i0000005LPzxAAG",
                account_id: "001i0000005MiYuAAK",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "msaintjean@orpkick.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "",
                salutation: "Ms.",
                title: "",
                first_name: "Maura",
                last_name: "Saintjean",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:24:32",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-25 14:47:30"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i0000005LOdRAAW",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i0000005LOdRAAW",
                account_id: "001i0000005MiYuAAK",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "jwilson@orpkick.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "",
                salutation: "Mr.",
                title: "",
                first_name: "John",
                last_name: "Wilson",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:22:51",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:31:40"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i0000005LQPrAAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i0000005LQPrAAO",
                account_id: "001i0000005MiZ4AAK",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "zmontfort@rpdrive.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "",
                salutation: "Ms.",
                title: "",
                first_name: "Zohra",
                last_name: "Montfort",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:27:03",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-25 14:46:26"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i0000005LQPqAAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i0000005LQPqAAO",
                account_id: "001i0000003TYrLAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "Burlington",
                primary_address_country: "USA",
                primary_address_state: "NC",
                primary_address_street: "525 S. Lexington Ave",
                primary_address_zipcode: "27215",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "mrhink@bestwest.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "(336) 222-7000",
                salutation: "Ms.",
                title: "",
                first_name: "Mybel",
                last_name: "Rhink",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:24:48",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:33:07"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i0000005LREjAAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i0000005LREjAAO",
                account_id: "001i0000005MiYzAAK",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "syounger@plotcorp.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "",
                salutation: "Mr.",
                title: "",
                first_name: "Slobodan",
                last_name: "Younger",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:26:26",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-25 14:46:47"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i0000005LREAAA4",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i0000005LREAAA4",
                account_id: "001i0000003TYrMAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "Paris",
                primary_address_country: "France",
                primary_address_state: "",
                primary_address_street: "2 Place Jussieu",
                primary_address_zipcode: "75251",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "pwilliams@dynacorp.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "",
                salutation: "Mr.",
                title: "",
                first_name: "Peter",
                last_name: "Williams",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:25:35",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:42:04"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVIAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVIAA2",
                account_id: "001i0000003TYrOAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "Chicago",
                primary_address_country: "USA",
                primary_address_state: "",
                primary_address_street: "2335 N. Michigan Avenue, Suite 1500",
                primary_address_zipcode: "IL 60601",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "decadiz_abel@bizfirmcorp.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "(312) 596-1500",
                phone_house: "",
                phone_mobile: "(312) 596-1230",
                phone_other: "",
                phone_work: "(312) 596-1000",
                salutation: "Mr.",
                title: "SVP, Administration and Finance",
                first_name: "Abel",
                last_name: "Decadiz",
                contact_type: "Contact",
                birthday: "1946-10-07",
                department: "Finance",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "External Referral",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-04 11:22:48"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVQAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVQAA2",
                account_id: "001i0000003TYrIAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "Kings Park, 17th Avenue, Team Valley Trading Estate,  Gateshead, Tyne and Wear NE26 3HS  United Kingdom",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "apourhain@arp.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "+44 191 4956620",
                phone_house: "",
                phone_mobile: "+44 191 3456234",
                phone_other: "",
                phone_work: "+44 191 4956203",
                salutation: "Ms.",
                title: "VP, Finance",
                first_name: "Arthus",
                last_name: "Pourhain",
                contact_type: "Contact",
                birthday: "1939-06-09",
                department: "Finance",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "Public Relations",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:27:57"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVGAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVGAA2",
                account_id: "001i0000003TYrMAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "Paris",
                primary_address_country: "France",
                primary_address_state: "",
                primary_address_street: "2 Place Jussieu",
                primary_address_zipcode: "75251",
                alt_address_city: "Paris",
                alt_address_country: "France",
                alt_address_state: "",
                alt_address_street: "2 Place Jussieu",
                alt_address_zipcode: "75251",
                email: "jack.moore@corp.net",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "(014) 427-4428",
                phone_house: "",
                phone_mobile: "(014) 454-6364",
                phone_other: "",
                phone_work: "(014) 427-4427",
                salutation: "Ms.",
                title: "SVP, Administration and Finance",
                first_name: "Jack",
                last_name: "Moore",
                contact_type: "Contact",
                birthday: "false",
                department: "Finance",
                assistant_name: "Jean Marie",
                assistant_phone: "(014) 427-4465",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:30:35"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVDAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVDAA2",
                account_id: "001i0000003TYrKAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "313 Constitution Place  Austin, TX 78767  USA",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "adverneuil@acminc.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "(512) 757-9000",
                phone_house: "",
                phone_mobile: "(512) 757-9340",
                phone_other: "",
                phone_work: "(512) 757-6000",
                salutation: "Ms.",
                title: "SVP, Procurement",
                first_name: "Amina",
                last_name: "De Verneuil",
                contact_type: "Contact",
                birthday: "1961-02-10",
                department: "Procurement",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "Trade Show",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:27:29"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVFAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVFAA2",
                account_id: "001i0000003TYrLAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "Burlington",
                primary_address_country: "USA",
                primary_address_state: "NC",
                primary_address_street: "525 S. Lexington Ave",
                primary_address_zipcode: "27215",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "dwhite@bestwest.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "(336) 222-8000",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "(336) 222-7000",
                salutation: "Mr.",
                title: "VP, Facilities",
                first_name: "David",
                last_name: "White",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "Web",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:29:53"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVRAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVRAA2",
                account_id: "001i0000003TYrJAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "9 Tagore Lane  Singapore, Singapore 787472  Singapore",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "ckristensen@corpbiz.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "(650) 450-8820",
                phone_house: "",
                phone_mobile: "(650) 345-7636",
                phone_other: "",
                phone_work: "(650) 450-8810",
                salutation: "Mr.",
                title: "Regional General Manager",
                first_name: "Christiane",
                last_name: "Kristensen",
                contact_type: "Contact",
                birthday: "1943-08-06",
                department: "Executive Team",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "Public Relations",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:29:37"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVEAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVEAA2",
                account_id: "001i0000003TYrKAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "312 Constitution Place  Austin, TX 78767  USA",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "awan@acminc.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "(512) 757-9000",
                phone_house: "",
                phone_mobile: "(512) 757-4561",
                phone_other: "",
                phone_work: "(512) 757-6000",
                salutation: "Mr.",
                title: "CFO",
                first_name: "Aline",
                last_name: "Wan",
                contact_type: "Contact",
                birthday: "1939-11-09",
                department: "Finance",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "Trade Show",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:26:54"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVWAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVWAA2",
                account_id: "001i0000003TYrSAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "bmiller@acmebiz.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "",
                salutation: "Mr.",
                title: "",
                first_name: "Ben",
                last_name: "Miller",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:28:28"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVLAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVLAA2",
                account_id: "001i0000003TYrRAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "1304 Avenue of the Americas   New York, NY 10019  USA",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "avandersplaat@corpora.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "(212) 842-5501",
                phone_house: "",
                phone_mobile: "(212) 842-5611",
                phone_other: "",
                phone_work: "(212) 842-5500",
                salutation: "Ms.",
                title: "SVP, Technology",
                first_name: "Agnès",
                last_name: "Vandersplaat",
                contact_type: "Contact",
                birthday: "1953-07-17",
                department: "Technology",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "Public Relations",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:25:24"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVSAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVSAA2",
                account_id: "001i0000003TYrJAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "10 Tagore Lane  Singapore, Singapore 787472  Singapore",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "adavis@corpbiz.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "(650) 450-8820",
                phone_house: "",
                phone_mobile: "(650) 345-6637",
                phone_other: "",
                phone_work: "(650) 450-8810",
                salutation: "Ms.",
                title: "VP, Production",
                first_name: "Alena",
                last_name: "Davis",
                contact_type: "Contact",
                birthday: "1954-11-16",
                department: "Production",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "Public Relations",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:26:38"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVUAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVUAA2",
                account_id: "001i0000003TYrRAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "1302 Avenue of the Americas   New York, NY 10019  USA",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "abravockz@corpora.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "(212) 842-5501",
                phone_house: "",
                phone_mobile: "(212) 842-2383",
                phone_other: "",
                phone_work: "(212) 842-5500",
                salutation: "Mr.",
                title: "CFO",
                first_name: "Ana",
                last_name: "Bravockz",
                contact_type: "Contact",
                birthday: "1926-09-10",
                department: "Finance",
                assistant_name: "Chris Nobel",
                assistant_phone: "(212) 842-5428",
                lead_source: "Public Relations",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:27:42"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVKAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVKAA2",
                account_id: "001i0000003TYrRAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "1303 Avenue of the Americas   New York, NY 10019  USA",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "bralfnik@corpora.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "(212) 842-5501",
                phone_house: "",
                phone_mobile: "(212) 842-5501",
                phone_other: "(212) 842-5543",
                phone_work: "(212) 842-5500",
                salutation: "Ms.",
                title: "SVP, Production",
                first_name: "Bernadette",
                last_name: "Ralfnik",
                contact_type: "Contact",
                birthday: "1936-06-03",
                department: "Production",
                assistant_name: "Audrey Haynes",
                assistant_phone: "(212) 842-5589",
                lead_source: "Public Relations",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-25 14:52:23"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVPAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVPAA2",
                account_id: "001i0000003TYrRAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "1301 Avenue of the Americas   New York, NY 10019  USA",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "hbernstein@corpora.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "(212) 842-5501",
                phone_house: "",
                phone_mobile: "(212) 842-4535",
                phone_other: "",
                phone_work: "(212) 842-5500",
                salutation: "Mr.",
                title: "CEO",
                first_name: "Huguette",
                last_name: "Bernstein",
                contact_type: "Contact",
                birthday: "1944-09-29",
                department: "Executive Team",
                assistant_name: "Pat Feinstein",
                assistant_phone: "(212) 842-5464",
                lead_source: "Public Relations",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-25 14:48:04"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVNAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVNAA2",
                account_id: "001i0000003TYrPAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "621 SW 5th Avenue Suite 400  Portland, Oregon 97204  United States",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "aholl@highcorp.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "(503) 421-7801",
                phone_house: "",
                phone_mobile: "(503) 421-4387",
                phone_other: "",
                phone_work: "(503) 421-7800",
                salutation: "Mr.",
                title: "Director, Warehouse Mgmt",
                first_name: "Albert",
                last_name: "Holl",
                contact_type: "Contact",
                birthday: "1941-05-14",
                department: "Warehouse Mgmt",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "Word of mouth",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:26:21"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVTAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVTAA2",
                account_id: "001i0000003TYrHAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "345 Shoreline Park  Mountain View, CA 94043  USA",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "avador@corptopia.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "(650) 867-9895",
                phone_house: "",
                phone_mobile: "(650) 867-7686",
                phone_other: "",
                phone_work: "(650) 867-3450",
                salutation: "Ms.",
                title: "VP, Technology",
                first_name: "Amanda",
                last_name: "Vador",
                contact_type: "Contact",
                birthday: "1935-04-23",
                department: "Technology",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "Partner",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:27:10"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVVAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVVAA2",
                account_id: "001i0000003TYrSAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "San Francisco",
                primary_address_country: "US",
                primary_address_state: "CA",
                primary_address_street: "The Landmark @ One Market",
                primary_address_zipcode: "94087",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "bblanchet@acmebiz.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "",
                phone_house: "",
                phone_mobile: "",
                phone_other: "",
                phone_work: "",
                salutation: "Ms.",
                title: "",
                first_name: "Bérenice",
                last_name: "Blanchet",
                contact_type: "Contact",
                birthday: "false",
                department: "",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-25 14:47:23"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVMAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVMAA2",
                account_id: "001i0000003TYrPAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "620 SW 5th Avenue Suite 400  Portland, Oregon 97204  United States",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "adiego@highcorp.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "(503) 421-7801",
                phone_house: "",
                phone_mobile: "(503) 421-5451",
                phone_other: "",
                phone_work: "(503) 421-7800",
                salutation: "Ms.",
                title: "SVP, Operations",
                first_name: "Audrey",
                last_name: "Distay Diego",
                contact_type: "Contact",
                birthday: "1930-01-18",
                department: "Operations",
                assistant_name: "Ron Sage",
                assistant_phone: "(503) 421-6782",
                lead_source: "Word of mouth",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-24 10:28:13"
            }
        } ]
    }, {
        a4p_type: "Contact",
        crmObjects: [ {
            crmId: {
                id: "003i00000030XVOAA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "003i00000030XVOAA2",
                account_id: "001i0000003TYrQAAW",
                manager_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "888 N Euclid   Hallis Center, Room 501  Tucson, AZ 85721  United States",
                primary_address_zipcode: "",
                alt_address_city: "",
                alt_address_country: "",
                alt_address_state: "",
                alt_address_street: "",
                alt_address_zipcode: "",
                email: "ajohnson@coolcorp.com",
                email_home: "",
                email_list: "",
                email_other: "",
                phone_fax: "(520) 773-9060",
                phone_house: "",
                phone_mobile: "(520) 773-4539",
                phone_other: "",
                phone_work: "(520) 773-9050",
                salutation: "Ms.",
                title: "Dean of Administration",
                first_name: "Anna",
                last_name: "Johnson",
                contact_type: "Contact",
                birthday: "1937-03-31",
                department: "Administration",
                assistant_name: "",
                assistant_phone: "",
                lead_source: "Word of mouth",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-23 16:03:47"
            }
        } ]
    }, {
        a4p_type: "Account",
        crmObjects: [ {
            crmId: {
                id: "001i0000005MiYuAAK",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "001i0000005MiYuAAK",
                company_name: "Orpkick",
                parent_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                bil_addr_city: "",
                bil_addr_country: "",
                bil_addr_state: "",
                bil_addr_street: "",
                bil_addr_postal_code: "",
                annual_revenue: "0",
                nb_employees: "0",
                industry: "",
                fax: "",
                phone: "",
                sic: "",
                type: "",
                web_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:11:10",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:11:10"
            }
        } ]
    }, {
        a4p_type: "Account",
        crmObjects: [ {
            crmId: {
                id: "001i0000005MiYzAAK",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "001i0000005MiYzAAK",
                company_name: "PlotCorp",
                parent_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                bil_addr_city: "",
                bil_addr_country: "",
                bil_addr_state: "",
                bil_addr_street: "",
                bil_addr_postal_code: "",
                annual_revenue: "0",
                nb_employees: "0",
                industry: "",
                fax: "",
                phone: "",
                sic: "",
                type: "",
                web_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:11:22",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:11:22"
            }
        } ]
    }, {
        a4p_type: "Account",
        crmObjects: [ {
            crmId: {
                id: "001i0000005MiZ4AAK",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "001i0000005MiZ4AAK",
                company_name: "RP Drive",
                parent_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                bil_addr_city: "",
                bil_addr_country: "",
                bil_addr_state: "",
                bil_addr_street: "",
                bil_addr_postal_code: "",
                annual_revenue: "0",
                nb_employees: "0",
                industry: "",
                fax: "",
                phone: "",
                sic: "",
                type: "",
                web_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:11:34",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:11:34"
            }
        } ]
    }, {
        a4p_type: "Account",
        crmObjects: [ {
            crmId: {
                id: "001i0000003TYrNAAW",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "001i0000003TYrNAAW",
                company_name: "High Business Firm",
                parent_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                bil_addr_city: "Lawrence",
                bil_addr_country: "USA",
                bil_addr_state: "KS",
                bil_addr_street: "1301 Hoch Drive",
                bil_addr_postal_code: "66045",
                annual_revenue: "50000000",
                nb_employees: "120",
                industry: "Consulting",
                fax: "(785) 241-6201",
                phone: "(785) 241-6200",
                sic: "6752",
                type: "Customer - Channel",
                web_url: "dickenson-consulting.com",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:09:41"
            }
        } ]
    }, {
        a4p_type: "Account",
        crmObjects: [ {
            crmId: {
                id: "001i0000005MiYpAAK",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "001i0000005MiYpAAK",
                company_name: "Johnson, John and Johanson Associated & Sons",
                parent_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                bil_addr_city: "",
                bil_addr_country: "",
                bil_addr_state: "",
                bil_addr_street: "",
                bil_addr_postal_code: "",
                annual_revenue: "0",
                nb_employees: "0",
                industry: "",
                fax: "",
                phone: "",
                sic: "",
                type: "",
                web_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-19 15:10:26",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:10:26"
            }
        } ]
    }, {
        a4p_type: "Account",
        crmObjects: [ {
            crmId: {
                id: "001i0000003TYrOAAW",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "001i0000003TYrOAAW",
                company_name: "Business Firmcorp",
                parent_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "Chain of hotels and resorts across the US, UK, Eastern Europe, Japan, and SE Asia.",
                bil_addr_city: "Chicago",
                bil_addr_country: "",
                bil_addr_state: "IL",
                bil_addr_street: "2334 N. Michigan Avenue, Suite 1500  Chicago, IL 60601, USA",
                bil_addr_postal_code: "",
                annual_revenue: "500000000",
                nb_employees: "5600",
                industry: "Hospitality",
                fax: "(312) 596-1500",
                phone: "(312) 596-1000",
                sic: "2268",
                type: "Customer - Direct",
                web_url: "www.grandhotels.com",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:07:08"
            }
        } ]
    }, {
        a4p_type: "Account",
        crmObjects: [ {
            crmId: {
                id: "001i0000003TYrIAAW",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "001i0000003TYrIAAW",
                company_name: "Arp Firm",
                parent_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                bil_addr_city: "",
                bil_addr_country: "",
                bil_addr_state: "UK",
                bil_addr_street: "Kings Park, 17th Avenue, Team Valley Trading Estate,  Gateshead, Tyne and Wear NE26 3HS  United Kingdom",
                bil_addr_postal_code: "",
                annual_revenue: "0",
                nb_employees: "24000",
                industry: "Energy",
                fax: "+44 191 4956620",
                phone: "+44 191 4956203",
                sic: "4437",
                type: "Customer - Direct",
                web_url: "http://www.uos.com",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:06:38"
            }
        } ]
    }, {
        a4p_type: "Account",
        crmObjects: [ {
            crmId: {
                id: "001i0000003TYrMAAW",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "001i0000003TYrMAAW",
                company_name: "DynaCorp",
                parent_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                bil_addr_city: "Paris",
                bil_addr_country: "France",
                bil_addr_state: "",
                bil_addr_street: "2 Place Jussieu",
                bil_addr_postal_code: "75251",
                annual_revenue: "950000000",
                nb_employees: "2680",
                industry: "Construction",
                fax: "(014) 427-4428",
                phone: "(014) 427-4427",
                sic: "4253",
                type: "Customer - Channel",
                web_url: "www.pyramid.com",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:09:21"
            }
        } ]
    }, {
        a4p_type: "Account",
        crmObjects: [ {
            crmId: {
                id: "001i0000003TYrKAAW",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "001i0000003TYrKAAW",
                company_name: "Acminc SA",
                parent_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "Edge, founded in 1998, is a start-up based in Austin, TX. The company designs and manufactures a device to convert music from one digital format to another. Edge sells its product through retailers and its own website.",
                bil_addr_city: "Austin",
                bil_addr_country: "",
                bil_addr_state: "TX",
                bil_addr_street: "312 Constitution Place  Austin, TX 78767  USA",
                bil_addr_postal_code: "",
                annual_revenue: "139000000",
                nb_employees: "1000",
                industry: "Electronics",
                fax: "(512) 757-9000",
                phone: "(512) 757-6000",
                sic: "6576",
                type: "Customer - Direct",
                web_url: "http://edgecomm.com",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:05:22"
            }
        } ]
    }, {
        a4p_type: "Account",
        crmObjects: [ {
            crmId: {
                id: "001i0000003TYrLAAW",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "001i0000003TYrLAAW",
                company_name: "Best Western Products Manufacture",
                parent_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                bil_addr_city: "Burlington",
                bil_addr_country: "USA",
                bil_addr_state: "NC",
                bil_addr_street: "525 S. Lexington Ave",
                bil_addr_postal_code: "27215",
                annual_revenue: "350000000",
                nb_employees: "9000",
                industry: "Apparel",
                fax: "(336) 222-8000",
                phone: "(336) 222-7000",
                sic: "546732",
                type: "Customer - Direct",
                web_url: "www.burlington.com",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:05:56"
            }
        } ]
    }, {
        a4p_type: "Account",
        crmObjects: [ {
            crmId: {
                id: "001i0000003TYrJAAW",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "001i0000003TYrJAAW",
                company_name: "Corpbiz int",
                parent_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                bil_addr_city: "Singapore",
                bil_addr_country: "",
                bil_addr_state: "Singapore",
                bil_addr_street: "9 Tagore Lane  Singapore, Singapore 787472  Singapore",
                bil_addr_postal_code: "",
                annual_revenue: "0",
                nb_employees: "3000",
                industry: "Energy",
                fax: "(650) 450-8820",
                phone: "(650) 450-8810",
                sic: "4437",
                type: "Customer - Direct",
                web_url: "http://www.uos.com",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:13:08"
            }
        } ]
    }, {
        a4p_type: "Account",
        crmObjects: [ {
            crmId: {
                id: "001i0000003TYrSAAW",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "001i0000003TYrSAAW",
                company_name: "Acmebiz International Inc.",
                parent_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                bil_addr_city: "San Francisco",
                bil_addr_country: "US",
                bil_addr_state: "CA",
                bil_addr_street: "The Landmark @ One Market",
                bil_addr_postal_code: "94087",
                annual_revenue: "0",
                nb_employees: "0",
                industry: "",
                fax: "(415) 901-7002",
                phone: "(415) 901-7000",
                sic: "",
                type: "",
                web_url: "www.sforce.com",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:04:42"
            }
        } ]
    }, {
        a4p_type: "Account",
        crmObjects: [ {
            crmId: {
                id: "001i0000003TYrRAAW",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "001i0000003TYrRAAW",
                company_name: "Corpora",
                parent_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "World's third largest oil and gas company.",
                bil_addr_city: "New York",
                bil_addr_country: "",
                bil_addr_state: "NY",
                bil_addr_street: "1301 Avenue of the Americas   New York, NY 10019  USA",
                bil_addr_postal_code: "",
                annual_revenue: "5600000000",
                nb_employees: "145000",
                industry: "Energy",
                fax: "(212) 842-5501",
                phone: "(212) 842-5500",
                sic: "4437",
                type: "Customer - Direct",
                web_url: "http://www.uos.com",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:08:00"
            }
        } ]
    }, {
        a4p_type: "Account",
        crmObjects: [ {
            crmId: {
                id: "001i0000003TYrPAAW",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "001i0000003TYrPAAW",
                company_name: "Highcorp",
                parent_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "Commerical logistics and transportation company.",
                bil_addr_city: "Portland",
                bil_addr_country: "",
                bil_addr_state: "OR",
                bil_addr_street: "620 SW 5th Avenue Suite 400  Portland, Oregon 97204  United States",
                bil_addr_postal_code: "",
                annual_revenue: "950000000",
                nb_employees: "12300",
                industry: "Transportation",
                fax: "(503) 421-7801",
                phone: "(503) 421-7800",
                sic: "8742",
                type: "Customer - Channel",
                web_url: "www.expressl&t.net",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:10:00"
            }
        } ]
    }, {
        a4p_type: "Account",
        crmObjects: [ {
            crmId: {
                id: "001i0000003TYrHAAW",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "001i0000003TYrHAAW",
                company_name: "Corptopia Inc",
                parent_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "Genomics company engaged in mapping and sequencing of the human genome and developing gene-based drugs",
                bil_addr_city: "Mountain View",
                bil_addr_country: "",
                bil_addr_state: "CA",
                bil_addr_street: "345 Shoreline Park  Mountain View, CA 94043  USA",
                bil_addr_postal_code: "",
                annual_revenue: "30000000",
                nb_employees: "265",
                industry: "Biotechnology",
                fax: "(650) 867-9895",
                phone: "(650) 867-3450",
                sic: "3712",
                type: "Customer - Channel",
                web_url: "www.genepoint.com",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:08:38"
            }
        } ]
    }, {
        a4p_type: "Account",
        crmObjects: [ {
            crmId: {
                id: "001i0000003TYrQAAW",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "001i0000003TYrQAAW",
                company_name: "Coolcorp",
                parent_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "Leading university in AZ offering undergraduate and graduate programs in arts and humanities, pure sciences, engineering, business, and medicine.",
                bil_addr_city: "Tucson",
                bil_addr_country: "",
                bil_addr_state: "AZ",
                bil_addr_street: "888 N Euclid   Hallis Center, Room 501  Tucson, AZ 85721  United States",
                bil_addr_postal_code: "",
                annual_revenue: "0",
                nb_employees: "39000",
                industry: "Education",
                fax: "(520) 773-9060",
                phone: "(520) 773-9050",
                sic: "7321",
                type: "Customer - Direct",
                web_url: "www.universityofarizona.com",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:07:39"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000013wRCEAY",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000013wRCEAY",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVIAA2",
                what_id: "",
                description: "",
                date_start: "2013-03-29 15:02:00",
                date_end: "2013-03-29 16:02:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "Hg 4",
                name: "Response to CFT presentation",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-26 15:03:02",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-02 16:20:04"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DWTEA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DWTEA2",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVOAA2",
                what_id: "",
                description: "",
                date_start: "2013-04-17 15:00:00",
                date_end: "2013-04-17 16:00:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "",
                name: "prospect",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 14:58:41",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 14:58:41"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DY5EAM",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DY5EAM",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVOAA2",
                what_id: "006i0000002ZNICAA4",
                description: "",
                date_start: "2013-04-16 16:00:00",
                date_end: "2013-04-18 17:00:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "",
                name: "proposition",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 15:24:50",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-17 11:12:16"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DWdEAM",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DWdEAM",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVMAA2",
                what_id: "",
                description: "",
                date_start: "2013-04-23 16:00:00",
                date_end: "2013-04-23 17:00:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "",
                name: "signature contrat",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 15:02:04",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 15:02:04"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DWxEAM",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DWxEAM",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVVAA2",
                what_id: "",
                description: "",
                date_start: "2013-04-25 16:00:00",
                date_end: "2013-04-25 17:00:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "",
                name: "presentation",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 15:05:31",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 15:05:31"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DW4EAM",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DW4EAM",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "005i0000000I8c5AAC",
                what_id: "",
                description: "",
                date_start: "2013-04-27 15:00:00",
                date_end: "2013-04-27 16:00:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "",
                name: "Refonte du site intranet",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 14:53:53",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 14:53:53"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000013wQTEAY",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000013wQTEAY",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVNAA2",
                what_id: "",
                description: "",
                date_start: "2013-04-29 14:00:00",
                date_end: "2013-04-29 15:00:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "Tours",
                name: "Présentation",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-03-26 14:57:27",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-26 14:57:27"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DVaEAM",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DVaEAM",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVLAA2",
                what_id: "",
                description: "",
                date_start: "2013-05-01 15:00:00",
                date_end: "2013-05-01 16:00:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "",
                name: "presentation",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 14:47:26",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 14:47:26"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DXqEAM",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DXqEAM",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVPAA2",
                what_id: "",
                description: "",
                date_start: "2013-05-03 10:00:00",
                date_end: "2013-05-03 11:00:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "",
                name: "prospect",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 15:20:31",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 15:20:31"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DX2EAM",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DX2EAM",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVKAA2",
                what_id: "",
                description: "",
                date_start: "2013-05-04 11:00:00",
                date_end: "2013-05-04 12:00:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "",
                name: "suivi de commande",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 15:06:18",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 15:06:18"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DWOEA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DWOEA2",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVUAA2",
                what_id: "",
                description: "",
                date_start: "2013-05-14 09:00:00",
                date_end: "2013-05-14 10:00:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "",
                name: "prospect",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 14:56:19",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 14:56:19"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DVuEAM",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DVuEAM",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVSAA2",
                what_id: "",
                description: "",
                date_start: "2013-05-14 12:00:00",
                date_end: "2013-05-14 13:00:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "",
                name: "dejeuner",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 14:50:03",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 14:50:03"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DVpEAM",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DVpEAM",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVLAA2",
                what_id: "",
                description: "",
                date_start: "2013-05-17 10:00:00",
                date_end: "2013-05-17 12:00:00",
                duration_hours: "0",
                duration_minutes: "120",
                location: "",
                name: "signature contrat",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 14:49:16",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 14:49:16"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DWnEAM",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DWnEAM",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVWAA2",
                what_id: "",
                description: "",
                date_start: "2013-05-22 10:00:00",
                date_end: "2013-05-22 11:00:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "",
                name: "prise de contact",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 15:02:43",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 15:02:43"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DVzEAM",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DVzEAM",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVEAA2",
                what_id: "",
                description: "",
                date_start: "2013-06-05 11:00:00",
                date_end: "2013-06-05 12:00:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "",
                name: "nouveau catalogue",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 14:53:16",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 14:53:16"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DX7EAM",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DX7EAM",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVRAA2",
                what_id: "",
                description: "",
                date_start: "2013-06-06 10:00:00",
                date_end: "2013-06-06 11:00:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "",
                name: "prospect",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 15:08:23",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 15:08:23"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DXCEA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DXCEA2",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVFAA2",
                what_id: "",
                description: "",
                date_start: "2013-06-11 09:30:00",
                date_end: "2013-06-11 10:30:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "",
                name: "presentation",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 15:09:16",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 15:09:16"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DWEEA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DWEEA2",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVDAA2",
                what_id: "",
                description: "",
                date_start: "2013-06-14 14:00:00",
                date_end: "2013-06-14 15:00:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "",
                name: "formation",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 14:54:37",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 14:54:37"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DY0EAM",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DY0EAM",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVGAA2",
                what_id: "",
                description: "",
                date_start: "2013-06-21 14:00:00",
                date_end: "2013-06-21 15:00:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "",
                name: "signature contrat",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 15:21:40",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 15:21:40"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DWYEA2",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DWYEA2",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVQAA2",
                what_id: "",
                description: "",
                date_start: "2013-06-28 16:00:00",
                date_end: "2013-06-28 17:00:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "",
                name: "présentation Apps4pro",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 15:01:07",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 15:01:07"
            }
        } ]
    }, {
        a4p_type: "Event",
        crmObjects: [ {
            crmId: {
                id: "00Ui00000014DXlEAM",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Ui00000014DXlEAM",
                owner_id: "005i0000000I8c5AAC",
                assigned_contact_id: "003i00000030XVIAA2",
                what_id: "",
                description: "",
                date_start: "2013-06-29 15:00:00",
                date_end: "2013-06-29 16:00:00",
                duration_hours: "0",
                duration_minutes: "60",
                location: "",
                name: "presentation",
                status: "",
                type: "",
                displayed_url: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 15:19:09",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 15:19:09"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNI8AAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNI8AAO",
                account_id: "001i0000003TYrKAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "60000",
                date_closed: "2013-05-15",
                name: "Edge SLA",
                next_step: "",
                probability: "100",
                stage: "Closed Won",
                type: "Existing Customer - Upgrade",
                lead_source: "Word of mouth",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:57:50"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNHwAAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNHwAAO",
                account_id: "001i0000003TYrOAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "15000",
                date_closed: "2013-04-08",
                name: "Grand Hotels Kitchen Generator",
                next_step: "",
                probability: "60",
                stage: "Id. Decision Makers",
                type: "Existing Customer - Upgrade",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:02:27"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNIIAA4",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNIIAA4",
                account_id: "001i0000003TYrOAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "90000",
                date_closed: "2013-06-12",
                name: "Grand Hotels SLA",
                next_step: "",
                probability: "100",
                stage: "Closed Won",
                type: "Existing Customer - Upgrade",
                lead_source: "External Referral",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:03:01"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNI3AAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNI3AAO",
                account_id: "001i0000003TYrPAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "80000",
                date_closed: "2013-05-10",
                name: "Express Logistics Portable Truck Generators",
                next_step: "",
                probability: "50",
                stage: "Value Proposition",
                type: "Existing Customer - Upgrade",
                lead_source: "External Referral",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:58:19"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNI1AAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNI1AAO",
                account_id: "001i0000003TYrQAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "50000",
                date_closed: "2013-06-06",
                name: "University of AZ Portable Generators",
                next_step: "",
                probability: "100",
                stage: "Closed Won",
                type: "New Customer",
                lead_source: "Public Relations",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:09:11"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNIHAA4",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNIHAA4",
                account_id: "001i0000003TYrRAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "440000",
                date_closed: "2013-07-10",
                name: "United Oil Emergency Generators",
                next_step: "",
                probability: "100",
                stage: "Closed Won",
                type: "Existing Customer - Upgrade",
                lead_source: "External Referral",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:04:11"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNI6AAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNI6AAO",
                account_id: "001i0000003TYrRAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "270000",
                date_closed: "2013-11-19",
                name: "United Oil Installations",
                next_step: "",
                probability: "90",
                stage: "Negotiation/Review",
                type: "Existing Customer - Upgrade",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:05:41"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNHvAAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNHvAAO",
                account_id: "001i0000003TYrHAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "85000",
                date_closed: "2013-04-13",
                name: "GenePoint Standby Generator",
                next_step: "",
                probability: "100",
                stage: "Closed Won",
                type: "New Customer",
                lead_source: "Partner",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:00:56"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNIGAA4",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNIGAA4",
                account_id: "001i0000003TYrRAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "235000",
                date_closed: "2013-03-25",
                name: "United Oil Installations",
                next_step: "",
                probability: "100",
                stage: "Closed Won",
                type: "Existing Customer - Upgrade",
                lead_source: "External Referral",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:06:24"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNIMAA4",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNIMAA4",
                account_id: "001i0000003TYrKAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "35000",
                date_closed: "2013-06-08",
                name: "Edge Emergency Generator",
                next_step: "",
                probability: "60",
                stage: "Id. Decision Makers",
                type: "Existing Customer - Replacement",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:56:53"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNI0AAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNI0AAO",
                account_id: "001i0000003TYrKAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "75000",
                date_closed: "2013-04-22",
                name: "Edge Emergency Generator",
                next_step: "",
                probability: "100",
                stage: "Closed Won",
                type: "New Customer",
                lead_source: "Word of mouth",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:52:28"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNI5AAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNI5AAO",
                account_id: "001i0000003TYrHAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "30000",
                date_closed: "2013-03-23",
                name: "GenePoint SLA",
                next_step: "",
                probability: "100",
                stage: "Closed Won",
                type: "Existing Customer - Upgrade",
                lead_source: "Partner",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:00:31"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNI4AAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNI4AAO",
                account_id: "001i0000003TYrHAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "6000000",
                date_closed: "2014-02-08",
                name: "GenePoint Lab Generators",
                next_step: "",
                probability: "20",
                stage: "Value Proposition",
                type: "",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:00:01"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNIJAA4",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNIJAA4",
                account_id: "001i0000003TYrRAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "120000",
                date_closed: "2013-06-14",
                name: "United Oil Standby Generators",
                next_step: "",
                probability: "100",
                stage: "Closed Won",
                type: "Existing Customer - Upgrade",
                lead_source: "External Referral",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:08:37"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNHyAAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNHyAAO",
                account_id: "001i0000003TYrRAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "120000",
                date_closed: "2013-05-23",
                name: "United Oil SLA",
                next_step: "",
                probability: "100",
                stage: "Closed Won",
                type: "Existing Customer - Upgrade",
                lead_source: "Partner",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:08:18"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNHxAAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNHxAAO",
                account_id: "001i0000003TYrRAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "270000",
                date_closed: "2013-10-11",
                name: "United Oil Refinery Generators",
                next_step: "",
                probability: "75",
                stage: "Proposal/Price Quote",
                type: "Existing Customer - Upgrade",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:07:41"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNIBAA4",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNIBAA4",
                account_id: "001i0000003TYrRAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "915000",
                date_closed: "2013-12-06",
                name: "United Oil Refinery Generators",
                next_step: "",
                probability: "100",
                stage: "Closed Won",
                type: "New Customer",
                lead_source: "Partner",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:08:03"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNILAA4",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNILAA4",
                account_id: "001i0000003TYrRAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "675000",
                date_closed: "2013-11-30",
                name: "United Oil Plant Standby Generators",
                next_step: "",
                probability: "20",
                stage: "Needs Analysis",
                type: "Existing Customer - Upgrade",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:07:22"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNHzAAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNHzAAO",
                account_id: "001i0000003TYrOAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "250000",
                date_closed: "2013-09-08",
                name: "Grand Hotels Guest Portable Generators",
                next_step: "",
                probability: "50",
                stage: "Value Proposition",
                type: "Existing Customer - Upgrade",
                lead_source: "Employee Referral",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:02:06"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNIAAA4",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNIAAA4",
                account_id: "001i0000003TYrOAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "350000",
                date_closed: "2014-02-08",
                name: "Grand Hotels Generator Installations",
                next_step: "",
                probability: "80",
                stage: "Closed Won",
                type: "Existing Customer - Upgrade",
                lead_source: "External Referral",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:01:41"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNIKAA4",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNIKAA4",
                account_id: "001i0000003TYrOAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "210000",
                date_closed: "2013-05-15",
                name: "Grand Hotels Emergency Generators",
                next_step: "",
                probability: "100",
                stage: "Closed Won",
                type: "New Customer",
                lead_source: "External Referral",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:01:18"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNHsAAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNHsAAO",
                account_id: "001i0000003TYrNAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "15000",
                date_closed: "2013-04-14",
                name: "Rephraser",
                next_step: "",
                probability: "10",
                stage: "Qualification",
                type: "New Customer",
                lead_source: "Purchased List",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:55:08"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNI2AAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNI2AAO",
                account_id: "001i0000003TYrMAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "100000",
                date_closed: "2013-10-11",
                name: "Pyramid Emergency Generators",
                next_step: "",
                probability: "10",
                stage: "Prospecting",
                type: "",
                lead_source: "Phone Inquiry",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:03:35"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNI7AAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNI7AAO",
                account_id: "001i0000003TYrKAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "50000",
                date_closed: "2013-03-28",
                name: "Edge Installation",
                next_step: "",
                probability: "100",
                stage: "Closed Won",
                type: "Existing Customer - Upgrade",
                lead_source: "Word of mouth",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:57:24"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNIFAA4",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNIFAA4",
                account_id: "001i0000003TYrLAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "235000",
                date_closed: "2013-05-12",
                name: "Best Western Products Manufacture",
                next_step: "",
                probability: "100",
                stage: "Closed Won",
                type: "New Customer",
                lead_source: "Web",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:54:07"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNHtAAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNHtAAO",
                account_id: "001i0000003TYrRAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "125000",
                date_closed: "2013-05-28",
                name: "United Oil Office Portable Generators",
                next_step: "",
                probability: "90",
                stage: "Negotiation/Review",
                type: "Existing Customer - Upgrade",
                lead_source: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:06:58"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNI9AAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNI9AAO",
                account_id: "001i0000003TYrRAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "270000",
                date_closed: "2013-06-19",
                name: "United Oil Installations",
                next_step: "",
                probability: "100",
                stage: "Closed Won",
                type: "Existing Customer - Upgrade",
                lead_source: "Partner",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:06:04"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNIEAA4",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNIEAA4",
                account_id: "001i0000003TYrQAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "90000",
                date_closed: "2013-04-04",
                name: "University of AZ SLA",
                next_step: "",
                probability: "100",
                stage: "Closed Won",
                type: "Existing Customer - Upgrade",
                lead_source: "Public Relations",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:09:28"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNIDAA4",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNIDAA4",
                account_id: "001i0000003TYrPAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "120000",
                date_closed: "2013-06-27",
                name: "Express Logistics SLA",
                next_step: "",
                probability: "70",
                stage: "Perception Analysis",
                type: "Existing Customer - Upgrade",
                lead_source: "External Referral",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:58:47"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNHuAAO",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNHuAAO",
                account_id: "001i0000003TYrPAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "220000",
                date_closed: "2013-04-08",
                name: "Express Logistics Standby Generator",
                next_step: "",
                probability: "100",
                stage: "Closed Won",
                type: "New Customer",
                lead_source: "Trade Show",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 15:59:15"
            }
        } ]
    }, {
        a4p_type: "Opportunity",
        crmObjects: [ {
            crmId: {
                id: "006i0000002ZNICAA4",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "006i0000002ZNICAA4",
                account_id: "001i0000003TYrQAAW",
                assigned_contact_id: "005i0000000I8c5AAC",
                description: "",
                amount: "100000",
                date_closed: "2013-04-24",
                name: "University of AZ Installations",
                next_step: "",
                probability: "75",
                stage: "Proposal/Price Quote",
                type: "Existing Customer - Upgrade",
                lead_source: "Employee Referral",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-02-28 15:18:05",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-03-19 16:08:53"
            }
        } ]
    }, {
        a4p_type: "Document",
        crmObjects: [ {
            crmId: {
                id: "00Pi0000000KnMpEAK",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Pi0000000KnMpEAK",
                parent_id: "00Ui00000014DY5EAM",
                owner_id: "005i0000000I8c5AAC",
                description: "",
                length: "8140",
                name: "demo_pict1.jpg",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-17 11:11:17",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-17 11:11:18",
                url: "img/samples/docs/demo_pict1.jpg"
            }
        } ]
    }, {
        a4p_type: "Document",
        crmObjects: [ {
            crmId: {
                id: "00Pi0000000KnMzEAK",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Pi0000000KnMzEAK",
                parent_id: "00Ui00000014DY5EAM",
                owner_id: "005i0000000I8c5AAC",
                description: "",
                length: "627324",
                name: "demo_sec_cv.pdf",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-17 11:12:11",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-17 11:12:11",
                url: "img/samples/docs/demo_sec_cv.pdf"
            }
        } ]
    }, {
        a4p_type: "Document",
        crmObjects: [ {
            crmId: {
                id: "00Pi0000000KnMuEAK",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "00Pi0000000KnMuEAK",
                parent_id: "00Ui00000014DY5EAM",
                owner_id: "005i0000000I8c5AAC",
                description: "",
                length: "59392",
                name: "demo_contract_1.doc",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-17 11:11:35",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-17 11:11:35",
                url: "img/samples/docs/demo_contract_1.doc"
            }
        } ]
    }, {
        a4p_type: "Document",
        crmObjects: [ {
            crmId: {
                id: "DUMMY_SF_ID_001",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "DUMMY_SF_ID_001",
                parent_id: "00Ui00000014DY5EAM",
                owner_id: "005i0000000I8c5AAC",
                description: "",
                length: "2421708",
                name: "demo_ceo_welcome.mp4",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-09-17 11:25:35",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-09-17 11:25:35",
                url: "img/samples/docs/demo_ceo_welcome.mp4"
            }
        } ]
    }, {
        a4p_type: "Document",
        crmObjects: [ {
            crmId: {
                id: "DUMMY_SF_ID_002",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "DUMMY_SF_ID_002",
                parent_id: "00Ui00000014DY5EAM",
                owner_id: "005i0000000I8c5AAC",
                description: "",
                length: "8704",
                name: "demo_business_effort.xls",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-09-17 11:25:35",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-09-17 11:25:35",
                url: "img/samples/docs/demo_business_effort.xls"
            }
        } ]
    }, {
        a4p_type: "Document",
        crmObjects: [ {
            crmId: {
                id: "DUMMY_SF_ID_003",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "DUMMY_SF_ID_003",
                parent_id: "00Ui00000014DY5EAM",
                owner_id: "005i0000000I8c5AAC",
                description: "",
                length: "627324",
                name: "demo_cv1.pdf",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-09-17 11:25:35",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-09-17 11:25:35",
                url: "img/samples/docs/demo_cv1.pdf"
            }
        } ]
    }, {
        a4p_type: "Document",
        crmObjects: [ {
            crmId: {
                id: "DUMMY_SF_ID_004",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "DUMMY_SF_ID_004",
                parent_id: "00Ui00000014DY5EAM",
                owner_id: "005i0000000I8c5AAC",
                description: "",
                length: "174592",
                name: "demo_doc_cv1.doc",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-09-17 11:25:35",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-09-17 11:25:35",
                url: "img/samples/docs/demo_doc_cv1.doc"
            }
        } ]
    }, {
        a4p_type: "Document",
        crmObjects: [ {
            crmId: {
                id: "DUMMY_SF_ID_005",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "DUMMY_SF_ID_005",
                parent_id: "00Ui00000014DY5EAM",
                owner_id: "005i0000000I8c5AAC",
                description: "",
                length: "164352",
                name: "demo_hr_app.ppt",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-09-17 11:25:35",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-09-17 11:25:35",
                url: "img/samples/docs/demo_hr_app.ppt"
            }
        } ]
    }, {
        a4p_type: "Document",
        crmObjects: [ {
            crmId: {
                id: "DUMMY_SF_ID_006",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "DUMMY_SF_ID_006",
                parent_id: "00Ui00000014DY5EAM",
                owner_id: "005i0000000I8c5AAC",
                description: "",
                length: "329728",
                name: "demo_p_why_apps4pro.ppt",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-09-17 11:25:35",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-09-17 11:25:35",
                url: "img/samples/docs/demo_p_why_apps4pro.ppt"
            }
        } ]
    }, {
        a4p_type: "Document",
        crmObjects: [ {
            crmId: {
                id: "DUMMY_SF_ID_007",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "DUMMY_SF_ID_007",
                parent_id: "00Ui00000014DY5EAM",
                owner_id: "005i0000000I8c5AAC",
                description: "",
                length: "8704",
                name: "demo_tab1.xls",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-09-17 11:25:35",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-09-17 11:25:35",
                url: "img/samples/docs/demo_tab1.xls"
            }
        } ]
    }, {
        a4p_type: "Document",
        crmObjects: [ {
            crmId: {
                id: "DUMMY_SF_ID_008",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "DUMMY_SF_ID_008",
                parent_id: "00Ui00000014DY5EAM",
                owner_id: "005i0000000I8c5AAC",
                description: "",
                length: "2296780",
                name: "demo_test_img.jpg",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-09-17 11:25:35",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-09-17 11:25:35",
                url: "img/samples/docs/demo_test_img.jpg"
            }
        } ]
    }, {
        a4p_type: "Attendee",
        crmObjects: [ {
            crmId: {
                id: "0REi0000000PHWHGA4",
                crm: "sf"
            },
            editable: !0,
            data: {
                id: "0REi0000000PHWHGA4",
                event_id: "00Ui00000014DY5EAM",
                relation_id: "003i00000030XVOAA2",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 15:24:50",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 15:24:50"
            }
        } ]
    }, {
        a4p_type: "Note",
        crmObjects: [ {
            crmId: {
                id: "DUMMY_SF_ID_009",
                crm: "sf"
            },
            editable: !0,
            data: {
                title: "Problème dénoté",
                when: "2013-04-12 15:24:50",
                description: "Il est notable que vous n'ayez pas noté la note précédemment annotée. Vous le notâtes ?",
                parent_id: "00Ui00000014DWxEAM",
                owner_id: "005i0000000I8c5AAC",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-04-12 15:24:50",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-04-12 15:24:50"
            }
        } ]
    }, {
        a4p_type: "Note",
        crmObjects: [ {
            crmId: {
                id: "DUMMY_SF_ID_010",
                crm: "sf"
            },
            editable: !0,
            data: {
                title: "Pensée du jour",
                when: "2013-12-13 11:47:50",
                description: "Vendre les cadeaux de sa belle mère sur LeBonCoin pour se faire de l'argent, c'est bien, mais vendre sa belle mère sur LeBonCoin pour s'acheter des cadeaux, c'est mieux !",
                parent_id: "005i0000000I8c5AAC",
                owner_id: "005i0000000I8c5AAC",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-12-13 11:47:50",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-12-13 11:47:50"
            }
        } ]
    }, {
        a4p_type: "Report",
        crmObjects: [ {
            crmId: {
                id: "DUMMY_SF_ID_013",
                crm: "sf"
            },
            editable: !0,
            data: {
                title: "CR-Refonte du site intranet",
                when: "2013-12-13 11:47:50",
                description: "1 – Adoption de l’ordre du jour\nL’ordre du jour est adopté en tenant compte de la modification proposée par Karine : ajout du point « Proposition d’informer le personnel de l’entreprise ».\n2 – Refonte du site : réorganisation de l’information pour certaines sections et ajout de nouvelles sections. Hélène, au lieu de parler de refonte, préfère plutôt parler de réorganisation du site, puisque son contenu restera sensiblement le même. Il s’agira essentiellement de déplacer certaines sections du site pour permettre une consultation plus rapide. Il y aura aussi ajout d'une foire aux questions (FAQ).\nNadine fait remarquer qu’on ne pourra pas mettre toutes les questions des employés et employées dans la FAQ. On ne retiendra que les plus courantes.",
                message: "",
                contact_ids: [ "005i0000000I8c5AAC", "005i0000000I8cAAAS" ],
                document_ids: [],
                ratings: "",
                parent_id: "00Ui00000014DWxEAM",
                owner_id: "005i0000000I8c5AAC",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-12-13 11:47:50",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-12-13 11:47:50"
            }
        } ]
    }, {
        a4p_type: "Lead",
        crmObjects: [ {
            crmId: {
                id: "DUMMY_SF_ID_014",
                crm: "sf"
            },
            editable: !0,
            data: {
                title: "Création de site internet pro",
                salutation: "Mr.",
                first_name: "Nicolas",
                last_name: "Zavatta",
                description: "Souscription au site one&one",
                lead_source: "http://one&one.mywebsite.fr",
                email: "nicolas.zavatta@gmail.com",
                fax: "",
                phone: "",
                phone_mobile: "",
                web_url: "",
                company_name: "",
                industry: "",
                annual_revenue: 0,
                nb_employees: 0,
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "",
                primary_address_zipcode: "",
                is_converted: "",
                converted_account_id: "",
                converted_contact_id: "",
                converted_opportunity_id: "",
                converted_date: "",
                assigned_contact_id: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-12-13 11:47:50",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-12-13 11:47:50"
            }
        } ]
    }, {
        a4p_type: "Lead",
        crmObjects: [ {
            crmId: {
                id: "DUMMY_SF_ID_015",
                crm: "sf"
            },
            editable: !0,
            data: {
                title: "Vente de carburateurs",
                salutation: "Mr.",
                first_name: "William",
                last_name: "Amottho",
                description: "Concessionnaire",
                lead_source: "Forum biker",
                email: "willy.a.mamoto@gmail.com",
                fax: "",
                phone: "",
                phone_mobile: "",
                web_url: "",
                company_name: "",
                industry: "",
                annual_revenue: 0,
                nb_employees: 0,
                primary_address_city: "",
                primary_address_country: "",
                primary_address_state: "",
                primary_address_street: "",
                primary_address_zipcode: "",
                is_converted: "",
                converted_account_id: "",
                converted_contact_id: "",
                converted_opportunity_id: "",
                converted_date: "",
                assigned_contact_id: "",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-12-13 11:47:50",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-12-13 11:47:50"
            }
        } ]
    }, {
        a4p_type: "Task",
        crmObjects: [ {
            crmId: {
                id: "DUMMY_SF_ID_016",
                crm: "sf"
            },
            editable: !0,
            data: {
                name: "Préparer la présentation",
                date_start: "2013-12-14 12:00:00",
                is_reminder_set: "false",
                date_reminder: "2013-12-14 12:00:00",
                description: "",
                status: "",
                what_id: "",
                assigned_contact_id: "003i00000030XVVAA2",
                owner_id: "005i0000000I8c5AAC",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-12-13 11:47:50",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-12-13 11:47:50"
            }
        } ]
    }, {
        a4p_type: "Task",
        crmObjects: [ {
            crmId: {
                id: "DUMMY_SF_ID_017",
                crm: "sf"
            },
            editable: !0,
            data: {
                name: "Faire la vaisselle",
                date_start: "2013-12-14 12:00:00",
                is_reminder_set: "true",
                date_reminder: "2013-12-14 12:00:00",
                description: "",
                status: "",
                what_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                owner_id: "005i0000000I8c5AAC",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-12-13 11:47:50",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-12-13 11:47:50"
            }
        } ]
    }, {
        a4p_type: "Task",
        crmObjects: [ {
            crmId: {
                id: "DUMMY_SF_ID_018",
                crm: "sf"
            },
            editable: !0,
            data: {
                name: "Créer un guide utilisateur",
                date_start: "2013-12-14 12:00:00",
                is_reminder_set: "true",
                date_reminder: "2013-12-14 12:00:00",
                description: "",
                status: "",
                what_id: "",
                assigned_contact_id: "005i0000000I8c5AAC",
                owner_id: "005i0000000I8c5AAC",
                created_by_id: "005i0000000I8c5AAC",
                created_date: "2013-12-13 11:47:50",
                last_modified_by_id: "005i0000000I8c5AAC",
                last_modified_date: "2013-12-13 11:47:50"
            }
        } ]
    } ]
};

var a4p;

if (a4p || (a4p = {}), a4p.initCache = !1, a4p.initCacheTimer = null, a4p.appCacheErrorFlag = !1, 
a4p.appCacheErrorCounter = window.localStorage.getItem("AppCacheErrorCounter"), 
a4p.appCacheErrorCounter = null == a4p.appCacheErrorCounter ? 0 : a4p.appCacheErrorCounter.valueOf(), 
window.localStorage.setItem("AppCacheErrorCounter", a4p.appCacheErrorCounter), a4p.appCacheReloadCounter = window.localStorage.getItem("AppCacheReloadCounter"), 
a4p.appCacheReloadCounter = null == a4p.appCacheReloadCounter ? 0 : a4p.appCacheReloadCounter.valueOf(), 
window.localStorage.setItem("AppCacheReloadCounter", a4p.appCacheReloadCounter), 
$("html").attr("manifest")) {
    var appCache = window.applicationCache;
    "undefined" == typeof appCache ? a4pInitCache() : (a4p.initCacheTimer = setTimeout(a4pInitCache, 3e4), 
    appCache.addEventListener("error", function(e) {
        var msg = "Cache error detected. Go on to force a reload. Error counter = " + a4p.appCacheErrorCounter + ", error : ";
        for (var key in e) e.hasOwnProperty(key) && (msg += " " + key + "=" + e[key]);
        a4p.ErrorLog.log("appcache", msg), a4p.appCacheErrorFlag || (a4p.appCacheErrorCounter < 5 ? (a4pInitCacheErrorCounterIncr(), 
        window.location.reload()) : (a4pInitCacheErrorCounterClear(), window.confirm("Cache is not completely loaded. Server appcache invalid. You can accept this incomplete cache or reload the page. Accept incomplete cache ?") ? a4pInitCache() : window.location.reload()));
    }, !1), appCache.addEventListener("checking", function(e) {
        var msg = "Cache checking :";
        for (var key in e) e.hasOwnProperty(key) && (msg += " " + key + "=" + e[key]);
    }, !1), appCache.addEventListener("progress", function(e) {
        var msg = "Cache progress :";
        for (var key in e) e.hasOwnProperty(key) && (msg += " " + key + "=" + e[key]);
    }, !1), appCache.addEventListener("noupdate", function() {
        a4pInitCache();
    }, !1), appCache.addEventListener("cached", function() {
        a4pInitCache();
    }, !1), appCache.addEventListener("updateready", function() {
        a4pInitCacheErrorCounterClear(), appCache.status == appCache.UPDATEREADY ? window.confirm("A new version of this site is available. Load it ?") ? (appCache.swapCache(), 
        window.location.reload()) : a4pInitCache() : a4pInitCache();
    }, !1));
} else a4pInitCache();

ctrlAction.$inject = [ "$scope", "$q", "$modal", "srvData", "srvNav", "srvFacet", "srvConfig", "srvLocale" ], 
ctrlAside.$inject = [ "$scope", "$location", "$anchorScroll", "srvFacet", "srvLocale", "srvData", "srvAnalytics", "srvNav", "version" ], 
ctrlAsideItem.$inject = [ "$scope", "srvLocale", "srvData", "srvNav", "srvLink", "srvConfig" ], 
ctrlAsideSearch.$inject = [ "$scope", "$timeout", "srvFacet", "srvLocale", "srvData", "srvNav", "version" ], 
ctrlCalendar.$inject = [ "$scope", "$timeout", "version", "srvAnalytics", "srvLocale", "srvTime", "srvConfig" ], 
ctrlConfig.$inject = [ "$scope", "srvConfig", "srvLog", "srvLocale", "srvSecurity", "srvDataTransfer", "$modal", "srvAnalytics", "version" ], 
ctrlDetail.$inject = [ "$scope", "$timeout", "$modal", "version", "srvData", "srvFacet", "srvLocale", "srvLink", "srvNav", "srvConfig" ], 
ctrlDetailLink.$inject = [ "$scope", "srvData", "srvLocale", "srvNav" ], ctrlDetailedObject.$inject = [ "$scope", "$sce", "srvLocale", "srvData", "srvNav", "srvLink", "srvConfig", "srvAnalytics" ], 
ctrlDragObject.$inject = [ "$scope", "$modal", "$timeout", "srvLocale", "srvData", "srvNav", "srvLink", "srvConfig" ], 
ctrlInlinedObject.$inject = [ "$scope", "srvData", "srvConfig", "srvLocale" ], ctrlLinkActions.$inject = [ "$scope", "$timeout", "srvData", "srvNav", "srvLink", "srvConfig", "srvLog" ], 
ctrlMeeting.$inject = [ "$scope", "$modal", "srvData", "srvConfig", "srvNav", "srvLocale", "srvAnalytics" ], 
ctrlMeetingElementDrag.$inject = [ "$scope", "$modal", "srvLocale", "srvData", "srvNav", "srvLink", "srvConfig" ], 
ctrlMeetingElementDrop.$inject = [ "$scope" ], ctrlMeetingObjLinkDrop.$inject = [ "$scope", "srvData", "srvConfig" ], 
ctrlMeetingRemoveDrop.$inject = [ "$scope", "srvLocale", "srvData", "srvNav", "srvLink", "srvConfig" ], 
ctrlNamedObject.$inject = [ "$scope", "srvConfig" ], ctrlNavObject.$inject = [ "$scope", "srvNav", "srvConfig" ], 
navigationCtrl.$inject = [ "$scope", "$q", "$timeout", "$location", "$anchorScroll", "$http", "$modal", "$sce", "version", "srvLoad", "srvLocalStorage", "srvFileStorage", "srvAnalytics", "srvConfig", "srvLog", "srvLocale", "srvData", "srvRunning", "srvSecurity", "srvSynchro", "cordovaReady", "srvLink", "srvNav", "srvGuider", "srvFacet", "srvOpenUrl" ], 
networkTestRunnerCtrl.$inject = [ "$scope", "$q", "$location", "$http", "$modal", "version", "srvLoad", "srvLocalStorage", "srvFileStorage", "srvAnalytics", "srvConfig", "srvLog", "srvLocale", "srvData", "srvRunning", "srvSecurity", "srvSynchro", "cordovaReady", "srvLink", "srvNav", "srvGuider", "srvFacet" ], 
ctrlResponsive.$inject = [ "$scope", "$window", "$timeout", "srvConfig" ], ctrlRightToolbar.$inject = [ "$scope", "$timeout", "srvFacet", "srvLocale", "srvData", "srvNav", "version" ], 
ctrlSingleTap.$inject = [ "$scope" ], ctrlSummarizedObject.$inject = [ "$scope", "srvLocale", "srvData", "srvLink", "srvConfig" ], 
ctrlTimeline.$inject = [ "$scope", "srvData", "version" ], ctrlTrashObject.$inject = [ "$scope" ], 
ctrlViewer.$inject = [ "$scope", "srvData", "srvNav", "srvLocale" ], ctrlEditFocus.$inject = [ "$scope", "$window" ], 
ctrlGuiderDialog.$inject = [ "$scope", "$sce", "srvLocale" ], angular.module("template/c4p-accordion/accordion-group.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/c4p-accordion/accordion-group.html", '<div class="c4p-accordion-group">  <div class="pull-right c4p-accordion-heading" >	<a class="c4p-accordion-toggle" ng-click="isOpen = !isOpen" c4p-accordion-transclude-heading="heading">{{heading}}</a>  </div>  <div ng-transclude></div>  <div class="c4p-accordion-item" collapse="!isOpen">    <div class="c4p-accordion-inner clearfix" c4p-accordion-transclude-item="item">{{item}}</div>	 <a class="pull-right c4p-accordion-toggle" ng-click="isOpen = !isOpen"><span class="glyphicon glyphicon-chevron-up"></span></a>   </div></div>');
} ]), angular.module("template/c4p-accordion/accordion.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/c4p-accordion/accordion.html", '<div class="c4p-accordion" ng-transclude></div>');
} ]), angular.module("a4p.bootstrap.accordion", [ "ui.bootstrap.transition", "ui.bootstrap.collapse", "template/c4p-accordion/accordion-group.html", "template/c4p-accordion/accordion.html" ]).constant("c4pAccordionConfig", {
    closeOthers: !0
}).controller("c4pAccordionController", [ "$scope", "$attrs", "c4pAccordionConfig", function($scope, $attrs) {
    this.groups = [], this.changeFn = function() {};
    this.closeOthers = function(openGroup) {
        var closeOthers = angular.isDefined($attrs.closeOthers) ? $scope.$eval($attrs.closeOthers) : c4pAccordionConfig.closeOthers;
        closeOthers && angular.forEach(this.groups, function(group) {
            group !== openGroup && (group.isOpen = !1);
        }), this.updateScroll();
    }, this.closeAll = function() {
        angular.forEach(this.groups, function(group) {
            group.isOpen = !1;
        }), this.updateScroll();
    }, this.addGroup = function(groupScope) {
        var that = this;
        this.groups.push(groupScope), groupScope.$on("$destroy", function() {
            that.removeGroup(groupScope);
        }), this.updateScroll();
    }, this.setChangeFn = function(fn) {
        this.changeFn = fn;
    }, this.updateScroll = function() {
        $scope.scrollRefresh && $scope.scrollRefresh();
    }, this.removeGroup = function(group) {
        var index = this.groups.indexOf(group);
        -1 !== index && (this.groups.splice(this.groups.indexOf(group), 1), this.updateScroll());
    };
} ]).directive("c4pAccordion", function() {
    return {
        restrict: "EA",
        controller: "c4pAccordionController",
        transclude: !0,
        replace: !1,
        templateUrl: "template/c4p-accordion/accordion.html",
        link: function() {}
    };
}).directive("c4pAccordionGroup", [ "$parse", "$transition", function($parse) {
    return {
        require: "^c4pAccordion",
        restrict: "EA",
        transclude: !0,
        replace: !0,
        templateUrl: "template/c4p-accordion/accordion-group.html",
        scope: {
            heading: "@",
            item: "@"
        },
        controller: [ "$scope", function($scope) {
            this.setHeading = function(element) {
                this.heading = element;
            }, this.setItem = function(element) {
                this.item = element;
            }, this.closeGroup = function() {
                $scope.isOpen = !1;
            }, $scope.toggleGroup = function() {
                $scope.isOpen = !$scope.isOpen;
            };
        } ],
        link: function(scope, element, attrs, c4pAccordionCtrl) {
            var getIsOpen, setIsOpen;
            c4pAccordionCtrl.addGroup(scope), attrs.isOpen && (getIsOpen = $parse(attrs.isOpen), 
            setIsOpen = getIsOpen.assign, scope.$watch(function() {
                return getIsOpen(scope.$parent);
            }, function(value) {
                scope.isOpen = value;
            }), scope.isOpen = getIsOpen ? getIsOpen(scope.$parent) : !1), scope.$watch("isOpen", function(value) {
                value ? c4pAccordionCtrl.closeOthers(scope) : c4pAccordionCtrl.updateScroll(), setIsOpen && setIsOpen(scope.$parent, value);
            });
        }
    };
} ]).directive("c4pAccordionHeading", function() {
    return {
        restrict: "E",
        transclude: !0,
        template: "",
        replace: !0,
        require: "^c4pAccordionGroup",
        compile: function(element, attr, transclude) {
            return function(scope, element, attr, c4pAccordionGroupCtrl) {
                c4pAccordionGroupCtrl.setHeading(transclude(scope, function() {}));
            };
        }
    };
}).directive("c4pAccordionItem", function() {
    return {
        restrict: "E",
        transclude: !0,
        template: "",
        replace: !0,
        require: [ "^c4pAccordionGroup", "^c4pAccordion" ],
        compile: function(element, attr, transclude) {
            return function(scope, element, attr, ctrls) {
                {
                    var c4pAccordionGroupCtrl = ctrls[0];
                    ctrls[1];
                }
                scope.closeAccordionGroup = function() {
                    c4pAccordionGroupCtrl.closeGroup();
                }, c4pAccordionGroupCtrl.setItem(transclude(scope, function() {}));
            };
        }
    };
}).directive("c4pAccordionTranscludeHeading", function() {
    return {
        require: "^c4pAccordionGroup",
        link: function(scope, element, attr, controller) {
            scope.$watch(function() {
                return controller[attr.c4pAccordionTranscludeHeading];
            }, function(heading) {
                heading && (element.html(""), element.append(heading));
            });
        }
    };
}).directive("c4pAccordionTranscludeItem", function() {
    return {
        require: "^c4pAccordionGroup",
        link: function(scope, element, attr, controller) {
            scope.$watch(function() {
                return controller[attr.c4pAccordionTranscludeItem];
            }, function(item) {
                item && (element.html(""), element.append(item));
            });
        }
    };
});

var directiveModule = angular.module("c4pDirectives", [ "c4pFilters", "ui.bootstrap", "a4p.bootstrap.carousel", "a4p.bootstrap.accordion", "c4p.input", "c4p.ratings", "c4p.viewer" ]).config(function($compileProvider) {
    $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|tel):/);
});

a4p.Sense.declareDirectives(directiveModule), a4p.Resize.declareDirectives(directiveModule), 
console.log("a4p.Sense.declareDirectives"), angular.module("a4p/carousel/carousel.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("a4p/carousel/carousel.html", '<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" sense-opts="{name:\'slide\', axeX:\'scroll\', axeY:\'swipe\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}" sense-scrollend="scrollEnd($event)"><div class="carousel-inner" ng-transclude></div></div>');
} ]), angular.module("a4p/carousel/slide.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("a4p/carousel/slide.html", "<div ng-class=\"{    'active': leaving || (active && !entering),    'prev': (next || active) && direction=='prev',    'next': (next || active) && direction=='next',    'right': direction=='prev',    'left': direction=='next'  }\" class=\"item\" ng-transclude></div>");
} ]), angular.module("a4p.bootstrap.carousel", [ "ui.bootstrap.transition", "a4p/carousel/carousel.html", "a4p/carousel/slide.html" ]).controller("A4PCarouselController", [ "$scope", "$transition", "$q", function($scope, $transition) {
    function restartTimer() {
        function go() {
            isPlaying ? ($scope.next(), restartTimer()) : $scope.pause();
        }
        currentTimeout && clearTimeout(currentTimeout);
        var interval = +$scope.interval;
        !isNaN(interval) && interval >= 0 && (currentTimeout = setTimeout(go, interval));
    }
    var currentTimeout, isPlaying, self = this, slides = self.slides = [], currentIndex = -1;
    self.currentSlide = null, self.select = function(nextSlide, direction) {
        function goNext() {
            if (self.currentSlide && angular.isString(direction) && !$scope.noTransition && nextSlide.$element) {
                nextSlide.$element.addClass(direction);
                {
                    var elz = nextSlide.$element.find("item");
                    elz.context.offsetWidth;
                }
                angular.forEach(slides, function(slide) {
                    angular.extend(slide, {
                        direction: "",
                        entering: !1,
                        leaving: !1,
                        active: !1
                    });
                }), angular.extend(nextSlide, {
                    direction: direction,
                    active: !0,
                    entering: !0
                }), angular.extend(self.currentSlide || {}, {
                    direction: direction,
                    leaving: !0
                }), $scope.$currentTransition = $transition(nextSlide.$element, {}), function(next, current) {
                    $scope.$currentTransition.then(function() {
                        transitionDone(next, current);
                    }, function() {
                        transitionDone(next, current);
                    });
                }(nextSlide, self.currentSlide);
            } else transitionDone(nextSlide, self.currentSlide);
            self.currentSlide = nextSlide, currentIndex = nextIndex, restartTimer();
        }
        function transitionDone(next, current) {
            angular.extend(next, {
                direction: "",
                active: !0,
                leaving: !1,
                entering: !1
            }), angular.extend(current || {}, {
                direction: "",
                active: !1,
                leaving: !1,
                entering: !1
            }), $scope.$currentTransition = null;
        }
        var nextIndex = slides.indexOf(nextSlide);
        a4p.isUndefined(direction) && (direction = nextIndex > currentIndex ? "next" : "prev"), 
        nextSlide && nextSlide !== self.currentSlide && ($scope.$currentTransition ? ($scope.$currentTransition.cancel(), 
        setTimeout(goNext)) : goNext());
    }, self.indexOfSlide = function(slide) {
        return slides.indexOf(slide);
    }, self.scrollEnd = function(event) {
        event && "right" == event.side ? $scope.prev() : $scope.next();
    }, $scope.scrollEnd = function(event) {
        event && "right" == event.side ? $scope.prev() : $scope.next();
    }, $scope.next = function() {
        var newIndex = (currentIndex + 1) % slides.length;
        return self.select(slides[newIndex], "next");
    }, $scope.prev = function() {
        var newIndex = 0 > currentIndex - 1 ? slides.length - 1 : currentIndex - 1;
        return self.select(slides[newIndex], "prev");
    }, $scope.$watch("interval", restartTimer), $scope.play = function() {
        isPlaying || (isPlaying = !0, restartTimer());
    }, $scope.pause = function() {
        isPlaying = !1, currentTimeout && clearTimeout(currentTimeout);
    }, self.addSlide = function(slide, element) {
        slide.$element = element, slides.push(slide), 1 === slides.length || slide.active ? (self.select(slides[slides.length - 1]), 
        1 == slides.length && $scope.play()) : slide.active = !1;
    }, self.removeSlide = function(slide) {
        var index = slides.indexOf(slide);
        slides.splice(index, 1), slides.length > 0 && slide.active && self.select(index >= slides.length ? slides[index - 1] : slides[index]);
    };
} ]).directive("a4pCarousel", [ function() {
    return {
        restrict: "EA",
        transclude: !0,
        replace: !0,
        controller: "A4PCarouselController",
        require: "a4pCarousel",
        templateUrl: "a4p/carousel/carousel.html",
        scope: {
            interval: "=",
            noTransition: "="
        }
    };
} ]).directive("a4pSlide", [ function() {
    return {
        require: "^a4pCarousel",
        restrict: "EA",
        transclude: !0,
        replace: !0,
        templateUrl: "a4p/carousel/slide.html",
        scope: {
            active: "="
        },
        link: function(scope, element, attrs, carouselCtrl) {
            carouselCtrl.addSlide(scope, element), scope.$on("$destroy", function() {
                carouselCtrl.removeSlide(scope);
            }), scope.$watch("active", function(active) {
                active && carouselCtrl.select(scope);
            }), scope.$parent.scrollEnd = function(event) {
                carouselCtrl.scrollEnd(event);
            };
        }
    };
} ]), directiveModule.directive("appVersion", [ "version", function(version) {
    return function(scope, elm) {
        elm.text(version);
    };
} ]), directiveModule.directive("c4pPluralize", [ "$locale", "$interpolate", function($locale, $interpolate) {
    var BRACE = /{}/g;
    return {
        restrict: "EA",
        link: function(scope, element, attrs) {
            var numberExp = attrs.count, whenExp = element.attr(attrs.$attr.when), offset = attrs.offset || 0;
            scope.$watch(function() {
                var value = parseFloat(scope.$eval(numberExp)), whens = scope.$eval(whenExp), whensExpFns = {};
                for (var key in whens) if (whens.hasOwnProperty(key)) {
                    var whenValue = whens[key];
                    whensExpFns[key] = $interpolate(whenValue.replace(BRACE, "{{" + numberExp + "-" + offset + "}}"));
                }
                return isNaN(value) ? "" : (whens[value] || (value = $locale.pluralCat(value - offset)), 
                whensExpFns[value](scope, element, !0));
            }, function(newVal) {
                element.text(newVal);
            });
        }
    };
} ]), directiveModule.directive("c4pShow", [ "$animate", function($animate) {
    return {
        restrict: "EA",
        transclude: "element",
        priority: 500,
        compile: function(element, attrs, transclude) {
            return function(scope, element, attr) {
                var animate = $animate, watchExpr = attr.c4pShow || attr.on, selectedScope = null, selectedElement = null;
                scope.$watch(watchExpr, function(newVal) {
                    newVal ? null == selectedScope && (selectedScope = scope, transclude(selectedScope, function(showElement) {
                        var anchor = element;
                        selectedElement = showElement, animate.enter(showElement, anchor.parent(), anchor);
                    })) : null != selectedScope && (animate.leave(selectedElement), selectedScope = null, 
                    selectedElement = null);
                });
            };
        }
    };
} ]), directiveModule.directive("c4pHide", [ "$animate", function($animate) {
    return {
        restrict: "EA",
        transclude: "element",
        priority: 500,
        compile: function(element, attrs, transclude) {
            return function(scope, element, attr) {
                var animate = $animate, watchExpr = attr.c4pHide || attr.on, selectedScope = scope, selectedElement = null;
                transclude(selectedScope, function(showElement) {
                    var anchor = element;
                    selectedElement = showElement, animate.enter(showElement, anchor.parent(), anchor);
                }), scope.$watch(watchExpr, function(newVal) {
                    newVal ? null != selectedScope && (animate.leave(selectedElement), selectedScope = null, 
                    selectedElement = null) : null == selectedScope && (selectedScope = scope, transclude(selectedScope, function(showElement) {
                        var anchor = element;
                        selectedElement = showElement, animate.enter(showElement, anchor.parent(), anchor);
                    }));
                });
            };
        }
    };
} ]), directiveModule.directive("noSpaceAndLowerCase", function() {
    return {
        require: "ngModel",
        link: function(scope, element, attrs, ngModelCtrl) {
            ngModelCtrl.$parsers.push(function(inputValue) {
                var transformedInput = inputValue.toLowerCase().replace(/ /g, "");
                return transformedInput != inputValue && (ngModelCtrl.$setViewValue(transformedInput), 
                ngModelCtrl.$render()), transformedInput;
            });
        }
    };
}), directiveModule.directive("zippy", function() {
    return {
        restrict: "C",
        replace: !0,
        transclude: !0,
        scope: {
            title: "@zippyTitle"
        },
        template: '<div><div class="title">{{title}}</div><div class="body" ng-transclude></div></div>',
        link: function(scope, element) {
            function toggle() {
                opened = !opened, element.removeClass(opened ? "closed" : "opened"), element.addClass(opened ? "opened" : "closed");
            }
            var title = angular.element(element.children()[0]), opened = !0;
            title.bind("click", toggle), toggle();
        }
    };
}), directiveModule.directive("c4pNoDot", function() {
    return {
        restrict: "CA",
        link: function(scope, element, attrs) {
            var originalFontSize = element.css("font-size");
            originalFontSize = parseInt(originalFontSize.substring(0, originalFontSize.length - 2));
            for (var container = element.parent(); !container.hasClass("c4p-no-dot-container"); ) container = container.parent();
            scope.$watch(attrs.c4pNoDot, function(value) {
                if (!a4p.isUndefinedOrNull(value)) {
                    var length = value.length, width = originalFontSize * length;
                    container && container.hasClass("c4p-no-dot-container") && (width = container[0].offsetWidth);
                    var fontSize = 1.5 * width / length;
                    fontSize > originalFontSize && (fontSize = originalFontSize), fontSize = "" + fontSize + "px", 
                    a4p.InternalLog.log("c4pNoDot", "l:" + length + " w:" + width + " fs:" + fontSize + " t:" + value), 
                    element.css("font-size", fontSize);
                }
            });
        }
    };
}), directiveModule.directive("c4pBackImg", function() {
    return function(scope, element, attrs) {
        var url = attrs.c4pBackImg;
        element.css({
            background: "url(" + url + ") no-repeat center center",
            "background-size": "cover",
            "-webkit-background-size": "cover"
        });
    };
}), directiveModule.directive("c4pDrawing", function() {
    return {
        restrict: "A",
        link: function(scope, element) {
            function draw(lX, lY, cX, cY) {
                ctx.moveTo(lX, lY), ctx.lineTo(cX, cY), ctx.strokeStyle = "#4bf", ctx.stroke();
            }
            var lastX, lastY, ctx = element[0].getContext("2d"), drawing = !1;
            element.bind("mousedown", function(event) {
                void 0 !== event.offsetX ? (lastX = event.offsetX, lastY = event.offsetY) : (lastX = event.layerX - event.currentTarget.offsetLeft, 
                lastY = event.layerY - event.currentTarget.offsetTop), ctx.beginPath(), drawing = !0;
            }), element.bind("mousemove", function(event) {
                drawing && (void 0 !== event.offsetX ? (currentX = event.offsetX, currentY = event.offsetY) : (currentX = event.layerX - event.currentTarget.offsetLeft, 
                currentY = event.layerY - event.currentTarget.offsetTop), draw(lastX, lastY, currentX, currentY), 
                lastX = currentX, lastY = currentY);
            }), element.bind("mouseup", function() {
                drawing = !1;
            });
        }
    };
}), angular.module("c4p/input.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("c4p/input.html", '<div class="form-group"><label class="control-label a4p-dot"></label></div>'), 
    $templateCache.put("c4p/input-simple.html", "<div></div>");
} ]);

var c4pInputCompile = function(element, attrs, transclude, $compile) {
    var addClearButton = function(html, disabled) {
        var inputText = '<div class="input-group">' + html + '<span class="input-group-addon input-sm" ><a id="clearBtn" class="btn" ng-click="clearInput()" ng-hide=' + disabled + ">&times;</a></span></div>";
        return inputText;
    };
    return function(scope, element, attrs, ngModelCtrl) {
        var inputType = "text";
        a4p.isDefined(attrs.type) ? inputType = attrs.type : a4p.isDefined(attrs.typeVar) && (inputType = scope.$eval(attrs.typeVar));
        var labelIcon = "";
        a4p.isDefined(attrs.icon) && attrs.icon.length > 0 && (labelIcon = "tel" == inputType ? '<a href="" target=_blank><span class="glyphicon glyphicon-' + attrs.icon + ' icon-large"></span></a> ' : "mail" == inputType ? '<a href="" target=_blank><span class="glyphicon glyphicon-' + attrs.icon + ' icon-large"></span></a> ' : "url" == inputType ? '<a href="" target=_blank><span class="glyphicon glyphicon-' + attrs.icon + ' icon-large"></span></a> ' : '<span class="glyphicon glyphicon-' + attrs.icon + ' icon-large"></span>');
        var controlsTemplate = "";
        a4p.isDefined(attrs.titleVar) && attrs.titleVar.length > 0 && (controlsTemplate = controlsTemplate + '<label class="control-label a4p-dot">' + labelIcon + "{{" + attrs.titleVar + "}}</label>");
        var autofocus = "";
        scope.$eval(attrs.focusVar) && (autofocus = "autofocus");
        var inputAttrs = 'class="form-control has-feedback" onfocus="this.select();" ' + autofocus + " ", inputDateAttrs = 'class="form-control" onfocus="this.select();" ' + autofocus + " ", inputTimeAttrs = 'class="form-control" onfocus="this.select();" ' + autofocus + " ", inputSelectAttrs = 'class="form-control" ' + autofocus + " ";
        if (a4p.isDefined(attrs.ngModel) && (inputAttrs = inputAttrs + 'ng-model="' + attrs.ngModel + '" name="' + attrs.ngModel + '"', 
        inputSelectAttrs = inputSelectAttrs + 'ng-model="' + attrs.ngModel + '" '), a4p.isDefined(attrs.ngChange) && (inputAttrs = inputAttrs + 'ng-change="' + attrs.ngChange + '" '), 
        a4p.isDefined(attrs.ngFocus) && (inputAttrs = inputAttrs + 'ng-focus="' + attrs.ngFocus + '" '), 
        a4p.isDefined(attrs.ngBlur) && (inputAttrs = inputAttrs + 'ng-blur="' + attrs.ngBlur + '" '), 
        a4p.isDefined(attrs.placeholder) && (inputAttrs = inputAttrs + 'placeholder="' + attrs.placeholder + '" '), 
        "tel" == inputType) controlsTemplate += addClearButton('<input type="tel" ' + inputAttrs + "/>", attrs.ngDisabled); else if ("mail" == inputType) controlsTemplate += addClearButton('<input type="email" ' + inputAttrs + "/>", attrs.ngDisabled); else if ("url" == inputType) controlsTemplate += addClearButton('<input type="url" ' + inputAttrs + "/>", attrs.ngDisabled); else if ("password" == inputType) controlsTemplate += addClearButton('<input type="password" ' + inputAttrs + "/>", attrs.ngDisabled); else if ("number" == inputType || "currency" == inputType) controlsTemplate += addClearButton('<input type="number" min="0" ' + inputAttrs + "/>", attrs.ngDisabled); else if ("probability" == inputType) controlsTemplate += addClearButton('<input type="number" min="0" max="100" ' + inputAttrs + "/>", attrs.ngDisabled); else if ("boolean" == inputType) controlsTemplate += addClearButton('<input type="checkbox" ' + inputAttrs + "/>", attrs.ngDisabled); else if ("date" == inputType) inputDateAttrs += 'ng-model="currentDatePart" ', 
        a4p.isDefined(attrs.ngChange) ? inputDateAttrs = inputDateAttrs + 'ng-change="onDateChanged();' + attrs.ngChange + '" ' : inputDateAttrs += 'ng-change="onDateChanged()" ', 
        a4p.isDefined(attrs.ngBlur) && (inputDateAttrs = inputDateAttrs + 'ng-blur="' + attrs.ngBlur + '" '), 
        controlsTemplate = controlsTemplate + '<input type="date" c4p-inputdate ' + inputDateAttrs + "/>"; else if ("time" == inputType) inputTimeAttrs += 'ng-model="currentTimePart"  ', 
        a4p.isDefined(attrs.ngChange) ? inputTimeAttrs = inputTimeAttrs + 'ng-change="onTimeChanged();' + attrs.ngChange + '" ' : inputTimeAttrs += 'ng-change="onTimeChanged()" ', 
        a4p.isDefined(attrs.ngBlur) && (inputTimeAttrs = inputTimeAttrs + 'ng-blur="' + attrs.ngBlur + '" '), 
        controlsTemplate = controlsTemplate + '<input type="time" c4p-inputdate ' + inputTimeAttrs + "/>"; else if ("datetime" == inputType) inputDateAttrs += 'ng-model="currentDatePart" ', 
        a4p.isDefined(attrs.ngChange) ? inputDateAttrs = inputDateAttrs + 'ng-change="onDateTimeChanged();' + attrs.ngChange + '" ' : inputDateAttrs += 'ng-change="onDateTimeChanged()" ', 
        a4p.isDefined(attrs.ngBlur) && (inputDateAttrs = inputDateAttrs + 'ng-blur="' + attrs.ngBlur + '" '), 
        inputTimeAttrs += 'ng-model="currentTimePart"  ', a4p.isDefined(attrs.ngChange) ? inputTimeAttrs = inputTimeAttrs + 'ng-change="onDateTimeChanged();' + attrs.ngChange + '" ' : inputTimeAttrs += 'ng-change="onDateTimeChanged()" ', 
        a4p.isDefined(attrs.ngBlur) && (inputTimeAttrs = inputTimeAttrs + 'ng-blur="' + attrs.ngBlur + '" '), 
        controlsTemplate = controlsTemplate + '<input type="date" c4p-inputdate class="col-xxs-7 form-control" ' + inputDateAttrs + "/>", 
        controlsTemplate = controlsTemplate + '<input type="time" c4p-inputdate class="col-xxs-4 col-xxs-offset-1 form-control" ' + inputTimeAttrs + "/>"; else if ("textarea" == inputType) inputAttrs += 'ng-trim="false"', 
        a4p.isDefined(attrs.rows) && (inputAttrs = inputAttrs + 'rows="' + attrs.rows + '" '), 
        a4p.isDefined(attrs.cols) && (inputAttrs = inputAttrs + 'cols="' + attrs.cols + '" '), 
        controlsTemplate += addClearButton("<textarea " + inputAttrs + "/>", attrs.ngDisabled); else if ("select" == inputType) {
            var optionsArr = scope.$eval(attrs.optionsVar);
            if (controlsTemplate = controlsTemplate + "<select " + inputSelectAttrs + ">", "" != optionsArr) for (var key in optionsArr) controlsTemplate = controlsTemplate + "<option>" + optionsArr[key] + "</option>";
            controlsTemplate += "</select>";
        } else controlsTemplate += addClearButton('<input type="text" ' + inputAttrs + "/>", attrs.ngDisabled);
        var controlsElt = $(element[0]);
        controlsTemplate = $compile(controlsTemplate)(scope);
        var controlsElement = angular.element(controlsTemplate);
        controlsElt.append(controlsElement), scope.initInputCtrl(ngModelCtrl, inputType), 
        "tel" == inputType ? a4p.isDefined(attrs.ngModel) && a4p.isDefined(attrs.icon) && attrs.icon.length > 0 && scope.$watch(attrs.ngModel, function(value) {
            element.find("a").attr("href", "tel:" + encodeURIComponent(value));
        }) : "mail" == inputType ? a4p.isDefined(attrs.ngModel) && a4p.isDefined(attrs.icon) && attrs.icon.length > 0 && scope.$watch(attrs.ngModel, function(value) {
            element.find("a").attr("href", "mailto:" + encodeURIComponent(value));
        }) : "url" == inputType ? a4p.isDefined(attrs.ngModel) && a4p.isDefined(attrs.icon) && attrs.icon.length > 0 && scope.$watch(attrs.ngModel, function(value) {
            element.find("a").attr("href", encodeURI(value));
        }) : "date" == inputType ? a4p.isDefined(attrs.ngModel) && scope.$watch(attrs.ngModel, function(value) {
            scope.setInputValue(value);
        }) : "time" == inputType ? a4p.isDefined(attrs.ngModel) && scope.$watch(attrs.ngModel, function(value) {
            scope.setInputValue(value);
        }) : "datetime" == inputType ? a4p.isDefined(attrs.ngModel) && scope.$watch(attrs.ngModel, function(value) {
            scope.setInputValue(value);
        }) : "textarea" == inputType && $(controlsElt.find("textarea")).autosize();
    };
};

angular.module("c4p.input", [ "c4p/input.html" ]).controller("c4pInputCtrl", [ "$scope", function($scope) {
    $scope.currentDate = new Date(), $scope.currentDatePart = new Date(), $scope.currentTimePart = new Date(), 
    $scope.previousDate = new Date(), $scope.valueType = "", $scope.ngModelCtrl = null, 
    $scope.initInputCtrl = function(ngModelCtrl, type) {
        $scope.ngModelCtrl = ngModelCtrl, $scope.valueType = type;
    }, $scope.setInputValue = function(value) {
        if (console.log("input : " + value), $scope.ngModelCtrl && ("time" == $scope.valueType || "date" == $scope.valueType || "datetime" == $scope.valueType)) {
            var date = a4pDateParse(a4pDateFormatObject(value));
            date || (date = new Date()), $scope.currentDate = date, $scope.currentDatePart = $scope.currentDate, 
            $scope.currentTimePart = $scope.currentDate;
        }
    }, $scope.clearInput = function() {
        $scope.ngModelCtrl && ($scope.ngModelCtrl.$cancelUpdate(), $scope.ngModelCtrl.$setViewValue(""), 
        $scope.ngModelCtrl.$render());
    }, $scope.onDateChanged = function() {
        if ($scope.ngModelCtrl) {
            $scope.currentDatePart || ($scope.currentDatePart = new Date()), $scope.currentDate.setFullYear($scope.currentDatePart.getFullYear()), 
            $scope.currentDate.setMonth($scope.currentDatePart.getMonth()), $scope.currentDate.setDate($scope.currentDatePart.getDate());
            var formatDate = a4pDateFormat($scope.currentDate);
            $scope.ngModelCtrl.$setViewValue(formatDate), $scope.ngModelCtrl.$render();
        }
    }, $scope.onTimeChanged = function() {
        if ($scope.ngModelCtrl) {
            $scope.currentTimePart || ($scope.currentTimePart = new Date()), $scope.currentDate.setHours($scope.currentTimePart.getHours()), 
            $scope.currentDate.setMinutes($scope.currentTimePart.getMinutes());
            var formatDate = a4pDateFormat($scope.currentDate);
            $scope.ngModelCtrl.$setViewValue(formatDate), $scope.ngModelCtrl.$render();
        }
    }, $scope.onDateTimeChanged = function() {
        if ($scope.ngModelCtrl) {
            $scope.currentDatePart || ($scope.currentDatePart = new Date()), $scope.currentTimePart || ($scope.currentTimePart = new Date()), 
            $scope.currentDate.setFullYear($scope.currentDatePart.getFullYear()), $scope.currentDate.setMonth($scope.currentDatePart.getMonth()), 
            $scope.currentDate.setDate($scope.currentDatePart.getDate()), $scope.currentDate.setHours($scope.currentTimePart.getHours()), 
            $scope.currentDate.setMinutes($scope.currentTimePart.getMinutes());
            var formatDate = a4pDateFormat($scope.currentDate);
            $scope.ngModelCtrl.$setViewValue(formatDate), $scope.ngModelCtrl.$render();
        }
    };
} ]).directive("c4pInputlimited", [ function() {
    return {
        restrict: "E",
        replace: !0,
        template: "<div class='form-group'><span class='control-label a4p-dot'></span><span class='nocontrol'></span></div>",
        compile: function(element, attrs) {
            var labelElt = element.find("span.control-label"), spanElt = element.find("span.nocontrol"), controlsElt = element.find("div.form-group");
            a4p.isDefined(attrs.ngModel) && spanElt.text("currency" == attrs.type ? "{{" + attrs.ngModel + " | c4pCurrency}}" : "percent" == attrs.type ? "{{" + attrs.ngModel + "}}%" : "{{" + attrs.ngModel + "}}"), 
            labelElt.prepend("<span>{{" + attrs.titleVar + "}}</span>"), attrs.icon && a4p.isDefined(attrs.icon) && ("tel" == attrs.type ? (labelElt.before('<a href="tel:{{' + attrs.ngModel + '}}" target=_blank></a>'), 
            labelElt.appendTo(element.find("a")), controlsElt.appendTo(element.find("a"))) : "mail" == attrs.type ? (labelElt.before('<a href="mailto:{{' + attrs.ngModel + '}}" target=_blank></a>'), 
            labelElt.appendTo(element.find("a")), controlsElt.appendTo(element.find("a"))) : "url" == attrs.type && (labelElt.before('<a href="{{' + attrs.ngModel + '}}" target=_blank></a>'), 
            labelElt.appendTo(element.find("a")), controlsElt.appendTo(element.find("a"))));
        }
    };
} ]).directive("c4pInputcard", [ function() {
    return {
        restrict: "E",
        replace: !0,
        template: "<span></span>",
        compile: function(element, attrs) {
            var value = (attrs.titleVar, attrs.ngModel), type = attrs.type;
            element.attr("ng-show", value);
            var span = "<span>{{" + value + "}}</span>", link = null;
            "tel" == type ? link = '<a href="tel:{{' + value + '}}" target=_blank></a>' : "mail" == type ? link = '<a href="mailto:{{' + value + '}}" target=_blank></a>' : "url" == type ? link = '<a href="{{' + value + '}}" target=_blank></a>' : "currency" == type ? span = "<span>{{" + value + " | c4pCurrency}}</span>" : "percent" == type && (span = "<span>{{" + value + "}}%</span>"), 
            link ? (element.prepend(link), element.find("a").prepend(span)) : element.prepend(span);
        }
    };
} ]).directive("c4pInput", [ "$compile", function($compile) {
    return {
        restrict: "E",
        replace: !0,
        require: "?ngModel",
        controller: "c4pInputCtrl",
        templateUrl: "c4p/input.html",
        scope: !0,
        compile: function(element, attrs, transclude) {
            return c4pInputCompile(element, attrs, transclude, $compile);
        }
    };
} ]).directive("c4pInputsimple", [ "$compile", function($compile) {
    return {
        restrict: "E",
        replace: !0,
        require: "?ngModel",
        controller: "c4pInputCtrl",
        templateUrl: "c4p/input-simple.html",
        scope: !0,
        compile: function(element, attrs, transclude) {
            return c4pInputCompile(element, attrs, transclude, $compile);
        }
    };
} ]).directive("c4pInputdate", [ function() {
    return {
        replace: !1,
        restrict: "A",
        require: "ngModel",
        link: function(scope, element, attrs, ngModelCtrl) {
            var listener = function() {
                var value = element.val();
                ngModelCtrl.$viewValue !== value && a4p.safeApply(scope, function() {
                    ngModelCtrl.$setViewValue(value);
                });
            };
            if (element.bind("change", listener), "undefined" != typeof device && "Android" === device.platform && window.plugins && window.plugins.datePicker) {
                var type = attrs.type;
                element.bind("click", function() {
                    a4p.safeApply(scope, function() {
                        var myNewDate, value = scope.$eval(attrs.ngModel);
                        if (a4p.InternalLog.log("c4pInputdate", "Android datePicker focus : " + attrs.ngModel + "=" + value), 
                        "time" == type) {
                            var hourS = parseInt(value.substr(0, 2)) || 0, minuteS = parseInt(value.substr(3, 2)) || 0, secS = parseInt(value.substr(6, 2)) || 0;
                            myNewDate = new Date(1970, 0, 1, hourS, minuteS, secS, 0);
                        } else if ("date" == type) {
                            var yearS = parseInt(value.substr(0, 4)) || 1970, monthS = parseInt(value.substr(5, 2)) || 1, dayS = parseInt(value.substr(8, 2)) || 1;
                            myNewDate = new Date(yearS, monthS - 1, dayS, 0, 0, 0, 0);
                        } else {
                            type = "";
                            var yearS = parseInt(value.substr(0, 4)) || 1970, monthS = parseInt(value.substr(5, 2)) || 1, dayS = parseInt(value.substr(8, 2)) || 1, hourS = parseInt(value.substr(11, 2)) || 0, minuteS = parseInt(value.substr(14, 2)) || 0, secS = parseInt(value.substr(17, 2)) || 0;
                            myNewDate = new Date(yearS, monthS - 1, dayS, hourS, minuteS, secS, 0);
                        }
                        window.plugins.datePicker.show({
                            date: myNewDate,
                            mode: type,
                            allowOldDates: !0
                        }, function(returnDate) {
                            a4p.safeApply(scope, function() {
                                var reg, parts;
                                if ("time" == type) {
                                    var hourS, minuteS, secS;
                                    reg = new RegExp("([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)"), parts = returnDate.match(reg), 
                                    null != parts ? (hourS = parts[1] || 0, minuteS = parts[2] || 0, secS = parts[3] || 0) : (hourS = 0, 
                                    minuteS = 0, secS = 0), ngModelCtrl.$setViewValue(hourS + ":" + minuteS), ngModelCtrl.$render();
                                } else if ("date" == type) {
                                    reg = new RegExp("[-/]+", "g"), parts = returnDate.split(reg);
                                    for (var yearS = parts[0] || "1970", monthS = parts[1] || "01"; monthS.length < 2; ) monthS = "0" + monthS;
                                    for (var dayS = parts[2] || "01"; dayS.length < 2; ) dayS = "0" + dayS;
                                    ngModelCtrl.$setViewValue(yearS + "-" + monthS + "-" + dayS), ngModelCtrl.$render();
                                }
                            });
                        });
                    });
                });
            }
        }
    };
} ]), angular.module("c4p.ratings", []).directive("c4pAngularRatings", [ "$parse", function($parse) {
    return {
        restrict: "E",
        require: "ngModel",
        replace: !0,
        transclude: !0,
        template: '<span><ol class="c4p-angular-ratings"><li class="star" ng-class="{selected:model>4,readonly:readonly}" ng-click="setRating(5)"><span class="hidden">5</span></li><li class="star" ng-class="{selected:model>3,readonly:readonly}" ng-click="setRating(4)"><span class="hidden">4</span></li><li class="star" ng-class="{selected:model>2,readonly:readonly}" ng-click="setRating(3)"><span class="hidden">3</span></li><li class="star" ng-class="{selected:model>1,readonly:readonly}" ng-click="setRating(2)"><span class="hidden">2</span></li><li class="star" ng-class="{selected:model>0,readonly:readonly}" ng-click="setRating(1)"><span class="hidden">1</span></li></ol></span>',
        link: function(scope, element, attrs, ngModelCtrl) {
            a4p.isDefined(attrs.ngModel) && (scope.model = scope.$eval(attrs.ngModel), scope.$watch(attrs.ngModel, function(value, oldValue) {
                value != oldValue && (scope.model = value);
            }));
            var onChangeFct = attrs.onChange ? $parse(attrs.onChange) : null, readonly = attrs.readonly ? scope.$eval(attrs.readonly) : !1;
            scope.readonly = readonly, scope.setRating = readonly ? function() {} : function(rating) {
                ngModelCtrl.$setViewValue(rating), ngModelCtrl.$render(), onChangeFct && onChangeFct(scope);
            };
        }
    };
} ]), directiveModule.directive("c4pCheck", [ "$parse", function($parse) {
    return {
        restrict: "E",
        require: "ngModel",
        template: "<span><span class='glyphicon glyphicon-check-circle-o' ng-show='model == true' ng-click='setCheck(false)'></span><span class='glyphicon glyphicon-circle-o' ng-show='model != true' ng-click='setCheck(true)'></span></span>",
        replace: !0,
        transclude: !0,
        link: function(scope, element, attrs, ngModelCtrl) {
            a4p.isDefined(attrs.ngModel) && (scope.model = scope.$eval(attrs.ngModel), scope.$watch(attrs.ngModel, function(value, oldValue) {
                value != oldValue && (scope.model = value);
            }));
            var onChangeFct = attrs.onChange ? $parse(attrs.onChange) : null, readonly = attrs.readonly ? scope.$eval(attrs.readonly) : !1;
            scope.setCheck = readonly ? function() {} : function(check) {
                ngModelCtrl.$setViewValue(1 == check), ngModelCtrl.$render(), onChangeFct && onChangeFct(scope);
            };
        }
    };
} ]), directiveModule.directive("c4pModal", function() {
    return {
        restrict: "A",
        link: function(scope, element, attrs) {
            scope.$watch(attrs.c4pModal, function(value) {
                element.modal(a4p.isUndefined(value) ? "hide" : value ? "show" : "hide");
            });
        }
    };
}), directiveModule.directive("c4pPinbox", function() {
    return {
        restrict: "CE",
        replace: !1,
        link: function(scope, element) {
            element.ready(function() {
                var createPinbox = function() {
                    $(element[0]).pinbox();
                };
                setTimeout(createPinbox, 1e4);
            });
        }
    };
}), directiveModule.directive("c4pSpinner", function() {
    return {
        restrict: "E",
        replace: !1,
        link: function(scope, element) {
            scope.addSpinner && scope.addSpinner(element);
        }
    };
}), directiveModule.directive("a4pRefresh", function() {
    return {
        restrict: "A",
        template: "<div class='a4pRefresh'><span class='glyphicon glyphicon-refresh glyphicon-lg' ng-show='a4pSpinnerState == \"done\"'></span><span class='glyphicon glyphicon-refresh glyphicon-lg glyphicon-spin' ng-show='a4pSpinnerState == \"run\"'></span><span class='glyphicon glyphicon-refresh glyphicon-lg alert-error' ng-show='a4pSpinnerState == \"doneWithPb\"'></span><span class='glyphicon glyphicon-refresh glyphicon-lg close' ng-show='a4pSpinnerState == \"offline\"'></span></div>",
        link: function() {}
    };
});

var actionOnClick = function(scope, element) {
    var focus = function() {
        element.addClass("c4p-shadow-white");
    }, blur = function() {
        element.removeClass("c4p-shadow-white");
    };
    a4p.BrowserCapabilities.hasTouch ? (element.bind("touchstart", function() {
        focus();
    }), element.bind("touchend", function() {
        setTimeout(blur, 1500);
    })) : element.bind("click", function() {
        focus(), setTimeout(blur, 1500);
    });
};

directiveModule.directive("c4pColorActionAsideTransparent", function() {
    return {
        restrict: "C",
        replace: !1,
        link: actionOnClick
    };
}), directiveModule.directive("c4pColorActionTransparent", function() {
    return {
        restrict: "C",
        replace: !1,
        link: actionOnClick
    };
});

var startSpinnerDirective = function(scope, element) {
    var spinnerEl = document.getElementById("c4p-waiting-spinner"), launch = function() {
        console.log("Spinner Directive Start !"), spinnerEl && (spinnerEl.className += " onair", 
        window.setTimeout(function() {
            var myRegexp = /((\s|\d|[a-z]|-)*)( onair)/i, classWithoutOnair = spinnerEl.className.match(myRegexp);
            classWithoutOnair && classWithoutOnair[1] && (spinnerEl.className = classWithoutOnair[1]);
        }, 500));
    };
    a4p.BrowserCapabilities.hasTouch ? element.bind("touchend", function() {
        launch();
    }) : element.bind("click", function() {
        launch();
    });
};

directiveModule.directive("c4pWaitingClick", function() {
    return {
        restrict: "CEA",
        replace: !1,
        link: startSpinnerDirective
    };
}), directiveModule.directive("c4pThumb", function() {
    return {
        restrict: "E",
        replace: !0,
        link: function(scope, element, attrs) {
            console.log(" c4pThumb ");
            var text = attrs.text, icon = attrs.icon, indic = attrs.indic, width = attrs.width, height = attrs.height, color = attrs.color;
            console.log(" c4pThumb " + text + " " + icon + " " + indic + " " + color + " " + width + " " + height);
            var thumb = new a4p.Thumb(element[0]);
            thumb.addDiv(text, indic, color, width, height);
        }
    };
}), directiveModule.directive("c4pAnimateshow", function($animate) {
    return {
        scope: {
            c4pAnimateshow: "=",
            afterShow: "&",
            afterHide: "&"
        },
        link: function(scope, element) {
            scope.$watch("c4pAnimateshow", function(show) {
                show && $animate.removeClass(element, "ng-hide", scope.afterShow), show || $animate.addClass(element, "ng-hide", scope.afterHide);
            });
        }
    };
}), angular.module("c4p/datePicker.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("c4p/datePicker.html", '<table class="table-condensed"><thead><tr><th colspan="3"><div class="btn-group pull-left"><label class="btn" sense-tap="gotoPreviousMonth()"><span class="glyphicon glyphicon-chevron-left icon-small"></span></label><label class="btn" sense-tap="gotoToday()"><span class="glyphicon glyphicon-home icon-small"></span></label><label class="btn" sense-tap="gotoNextMonth()"><span class="glyphicon glyphicon-chevron-right icon-small"></span></label></div></th><th colspan="2"><label>{{monthShortName}}. {{year}}</label></th><th colspan="2"><div class="btn-group pull-right"><label class="btn" sense-tap="resetDate()" c4p-date-setter><span class="glyphicon glyphicon-trash icon-small"></span></label></div></th></tr><tr><th class="dow" ng-repeat="weekday in weekDays">{{weekday.shortName}}.</th></tr></thead><tbody><tr ng-repeat="week in monthWeeks"><td ng-repeat="weekday in weekDays"><label ng-class="{true:\'btn btn-primary\', false:\'btn\'}[(week[weekday.idx].day == day) && (sel.getFullYear() == year) && (sel.getMonth() == month)]" ng-show="typeof(week[weekday.idx]) != \'undefined\'" sense-tap="onDayClick(week[weekday.idx].day)" c4p-date-setter c4p-date-set-event>{{week[weekday.idx].day}}</label></td></tr></tbody></table>');
} ]), angular.module("c4p.datePicker", [ "c4p/datePicker.html" ]).controller("dateViewCtrl", [ "$scope", function($scope) {
    $scope.weekDays = [ {
        idx: 1,
        name: $scope.srvLocale.translations.htmlTextMonday,
        shortName: $scope.srvLocale.translations.htmlTextShortMonday
    }, {
        idx: 2,
        name: $scope.srvLocale.translations.htmlTextTuesday,
        shortName: $scope.srvLocale.translations.htmlTextShortTuesday
    }, {
        idx: 3,
        name: $scope.srvLocale.translations.htmlTextWednesday,
        shortName: $scope.srvLocale.translations.htmlTextShortWednesday
    }, {
        idx: 4,
        name: $scope.srvLocale.translations.htmlTextThursday,
        shortName: $scope.srvLocale.translations.htmlTextShortThursday
    }, {
        idx: 5,
        name: $scope.srvLocale.translations.htmlTextFriday,
        shortName: $scope.srvLocale.translations.htmlTextShortFriday
    }, {
        idx: 6,
        name: $scope.srvLocale.translations.htmlTextSaturday,
        shortName: $scope.srvLocale.translations.htmlTextShortSaturday
    }, {
        idx: 0,
        name: $scope.srvLocale.translations.htmlTextSunday,
        shortName: $scope.srvLocale.translations.htmlTextShortSunday
    } ], $scope.months = [ {
        idx: 0,
        name: $scope.srvLocale.translations.htmlTextJanuary,
        shortName: $scope.srvLocale.translations.htmlTextShortJanuary
    }, {
        idx: 1,
        name: $scope.srvLocale.translations.htmlTextFebruary,
        shortName: $scope.srvLocale.translations.htmlTextShortFebruary
    }, {
        idx: 2,
        name: $scope.srvLocale.translations.htmlTextMarch,
        shortName: $scope.srvLocale.translations.htmlTextShortMarch
    }, {
        idx: 3,
        name: $scope.srvLocale.translations.htmlTextApril,
        shortName: $scope.srvLocale.translations.htmlTextShortApril
    }, {
        idx: 4,
        name: $scope.srvLocale.translations.htmlTextMay,
        shortName: $scope.srvLocale.translations.htmlTextShortMay
    }, {
        idx: 5,
        name: $scope.srvLocale.translations.htmlTextJune,
        shortName: $scope.srvLocale.translations.htmlTextShortJune
    }, {
        idx: 6,
        name: $scope.srvLocale.translations.htmlTextJuly,
        shortName: $scope.srvLocale.translations.htmlTextShortJuly
    }, {
        idx: 7,
        name: $scope.srvLocale.translations.htmlTextAugust,
        shortName: $scope.srvLocale.translations.htmlTextShortAugust
    }, {
        idx: 8,
        name: $scope.srvLocale.translations.htmlTextSeptember,
        shortName: $scope.srvLocale.translations.htmlTextShortSeptember
    }, {
        idx: 9,
        name: $scope.srvLocale.translations.htmlTextOctober,
        shortName: $scope.srvLocale.translations.htmlTextShortOctober
    }, {
        idx: 10,
        name: $scope.srvLocale.translations.htmlTextNovember,
        shortName: $scope.srvLocale.translations.htmlTextShortNovember
    }, {
        idx: 11,
        name: $scope.srvLocale.translations.htmlTextDecember,
        shortName: $scope.srvLocale.translations.htmlTextShortDecember
    } ], $scope.today = new Date(), $scope.todayYear = $scope.today.getFullYear(), $scope.todayMonth = $scope.today.getMonth(), 
    $scope.todayDate = $scope.today.getDate(), $scope.sel = $scope.today, $scope.initial = $scope.today, 
    $scope.getMonthWeeks = function() {
        var firstDayNextMonth, firstDay = new Date($scope.year, $scope.month, 1, 0, 0, 0, 0);
        firstDayNextMonth = $scope.month < 11 ? new Date($scope.year, $scope.month + 1, 1, 0, 0, 0, 0) : new Date($scope.year + 1, 0, 1, 0, 0, 0, 0);
        var dayIdx, date, firstDayIdx = firstDay.getDay(), weeks = [], weekDayIdx = firstDayIdx, day = 1, week = {};
        for (dayIdx = 0; dayIdx < $scope.weekDays.length && (weekDayIdx = $scope.weekDays[dayIdx].idx, 
        weekDayIdx != firstDayIdx); dayIdx++) ;
        for (;dayIdx < $scope.weekDays.length; dayIdx++) weekDayIdx = $scope.weekDays[dayIdx].idx, 
        date = new Date($scope.year, $scope.month, day, 0, 0, 0, 0), week[weekDayIdx] = {
            day: day
        }, day++;
        weeks.push(week);
        for (var weekIdx = 1; 7 > weekIdx; weekIdx++) {
            week = {};
            var weekEmpty = !0;
            for (dayIdx = 0; dayIdx < $scope.weekDays.length && (weekDayIdx = $scope.weekDays[dayIdx].idx, 
            date = new Date($scope.year, $scope.month, day, 0, 0, 0, 0), firstDayNextMonth > date); dayIdx++, 
            day++) week[weekDayIdx] = {
                day: day
            }, weekEmpty = !1;
            weekEmpty || weeks.push(week);
        }
        return weeks;
    }, $scope.setDate = function() {
        $scope.year = $scope.sel.getFullYear(), $scope.year < 1970 && ($scope.year = 1970), 
        $scope.month = $scope.sel.getMonth(), $scope.month < 0 && ($scope.month = 0), $scope.day = $scope.sel.getDate(), 
        $scope.day < 1 && ($scope.day = 1), $scope.monthName = $scope.months[$scope.month].name, 
        $scope.monthShortName = $scope.months[$scope.month].shortName, $scope.monthWeeks = $scope.getMonthWeeks();
    }, $scope.setDate(), $scope.setInitialDate = function(date) {
        var values = date.split(" ")[0].split("-");
        $scope.initial = new Date(parseInt(values[0]) || 1970, (parseInt(values[1]) || 1) - 1, parseInt(values[2]) || 1, 0, 0, 0, 0);
    }, $scope.resetDate = function() {
        $scope.sel = new Date($scope.initial.getFullYear(), $scope.initial.getMonth(), $scope.initial.getDate(), 0, 0, 0, 0), 
        $scope.setDate();
    }, $scope.gotoToday = function() {
        $scope.today = new Date(), $scope.year = $scope.today.getFullYear(), $scope.month = $scope.today.getMonth(), 
        $scope.monthName = $scope.months[$scope.month].name, $scope.monthShortName = $scope.months[$scope.month].shortName, 
        $scope.monthWeeks = $scope.getMonthWeeks();
    }, $scope.onDayClick = function(day) {
        $scope.sel = new Date($scope.year, $scope.month, day, 0, 0, 0, 0), $scope.day = $scope.sel.getDate();
    }, $scope.gotoPreviousMonth = function() {
        $scope.month > 0 ? $scope.month = $scope.month - 1 : ($scope.month = 11, $scope.year = $scope.year - 1), 
        $scope.monthName = $scope.months[$scope.month].name, $scope.monthShortName = $scope.months[$scope.month].shortName, 
        $scope.monthWeeks = $scope.getMonthWeeks();
    }, $scope.gotoNextMonth = function() {
        $scope.month < 11 ? $scope.month = $scope.month + 1 : ($scope.month = 0, $scope.year = $scope.year + 1), 
        $scope.monthName = $scope.months[$scope.month].name, $scope.monthShortName = $scope.months[$scope.month].shortName, 
        $scope.monthWeeks = $scope.getMonthWeeks();
    }, $scope.getDate = function() {
        return a4pPadNumber($scope.year, 2) + "-" + a4pPadNumber($scope.month + 1, 2) + "-" + a4pPadNumber($scope.day, 2);
    };
} ]).directive("c4pDateSetEvent", [ function() {
    return {
        restrict: "A",
        require: "^ngModel",
        compile: function() {
            return function(scope, element, attrs, ngModelCtrl) {
                ngModelCtrl && element.bind("click", function() {
                    scope.$emit("c4pDateSetterEvent");
                });
            };
        }
    };
} ]).directive("c4pDateSetter", [ function() {
    return {
        restrict: "A",
        require: "^ngModel",
        compile: function() {
            return function(scope, element, attrs, ngModelCtrl) {
                function read() {
                    var value = (ngModelCtrl.$viewValue || "").toString(), values = value.split(" ");
                    ngModelCtrl.$setViewValue(values.length > 1 ? scope.getDate() + " " + values[1] : scope.getDate());
                }
                ngModelCtrl && element.bind("click", function() {
                    a4p.safeApply(scope, read);
                });
            };
        }
    };
} ]).directive("c4pDatePicker", [ function() {
    return {
        restrict: "E",
        require: "^ngModel",
        replace: !0,
        controller: "dateViewCtrl",
        templateUrl: "c4p/datePicker.html",
        scope: !0,
        compile: function() {
            return function(scope, element, attrs, ngModelCtrl) {
                function write() {
                    if (ngModelCtrl.$viewValue) scope.setInitialDate(ngModelCtrl.$viewValue); else {
                        var date = new Date();
                        scope.setInitialDate(date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate());
                    }
                    scope.resetDate();
                }
                ngModelCtrl && (ngModelCtrl.$render = write, write());
            };
        }
    };
} ]), angular.module("c4p/timePicker.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("c4p/timePicker.html", '<table class="table-condensed"><thead><tr><th colspan="2"><div class="btn-group pull-left"><label class="btn" sense-tap="gotoNow()"><span class="glyphicon glyphicon-home icon-small"></span></label></div></th><th colspan="3"><label>{{getTime()}}</label></th><th colspan="2"><div class="btn-group pull-right"><label class="btn" sense-tap="resetTime()" c4p-time-setter><span class="glyphicon glyphicon-trash icon-small"></span></label></div></th></tr><tr><th colspan="6">{{srvLocale.translations.htmlTextHours}}</th><th>{{srvLocale.translations.htmlTextMinutes}}</th></tr></thead><tbody><tr><td ng-repeat="hr in [0,1,2,3,4,5]"><label ng-class="{true:\'btn btn-primary\', false:\'btn\'}[hr == hour]" sense-tap="onHourClick(hr)" c4p-time-setter>{{hr}}</label></td><td><label ng-class="{true:\'btn btn-primary\', false:\'btn\'}[0 == minute]" sense-tap="onMinuteClick(0)" c4p-time-setter c4p-time-set-event>00</label></td></tr><tr><td ng-repeat="hr in [6,7,8,9,10,11]"><label ng-class="{true:\'btn btn-primary\', false:\'btn\'}[hr == hour]" sense-tap="onHourClick(hr)" c4p-time-setter>{{hr}}</label></td><td><label ng-class="{true:\'btn btn-primary\', false:\'btn\'}[15 == minute]" sense-tap="onMinuteClick(15)" c4p-time-setter c4p-time-set-event>15</label></td></tr><tr><td ng-repeat="hr in [12,13,14,15,16,17]"><label ng-class="{true:\'btn btn-primary\', false:\'btn\'}[hr == hour]" sense-tap="onHourClick(hr)" c4p-time-setter>{{hr}}</label></td><td><label ng-class="{true:\'btn btn-primary\', false:\'btn\'}[30 == minute]" sense-tap="onMinuteClick(30)" c4p-time-setter c4p-time-set-event>30</label></td></tr><tr><td ng-repeat="hr in [18,19,20,21,22,23]"><label ng-class="{true:\'btn btn-primary\', false:\'btn\'}[hr == hour]" sense-tap="onHourClick(hr)" c4p-time-setter>{{hr}}</label></td><td><label ng-class="{true:\'btn btn-primary\', false:\'btn\'}[45 == minute]" sense-tap="onMinuteClick(45)" c4p-time-setter c4p-time-set-event>45</label></td></tr></tbody></table>');
} ]), angular.module("c4p.timePicker", [ "c4p/timePicker.html" ]).controller("timeViewCtrl", [ "$scope", function($scope) {
    $scope.nowHour = new Date().getHours(), $scope.nowMinute = new Date().getMinutes(), 
    $scope.initialHour = $scope.nowHour, $scope.initialMinute = $scope.nowMinute, $scope.hour = $scope.initialHour, 
    $scope.minute = $scope.initialMinute, $scope.setTime = function() {
        $scope.minute > 45 ? ($scope.minute = 0, $scope.hour += 1, $scope.hour > 23 && ($scope.hour -= 24)) : $scope.minute = $scope.minute > 30 ? 45 : $scope.minute > 15 ? 30 : $scope.minute > 0 ? 15 : 0;
    }, $scope.setTime(), $scope.setInitialTime = function(hour, minute) {
        $scope.initialHour = hour, $scope.initialMinute = minute;
    }, $scope.resetTime = function() {
        $scope.hour = $scope.initialHour, $scope.minute = $scope.initialMinute, $scope.setTime();
    }, $scope.gotoNow = function() {
        $scope.hour = $scope.nowHour, $scope.minute = $scope.nowMinute, $scope.setTime();
    }, $scope.onHourClick = function(hour) {
        $scope.hour = hour;
    }, $scope.onMinuteClick = function(minute) {
        $scope.minute = minute > 45 ? 0 : minute > 30 ? 45 : minute > 15 ? 30 : minute > 0 ? 15 : 0;
    }, $scope.getTime = function() {
        return a4pPadNumber($scope.hour, 2) + ":" + a4pPadNumber($scope.minute, 2) + ":00";
    };
} ]).directive("c4pTimeSetEvent", [ function() {
    return {
        restrict: "A",
        require: "^ngModel",
        compile: function() {
            return function(scope, element, attrs, ngModelCtrl) {
                ngModelCtrl && element.bind("click", function() {
                    scope.$emit("c4pTimeSetterEvent");
                });
            };
        }
    };
} ]).directive("c4pTimeSetter", [ function() {
    return {
        restrict: "A",
        require: "^ngModel",
        compile: function() {
            return function(scope, element, attrs, ngModelCtrl) {
                function read() {
                    var value = (ngModelCtrl.$viewValue || "").toString(), values = value.split(" ");
                    ngModelCtrl.$setViewValue(values.length > 1 ? values[0] + " " + scope.getTime() : scope.getTime());
                }
                ngModelCtrl && element.bind("click", function() {
                    a4p.safeApply(scope, read);
                });
            };
        }
    };
} ]).directive("c4pTimePicker", function() {
    return {
        restrict: "E",
        require: "^ngModel",
        replace: !0,
        controller: "timeViewCtrl",
        templateUrl: "c4p/timePicker.html",
        scope: !0,
        compile: function() {
            return function(scope, element, attrs, ngModelCtrl) {
                function write() {
                    var value = (ngModelCtrl.$viewValue || "").toString(), values = value.split(" ");
                    values = values.length > 1 ? values[1].split(":") : values[0].split(":"), scope.setInitialTime(values[0], values[1]), 
                    scope.resetTime();
                }
                ngModelCtrl && (ngModelCtrl.$render = write, write());
            };
        }
    };
}), directiveModule.directive("c4pTimeline", function($timeout) {
    return {
        restrict: "E",
        template: "<div id='c4p-timeline'></div>",
        link: function(scope, element, attrs) {
            $timeout(function() {
                var dataObject = scope.$eval(attrs.data);
                createStoryJS({
                    type: "timeline",
                    width: "100%",
                    height: scope.getResizeHeight() - scope.getResizePathValue("timeline_header", "", "offsetHeight"),
                    source: dataObject,
                    embed_id: "c4p-timeline",
                    css: "l4p/libs/js/jquery-plugins/TimelineJS-master/compiled/css/timeline.css",
                    js: "l4p/libs/js/jquery-plugins/TimelineJS-master/compiled/js/timeline.js"
                });
            }, 0);
        }
    };
}), angular.module("c4p.viewer", []).directive("c4pViewerContent", [ "$compile", function($compile) {
    return {
        restrict: "E",
        replace: !0,
        compile: function() {
            var getObjDocType = function(objDoc) {
                return a4p.isUndefinedOrNull(objDoc) ? "" : c4p.Model.isImage(objDoc.extension) ? "img" : "Note" == objDoc.a4p_type ? "note" : "Report" == objDoc.a4p_type ? "report" : void 0;
            };
            return function(scope, element, attrs) {
                a4p.isUndefinedOrNull(attrs.objVar) || "" != attrs.objVar && scope.$watch(attrs.objVar, function(value) {
                    if (null != value) {
                        element.empty();
                        var domStr = "";
                        switch (getObjDocType(value)) {
                          case "img":
                            domStr = '<img src="' + value.fileUrl + '"/>';
                            break;

                          case "note":
                            domStr = $compile("<div ng-include=\"'partials/meeting/meeting_viewer_note.html'\"></div>")(scope);
                            break;

                          case "report":
                            domStr = $compile("<div ng-include=\"'partials/meeting/meeting_viewer_report.html'\"></div>")(scope);
                        }
                        element.prepend(domStr);
                    }
                });
            };
        }
    };
} ]), angular.module("c4pTemplates", []).run([ "$templateCache", function($templateCache) {
    "use strict";
    $templateCache.put("partials/empty.html", ""), $templateCache.put("partials/main.html", '<div id="a4pBody" ng-controller="ctrlResponsive" resize-opts="{name:\'a4pBody\'}" resize-beforewindow="responsiveBeforeWindowSizeChanged()"><div ng-controller="navigationCtrl" ng-init="initNavigationCtrl()"><div ng-if="!respIsComputing"><div class="container" ng-class="{\'c4p-backdrop-blur\':isBlurOn}" ng-switch="page"><div class="row" ng-switch-when="navigation"><div ng-include="\'partials/navigation/main.html\'"></div></div><div class="row" ng-switch-when="guider"><div ng-include="\'partials/guider/main.html\'"></div></div><div class="row" ng-switch-when="meeting"><div ng-include="\'partials/meeting/main.html\'"></div></div><div class="row" ng-switch-when="timeline"><div ng-include="\'partials/timeline/main.html\'"></div></div><div ng-switch-default=""><h5 style="color: gray; text-align: center; opacity:0.2">...</h5></div></div><div class="c4p-container" style="border:1px white solid" ng-if="isBlurOn" touchstart="a4pBlockMove(event,true)"></div><c4p-spinner id="c4p-waiting-spinner" ng-show="isSpinnerActive || !respIsReady" class="c4p-waiting c4p-waiting-black c4p-click-intercepted"><div ng-include="\'partials/spinner.html\'"></div></c4p-spinner></div></div></div>'), 
    $templateCache.put("partials/spinner.html", '<div class="c4p-waiting-icon glyphicon-stack glyphicon-2x center-block"><i class="glyphicon glyphicon-fw glyphicon-square glyphicon-stack-2x"></i> <i class="glyphicon glyphicon-fw glyphicon-cog glyphicon-stack-1x glyphicon-inverse glyphicon-spin"></i></div>'), 
    $templateCache.put("partials/dialog/confirm.html", '<div class="row modal-body c4p-vertical-container"><div class="c4p-dialog c4p-vertical-align"><div class="container c4p-modal-confirm-container col-xxs-12 col-sm-6 col-sm-offset-3"><div class="row"><div class="c4p-dialog-header"><div class="col-xxs-12"><ul class="nav nav-pills"><li><a class="btn disabled" data-toggle="tab"><h5 style="white-space:normal">{{text}}</h5></a></li><li class="pull-right"><a class="btn c4p-color-cancel-transparent" ng-click="startSpinner();close()"><span class="c4p-icon-std">&times;</span></a></li><li class="pull-right"><a class="btn c4p-color-ok-transparent c4p-stroke" ng-click="startSpinner();submit()"><span class="c4p-icon-std glyphicon glyphicon-check"></span></a></li></ul></div></div></div><div class="row" ng-show="{{textArray.length}}"><div class="col-xxs-12 c4p-modal-confirm-cont" sense-opts="{axeY:\'scroll\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div class="container"><div class="c4p-form-group c4p-color-a-gradient1"><ul><li ng-repeat="item in textArray"><span>{{item}}</span></li></ul></div></div></div></div></div></div></div>'), 
    $templateCache.put("partials/dialog/dialogAddAccount.html", '<div resize-opts="{}"><div class="row"><div class="c4p-dialog-search-header c4p-color-a-dark-i"><div class="btn c4p-padding-w-packed"><span>{{srvLocale.translations.htmlDialogAddAccountPageTitle}}</span></div><div class="btn c4p-padding-w-packed"><div class="c4p-icon-std glyphicon">&nbsp;</div></div><div class="pull-right" ng-hide="false"><div class="btn c4p-padding-w-packed c4p-color-ok-transparent c4p-stroke" ng-click="add()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-ok"></span></div>&nbsp;<div class="btn c4p-padding-w-packed c4p-color-cancel-transparent c4p-stroke" ng-click="close()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-times-circle"></span></div></div></div></div></div><div class="row c4p-dialog-bg c4p-dialog-search-container c4p-color-a" resizecss-height="getResizeHeight() -getPathValue(\'previousElementSibling\', \'offsetHeight\')" sense-opts="{axeY:\'scroll\', watchRefresh:\'visibleElements.length\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div class="col-xxs-12"><ul class="nav nav-stacked"><li ng-repeat="item in possibleAccounts"><div ng-click="toggleItem($index)" class="clearfix c4p-link5"><span class="glyphicon glyphicon-ok icon-large pull-left" ng-class="{\'c4p-invisible\':idxChosen != $index}" style="padding-top: 5px"></span> <span>{{item.company_name}}</span></div></li></ul></div></div>'), 
    $templateCache.put("partials/dialog/dialogAddContact.html", '<div resize-opts="{}"><div class="row"><div class="c4p-dialog-search-header c4p-color-a-dark-i"><div class="btn c4p-padding-w-packed"><span>{{srvLocale.translations.htmlDialogAddContactPageTitle}}</span></div><div class="btn c4p-padding-w-packed"><div class="c4p-icon-std glyphicon">&nbsp;</div></div><div class="pull-right" ng-hide="false"><div class="btn c4p-padding-w-packed c4p-color-ok-transparent c4p-stroke" ng-click="add()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-ok"></span></div>&nbsp;<div class="btn c4p-padding-w-packed c4p-color-cancel-transparent c4p-stroke" ng-click="close()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-times-circle"></span></div></div></div></div></div><div class="row c4p-dialog-bg c4p-dialog-search-container c4p-color-a" resizecss-height="getResizeHeight() -getPathValue(\'previousElementSibling\', \'offsetHeight\')" sense-opts="{axeY:\'scroll\', watchRefresh:\'visibleElements.length\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div class="col-xxs-12"><ul class="nav nav-stacked"><li ng-repeat="item in possibleContacts"><div ng-click="toggleItem($index)" class="clearfix c4p-link5"><span class="glyphicon glyphicon-ok icon-large pull-left" ng-class="{\'c4p-invisible\':idxChosen != $index}" style="padding-top: 5px"></span> <span>{{item.salutation}} {{item.first_name}} {{item.last_name}}</span></div></li></ul></div></div>'), 
    $templateCache.put("partials/dialog/dialogAddRatings.html", '<div resize-opts="{}"><div class="row"><div class="c4p-dialog-search-header c4p-color-a-dark-i"><div class="btn c4p-padding-w-packed"><span><c4p-pluralize count="2" when="srvLocale.translations.htmlDialogAddRatingsPluralRating"></span></div><div class="btn c4p-padding-w-packed"><div class="c4p-icon-std glyphicon">&nbsp;</div></div><div class="pull-right" ng-hide="false"><div class="btn c4p-padding-w-packed c4p-color-ok-transparent c4p-stroke" ng-click="add()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-ok"></span></div>&nbsp;<div class="btn c4p-padding-w-packed c4p-color-cancel-transparent c4p-stroke" ng-click="close()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-times-circle"></span></div></div></div></div></div><div class="row c4p-dialog-bg c4p-dialog-search-container c4p-color-a" resizecss-height="getResizeHeight() -getPathValue(\'previousElementSibling\', \'offsetHeight\')" sense-opts="{name:\'dialogAddRatings\', axeY:\'scroll\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div class="col-xxs-12"><ul class="nav nav-stacked"><li ng-repeat="item in possibleRatings | c4pExludeNameFilter:ratingsDone"><div ng-click="toggleItem(item)" class="clearfix c4p-link5"><span class="glyphicon glyphicon-ok icon-large pull-left" ng-class="{\'c4p-invisible\':!item.selected}" style="padding-top: 5px"></span> <div class="pull-left" ng-include="\'partials/navigation/cards/4_rating_ro.html\'"></div></div></li></ul></div></div>'), 
    $templateCache.put("partials/dialog/dialogCalendarDay.html", '<div class="modal-header row c4p-color-gradient0"><div class="col-xxs-12"><ul class="nav nav-pills"><li class="" style="max-width:80%"><a class="btn disabled"><h5 class="a4p-dot">{{calendarDayCasualName}} {{calendarDayFullName}}</h5></a></li><li class="pull-right"><a class="btn" ng-click="close()"><span class="c4p-icon-std">&times;</span></a></li></ul></div></div><div class="modal-body row c4p-container-scroll-y"><div class="col-xxs-12 col-sm-6 col-sm-offset-3"><div class="row c4p-details" ng-show="(calendarSelectedDay.eventsAllDay.length == 0) && (calendarSelectedDay.events.length == 0) "><div class="btn-block well well-sm" style="border-radius: 1em"><a class="btn" style="white-space:normal" ng-click="close()"><span class="pull-right close">&times;</span> <span>{{srvLocale.translations.htmlCalendarDayTextNoEvent}}</span></a></div></div><ul class="nav nav-pills" ng-show="calendarSelectedDay.eventsAllDay.length"><li class=""><a class="btn disabled">{{srvLocale.translations.htmlCalendarDayTextAllDayEvent}}</a></li></ul><ul class="row nav nav-pills nav-stacked" ng-if="calendarSelectedDay.eventsAllDay.length"><li ng-repeat="item in calendarSelectedDay.eventsAllDay" class="col-xxs-12 well c4p-details c4p-color-b-gradient2"><div ng-include="\'partials/navigation/cards/summarized_card.html\'"></div></li></ul><ul class="nav nav-pills" ng-show="calendarSelectedDay.events.length"><li class=""><a class="btn disabled">{{srvLocale.translations.htmlCalendarDayTextEvents}}</a></li></ul><ul class="row nav nav-pills nav-stacked" ng-if="calendarSelectedDay.events.length"><li ng-repeat="item in calendarSelectedDay.events" class="col-xxs-12 well c4p-details c4p-color-b-gradient3"><div ng-include="\'partials/navigation/cards/summarized_card.html\'"></div></li></ul></div></div>'), 
    $templateCache.put("partials/dialog/dialogDupMeeting.html", '<div resize-opts="{}" class="c4p-dialog-header c4p-color-a-dark-i"><div class="row"><div class="c4p-dialog-search-header"><div class="btn c4p-padding-w-packed"><span>{{srvLocale.translations.htmlDialogDupMeetingPageTitle}}</span></div><div class="btn c4p-padding-w-packed"><div class="c4p-icon-std glyphicon">&nbsp;</div></div><div class="pull-right" ng-hide="false"><div class="btn c4p-padding-w-packed c4p-color-ok-transparent c4p-stroke" ng-click="valid()"><span class="c4p-icon-std glyphicon glyphicon-ok"></span></div>&nbsp;<div class="btn c4p-padding-w-packed c4p-color-cancel-transparent c4p-stroke" ng-click="cancel()"><span class="c4p-icon-std glyphicon glyphicon-times-circle"></span></div></div></div></div></div><div class="row c4p-dialog-container"><form class="c4p-form-group"><div><c4p-input type-var="nameField.type" warn-var="nameField.warn" ng-change="onFieldChanged(nameField)" title-var="nameField.title" ng-model="event.name"></c4p-input></div><div><c4p-input type-var="startField.type" warn-var="startField.warn" ng-change="onFieldChanged(startField)" title-var="startField.title" ng-model="event.date_start"></c4p-input></div><div><c4p-input type-var="endField.type" warn-var="endField.warn" ng-change="onFieldChanged(endField)" title-var="endField.title" ng-model="event.date_end"></c4p-input></div><div class="row" ng-show="hasWhat"><label class="col-xxs-6 control-label">{{srvLocale.translations.htmlDialogDupMeetingTextInitiator}}</label><div class="col-xxs-6 controls"><span class="glyphicon glyphicon-check icon-large" ng-show="event.dupWhat" ng-click="dupWhat = false"></span> <span class="glyphicon glyphicon-unchecked icon-large" ng-hide="event.dupWhat" ng-click="dupWhat = true"></span></div></div><div class="row" ng-show="hasAssignedContact"><label class="col-xxs-6 control-label">{{srvLocale.translations.htmlDialogDupMeetingTextLeader}}</label><div class="col-xxs-6 controls"><span class="glyphicon glyphicon-check icon-large" ng-show="dupAssignedContact" ng-click="dupAssignedContact = false"></span> <span class="glyphicon glyphicon-unchecked icon-large" ng-hide="dupAssignedContact" ng-click="dupAssignedContact = true"></span></div></div><div class="row" ng-show="(nbAttachment > 0)"><label class="col-xxs-6 control-label">{{srvLocale.translations.htmlDialogDupMeetingTextAttachments}} : {{nbAttachment}}</label><div class="col-xxs-6 controls"><span class="glyphicon glyphicon-check icon-large" ng-show="dupAttachment" ng-click="dupAttachment = false"></span> <span class="glyphicon glyphicon-unchecked icon-large" ng-hide="dupAttachment" ng-click="dupAttachment = true"></span></div></div><div class="row form-group" ng-show="(nbAttendee > 0)"><label class="col-xxs-6 control-label">{{srvLocale.translations.htmlDialogDupMeetingTextAttendees}} : {{nbAttendee}}</label><div class="col-xxs-6 controls"><span class="glyphicon glyphicon-check icon-large" ng-show="dupAttendee" ng-click="dupAttendee = false"></span> <span class="glyphicon glyphicon-unchecked icon-large" ng-hide="dupAttendee" ng-click="dupAttendee = true"></span></div></div></form></div>'), 
    $templateCache.put("partials/dialog/dialogEmail.html", '<div class="row"><div class="c4p-dialog-header c4p-color-gradient0"><div class="btn c4p-color-action-transparent" ng-click="close()" ng-show="!modeEdit"><span class="glyphicon glyphicon-arrow-left"></span></div><div class="btn c4p-padding-w-packed c4p-color-action-transparent"><span>{{title}}</span></div><div ng-show="modeEdit" class="btn c4p-color-action-transparent" ng-click="openDialogContacts()"><span class="glyphicon glyphicon-user"></span></div><div ng-show="modeEdit" class="btn c4p-color-action-transparent" ng-click="openDialogAttachments()"><span class="glyphicon glyphicon-paper-clip"></span></div><div ng-show="modeEdit" class="btn c4p-color-action-transparent" ng-click="openDialogPasteNote()"><span class="glyphicon glyphicon-file"></span></div><div ng-show="modeEdit" class="btn c4p-color-action-transparent" ng-click="openDialogPasteReport()"><span class="glyphicon glyphicon-file-text"></span></div><div ng-show="editable && !modeEdit" class="btn c4p-color-action-transparent" ng-click="setModeEdit(true)"><span class="glyphicon glyphicon-edit"></span></div><div class="btn c4p-padding-w-packed"><div class="c4p-icon-std glyphicon">&nbsp;</div></div><div class="pull-right" ng-show="modeEdit"><div class="btn c4p-padding-w-packed c4p-color-action-transparent" ng-click="createEmail()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-envelope"></span></div>&nbsp;<div class="btn c4p-padding-w-packed c4p-color-cancel-transparent-transparent c4p-stroke" ng-click="close()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-times-circle"></span></div></div></div></div><div c4p-show="modeEdit" ng-class="{\'c4p-color-a-gradient4\': documents.length > 0, \'c4p-color-{{getTypeColor(object.a4p_type)}}-gradient3\': documents.length == 0}"><div class="row"><div class="col-xxs-12" resizecss-height="getResizeHeight() -getPathValue(\'parentNode.parentNode.previousElementSibling\', \'offsetHeight\')" sense-opts="{name:\'dialogEmail\', axeY:\'scroll\', watchRefresh:\'mailLastUpdate\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div class="container"><div class="c4p-form-group c4p-color-a-gradient1"><div class="row"><div><c4p-input title-var="srvLocale.translations.htmlFormTo" ng-model="emailInput" ng-blur="addEmailToList(emailInput);emailInput=\'\';" placeholder="{{srvLocale.translations.htmlFormToPlaceHolder}}" style="width: 100%"></c4p-input></div></div><div class="row c4p-mail-attachment-list c4p-color-a-gradient1" ng-show="(emails.length > 0 || contacts.length > 0)"><div class="col-xxs-12"><div><div ng-repeat="item in contacts" class="row c4p-mail-attachment" ng-class="{\'c4p-edit\': modeEdit, \'c4p-noedit\': !modeEdit}"><span ng-controller="ctrlNamedObject" ng-init="init(item)" class="c4p-mail-attachment-name">{{itemName}}</span> <a ng-click="closeAlert($index,\'contact\')"><span class="glyphicon glyphicon-times-circle"></span></a></div><div ng-repeat="item in emails" class="c4p-mail-attachment" ng-class="{\'c4p-edit\': modeEdit, \'c4p-noedit\': !modeEdit}"><span class="c4p-mail-attachment-name">{{item.email}}</span> <a ng-click="closeAlert($index,\'email\')"><span class="glyphicon glyphicon-times-circle"></span></a></div></div></div></div><div ng-show="errorMap.email.length > 0"><div class="help-inline c4p-field-error-message" ng-repeat="error in errorMap.email">{{error}}</div></div></div><div class="row c4p-form-group c4p-color-a-gradient2"><div><c4p-input type-var="text" style="width:100%" ng-model="email.subject" title-var="srvLocale.translations.htmlFormSubject" placeholder="{{srvLocale.translations.htmlFormSubjectPlaceHolder}}"></c4p-input></div><span class="help-inline c4p-field-error-message" ng-show="errorMap.subject">{{errorMap.subject}}</span></div><div class="row c4p-form-group c4p-color-a-gradient3"><div class="col-xxs-12"><c4p-input ng-model="email.body" placeholder="{{srvLocale.translations.htmlFormMessagePlaceholder}}" type="textarea" rows="5" cols="40"></c4p-input></div><span class="help-inline c4p-field-error-message" ng-show="errorMap.message">{{errorMap.message}}</span></div><div class="row c4p-form-group c4p-color-a-gradient4" ng-show="documents.length > 0"><label class="control-label a4p-dot">{{srvLocale.translations.htmlDialogEmailAttachment}}</label><div class="col-xxs-12"><div ng-repeat="item in documents" class="c4p-mail-attachment"><span ng-controller="ctrlNamedObject" ng-init="init(item)" class="c4p-mail-attachment-name">{{itemName}}</span> <a ng-click="closeAlert($index,\'attachment\')"><span class="glyphicon glyphicon-times-circle"></span></a></div></div></div><div class="row"><div class="col-xxs-12" ng-style="{minHeight:getResizeHeight()+\'px\'}"></div></div></div></div></div></div><div c4p-show="!modeEdit" ng-class="{\'c4p-color-a-gradient4\': documents.length > 0, \'c4p-color-{{getTypeColor(object.a4p_type)}}-gradient3\': documents.length == 0}"><div class="row"><div class="col-xxs-12" resizecss-height="getResizeHeight() -getPathValue(\'parentNode.parentNode.previousElementSibling\', \'offsetHeight\')" sense-opts="{name:\'dialogEmail\', axeY:\'scroll\', watchRefresh:\'mailLastUpdate\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div class="container"><div class="c4p-color-a-gradient1"><div class="c4p-card"><span class="c4p-size-bigger">{{email.subject}}</span></div></div><div class="c4p-color-a-gradient2"><div class="c4p-card"><div class="c4p-size-big"><span>{{srvLocale.translations.htmlDialogEmailMailedPeople}}</span></div><div><span ng-repeat="item in contacts"><span ng-show="$index > 0">,</span> <span ng-controller="ctrlNamedObject" ng-init="init(item)">{{itemName}}</span></span></div><div><span ng-repeat="item in emails"><span ng-show="$index > 0">,</span> <span>{{item.email}}</span></span></div></div></div><div class="c4p-color-a-gradient3"><div class="c4p-card"><p>{{email.body}}</p></div></div><div class="c4p-color-a-gradient4" ng-show="documents.length > 0"><div class="c4p-card"><div class="c4p-size-big"><span>{{srvLocale.translations.htmlDialogEmailJoinedDoc}}</span></div><span><span ng-repeat="item in documents"><span ng-show="$index > 0">,</span> <span ng-controller="ctrlNamedObject" ng-init="init(item)">{{itemName}}</span></span></span></div></div></div></div></div></div>'), 
    $templateCache.put("partials/dialog/dialogErrorReport.html", '<div class="row"><div class="c4p-dialog-header"><div class="btn c4p-padding-w-packed c4p-guider-action"><span>{{srvLocale.translations.htmlDialogErrRptPageTitle}}</span></div><div class="btn c4p-padding-w-packed"><div class="c4p-icon-std glyphicon">&nbsp;</div></div><div class="pull-right"><div class="btn c4p-padding-w-packed c4p-guider-action" ng-click="close()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-times-circle"></span></div></div></div></div><div><div class="row"><div class="col-xxs-12" resizecss-height="getResizeHeight() -getPathValue(\'parentNode.parentNode.previousElementSibling\', \'offsetHeight\')" sense-opts="{name:\'dialogEmail\', axeY:\'scroll\', watchRefresh:\'mailLastUpdate\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div class="c4p-dialog-container"><div class="row"><div class="col-xxs-12"><c4p-input ng-model="feedback.message" placeholder="{{srvLocale.translations.htmlFormMessagePlaceHolder}}" type="textarea" rows="5" cols="40" style="width:100%"></c4p-input></div></div><div class="row"><a class="btn btn-primary col-xxs-4 col-sm-offset-8" data-dismiss="modal" ng-class="{disabled : (feedback.emailRequired && !feedback.email) }" ng-click="submit()">{{srvLocale.translations.htmlButtonSend}}</a></div><div class="row"><div class="col-xxs-12" ng-style="{minHeight:getResizeHeight()+\'px\'}"></div></div></div></div></div></div>'), 
    $templateCache.put("partials/dialog/dialogFacetSelected.html", '<div resize-opts="{}"><div class="row"><div class="c4p-dialog-search-header c4p-color-a-dark-i"><div class="btn c4p-padding-w-packed c4p-color-action-transparent c4p-stroke" ng-show="createPredefinedObjectEnabled" ng-click="createPredefinedObject()"><span class="c4p-icon-std glyphicon glyphicon-plus"></span></div><div class="btn c4p-padding-w-packed"><span>{{srvLocale.translations.htmlTitleSelection[type]}}</span></div><div class="btn c4p-padding-w-packed"><div class="c4p-icon-std glyphicon">&nbsp;</div></div><div class="pull-right" ng-hide="false"><div class="btn c4p-padding-w-packed c4p-color-ok-transparent c4p-stroke" ng-click="validateDialog()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-ok"></span></div>&nbsp;<div class="btn c4p-padding-w-packed c4p-color-cancel-transparent c4p-stroke" ng-click="closeDialog()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-times-circle"></span></div></div></div></div><div class="c4p-dialog-search-container c4p-color-a-dark-iii"><div class="row"><div class="col-xxs-12"><span>{{srvLocale.translations.htmlTitleSelection[type]}}</span></div></div><div class="row"><span class="col-xxs-1" ng-click="toggleOrder()"><span ng-show="ascendingOrder" class="glyphicon glyphicon-sort-by-alphabet"></span> <span ng-hide="ascendingOrder" class="glyphicon glyphicon-sort-by-alphabet-alt"></span></span><div class="col-xxs-11 btn-group dropdown" ng-show="definedFacetKeyes.length"><button class="btn dropdown-toggle" data-toggle="dropdown" style="text-align: left"><span class="c4p-n_1">{{srvLocale.translations.htmlFacetName[lastFacetKey]}}</span><span class="glyphicon glyphicon-caret-down"></span></button><ul class="dropdown-menu" style="width:100%"><li ng-repeat="facetKey in definedFacetKeyes"><a ng-click="setFacet(facetKey)"><span style="vertical-align:top">{{srvLocale.translations.htmlFacetName[facetKey]}}</span></a></li></ul></div></div><div class="row"><div class="controls controls-row col-xxs-12" style="position: relative"><input style="width:90%" placeholder="{{srvLocale.translations.htmlFormSearchPlaceHolder}}" ng-model="searchQuery" ng-change="setFilterQuery(searchQuery);"><span style="position: absolute; right: 10px" ng-click="searchQuery=\'\'; setFilterQuery(\'\')"><span class="glyphicon glyphicon-times-circle"></span></span></div></div></div></div><div class="row"><div class="controls controls-row col-xxs-12" style="position: relative" ng-repeat="filterFacet in filterFacets"><span>{{srvLocale.translations.htmlFacetName[filterFacet.key]}} : {{filterFacet.title}} - {{filterFacet.items.length}}</span> <span style="position: absolute; right: 10px" ng-click="removeFacet($index)"><span class="glyphicon glyphicon-times-circle"></span></span></div></div><div class="row c4p-dialog-bg c4p-dialog-search-container c4p-color-a" resizecss-height="getResizeHeight() -getPathValue(\'previousElementSibling\', \'offsetHeight\') -getPathValue(\'previousElementSibling.previousElementSibling\', \'offsetHeight\')" sense-opts="{axeY:\'scroll\', watchRefresh:[\'filterFacet.key\', \'items.keyes.length\', \'items.others.length\']}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div class="col-xxs-12"><ul class="nav nav-stacked" ng-repeat="groupKey in items.keyes"><li><ul class="list-group"><li class="list-group-item"><a ng-click="addFacet(lastFacetKey, groupKey.title, groupKey.value)">{{groupKey.title}} - {{items.lists[groupKey.value].length}} <span class="glyphicon glyphicon-chevron-right"></span></a></li></ul></li></ul><ul class="nav nav-stacked"><li ng-show="filterFacets.length > 0"><ul class="list-group"><li class="list-group-item"><a class="c4p-link5" ng-click="removeLastFacet()">{{getLastFacet().title}} - {{items.others.length}}<span class="glyphicon glyphicon-chevron-left"></span></a></li></ul></li><li ng-repeat="item in items.others"><div ng-click="item.selected = !item.selected" class="clearfix c4p-link5 c4p-select-objects-item"><span class="glyphicon glyphicon-ok icon-large pull-left" ng-class="{\'c4p-invisible\': !item.selected}"></span><div class="pull-left" ng-class="{scrollTop:element.scrollTo}"><span>{{getObjectName(item.object)}}</span></div></div></li></ul></div></div>'), 
    $templateCache.put("partials/dialog/dialogFeed.html", '<div class="row"><div class="c4p-dialog-header c4p-color-gradient0"><div class="btn c4p-color-action-transparent" ng-click="close()" ng-show="!modeEdit"><span class="glyphicon glyphicon-arrow-left"></span></div><div class="btn c4p-padding-w-packed c4p-color-action-transparent"><span>{{title}}</span></div><div ng-show="editable && !modeEdit" class="btn c4p-color-action-transparent" ng-click="setModeEdit(true)"><span class="glyphicon glyphicon-edit"></span></div><div class="btn c4p-padding-w-packed"><div class="c4p-icon-std glyphicon">&nbsp;</div></div><div class="pull-right" ng-show="modeEdit"><div class="btn c4p-padding-w-packed c4p-color-ok-transparent c4p-stroke" ng-click="createFeed()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-share"></span></div>&nbsp;<div class="btn c4p-padding-w-packed c4p-color-cancel-transparent c4p-stroke" ng-click="close()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-times-circle"></span></div></div></div></div><div c4p-show="modeEdit" class="c4p-color-a-gradient3"><div class="row"><div class="col-xxs-12" resizecss-height="getResizeHeight() -getPathValue(\'parentNode.parentNode.previousElementSibling\', \'offsetHeight\')" sense-opts="{name:\'dialogEmail\', axeY:\'scroll\', watchRefresh:\'mailLastUpdate\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div class="container"><div class="row c4p-form-group c4p-color-a-gradient1"><c4p-input type-var="text" style="width:100%" ng-model="feed.title" title-var="srvLocale.translations.htmlFormTitle" placeholder="{{srvLocale.translations.htmlFormTitlePlaceHolder}}"></c4p-input></div><div class="row c4p-form-group c4p-color-a-gradient2"><label class="control-label a4p-dot">{{srvLocale.translations.htmlTypeName[\'Document\']}}</label><div class="col-xxs-12" style="border-bottom: 1px solid #eeeeee"><div ng-controller="ctrlNamedObject" ng-init="init(feedObject)"><span class="icon-large glyphicon glyphicon-{{itemIcon}}"></span> <span>{{itemName}}</span></div></div></div><div class="row c4p-form-group c4p-color-a-gradient3"><div class="col-xxs-12"><c4p-input ng-model="feed.body" placeholder="{{srvLocale.translations.htmlFormMessagePlaceHolder}}" type="textarea" rows="5" cols="40"></c4p-input></div></div><div class="row"><div class="col-xxs-12" ng-style="{minHeight:getResizeHeight()+\'px\'}"></div></div></div></div></div></div><div ng-show="!modeEdit" class="c4p-color-a-gradient3"><div class="row"><div class="col-xxs-12" resizecss-height="getResizeHeight() -getPathValue(\'parentNode.parentNode.previousElementSibling\', \'offsetHeight\')" sense-opts="{name:\'dialogEmail\', axeY:\'scroll\', watchRefresh:\'mailLastUpdate\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div class="container"><div class="c4p-color-a-gradient1"><div class="c4p-card"><span class="c4p-size-bigger">{{feed.title}}</span></div></div><div class="c4p-color-a-gradient2"><div class="c4p-card"><div class="c4p-size-big"><span>{{srvLocale.translations.htmlTypeName[\'Document\']}}</span></div><div ng-controller="ctrlNamedObject" ng-init="init(feedObject)"><span class="icon-large glyphicon glyphicon-{{itemIcon}}"></span> <span>{{itemName}}</span></div></div></div><div class="c4p-color-a-gradient3"><div class="c4p-card"><p>{{feed.body}}</p></div></div></div></div></div></div>'), 
    $templateCache.put("partials/dialog/dialogFeedback.html", '<div ng-controller="ctrlEditFocus"><div class="modal-header row c4p-color-gradient0"><div class="col-xxs-12"><ul class="nav nav-pills"><li ng-class="{active:onlyFeedback}"><a class="btn" data-toggle="tab" ng-click="onlyFeedback = true;" ng-disabled="isEditFocused"><h5>{{srvLocale.translations.htmlGuiderNeedHelp}}</h5></a></li><li class="pull-right"><a ng-click="close()" class="btn" ng-disabled="isEditFocused"><span class="">&times;</span></a></li></ul></div></div><div class="modal-body row c4p-color-gradient0"><div class="c4p-container-scroll-y"><div class="c4p-container"><div class="tab-content"><div class="tab-pane fade in" id="home" ng-class="{active:!onlyFeedback}" ng-controller="ctrlGuiderDialog"><div class="row"><a4p-carousel class="col-xxs-12 c4p-full-height" interval="guider_interval"><a4p-slide ng-repeat="slide in guider_slides" active="slide.active"><div class="c4p-full-height center-block" style="position:relative;height:350px"><img class="center-block" ng-src="{{slide.image}}"><div class="center-block carousel-caption" ng-bind-html="to_trusted(slide.text)"></div></div></a4p-slide></a4p-carousel></div></div><div class="tab-pane fade in" id="question" ng-class="{active:onlyFeedback}"><div class="container"><div class="row"><h5 class="col-xxs-12 col-sm-6 col-sm-offset-3">{{srvLocale.translations.htmlMsgFeedbackEmail}}</h5><div class="col-xxs-12 col-sm-6 col-sm-offset-3" ng-show="feedback.emailRequired"><c4p-input title-var="srvLocale.translations.htmlMsgFeedbackContactEmpty" ng-model="feedback.email" placeholder="{{srvLocale.translations.htmlFormEmailPlaceHolder}}" type="mail" style="width:100%" warn-var="feedback.email" required ng-disabled="isEditFocused"></c4p-input></div></div><div class="row"><div class="col-xxs-12 col-sm-6 col-sm-offset-3" ng-show="feedback.emailRequired"><c4p-input title-var="srvLocale.translations.htmlMsgFeedbackPhone" ng-model="feedback.phone" placeholder="{{srvLocale.translations.htmlFormPhonePlaceHolder}}" type="tel" style="width:100%" ng-disabled="isEditFocused"></c4p-input></div></div><div class="row"><div class="col-xxs-12 col-sm-6 col-sm-offset-3"><c4p-input ng-model="feedback.message" placeholder="{{srvLocale.translations.htmlFormMessagePlaceHolder}}" type="textarea" rows="20" cols="20" style="width:100%" ng-disabled="isEditFocused"></c4p-input></div></div><div class="row"><a class="btn btn-success col-xxs-12 col-sm-3 col-sm-offset-6" data-dismiss="modal" ng-class="{disabled : (feedback.emailRequired && !feedback.email) }" ng-click="submit()" ng-disabled="isEditFocused">{{srvLocale.translations.htmlButtonSend}}</a></div></div></div></div></div></div></div></div>'), 
    $templateCache.put("partials/dialog/dialogGoToMeeting.html", '<div class="modal-body c4p-vertical-container"><div class="c4p-dialog c4p-vertical-align"><div class="row"><div class="col-xxs-offset-1 col-xxs-10 col-xs-offset-2 col-xs-8 col-sm-offset-3 col-sm-6 c4p-modal-goto-meeting-container"><div class="row c4p-dialog-header c4p-color-gradient0"><div class="col-xxs-11"><div class="btn c4p-padding-w-packed"><span>{{srvLocale.translations.htmlGotoMeeting}}</span></div></div><div class="col-xxs-1"><div class="btn c4p-padding-w-packed c4p-modal-confirm-btns" ng-click="close()"><span class="c4p-icon-std glyphicon glyphicon-times-circle"></span></div></div></div><div class="row"><div class="col-xxs-12" sense-opts="{axeY:\'scroll\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div class="container"><div class="c4p-form-group vertical-container"><div class="vertical-align">{{srvLocale.translations.htmlCreateEmptyMeeting}}</div><div class="btn c4p-padding-w-packed c4p-stroke pull-right" ng-click="createNewMeeting()"><span class="c4p-icon-std glyphicon glyphicon-arrow-right"></span></div></div><div class="c4p-form-group vertical-container"><div class="vertical-align">{{srvLocale.translations.htmlGotoMeetingWith}} {{itemName}}</div><div class="btn c4p-padding-w-packed c4p-stroke pull-right" ng-click="createNewMeeting(item)"><span class="c4p-icon-std glyphicon glyphicon-arrow-right"></span></div></div><div class="c4p-form-group row" c4p-show="relatedEvents.length > 0"><div class="row"><div class="col-xxs-10 control-label">{{srvLocale.translations.htmlUseExistingMeeting}}</div></div><div class="col-xxs-10"><select class="form-control" ng-model="selectedEvent" ng-options="e.name for e in relatedEvents"></select></div><div class="col-xxs-2"><div class="btn c4p-padding-w-packed c4p-stroke pull-right" ng-click="gotoMeeting()"><span class="c4p-icon-std glyphicon glyphicon-arrow-right"></span></div></div></div></div></div></div></div></div></div></div>'), 
    $templateCache.put("partials/dialog/dialogICal.html", '<div class="row"><div class="c4p-dialog-header c4p-color-gradient0"><div class="btn c4p-padding-w-packed c4p-color-action-transparent"><span>{{srvLocale.translations.htmlActionName[\'sendICal\']}}</span></div><div class="btn c4p-color-action-transparent" ng-click="openDialogContacts()"><span class="glyphicon glyphicon-user"></span></div><div class="btn c4p-padding-w-packed"><div class="c4p-icon-std glyphicon">&nbsp;</div></div><div class="pull-right"><div class="btn c4p-padding-w-packed c4p-color-action-transparent" ng-click="sendICal()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-envelope"></span></div>&nbsp;<div class="btn c4p-padding-w-packed c4p-color-cancel-transparent-transparent c4p-stroke" ng-click="close()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-times-circle"></span></div></div></div></div><div class="c4p-color-a-gradient3"><div class="row"><div class="col-xxs-12" resizecss-height="getResizeHeight() -getPathValue(\'parentNode.parentNode.previousElementSibling\', \'offsetHeight\')" sense-opts="{name:\'dialogICal\', axeY:\'scroll\', watchRefresh:\'mailLastUpdate\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div class="container"><div class="c4p-color-a-gradient1"><div class="c4p-card"><span class="c4p-size-bigger">{{ical.title}}</span><br><span>{{srvLocale.formatDate(ical.startDate, \'short\')}}</span> - <span>{{srvLocale.formatDate(ical.endDate, \'short\')}}</span><br><span>{{ical.location}}</span></div></div><div class="c4p-form-group c4p-color-a-gradient2"><div class="row"><div><c4p-input title-var="srvLocale.translations.htmlFormTo" ng-model="emailInput" ng-blur="addEmailToList(emailInput);emailInput=\'\';" placeholder="{{srvLocale.translations.htmlFormToPlaceHolder}}" style="width: 100%"></c4p-input></div></div><div class="row c4p-mail-attachment-list c4p-color-a-gradient2" ng-show="(emails.length > 0 || contacts.length > 0)"><div class="col-xxs-12"><div><div ng-repeat="item in contacts" class="row c4p-mail-attachment" ng-class="{\'c4p-edit\': modeEdit, \'c4p-noedit\': !modeEdit}"><span ng-controller="ctrlNamedObject" ng-init="init(item)" class="c4p-mail-attachment-name">{{itemName}}</span> <a ng-click="closeAlert($index,\'contact\')"><span class="glyphicon glyphicon-remove"></span></a></div><div ng-repeat="item in emails" class="c4p-mail-attachment" ng-class="{\'c4p-edit\': modeEdit, \'c4p-noedit\': !modeEdit}"><span class="c4p-mail-attachment-name">{{item.email}}</span> <a ng-click="closeAlert($index,\'email\')"><span class="glyphicon glyphicon-remove"></span></a></div></div></div></div><div ng-show="errorMap.email.length > 0"><div class="help-inline c4p-field-error-message" ng-repeat="error in errorMap.email">{{error}}</div></div></div><div class="c4p-color-a-gradient3"><div class="c4p-card"><p>{{ical.description}}</p></div></div><div class="row"><div class="col-xxs-12" ng-style="{minHeight:getResizeHeight()+\'px\'}"></div></div></div></div></div></div>'), 
    $templateCache.put("partials/dialog/dialogNote.html", '<div ng-controller="ctrlEditFocus"><div class="modal-header row c4p-color-gradient0"><div class="col-xxs-12"><ul class="nav nav-pills"><li class="hidden-xs" ng-hide="removeEnabled"><a class="btn disabled"><h5>{{srvLocale.translations.htmlTitleNewObject[note.a4p_type]}}</h5></a></li><li class="hidden-xs" ng-show="removeEnabled"><a class="btn disabled"><h5>{{srvLocale.translations.htmlTitleEditObject[note.a4p_type]}}</h5></a></li><li ng-show="removeEnabled && modeEdit"><a class="btn c4p-color-cancel-transparent" ng-click="remove()" ng-disabled="isEditFocused"><span class="glyphicon glyphicon-trash-o"></span></a></li><li ng-show="srvData.isMethodPossibleForObject(\'shareDocumentByEmail\', note)"><a class="btn" ng-click="submitAndShare()" ng-disabled="isEditFocused" ng-class="{\'disabled\': srvData.isMethodDisabledForObject(\'shareDocumentByEmail\', note)}"><span class="glyphicon glyphicon-envelope"></span></a></li><li ng-show="srvData.isMethodPossibleForObject(\'shareDocumentByEmail\', note)"><a class="btn" ng-click="submitAndShareByChatter()" ng-disabled="isEditFocused" ng-class="{\'disabled\': srvData.isMethodDisabledForObject(\'shareDocumentByChatter\', note)}"><span class="glyphicon glyphicon-share"></span></a></li><li ng-show="editable && !modeEdit"><a class="btn" ng-click="setModeEdit(true)" ng-disabled="isEditFocused"><span class="glyphicon glyphicon-edit"></span></a></li><li ng-show="modeEdit"><a class="btn" ng-disabled="isEditFocused" ng-repeat="footer in toolboxInEditMode" ng-click="startSpinner();footer.fn()"><span class="glyphicon glyphicon-{{footer.icon}}"></span></a></li><li class="pull-right"><a class="btn" ng-click="close()" ng-disabled="isEditFocused"><span class="">&times;</span></a></li><li class="pull-right" ng-hide="!modeEdit"><a class="btn" ng-click="submit()" ng-disabled="isEditFocused"><div ng-class="{\'c4p-color-ok-transparent\' : objectValidated, \'c4p-color-cancel-transparent\' : !objectValidated}"><span class="glyphicon glyphicon-check"></span></div></a></li></ul></div></div><div class="modal-body row c4p-color-gradient0"><div class="c4p-container-scroll-y"><div class="c4p-container" ng-switch="" on="note.a4p_type"><div ng-switch-when="Report"><div ng-include="\'partials/dialog/dialogNote_report.html\'"></div></div><div ng-switch-default=""><div ng-include="\'partials/dialog/dialogNote_note.html\'"></div></div></div></div></div></div>'), 
    $templateCache.put("partials/dialog/dialogNote_note.html", '<section class="row"><div ng-repeat="group in objectGroups"><div class="col-xxs-12 col-sm-8 col-sm-offset-2 c4p-color-a-gradient{{$index+1}} c4p-form-group"><div ng-repeat="field in group.groupFields"><div ng-switch="" on="field.type"><div ng-switch-default="text" ng-show="removeEnabled"><c4p-input warn-var="field.warn" title-var="" ng-model="note[field.key]" type-var="field.type" rows="5" cols="20" ng-change="onFieldChanged(field)" ng-disabled="isEditFocused"></c4p-input></div><blockquote ng-switch-when="textarea"><c4p-input warn-var="field.warn" title-var="" ng-model="note[field.key]" type-var="field.type" rows="10" cols="20" ng-change="onFieldChanged(field)" ng-disabled="isEditFocused"></c4p-input></blockquote></div></div></div></div></section>'), 
    $templateCache.put("partials/dialog/dialogNote_report.html", '<div class="row" ng-show="modeEdit"><div class="col-xxs-12"><form class="c4p-color-a-gradient{{objectGroups.length}}"><marker ng-repeat="group in objectGroups"><div class="c4p-color-a-gradient{{$index+1}} c4p-form-group"><span class="c4p-form-group-title">{{group.title}}</span><fieldset ng-repeat="field in group.groupFields"><c4p-input warn-var="field.warn" title-var="field.title" ng-model="note[field.key]" type-var="field.type" rows="5" cols="20" ng-change="onFieldChanged(field)"></c4p-input></fieldset></div></marker></form><div class="col-xxs-12 c4p-form-group"><span class="c4p-form-group-title"><c4p-pluralize count="toolboxContacts.length" when="srvLocale.translations.pluralHtmlTextReportPeople"></span><ul class="nav nav-pills" ng-repeat="item in toolboxContacts"><li ng-controller="ctrlNamedObject" ng-init="init(item)"><span class="c4p-detail-c-bg"><span class="icon-large glyphicon glyphicon-{{itemIcon}}"></span> {{itemName}}</span> <span class="glyphicon glyphicon-times-circle c4p-well-c-tool-bar" ng-show="modeEdit" ng-click="removeContact($index)"></span> </li></ul></div><div class="col-xxs-12 c4p-form-group"><span class="c4p-form-group-title"><c4p-pluralize count="toolboxDocs.length" when="srvLocale.translations.pluralHtmlTextReportDoc"></span><ul class="nav nav-pills" ng-repeat="item in toolboxDocs"><li ng-controller="ctrlNamedObject" ng-init="init(item)"><span class="c4p-detail-c-bg"><span class="icon-large glyphicon glyphicon-{{itemIcon}}"></span> {{itemName}}</span> <span class="glyphicon glyphicon-remove c4p-well-c-tool-bar" ng-show="modeEdit" ng-click="removeDoc($index)"></span> </li></ul></div><div class="col-xxs-12 c4p-form-group"><span class="c4p-form-group-title">{{srvLocale.translations.htmlDialogNoteReportObservation}}</span><ul class="nav nav-pills" ng-repeat="item in toolboxRatings"><span ng-show="modeEdit" ng-include="\'partials/navigation/cards/4_rating.html\'" style="padding:0 10px"></span> <span ng-hide="modeEdit" ng-include="\'partials/navigation/cards/4_rating_ro2.html\'" style="padding:0 10px"></span> <span class="glyphicon glyphicon-remove c4p-well-c-tool-bar" ng-show="modeEdit" ng-click="removeRating($index)"></span></ul></div></div><div class="row"><div class="col-xxs-12" ng-style="{minHeight:getResizeHeight()+\'px\'}"></div></div></div><div class="row" ng-controller="ctrlDetailedObject" ng-init="init(note)" c4p-show="!modeEdit"><div class="col-xxs-12"><div class="c4p-color-a-gradient{{$index}}" ng-repeat="card in cards"><div class="c4p-card"><div ng-show="isFile && $first" class="btn" ng-class="{\'disabled\': actionMap.viewDocument.disabled}" ng-click="doAction(\'viewDocument\')" style="background: url(\'{{item.thumb_url}}\') no-repeat center center;width:100%;height: 250px;-webkit-background-size: contain"></div><span ng-repeat="group in card.groups" style="margin:0;padding:0" class="c4p-size-{{group.size}}"><br ng-show="card.brSeparated && ($index > 0)"><span><span ng-show="group.synchro && (item.c4p_synchro.creating || item.c4p_synchro.writing || item.c4p_synchro.reading || item.c4p_synchro.deleting)" class="glyphicon" ng-class="{\r\n                                    \'glyphicon-trash\'    : (item.c4p_synchro.deleting > 1),\r\n                                    \'glyphicon-remove\'   : (!item.c4p_synchro.deleting && (item.c4p_synchro.creating > 1)),\r\n                                    \'glyphicon-upload\'   : (!item.c4p_synchro.deleting && !item.c4p_synchro.creating && (item.c4p_synchro.writing > 1)),\r\n                                    \'glyphicon-download\' : (!item.c4p_synchro.deleting && !item.c4p_synchro.creating && !item.c4p_synchro.writing && (item.c4p_synchro.reading > 1)),\r\n                                    \'glyphicon-spinner\'  : ((item.c4p_synchro.deleting == 1) || (item.c4p_synchro.creating == 1) || (item.c4p_synchro.writing == 1) || (item.c4p_synchro.reading == 1)),\r\n                                    \'icon-spin\'          : ((item.c4p_synchro.deleting == 1) || (item.c4p_synchro.creating == 1) || (item.c4p_synchro.writing == 1) || (item.c4p_synchro.reading == 1))\r\n                                  }"></span>  <span ng-show="group.name">{{itemName}}</span> <span ng-show="group.title">{{group.title}}</span></span> <span ng-repeat="field in group.fields" class="c4p-size-{{field.size}}"><span ng-show="($index > 0)"></span> <span ng-show="field.title">{{field.title}} :</span> <span ng-show="field.prefix">{{field.prefix}}</span> <span ng-switch="field.isArray"><span ng-switch-when="true"><span ng-repeat="item in field.value"><span ng-show="($index > 0) && (field.separator != \'br\')">{{field.separator}}</span><br ng-show="($index > 0) && (field.separator == \'br\')"><span ng-switch="field.type"><span ng-switch-when="tel"><a class="c4p-color-lnk" href="tel:{{item}}" target="_blank"><span>{{item}}</span></a></span> <span ng-switch-when="mail"><a class="c4p-color-lnk" href="mailto:{{item}}" target="_blank"><span>{{item}}</span></a></span> <span ng-switch-when="url"><a class="c4p-color-lnk" href="{{item}}" target="_blank"><span>{{item}}</span></a></span> <span ng-switch-when="currency"><span>{{item | c4pCurrency}}</span></span> <span ng-switch-when="percent"><span>{{item}}%</span></span> <span ng-switch-when="probability"><span>{{item}}%</span></span> <span ng-switch-when="datetime"><span>{{srvLocale.formatDate(item, \'short\')}}</span></span> <span ng-switch-when="date"><span>{{srvLocale.formatDate(item, \'shortDate\')}}</span></span> <span ng-switch-when="time"><span>{{srvLocale.formatDate(item, \'shortTime\')}}</span></span> <span ng-switch-when="number"><span>{{item | c4pNumber}}</span></span> <span ng-switch-when="rating"><span ng-include="\'partials/navigation/cards/4_rating_ro2.html\'" style="padding:0 10px"></span></span> <span ng-switch-default=""><span>{{item}}</span></span></span></span></span> <span ng-switch-default=""><span ng-switch="field.type"><span ng-switch-when="tel"><a class="c4p-color-lnk" href="tel:{{field.value}}" target="_blank"><span>{{field.value}}</span></a></span> <span ng-switch-when="mail"><a class="c4p-color-lnk" href="mailto:{{field.value}}" target="_blank"><span>{{field.value}}</span></a></span> <span ng-switch-when="url"><a class="c4p-color-lnk" href="{{field.value}}" target="_blank"><span>{{field.value}}</span></a></span> <span ng-switch-when="currency"><span>{{field.value | c4pCurrency}}</span></span> <span ng-switch-when="percent"><span>{{field.value}}%</span></span> <span ng-switch-when="probability"><span>{{field.value}}%</span></span> <span ng-switch-when="datetime"><span>{{srvLocale.formatDate(field.value, \'short\')}}</span></span> <span ng-switch-when="date"><span>{{srvLocale.formatDate(field.value, \'shortDate\')}}</span></span> <span ng-switch-when="time"><span>{{srvLocale.formatDate(field.value, \'shortTime\')}}</span></span> <span ng-switch-when="number"><span>{{field.value | c4pNumber}}</span></span> <span ng-switch-when="rating"><span ng-init="item = field.value" ng-include="\'partials/navigation/cards/4_rating_ro2.html\'" style="padding:0 10px"></span></span> <span ng-switch-default=""><span>{{field.value}}</span></span></span></span></span> <span ng-show="field.suffix">{{field.suffix}}</span></span></span></div></div></div></div>'), 
    $templateCache.put("partials/dialog/dialogSelectCrms.html", '<div resize-opts="{}"><div class="row"><div class="c4p-dialog-search-header c4p-color-a-dark-i"><div class="btn c4p-padding-w-packed"><span>{{srvLocale.translations.htmlDialogSelectCrmUse}}</span></div><div class="btn c4p-padding-w-packed"><div class="c4p-icon-std glyphicon">&nbsp;</div></div><div class="pull-right" ng-hide="false"><div class="btn c4p-padding-w-packed c4p-color-ok-transparent c4p-stroke" ng-click="validateDialog()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-ok"></span></div>&nbsp;<div class="btn c4p-padding-w-packed c4p-color-cancel-transparent c4p-stroke" ng-click="closeDialog()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-times-circle"></span></div></div></div></div></div><div class="row c4p-dialog-bg c4p-dialog-search-container c4p-color-a" resizecss-height="getResizeHeight() -getPathValue(\'previousElementSibling\', \'offsetHeight\')" sense-opts="{axeY:\'scroll\', watchRefresh:\'visibleElements.length\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div class="col-xxs-12"><ul class="nav nav-stacked"><li ng-repeat="crm in possibleCrms"><div ng-click="toggleItem(crm)" class="clearfix c4p-link5"><span class="glyphicon glyphicon-ok icon-large pull-left" ng-class="{\'c4p-invisible\':!selectedCrms[crm]}"></span><label class="pull-left" ng-class="{scrollTop:element.scrollTo}"><span>{{srvLocale.translations.htmlConfigCrmList[crm]}}</span></label></div></li></ul></div></div>'), 
    $templateCache.put("partials/dialog/dialogSelectObjects.html", '<div resize-opts="{}"><div class="row"><div class="c4p-dialog-search-header c4p-color-a-dark-i"><div class="btn c4p-padding-w-packed c4p-color-action-transparent c4p-stroke" ng-show="createButton" ng-click="createObject()"><span class="c4p-icon-std glyphicon glyphicon-plus"></span></div><div class="btn c4p-padding-w-packed"><span>{{srvLocale.translations.htmlTitleSelection[type]}}</span></div><div class="btn c4p-padding-w-packed"><div class="c4p-icon-std glyphicon">&nbsp;</div></div><div class="pull-right" ng-hide="false"><div class="btn c4p-padding-w-packed c4p-color-ok-transparent c4p-stroke" ng-click="validateDialog()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-ok"></span></div>&nbsp;<div class="btn c4p-padding-w-packed c4p-color-cancel-transparent c4p-stroke" ng-click="closeDialog()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-times-circle"></span></div></div></div></div><div class="c4p-dialog-search-container c4p-color-a-dark-iii"><div class="row"><div class="col-xxs-12"><span>{{srvLocale.translations.htmlTitleSelection[type]}}</span></div></div><div class="row" ng-show="suggestedOptions.length"><div class="col-xxs-12 btn-group dropdown"><button class="btn dropdown-toggle" data-toggle="dropdown" style="text-align: left"><span class="c4p-n_1">{{srvLocale.translations.htmlTypeName[type]}}</span><span class="glyphicon glyphicon-caret-down"></span></button><ul class="dropdown-menu" style="width:100%"><li ng-repeat="suggestedOption in suggestedOptions"><a ng-click="toggleSuggestion($index)"><span class="glyphicon glyphicon-ok" ng-show="suggestedOption.selected"></span> <span style="vertical-align:top">{{srvLocale.translations.htmlSuggestionName[suggestedOption.name]}}</span> <span class="badge glyphicon glyphicon-{{suggestedOption.icon}}" style="vertical-align:bottom" ng-show="suggestedOption.icon"></span></a></li></ul></div></div><div class="row"><div class="controls controls-row col-xxs-12" style="position: relative"><input style="width:90%" placeholder="{{srvLocale.translations.htmlFormSearchPlaceHolder}}" ng-model="showFilter"><span style="position: absolute; right: 10px" ng-show="forceSearch" ng-click="search()"><span class="glyphicon glyphicon-search"></span></span></div></div><div class="row"><div class="col-xxs-12" ng-show="(suggestedOptions | filter:{selected:true}).length">{{srvLocale.translations.htmlDialogSelectObjectsSugestionFilterIn}} <span ng-repeat="suggestedOption in suggestedOptions | filter:{selected:true}"><a class="active">{{srvLocale.translations.htmlSuggestionName[suggestedOption.name]}}</a> <span ng-hide="$last">,</span></span></div></div><div class="row"><div class="col-xxs-12" ng-show="(suggestedOptions | filter:{selected:true}).length == 0">{{srvLocale.translations.htmlDialogSelectObjectsSugestionFilterIn}} <a>{{srvLocale.translations.htmlSuggestionName[\'all\']}}</a></div></div></div></div><div class="row c4p-dialog-bg c4p-dialog-search-container c4p-color-a" resizecss-height="getResizeHeight() -getPathValue(\'previousElementSibling\', \'offsetHeight\')" sense-opts="{axeY:\'scroll\', watchRefresh:\'visibleElements.length\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div class="col-xxs-12"><ul class="nav nav-stacked"><li ng-repeat="element in (visibleElements = ( elements | listFilter:showFilter:false:\'selected\' | orderBy:\'showName\':false ))"><div ng-click="toggleItem(element.id)" class="clearfix c4p-link5 c4p-select-objects-item"><span class="glyphicon glyphicon-ok icon-large pull-left" ng-class="{\'c4p-invisible\':!selectedIndex[element.id].selected}"></span> <div class="pull-left" ng-controller="ctrlNamedObject" ng-init="init(element.object)" ng-class="{scrollTop:element.scrollTo}"><span>{{itemName}}</span></div><span ng-repeat="suggestedOption in suggestedOptions" class="badge glyphicon glyphicon-{{suggestedOption.icon}}" ng-show="selectedIndex[element.id][suggestedOption.name]"></span></div></li></ul></div></div>'), 
    $templateCache.put("partials/dialog/dialogShowImage.html", '<div class="c4p-modal-img"><div class="c4p-modal-close btn" ng-click="close()"><span class="close">&times;</span></div><div class="c4p-modal-img-container" sense-opts="{name:\'dialog_ctrlShowImage\', axeX:\'swipe\', axeY:\'\', init:\'setSensePanel($sense);\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\', wheelAction:\'zoom\', zoom: true, momentum: 0, zoomMin: 1, zoomMax: 10}" sense-swipeend="onImageSwipe($event)"><div class="center-block" style="width:100%;text-align: center"><img ng-src="{{imageObject.fileUrl}}"></div></div></div>'), 
    $templateCache.put("partials/dialog/edit_object.html", '<div ng-controller="ctrlEditFocus"><div class="modal-header col-xxs-12 c4p-color-gradient0"><ul class="nav nav-pills"><li class="hidden-xs" ng-hide="removeEnabled"><a class="btn disabled"><h5>{{srvLocale.translations.htmlTitleNewObject[objectTypeLocale]}}</h5></a></li><li class="hidden-xs" ng-show="removeEnabled"><a class="btn disabled"><h5>{{srvLocale.translations.htmlTitleEditObject[objectTypeLocale]}}</h5></a></li><li ng-show="removeEnabled"><a class="btn c4p-color-cancel-transparent" ng-click="remove()" ng-disabled="isEditFocused"><span class="glyphicon glyphicon-trash-o"></span></a></li><li class="pull-right"><a class="btn" ng-click="close()" ng-disabled="isEditFocused"><span class="">&times;</span></a></li><li class="pull-right"><a class="btn" ng-click="submit()" ng-disabled="isEditFocused"><div ng-class="{\'c4p-color-ok-transparent\' : objectValidated, \'c4p-color-cancel-transparent\' : !objectValidated}"><span class="glyphicon glyphicon-check"></span></div></a></li><li class="pull-right" ng-show="hasOpenImportContactDialog && !removeEnabled"><a class="btn btn-link" ng-click="openImportContactDialog()" ng-disabled="isEditFocused"><span>{{srvLocale.translations.htmlDialogTextImport}}</span></a></li></ul></div><div class="hidden-xs col-sm-4 c4p-color-gradient0" style="position: absolute;right: 0;top: 70px; z-index: 1052"><div class=""><ul class="nav nav-tabs nav-stacked"><li class="" ng-repeat="group in objectGroups"><a class="btn btn-link" ng-click="editScrollTo(\'group_\'+$index)" ng-disabled="isEditFocused" ng-class="{\'c4p-field-error-message\': (group.warn.length > 0)}" style="text-align: left">{{group.title}}</a></li></ul></div></div><div class="modal-body col-xxs-12 col-sm-8 c4p-color-gradient0"><div class="c4p-container-scroll-y"><div class="c4p-container"><form class=""><marker ng-repeat="group in objectGroups" ng-init="groupIndex = $index"><div class="well c4p-form-group" ng-class-even="\'c4p-color-a-gradient1\'" ng-class-odd="\'c4p-color-gradient0\'"><h5 id="group_{{groupIndex}}" class="c4p-form-group-title">{{group.title}}</h5><fieldset id="field_{{groupIndex}}_{{$index}}" ng-repeat="field in group.groupFields"><c4p-input warn-var="field.warn" title-var="field.title" ng-model="object[field.key]" type-var="field.type" options-var="field.optionList" rows="5" cols="20" ng-change="onFieldChanged(field)" ng-disabled="isEditFocused"></c4p-input></fieldset></div></marker></form></div></div></div></div>'), 
    $templateCache.put("partials/dialog/message.html", '<div class="modal-body c4p-vertical-container"><div class="c4p-dialog c4p-vertical-align"><div class="row"><div class="col-xxs-offset-1 col-xxs-10 col-xs-offset-2 col-xs-8 col-sm-offset-3 col-sm-6 c4p-modal-confirm-container"><div class="row"><div class="c4p-dialog-header c4p-color-gradient0"><div class="btn c4p-padding-w-packed"><span>{{text}}</span></div><div class="pull-right" ng-hide="false"><div class="btn c4p-padding-w-packed c4p-color-cancel-transparent c4p-stroke" ng-click="startSpinner();close()" style="display: inline-block"><span class="c4p-icon-std glyphicon glyphicon-times-circle"></span></div></div></div></div><div class="row"><div class="col-xxs-12 c4p-modal-confirm-cont" sense-opts="{axeY:\'scroll\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div class="container"><div class="c4p-form-group c4p-color-a-gradient1"><ul><li ng-repeat="item in textArray"><span>{{item}}</span></li></ul></div></div></div></div></div></div></div></div>'), 
    $templateCache.put("partials/dialog/pin_init.html", '<div class="modal-body vertical-container"><div class="c4p-dialog vertical-align"><div class="row"><div class="col-xxs-offset-1 col-xxs-10 col-xs-offset-2 col-xs-8 col-sm-offset-3 col-sm-6 c4p-modal-confirm-container"><div class="row"><div class="c4p-dialog-header c4p-color-gradient0"><div class="btn c4p-padding-w-packed"><span>{{srvLocale.translations.htmlDialogPINModePageTitle}}</span></div><div class="pull-right" ng-hide="false"><div class="row c4p-modal-confirm-btns"><div class="btn c4p-padding-w-packed c4p-color-ok-transparent c4p-stroke" ng-click="submit()"><span class="c4p-icon-std glyphicon glyphicon-ok"></span></div><div class="btn c4p-padding-w-packed c4p-color-cancel-transparent c4p-stroke" ng-click="closeDialog()"><span class="c4p-icon-std glyphicon glyphicon-times-circle"></span></div></div></div></div></div><div class="row"><div class="col-xxs-12 c4p-modal-confirm-cont" sense-opts="{axeY:\'scroll\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div class="container"><div class="c4p-form-group c4p-color-a-gradient1"><form class="form-horizontal c4p-color-a-gradient1" name="pinForm" novalidate><div class="form-group row c4p-color-a-gradient1" ng-class="{\'has-error\':(pinForm.code.$dirty && pinForm.code.$invalid)}"><span class="help-inline" ng-show="!pinForm.code.$dirty || !pinForm.code.$invalid">{{srvLocale.translations.htmlDialogPINModeInit}}</span> <span ng-show="pinForm.code.$dirty && pinForm.code.$invalid"><span class="help-inline c4p-field-error-message" ng-show="pinForm.code.$error.required">{{srvLocale.translations.htmlDialogPINModeRequired}}</span></span><input id="code" name="code" class="form-control" type="password" ng-model="pinCode" required></div></form></div></div><div ng-style="{minHeight:getResizeHeight()+\'px\'}"></div></div></div></div></div></div></div>'), 
    $templateCache.put("partials/dialog/pin_locked.html", '<div class="modal-body vertical-container"><div class="c4p-dialog vertical-align"><div class="row"><div class="col-xxs-offset-1 col-xxs-10 col-xs-offset-2 col-xs-8 col-sm-offset-3 col-sm-6 c4p-modal-confirm-container"><div class="row"><div class="c4p-dialog-header c4p-color-gradient0"><div class="btn c4p-padding-w-packed"><span>{{srvLocale.translations.htmlDialogPINModePageTitle}}</span></div><div class="pull-right" ng-hide="false"><div class="row c4p-modal-confirm-btns"><div class="btn c4p-padding-w-packed c4p-color-ok-transparent c4p-stroke" ng-click="submit()"><span class="c4p-icon-std glyphicon glyphicon-ok"></span></div><div class="btn c4p-padding-w-packed c4p-color-cancel-transparent c4p-stroke" ng-click="closeDialog()"><span class="c4p-icon-std glyphicon glyphicon-times-circle"></span></div></div></div></div></div><div class="row"><div class="col-xxs-12 c4p-modal-confirm-cont" sense-opts="{axeY:\'scroll\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div class="container"><div class="c4p-form-group c4p-color-a-gradient1"><form class="form-horizontal c4p-color-a-gradient1" name="pinForm" novalidate><div class="form-group row c4p-color-a-gradient1" ng-class="{\'has-error\':(pinForm.code.$dirty && pinForm.code.$invalid)}"><span class="help-inline" ng-hide="(pinForm.code.$dirty && pinForm.code.$invalid) || oldPinCodeError">{{srvLocale.translations.htmlDialogPINModeLocked}}</span> <span ng-show="pinForm.code.$dirty && pinForm.code.$invalid"><span class="help-inline c4p-field-error-message" ng-show="pinForm.code.$error.required">{{srvLocale.translations.htmlDialogPINModeRequired}}</span></span> <span ng-show="oldPinCodeError"><span class="help-inline c4p-field-error-message">{{srvLocale.translations.htmlDialogPINModeKO}}</span></span><input id="code" name="code" class="form-control" type="password" ng-model="pinCode" required></div></form></div></div><div ng-style="{minHeight:getResizeHeight()+\'px\'}"></div></div></div></div></div></div></div>'), 
    $templateCache.put("partials/dialog/pin_modify.html", '<div class="modal-body vertical-container"><div class="c4p-dialog vertical-align"><div class="row"><div class="col-xxs-offset-1 col-xxs-10 col-xs-offset-2 col-xs-8 col-sm-offset-3 col-sm-6 c4p-modal-confirm-container"><div class="row"><div class="c4p-dialog-header c4p-color-gradient0"><div class="btn c4p-padding-w-packed"><span>{{srvLocale.translations.htmlDialogPINModePageTitle}}</span></div><div class="pull-right" ng-hide="false"><div class="row c4p-modal-confirm-btns"><div class="btn c4p-padding-w-packed c4p-color-ok-transparent c4p-stroke" ng-click="submitNewPinCode()"><span class="c4p-icon-std glyphicon glyphicon-ok"></span></div><div class="btn c4p-padding-w-packed c4p-color-cancel-transparent c4p-stroke" ng-click="closeDialog()"><span class="c4p-icon-std glyphicon glyphicon-times-circle"></span></div></div></div></div></div><div class="row"><div class="col-xxs-12 c4p-modal-confirm-cont" sense-opts="{axeY:\'scroll\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}" style="height:13em"><div class="container"><div class="c4p-form-group c4p-color-a-gradient1"><form class="form-horizontal c4p-color-a-gradient2" name="pinForm" novalidate><div class="form-group row c4p-color-a-gradient2" ng-class="{\'has-error\':((pinForm.oldPinCode.$dirty && pinForm.oldPinCode.$invalid) || oldPinCodeError)}"><div class="row"><span ng-hide="(pinForm.oldPinCode.$dirty && pinForm.oldPinCode.$invalid) || oldPinCodeError">{{srvLocale.translations.htmlDialogPINModeOld}}</span> <span ng-show="pinForm.oldPinCode.$dirty && pinForm.oldPinCode.$invalid"><span class="help-inline c4p-field-error-message" ng-show="pinForm.oldPinCode.$error.required">{{srvLocale.translations.htmlDialogPINModeRequired}}</span></span> <span ng-show="oldPinCodeError"><span class="help-inline c4p-field-error-message">{{srvLocale.translations.htmlDialogPINModeKO}}</span></span><input id="oldPinCode" name="oldPinCode" class="form-control" type="password" ng-model="oldPinCode" required></div></div><div class="form-group row c4p-color-a-gradient2" ng-class="{\'has-error\':((pinForm.newPinCode.$dirty && pinForm.newPinCode.$invalid) || newPinCodeError)}"><div class="row"><span ng-hide="(pinForm.newPinCode.$dirty && pinForm.newPinCode.$invalid) || newPinCodeError">{{srvLocale.translations.htmlDialogPINModeNew}}</span> <span ng-show="pinForm.newPinCode.$dirty && pinForm.newPinCode.$invalid"><span class="help-inline c4p-field-error-message" ng-show="pinForm.newPinCode.$error.required">{{srvLocale.translations.htmlDialogPINModeRequired}}</span></span> <span ng-show="sameAsOldPin()"><span class="help-inline c4p-field-error-message">{{srvLocale.translations.htmlDialogPINModeDifferent}}</span></span><input id="newPinCode" name="newPinCode" class="form-control" type="password" ng-model="newPinCode" required></div></div></form></div></div><div ng-style="{minHeight:getResizeHeight()+\'px\'}"></div></div></div></div></div></div></div>'), 
    $templateCache.put("partials/dialog/timeline.html", '<div resize-opts="{name:\'timeline_header\'}"><div class="row"><div class="c4p-dialog-header c4p-color-gradient0"><div class="btn c4p-color-action-transparent" ng-click="close()"><span class="glyphicon glyphicon-arrow-left"></span></div><div class="btn c4p-padding-w-packed c4p-color-action-transparent"><span>{{objectName}}</span></div><div class="btn c4p-padding-w-packed"><div class="c4p-icon-std glyphicon">&nbsp;</div></div></div></div></div><div class="row c4p-dialog-bg" resizecss-height="getResizeHeight() -getPathValue(\'previousElementSibling\', \'offsetHeight\')"><div class="col-xxs-12 c4p-dialog-edit-container c4p-color-gradient0" sense-opts="{axeY:\'scroll\', init: \'setSenseScroller($sense)\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\', pageSelector: \'marker\'}" sense-afterscrollend="onSenseScrollEnd($event)" style="height: 100%"><c4p-timeline data="buildTimelineData()"></c4p-timeline></div></div>'), 
    $templateCache.put("partials/guider/connection.html", '<div ng-controller="ctrlConfig" class=""><div class=""><div class="row"><h3 class="col-xxs-12 col-sm-offset-3 col-sm-6 text-center white login-header">{{translate(\'htmlGuiderPageTitle\')}}</h3></div><form class="form-horizontal" name="loginForm" style="min-height: 300px"><div class="form-group row"><div class="col-xxs-12 col-sm-offset-3 col-sm-6"><c4p-input type="mail" class="form-control" ng-model="configLogin.email" placeholder="{{srvLocale.translations.htmlFormEmailPlaceHolder}}" required ng-disabled="isEditFocused"></c4p-input></div></div><div class="form-group row"><div class="col-xxs-12 col-sm-offset-3 col-sm-6"><c4p-input class="form-control" ng-model="configLogin.password" placeholder="{{srvLocale.translations.htmlFormPasswordPlaceHolder}}" type="password" required ng-disabled="isEditFocused"></c4p-input></div></div><div class="row"><button class="btn btn-primary col-xxs-12 col-sm-offset-3 col-sm-3" ng-click="c4pConnection()" ng-disabled="isEditFocused">{{srvLocale.translations.htmlButtonLogin}}</button> <button class="btn btn-link white col-xxs-12 col-sm-3" ng-click="gotoSlide(pageGuider, slideGuiderRequestPassword)" ng-disabled="isEditFocused">{{srvLocale.translations.htmlButtonPasswordForgotten}}</button></div><div class="form-group row"><button class="btn btn-link pull-left white col-xxs-12 col-sm-offset-6 col-sm-3" ng-hide="isEditFocused"><c4p-check ng-model="rememberPassword" readonly></c4p-check><label>{{translate(\'htmlGuiderFormStaySignedIn\')}}</label></button></div></form></div></div>'), 
    $templateCache.put("partials/guider/footer.html", '<ul class="nav nav-pills" resize-opts="{name:\'guider_footer\'}"><li><a class="btn btn-link" ng-click="doubleSetDemo(true)" ng-disabled="isEditFocused"><span style="color: grey;font-size: 50%"><span app-version=""></span><span>{{srvConfig.c4pBuildDate}} {{srvConfig.env}}</span> <span ng-show="srvConfig.c4pConfig.exposeBetaFunctionalities">Beta</span></span></a></li><li class="pull-right"><a class="btn pull-right" ng-click="openDialogSendFeedbackReport(\'Login Feedback\')" ng-hide="isEditFocused" ng-disabled="isEditFocused" c4p-waiting-click=""><span class="c4p-icon-std glyphicon glyphicon-question"></span></a></li></ul>'), 
    $templateCache.put("partials/guider/header.html", '<ul class="nav nav-pills" resize-opts="{name:\'guider_header\'}"><li ng-show="slide != slideGuiderRegister"><a class="btn btn-link" ng-click="gotoRegister()" ng-disabled="isEditFocused">{{srvLocale.translations.htmlButtonRegister}}</a></li><li class="dropdown pull-right" ng-hide="isEditFocused"><a class="dropdown-toggle" data-toggle="dropdown">{{srvLocale.lang.title}} <b class="caret"></b></a><ul class="dropdown-menu" role="menu" aria-labelledby="drop3"><li ng-repeat="link in srvLocale.langs"><a class="white smaller-70" ng-click="srvLocale.setLang(link)">{{link.title}}</a></li></ul></li></ul>'), 
    $templateCache.put("partials/guider/main.html", '<div class="c4p-login-body c4p-container" ng-controller="ctrlEditFocus"><header ng-include="\'partials/guider/header.html\'"></header><section class="c4p-container-scroll-y" resizecss-height="responsivePageHeight() -getResizePathValue(\'guider_header\', \'\', \'offsetHeight\') -getResizePathValue(\'guider_footer\', \'\', \'offsetHeight\')"><div class="c4p-container"><div ng-switch="" on="getSlideFromGuider()" class="col-xxs-12 c4p-animate-switch-container"><div ng-switch-when="connection" class="c4p-animate-switch"><div ng-include="\'partials/guider/connection.html\'"></div></div><div ng-switch-when="validation" class="col-xxs-12 c4p-animate-switch"><div ng-include="\'partials/guider/validation.html\'"></div></div><div ng-switch-when="requestPassword" class="col-xxs-12 c4p-animate-switch"><div ng-include="\'partials/guider/requestPassword.html\'"></div></div><div ng-switch-when="validationReceiveRes" class="col-xxs-12 c4p-animate-switch"><div ng-include="\'partials/guider/validationReceiveRes.html\'"></div></div><div ng-switch-default="" class="col-xxs-12 c4p-animate-switch"><div ng-include="\'partials/guider/register.html\'"></div></div></div></div></section><footer ng-include="\'partials/guider/footer.html\'"></footer></div>'), 
    $templateCache.put("partials/guider/register.html", '<div ng-controller="ctrlConfig" class=""><div class=""><div class="row"><h3 class="col-xxs-12 col-sm-offset-3 col-sm-6 text-center white login-header">{{translate(\'htmlGuiderPageTitle\')}}</h3></div><form class="form-horizontal" name="loginForm" novalidate style="min-height: 300px"><div class="form-group row"><div class="col-xxs-12 col-sm-offset-3 col-sm-6"><c4p-input type="mail" class="form-control" ng-model="configLogin.email" placeholder="{{srvLocale.translations.htmlFormEmailPlaceHolder}}" required ng-disabled="isEditFocused"></c4p-input></div></div><div class="row"><a class="btn btn-primary col-xxs-12 col-sm-offset-3 col-sm-3" ng-click="createAccount()" ng-disabled="isEditFocused">{{srvLocale.translations.htmlButtonRegister}}</a> <a class="btn btn-link white col-xxs-12 col-sm-3" ng-click="gotoLogin()" ng-disabled="isEditFocused">{{srvLocale.translations.htmlTextAlreadyRegistered}}</a></div></form></div></div>'), 
    $templateCache.put("partials/guider/requestPassword.html", '<div ng-controller="ctrlConfig" class="c4p-vertical-container"><div class=""><div class="row"><h3 class="col-xxs-12 col-sm-offset-3 col-sm-6 text-center white login-header">{{translate(\'htmlGuiderPageTitle\')}}</h3><h7 class="col-xxs-12 col-sm-offset-3 col-sm-6 white bigger">{{translate(\'htmlGuiderTextPasswordForgotten\')}}</h7></div><form class="form-horizontal" name="forgottenPwdForm" novalidate style="min-height: 300px"><div class="form-group row" ng-class="{\'has-error\':forgottenPwdForm.$invalid}"><div class="col-xxs-12 col-sm-offset-3 col-sm-6"><c4p-input class="form-control" ng-model="configLogin.email" placeholder="{{srvLocale.translations.htmlFormEmailPlaceHolder}}" type="mail" required></c4p-input></div></div><div class="row"><button ng-click="requestPassword()" class="btn btn-primary col-xxs-12 col-sm-offset-3 col-sm-3" ng-disabled="forgottenPwdForm.$invalid || isEditFocused">{{translate(\'htmlButtonRequestPassword\')}}</button> <button class="btn btn-link white col-xxs-12 col-sm-3" ng-click="gotoLogin()" ng-disabled="isEditFocused">{{srvLocale.translations.htmlButtonLogin}}</button></div></form></div></div>'), 
    $templateCache.put("partials/guider/validation.html", '<div class=""><div class=""><div class="row"><h3 class="col-xxs-12 col-sm-offset-3 col-sm-6 text-center white login-header">{{translate(\'htmlGuiderPageTitle\')}}</h3></div><div class="row"><span class="pull-left col-sm-offset-3 white" ng-switch="a4pSpinnerState"><span class="c4p-icon-std glyphicon glyphicon-fw glyphicon-refresh glyphicon-spin" ng-switch-when="run"></span> <span class="c4p-icon-std glyphicon glyphicon-fw glyphicon-refresh alert-error" ng-switch-when="doneWithPb"></span> <span class="c4p-icon-std glyphicon glyphicon-fw glyphicon-refresh close" ng-switch-when="offline"></span> <span class="c4p-icon-std glyphicon glyphicon-fw glyphicon-refresh" ng-switch-default=""></span> <span ng-show="(srvData.objectsToDownload.length + srvData.objectsToSave.length)">{{srvData.objectsToDownload.length + srvData.objectsToSave.length}}</span></span> <span class="col-xxs-11 col-sm-6 white">{{translate(\'htmlGuiderTextValidation\')}}</span></div><div class="row"><a4p-carousel class="col-xxs-12 col-sm-offset-3 col-sm-6"><a4p-slide active="true"><span ng-bind-html="to_trusted(srvLocale.translations.htmlGuiderTextWaiting)"></span></a4p-slide></a4p-carousel></div></div></div>'), 
    $templateCache.put("partials/guider/validationReceiveRes.html", '<div class=""><div class=""><div class="row"><h3 class="col-xxs-12 col-sm-offset-3 col-sm-6 text-center white login-header">{{translate(\'htmlGuiderPageTitle\')}}</h3></div><div class="row"><div class="form-group error col-xxs-12 col-sm-offset-3 col-sm-6 white"><label class="control-label">{{translate(messageGuider)}}</label></div></div><div class="row" style="min-height: 300px"><button class="btn btn-primary col-xxs-12 col-sm-offset-3 col-sm-4" ng-click="gotoLogin()">{{translate(\'htmlButtonLogin\')}}</button> <a class="btn btn-link white col-xxs-12 text-center col-sm-2" ng-click="gotoSlide(pageGuider, slideGuiderRequestPassword)">{{translate(\'htmlButtonPasswordForgotten\')}}</a></div></div></div>'), 
    $templateCache.put("partials/meeting/header.html", '<div class="meeting-header row" resize-opts="{name:\'meeting_header\'}"><div class="col-xxs-1" style="text-align: left"><div class="btn c4p-padding-w-packed" ng-click="quitMeetingView()" ng-hide="modeLock"><span class="c4p-icon-std glyphicon glyphicon-chevron-left"></span></div></div><div class="col-xxs-10" style="text-align: center"><div class="btn c4p-padding-w-packed" ng-show="!itemNameEditable" ng-click="eventItemName = srvNav.item.name;editMeetingTitle()">{{srvNav.current.itemName}}</div><div class="btn" ng-show="itemNameEditable"><input type="text" ng-model="eventItemName" class=""><span class="c4p-padding-w-packed" ng-click="saveItemName(eventItemName)"><span class="c4p-icon-std glyphicon glyphicon-ok"></span></span></div><div class="btn dropdown" ng-show="!itemNameEditable"><span role="button" class="dropdown-toggle c4p-icon-std glyphicon glyphicon-caret-down"></span><ul style="overflow-x:hidden" class="dropdown-menu c4p-dropdown-menu c4p-details-menu-align" role="menu"><li class="c4p-color-gradient0" ng-hide="modeLock" ng-class="{\'disabled\': actionMap.createNewNote.disabled}" ng-click="doAction(\'createNewNote\')"><span class="c4p-icon-std glyphicon glyphicon-{{actionMap.createNewNote.icon}}"></span> <span>{{srvLocale.translations.htmlActionName.createNewNote}}</span></li><li class="c4p-color-gradient0" ng-hide="modeLock" ng-class="{\'disabled\': actionMap.createNewReport.disabled}" ng-click="doAction(\'createNewReport\')"><span class="c4p-icon-std glyphicon glyphicon-{{actionMap.createNewReport.icon}}"></span> <span>{{srvLocale.translations.htmlActionName.createNewReport}}</span></li><li class="c4p-color-gradient0" ng-hide="modeLock" ng-class="{\'disabled\': actionMap.createNewEmail.disabled}" ng-click="doAction(\'createNewEmail\')"><span class="c4p-icon-std glyphicon glyphicon-{{actionMap.createNewEmail.icon}}"></span> <span>{{srvLocale.translations.htmlActionName.createNewEmail}}</span></li></ul></div></div><div class="col-xxs-1" style="text-align: right"><div ng-click="togglePresentation();toggleFullScreen()" ng-show="plans.length > 0" class="toggle-mode-button"><span class="c4p-icon-std glyphicon c4p-stroke" ng-class="{\'glyphicon-play\':!isFullScreen, \'glyphicon-stop\':isFullScreen}"></span></div></div></div>'), 
    $templateCache.put("partials/meeting/main.html", '<div ng-controller="ctrlAction" ng-init="watchSrvNav()"><div ng-controller="ctrlViewer"><div ng-controller="ctrlMeeting" resize-before-window="beforeWindowSizeChanged()" class="meeting-body"><div ng-include="\'partials/meeting/header.html\'"></div><div id="a4pMeetingSide" class="" style="display: inline-block; vertical-align: top" ng-include="\'partials/meeting/meeting_aside.html\'" ng-style="{width:getToolbarWidth()+\'px\', height:(getResizeHeight() -getResizePathValue(\'meeting_header\', \'\', \'offsetHeight\'))+\'px\'}"></div><div class="meeting-container" ng-show="showMenu" resizecss-height="getResizeHeight() - getResizePathValue(\'meeting_header\', \'\', \'offsetHeight\')" ng-style="{width:getAsideWidth()+\'px\'}" ng-include="\'\'+sidePanel" ng-click="hideMenuMeeting"></div><div id="a4pMeetingPage" ng-include="\'\'+mainPanel" c4p-show="!responsiveIsOnePageFormat()" resizecss-height="getResizeHeight() - getResizePathValue(\'meeting_header\', \'\', \'offsetHeight\')" ng-style="{width:(getResizeWidth() - getAsideWidth() - getToolbarWidth())+\'px\'}" style="display: inline-block; vertical-align: top; background-color: rgba(255,255,255, 0.10 )"></div></div></div></div>'), 
    $templateCache.put("partials/meeting/meeting_aside.html", '<ul class="c4p-icon-list meeting-plan" resize-opts="{name:\'plan_section\'}" ng-class="{\'inactive\': (selectedActionItem != \'plan\')}"><li class="c4p-icon-list-item" ng-click="setActionItem(\'plan\', \'side\')"><span class="c4p-icon-std glyphicon glyphicon-{{actionItems[\'plan\'].icon}}"></span></li></ul><ul class="c4p-icon-list meeting-link-obj" resize-opts="{name:\'link_obj_section\'}" ng-class="{\'inactive\': (selectedActionItem == \'plan\')}"><li class="c4p-icon-list-item" ng-click="setObjectLinkNav()"><span class="c4p-icon-std glyphicon glyphicon-{{actionItems[\'others\'].icon}}"></span></li></ul><div ng-style="{width:getToolbarWidth()+\'px\', height:(getResizeHeight() -getResizePathValue(\'plan_section\', \'\', \'offsetHeight\')- getResizePathValue(\'link_obj_section\', \'\', \'offsetHeight\') - getResizePathValue(\'meeting_header\', \'\', \'offsetHeight\') )+\'px\'}" style="text-align: center" class="meeting-aside">&nbsp;</div><div class="btn btn-danger" ng-class="{\'active\' : dropOver}" ng-show="dndActive" ng-controller="ctrlMeetingRemoveDrop" sense-opts="{name:\'dropObjectTrash\'}" sense-dndstart="dndStart($event)" sense-dndend="dndEnd($event)" sense-dndcancel="dndCancel($event)" sense-dropoverenter="dropOverEnter($event)" sense-dropoverleave="dropOverLeave($event)" sense-dropend="dropEnd($event)" style="position:absolute;z-index:1041;bottom:0;left:0;text-align: center" ng-style="{width:(getToolbarWidth()+ getAsideWidth()) +\'px\'}"><span class="c4p-icon-std glyphicon glyphicon-trash"></span></div>'), 
    $templateCache.put("partials/meeting/meeting_draggable_summarized_item.html", '<div class="col-xxs-12 c4p-link5" ng-controller="ctrlDragObject" ng-init="init(item)" sense-opts="{bubble:true, watchRefresh:[\'srvNav.item\', \'srvNav.holdItem\']}" sense-shorttap="tapOnLinkedObject(item, firstSingleTap(item.id.dbid));" sense-doubletap="firstSingleTap(\'\');tapOnLinkedObject(item)" sense-longdragoverenter="dragOverEnter($event)" sense-longdragoverleave="dragOverLeave($event)" sense-longdragstart="dragStart($event)" sense-longdragmove="dragMove($event)" sense-longdragend="dragEnd($event)" sense-longdragcancel="dragCancel($event)"><div ng-include="\'partials/navigation/cards/summarized_item.html\'" ng-class="{\'c4p-hover-drag\':srvNav.item && srvConfig.c4pConfig.exposeDraggableHover, \'c4p-border-drag\':srvNav.item && srvConfig.c4pConfig.exposeDraggableBorder}" style="border-width: 1px;padding:2px"></div></div>'), 
    $templateCache.put("partials/meeting/meeting_linked_object.html", '<div class="meeting-menu-container"><div class="meeting-detail-hdr meeting-link-obj"><div class="btn btn-xs" ng-click="" style="font-size: 145%">{{srvLocale.translations.htmlMeetingLinkObject}}</div><div class="pull-right"><div class="btn dropdown"><span role="button" class="dropdown-toggle c4p-icon-std glyphicon glyphicon-plus"></span><ul style="overflow-x:hidden" class="dropdown-menu c4p-dropdown-menu c4p-details-menu-align" role="menu"><li class="c4p-color-gradient0" ng-hide="modeLock" ng-class="{\'disabled\': actionMap.createNewNote.disabled}" ng-click="doAction(\'createNewNote\')"><span class="c4p-icon-std glyphicon glyphicon-{{actionMap.createNewNote.icon}}"></span> <span>{{srvLocale.translations.htmlActionName.createNewNote}}</span></li><li class="c4p-color-gradient0" ng-hide="modeLock" ng-class="{\'disabled\': actionMap.createNewReport.disabled}" ng-click="doAction(\'createNewReport\')"><span class="c4p-icon-std glyphicon glyphicon-{{actionMap.createNewReport.icon}}"></span> <span>{{srvLocale.translations.htmlActionName.createNewReport}}</span></li><li class="c4p-color-gradient0" ng-hide="modeLock" ng-class="{\'disabled\': actionMap.createNewEmail.disabled}" ng-click="doAction(\'createNewEmail\')"><span class="c4p-icon-std glyphicon glyphicon-{{actionMap.createNewEmail.icon}}"></span> <span>{{srvLocale.translations.htmlActionName.createNewEmail}}</span></li><li class="c4p-color-gradient0" ng-hide="modeLock" ng-class="{\'disabled\': actionMap.createNewPicture.disabled}" ng-click="meetingTakePicture()"><span class="c4p-icon-std glyphicon glyphicon-{{actionMap.createNewPicture.icon}}"></span> <span>{{srvLocale.translations.htmlActionName.createNewPicture}}</span></li><li class="c4p-color-gradient0" ng-hide="modeLock" ng-class="{\'disabled\': actionMap.createNewPicture.disabled}" ng-click="doAction(\'addDocuments\')"><span class="c4p-icon-std glyphicon glyphicon-{{actionMap.addDocuments.icon}}"></span> <span>{{srvLocale.translations.htmlActionName.addDocuments}}</span></li></ul></div></div></div><div ng-controller="ctrlSingleTap" class="meeting-link-obj" sense-opts="{name:\'detailed_links_wrapper\', axeY:\'scroll\', watchRefresh:[\'srvNav.itemRelatedGroupList\', \'srvNav.item\', \'linksTimestamp\'], init: \'setLinksScroller($sense)\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\', pageSelector: \'div.c4p-related-card\'}" sense-afterscrollend="onLinksScrollEnd($event)" resize-opts="{name:\'meeting_links_wrapper\'}" resizecss-height="getResizeHeight() -getResizePathValue(\'meeting_header\', \'\', \'offsetHeight\') -getPathValue(\'previousElementSibling\', \'offsetHeight\')"><div resize-opts="{name:\'detailed_links_scroller\', watchRefresh:[\'srvNav.itemRelatedGroupList\', \'srvNav.item\']}"><div class="c4p-related-card" ng-repeat="group in srvNav.itemRelatedGroupList" ng-show="group.type != \'Plan\'"><ul class="c4p-related-card-list"><li class="c4p-related-card-header" ng-click="toggleShowGroup(group)" style="border-bottom: 1px solid black; border-top: 1px solid black"><span>{{group.name}}</span><span class="c4p-aside-count">{{group.size}}</span> <span class="glyphicon pull-right" ng-class="{\'glyphicon-chevron-down\': !group.show, \'glyphicon-chevron-up\':group.show}"></span></li><li class="meeting-list-item" ng-repeat="link in srvNav.itemRelatedList[group.type]" ng-show="group.show" ng-class="{active: (link.item == documentObject)}"><div class="row {{{true: \'c4p-related-card-item-1st\', false: \'c4p-related-card-item-others\'}[$first]}}"><div class="col-xxs-11 c4p-related-card-holder"><span ng-include="\'partials/meeting/meeting_draggable_summarized_item.html\'" ng-init="item = link.item"></span></div><div class="col-xxs-1 c4p-related-card-holder"><span ng-show="singleTapFocusId == link.item.id.dbid" class="pull-right glyphicon glyphicon-chevron-right"></span></div></div></li></ul></div></div></div><div class="half-circle-left c4p-color-gradient0 c4p-click-intercepted" style="position:absolute; top:50%; right: 0; margin-top:-4em;box-shadow: 0px 0px 10px 4px rgba(0, 0, 0, 0.5);z-index: 8" ng-show="responsiveIsOnePageFormat()" ng-class="{\'c4p-dropzone-active\': dndActive, \'c4p-dropzone-active-hover\': dropOver}" ng-click="" ng-controller="ctrlMeetingObjLinkDrop" sense-opts="{name:\'dropObjectMeeting\'}" sense-dndstart="dndStart($event)" sense-dndend="dndEnd($event)" sense-dndcancel="dndCancel($event)" sense-dropoverenter="dropOverEnter($event)" sense-dropoverleave="dropOverLeave($event)" sense-dropend="dropEnd($event)" style="background-color: rgba(0,255,0, 0.6); height: 4em"><div class="c4p-icn-side-drop"></div><div class="c4p-txt-side-drop"><div class="rotate-txt"><div class="c4p-no-dot-container"><span class="c4p-no-dot:selectedMeetingPlan.title;">{{selectedMeetingPlan.title}}</span></div></div></div></div></div>'), 
    $templateCache.put("partials/meeting/meeting_object_editor.html", '<div ng-switch="" on="editorType" class="meeting-content"><div ng-switch-when="Document"><span ng-include="\'partials/meeting/meeting_object_editor_doc.html\'"></span></div><div ng-switch-when="Contact"><span ng-include="\'partials/meeting/meeting_object_editor_contact.html\'"></span></div><div ng-switch-when="Nextmeeting"><span ng-include="\'partials/meeting/meeting_object_editor_nextmeeting.html\'"></span></div><div ng-switch-when="Description"><span ng-include="\'partials/meeting/meeting_object_editor_Description.html\'"></span></div><div ng-switch-default="">type undefined</div></div>'), 
    $templateCache.put("partials/meeting/meeting_object_editor_contact.html", "contact editor, blabla"), 
    $templateCache.put("partials/meeting/meeting_object_editor_description.html", '<c4p-input ng-model="srvNav.item.description" type="textarea" rows="5"></c4p-input>'), 
    $templateCache.put("partials/meeting/meeting_object_editor_doc.html", '<div class="meeting-content-container"><div class="meeting-content"><div class="row"><div class="col-xxs-1"><input type="text" class="form-control" placeholder="{{selectedMeetingPlan.pos+1}}" disabled></div><div class="col-xxs-11"><input type="text" class="form-control" placeholder="todelete" ng-model="selectedMeetingPlan.title"></div></div><div ng-class="{\'c4p-meeting-info\': currentMeetingItem == null }"><div ng-class="{\'active\' : dropOver}" ng-show="dndActive" ng-controller="ctrlMeetingObjLinkDrop" sense-opts="{name:\'dropObjectMeeting\'}" sense-dndstart="dndStart($event)" sense-dndend="dndEnd($event)" sense-dndcancel="dndCancel($event)" sense-dropoverenter="dropOverEnter($event)" sense-dropoverleave="dropOverLeave($event)" sense-dropend="dropEnd($event)" style="background-color: rgba(0,255,0, 0.6); height: 4em">{{srvLocale.translations.htmlMeetingDropItemHere}}</div><div class="c4p-related-card-holder" c4p-show="currentMeetingItem != null"><span ng-include="\'partials/meeting/meeting_draggable_summarized_item.html\'" ng-init="item = currentMeetingItem"></span></div><div ng-show="currentMeetingItem == null">{{srvLocale.translations.htmlMeetingNoElementSelected}}</div></div><br><div style="border-bottom: 1px dotted black"></div><br><div class="row"><div class="btn c4p-meeting-info-txt" ng-click="setActionItem(\'select\', \'side\')" ng-show="currentMeetingItem == null">{{srvLocale.translations.htmlMeetingAdd}}</div><div class="btn c4p-meeting-info-txt" ng-click="setActionItem(\'select\', \'side\')" ng-show="currentMeetingItem != null">{{srvLocale.translations.htmlMeetingChange}}</div><div class="btn c4p-meeting-info-txt" ng-click="meetingTakePictureObj()" ng-show="currentMeetingItem == null">{{srvLocale.translations.htmlActionName.createNewPicture}}</div><div class="btn c4p-meeting-info-txt" ng-click="doActionObj(\'editItem\', currentMeetingItem)" ng-show="currentMeetingItem != null">{{srvLocale.translations.htmlActionName.editItem}}</div></div></div></div>'), 
    $templateCache.put("partials/meeting/meeting_object_editor_nextmeeting.html", "<div ng-click=\"doAction('dupMeeting')\">Click here to create a meeting base on this on</div>"), 
    $templateCache.put("partials/meeting/meeting_object_viewer.html", '<div class="c4p-viewer" ng-class="{\'c4p-viewer-fullscreen\':isFullScreen, \'c4p-viewer-windowed\':!isFullScreen}"><div ng-style="{width:getViewerWidth()+\'px\', height:getViewerHeight()+px}" resize-opts="{name:\'meeting_ctrlViewerContent\'}" sense-opts="{name:\'meeting_ctrlViewerContent\', axeX:\'swipe\', axeY:\'\', init:\'setSensePanel($sense);\', watchRefresh:\'isFullScreen\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\', wheelAction:\'zoom\', zoom: true, momentum: 0, zoomMin: 1, zoomMax: 10}" sense-swipeend="onDocumentSwipe($event)"><div ng-switch="" on="getDocumentObject()"><div ng-switch-when="null"><c4p-input ng-model="srvNav.item.description" type="textarea" rows="5"></c4p-input></div><div ng-switch-default=""><c4p-viewer-content obj-var="documentObject"></c4p-viewer-content></div></div></div><div ng-click="toggleFullScreen()" ng-show="documentList.length > 0" class="toggle-mode-button"><span class="icon-3x glyphicon c4p-stroke" ng-class="{\'glyphicon-resize-full\':!isFullScreen, \'glyphicon-resize-small\':isFullScreen}"></span></div></div>'), 
    $templateCache.put("partials/meeting/meeting_plan.html", '<div class="meeting-menu-container"><div class="meeting-detail-hdr meeting-plan"><div class="btn btn-xs" ng-click="updateMeetingObj(null)" style="font-size: 145%">{{srvLocale.translations.htmlMeetingPlan}}</div><div class="pull-right"><div class="btn" ng-click="insertAfterMeetingElement(null)"><span class="c4p-icon-std glyphicon glyphicon-plus"></span></div></div></div><div class="meeting-plan" resizecss-height="getResizeHeight() -getResizePathValue(\'meeting_header\', \'\', \'offsetHeight\') -getPathValue(\'previousElementSibling\', \'offsetHeight\')" sense-opts="{axeY:\'scroll\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div><ul class="nav nav-pills nav-stacked" ng-repeat="mObj in plans"><li class="meeting-list-item"><div class="" ng-class="{\'active\' : dropOver}" ng-show="dndActive && (dragMeetingElementIdx > $index)" ng-controller="ctrlMeetingElementDrop" sense-opts="{name:\'dropObjectTrash\', callApply: true }" sense-dndstart="dndStart($event)" sense-dndend="dndEnd($event)" sense-dndcancel="dndCancel($event)" sense-dropoverenter="dropOverEnter($event)" sense-dropoverleave="dropOverLeave($event)" sense-dropend="dropEnd($event, $index)" style="text-align: center">{{srvLocale.translations.htmlMeetingMoveItem}}</div></li><li class="meeting-list-item" sense-tap="updateMeetingObj(mObj); setActionItem(\'plan\', \'main\')" ng-class="{active: (mObj == selectedMeetingPlan)}" style="border-top: 1px solid black"><div ng-controller="ctrlMeetingElementDrag" ng-init="initMeetingElemDrag(mObj)" sense-longdragoverenter="dragOverEnter($event)" sense-longdragoverleave="dragOverLeave($event)" sense-longdragstart="dragStart($event, $index)" sense-longdragmove="dragMove($event)" sense-longdragend="dragEnd($event)" sense-longdragcancel="dragCancel($event)"><div style="width:20%; overflow:hidden;display: inline-block"><img class="media-object" ng-src="{{meetingThumb}}" style="height:75px;-webkit-background-size: contain"></div><div class="media-body c4p-no-dot-container" style="width:80%;display: inline-block; vertical-align: top"><span class="media-heading">{{mObj.pos+1}}.</span> <span class="media-heading">{{mObj.title}}</span><br></div></div></li><li class="meeting-list-item"><div class="" ng-class="{\'active\' : dropOver}" ng-show="dndActive && (dragMeetingElementIdx < $index)" ng-controller="ctrlMeetingElementDrop" sense-opts="{name:\'dropObjectTrash\', callApply: true }" sense-dndstart="dndStart($event)" sense-dndend="dndEnd($event)" sense-dndcancel="dndCancel($event)" sense-dropoverenter="dropOverEnter($event)" sense-dropoverleave="dropOverLeave($event)" sense-dropend="dropEnd($event, $index)" style="text-align: center">{{srvLocale.translations.htmlMeetingMoveItem}}</div></li></ul></div></div></div>'), 
    $templateCache.put("partials/meeting/meeting_plan_viewer.html", '<div ng-switch="" on="getMeetingViewMode()"><div ng-switch-when="presentation"><div class="c4p-viewer" ng-class="{\'c4p-viewer-fullscreen\':isFullScreen, \'c4p-viewer-windowed\':!isFullScreen}"><div ng-style="{width:getViewerWidth()+\'px\', height:getViewerHeight()+px}" resize-opts="{name:\'meeting_ctrlViewerContent\'}" sense-opts="{name:\'meeting_ctrlViewerContent\', axeX:\'swipe\', axeY:\'\', init:\'setSensePanel($sense);\', watchRefresh:\'isFullScreen\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\', wheelAction:\'zoom\', zoom: true, momentum: 0, zoomMin: 1, zoomMax: 10}" sense-swipeend="onDocumentSwipe($event)"><c4p-viewer-content obj-var="documentObject"></c4p-viewer-content></div><div ng-click="togglePresentation();toggleFullScreen()" ng-show="plans.length > 0" class="toggle-mode-button"><span class="c4p-icon-std glyphicon c4p-stroke" ng-class="{\'glyphicon-play\':!isFullScreen, \'glyphicon-stop\':isFullScreen}"></span></div></div></div><div ng-switch-when="editor" class="meeting-content-container"><span ng-include="\'partials/meeting/meeting_object_editor.html\'"></span></div><div ng-switch-default="" class="meeting-content-container"><c4p-input ng-model="srvNav.item.description" type="textarea" rows="5"></c4p-input></div></div>'), 
    $templateCache.put("partials/meeting/meeting_viewer_note.html", '<div class="row" ng-show="modeEdit"><div class="col-xxs-12"><form class="c4p-color-a-gradient{{objectGroups.length}}"><marker ng-repeat="group in objectGroups"><div class="c4p-color-a-gradient{{$index+1}} c4p-form-group"><span class="c4p-form-group-title">{{group.title}}</span><fieldset ng-repeat="field in group.groupFields"><c4p-input warn-var="field.warn" title-var="field.title" ng-model="note[field.key]" type-var="field.type" rows="5" cols="20" ng-change="onFieldChanged(field)"></c4p-input></fieldset></div></marker></form></div><div class="row"><div class="col-xxs-12" ng-style="{minHeight:getResizeHeight()+\'px\'}"></div></div></div><div class="row" ng-controller="ctrlDetailedObject" ng-init="init(documentObject)" c4p-show="!modeEdit"><div class="col-xxs-12"><div class="c4p-color-a-gradient{{$index}}" ng-repeat="card in cards"><div class="c4p-card"><div ng-show="isFile && $first" class="btn" ng-class="{\'disabled\': actionMap.viewDocument.disabled}" ng-click="doAction(\'viewDocument\')" style="background: url(\'{{item.thumb_url}}\') no-repeat center center;width:100%;height: 250px;-webkit-background-size: contain"></div><span ng-repeat="group in card.groups" style="margin:0;padding:0" class="c4p-size-{{group.size}}"><br ng-show="card.brSeparated && ($index > 0)"><span><span ng-show="group.synchro && (item.c4p_synchro.creating || item.c4p_synchro.writing || item.c4p_synchro.reading || item.c4p_synchro.deleting)" class="glyphicon" ng-class="{\n                                    \'glyphicon-trash\'    : (item.c4p_synchro.deleting > 1),\n                                    \'glyphicon-times-circle\' : (!item.c4p_synchro.deleting && (item.c4p_synchro.creating > 1)),\n                                    \'glyphicon-upload\'   : (!item.c4p_synchro.deleting && !item.c4p_synchro.creating && (item.c4p_synchro.writing > 1)),\n                                    \'glyphicon-download\' : (!item.c4p_synchro.deleting && !item.c4p_synchro.creating && !item.c4p_synchro.writing && (item.c4p_synchro.reading > 1)),\n                                    \'glyphicon-spinner\'  : ((item.c4p_synchro.deleting == 1) || (item.c4p_synchro.creating == 1) || (item.c4p_synchro.writing == 1) || (item.c4p_synchro.reading == 1)),\n                                    \'icon-spin\'          : ((item.c4p_synchro.deleting == 1) || (item.c4p_synchro.creating == 1) || (item.c4p_synchro.writing == 1) || (item.c4p_synchro.reading == 1))\n                                  }"></span>  <span ng-show="group.name">{{itemName}}</span> <span ng-show="group.title">{{group.title}}</span></span> <span ng-repeat="field in group.fields" class="c4p-size-{{field.size}}"><span ng-show="($index > 0)"></span> <span ng-show="field.title">{{field.title}} :</span> <span ng-show="field.prefix">{{field.prefix}}</span> <span ng-switch="field.isArray"><span ng-switch-when="true"><span ng-repeat="item in field.value"><span ng-show="($index > 0) && (field.separator != \'br\')">{{field.separator}}</span><br ng-show="($index > 0) && (field.separator == \'br\')"><span ng-switch="field.type"><span ng-switch-when="tel"><a class="c4p-color-lnk" href="tel:{{item}}" target="_blank"><span>{{item}}</span></a></span> <span ng-switch-when="mail"><a class="c4p-color-lnk" href="mailto:{{item}}" target="_blank"><span>{{item}}</span></a></span> <span ng-switch-when="url"><a class="c4p-color-lnk" href="{{item}}" target="_blank"><span>{{item}}</span></a></span> <span ng-switch-when="currency"><span>{{item | c4pCurrency}}</span></span> <span ng-switch-when="percent"><span>{{item}}%</span></span> <span ng-switch-when="probability"><span>{{item}}%</span></span> <span ng-switch-when="datetime"><span>{{srvLocale.formatDate(item, \'short\')}}</span></span> <span ng-switch-when="date"><span>{{srvLocale.formatDate(item, \'shortDate\')}}</span></span> <span ng-switch-when="time"><span>{{srvLocale.formatDate(item, \'shortTime\')}}</span></span> <span ng-switch-when="number"><span>{{item | c4pNumber}}</span></span> <span ng-switch-when="rating"><span ng-include="\'partials/navigation/cards/4_rating_ro2.html\'" style="padding:0 10px"></span></span> <span ng-switch-default=""><span>{{item}}</span></span></span></span></span> <span ng-switch-default=""><span ng-switch="field.type"><span ng-switch-when="tel"><a class="c4p-color-lnk" href="tel:{{field.value}}" target="_blank"><span>{{field.value}}</span></a></span> <span ng-switch-when="mail"><a class="c4p-color-lnk" href="mailto:{{field.value}}" target="_blank"><span>{{field.value}}</span></a></span> <span ng-switch-when="url"><a class="c4p-color-lnk" href="{{field.value}}" target="_blank"><span>{{field.value}}</span></a></span> <span ng-switch-when="currency"><span>{{field.value | c4pCurrency}}</span></span> <span ng-switch-when="percent"><span>{{field.value}}%</span></span> <span ng-switch-when="probability"><span>{{field.value}}%</span></span> <span ng-switch-when="datetime"><span>{{srvLocale.formatDate(field.value, \'short\')}}</span></span> <span ng-switch-when="date"><span>{{srvLocale.formatDate(field.value, \'shortDate\')}}</span></span> <span ng-switch-when="time"><span>{{srvLocale.formatDate(field.value, \'shortTime\')}}</span></span> <span ng-switch-when="number"><span>{{field.value | c4pNumber}}</span></span> <span ng-switch-when="rating"><span ng-init="item = field.value" ng-include="\'partials/navigation/cards/4_rating_ro2.html\'" style="padding:0 10px"></span></span> <span ng-switch-default=""><span>{{field.value}}</span></span></span></span></span> <span ng-show="field.suffix">{{field.suffix}}</span></span></span></div></div></div></div>'), 
    $templateCache.put("partials/meeting/meeting_viewer_report.html", '<div class="row" ng-controller="ctrlDetailedObject" ng-init="init(documentObject)" c4p-show="!modeEdit"><div class="col-xxs-12"><div class="c4p-color-a-gradient{{$index}}" ng-repeat="card in cards"><div class="c4p-card"><div ng-show="isFile && $first" class="btn" ng-class="{\'disabled\': actionMap.viewDocument.disabled}" ng-click="doAction(\'viewDocument\')" style="background: url(\'{{item.thumb_url}}\') no-repeat center center;width:100%;height: 250px;-webkit-background-size: contain"></div><span ng-repeat="group in card.groups" style="margin:0;padding:0" class="c4p-size-{{group.size}}"><br ng-show="card.brSeparated && ($index > 0)"><span><span ng-show="group.synchro && (item.c4p_synchro.creating || item.c4p_synchro.writing || item.c4p_synchro.reading || item.c4p_synchro.deleting)" class="glyphicon" ng-class="{\n                                    \'glyphicon-trash\'    : (item.c4p_synchro.deleting > 1),\n                                    \'glyphicon-times-circle\' : (!item.c4p_synchro.deleting && (item.c4p_synchro.creating > 1)),\n                                    \'glyphicon-upload\'   : (!item.c4p_synchro.deleting && !item.c4p_synchro.creating && (item.c4p_synchro.writing > 1)),\n                                    \'glyphicon-download\' : (!item.c4p_synchro.deleting && !item.c4p_synchro.creating && !item.c4p_synchro.writing && (item.c4p_synchro.reading > 1)),\n                                    \'glyphicon-spinner\'  : ((item.c4p_synchro.deleting == 1) || (item.c4p_synchro.creating == 1) || (item.c4p_synchro.writing == 1) || (item.c4p_synchro.reading == 1)),\n                                    \'icon-spin\'          : ((item.c4p_synchro.deleting == 1) || (item.c4p_synchro.creating == 1) || (item.c4p_synchro.writing == 1) || (item.c4p_synchro.reading == 1))\n                                  }"></span>  <span ng-show="group.name">{{itemName}}</span> <span ng-show="group.title">{{group.title}}</span></span> <span ng-repeat="field in group.fields" class="c4p-size-{{field.size}}"><span ng-show="($index > 0)"></span> <span ng-show="field.title">{{field.title}} :</span> <span ng-show="field.prefix">{{field.prefix}}</span> <span ng-switch="field.isArray"><span ng-switch-when="true"><span ng-repeat="item in field.value"><span ng-show="($index > 0) && (field.separator != \'br\')">{{field.separator}}</span><br ng-show="($index > 0) && (field.separator == \'br\')"><span ng-switch="field.type"><span ng-switch-when="tel"><a class="c4p-color-lnk" href="tel:{{item}}" target="_blank"><span>{{item}}</span></a></span> <span ng-switch-when="mail"><a class="c4p-color-lnk" href="mailto:{{item}}" target="_blank"><span>{{item}}</span></a></span> <span ng-switch-when="url"><a class="c4p-color-lnk" href="{{item}}" target="_blank"><span>{{item}}</span></a></span> <span ng-switch-when="currency"><span>{{item | c4pCurrency}}</span></span> <span ng-switch-when="percent"><span>{{item}}%</span></span> <span ng-switch-when="probability"><span>{{item}}%</span></span> <span ng-switch-when="datetime"><span>{{srvLocale.formatDate(item, \'short\')}}</span></span> <span ng-switch-when="date"><span>{{srvLocale.formatDate(item, \'shortDate\')}}</span></span> <span ng-switch-when="time"><span>{{srvLocale.formatDate(item, \'shortTime\')}}</span></span> <span ng-switch-when="number"><span>{{item | c4pNumber}}</span></span> <span ng-switch-when="rating"><span ng-include="\'partials/navigation/cards/4_rating_ro2.html\'" style="padding:0 10px"></span></span> <span ng-switch-default=""><span>{{item}}</span></span></span></span></span> <span ng-switch-default=""><span ng-switch="field.type"><span ng-switch-when="tel"><a class="c4p-color-lnk" href="tel:{{field.value}}" target="_blank"><span>{{field.value}}</span></a></span> <span ng-switch-when="mail"><a class="c4p-color-lnk" href="mailto:{{field.value}}" target="_blank"><span>{{field.value}}</span></a></span> <span ng-switch-when="url"><a class="c4p-color-lnk" href="{{field.value}}" target="_blank"><span>{{field.value}}</span></a></span> <span ng-switch-when="currency"><span>{{field.value | c4pCurrency}}</span></span> <span ng-switch-when="percent"><span>{{field.value}}%</span></span> <span ng-switch-when="probability"><span>{{field.value}}%</span></span> <span ng-switch-when="datetime"><span>{{srvLocale.formatDate(field.value, \'short\')}}</span></span> <span ng-switch-when="date"><span>{{srvLocale.formatDate(field.value, \'shortDate\')}}</span></span> <span ng-switch-when="time"><span>{{srvLocale.formatDate(field.value, \'shortTime\')}}</span></span> <span ng-switch-when="number"><span>{{field.value | c4pNumber}}</span></span> <span ng-switch-when="rating"><span ng-init="item = field.value" ng-include="\'partials/navigation/cards/4_rating_ro2.html\'" style="padding:0 10px"></span></span> <span ng-switch-default=""><span>{{field.value}}</span></span></span></span></span> <span ng-show="field.suffix">{{field.suffix}}</span></span></span></div></div></div></div>'), 
    $templateCache.put("partials/navigation/aside_header.html", '<div class="panel panel-default"><div class="panel-heading" ng-controller="ctrlNavObject"><span class="icon-large glyphicon glyphicon-{{itemIcon}}"></span> <span>{{itemName}}</span></div><div class="panel-body"><div class="input-group"><input type="text" class="form-control" placeholder="{{srvLocale.translations.htmlFormSearchPlaceHolder}}" ng-model="asideInputs.itemSearchQuery" ng-change="srvFacet.setFilterQuery(asideInputs.itemSearchQuery);"><span class="input-group-addon input-sm btn-group btn-group-sm btn-group-justified"><a type="button" class="btn btn-default" ng-show="srvFacet.ascendingOrder" ng-click="srvFacet.toggleOrder()"><span class="glyphicon glyphicon-sort-alpha-asc"></span></a><a type="button" class="btn btn-default" ng-hide="srvFacet.ascendingOrder" ng-click="srvFacet.toggleOrder()"><span class="glyphicon glyphicon-sort-alpha-desc"></span></a><a type="button" class="btn btn-default" ng-show="srvFacet.caseSensitive" ng-click="srvFacet.toggleCaseSensitive()"><span class="glyphicon glyphicon-font icon-small"></span></a><a type="button" class="btn btn-default" ng-hide="srvFacet.caseSensitive" ng-click="srvFacet.toggleCaseSensitive()"><span class="glyphicon glyphicon-font icon-large"></span></a><a type="button" class="btn btn-default" ng-click="srvFacet.clear();removeGlobalSearch();"><span class="glyphicon glyphicon-times-circle"></span></a></span></div><ul class="list-group"><li class="list-group-item" ng-repeat="filterFacet in srvFacet.filterFacets"><span ng-click="srvFacet.removeFacet($index)" class="pull-left glyphicon glyphicon-times-circle"></span> <span>{{srvLocale.translations.htmlFacetName[filterFacet.key]}} : {{filterFacet.title}}</span> <span class="badge">{{filterFacet.items.length}}</span></li></ul></div></div>'), 
    $templateCache.put("partials/navigation/aside_root.html", '<div class="row c4p-aside-header c4p-header-std" resize-opts="{name:\'aside_root_header\'}"><div class="col-xxs-12"><ul class="c4p-list-aside nav nav-pills"><li class="c4p-list-item-aside"><div class="btn c4p-color-action-aside-transparent" ng-click="setAsideRootMenu()"><span class="pull-left c4p-icon-std glyphicon glyphicon-fw glyphicon-bars"></span><h5 class="pull-left c4p-item-root-txt">{{translate(\'htmlGuiderPageTitle\')}}</h5></div></li></ul></div></div><div resize-opts="{name:\'aside_root\'}" resizecss-height="responsivePageHeight() -getResizePathValue(\'aside_root_header\', \'\', \'offsetHeight\') -getResizePathValue(\'aside_root_footer\', \'\', \'offsetHeight\')" sense-opts="{name:\'aside_root\', axeY:\'scroll\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\', momentum: 0}" class="c4p-bg-aside row c4p-height-full"><div class="col-xxs-12"><div class="col-xxs-12"><ul class="c4p-list-aside nav nav-pills nav-stacked"><li class="c4p-list-item-aside c4p-color-{{getTypeColor(\'Event\')}}" ng-class="{active: activeItem == slideNavigationCalendar}" ng-click="srvFacet.clearOrRemoveFacet($first, $index);setAsideCalendar()"><div class="btn col-xxs-12"><span class="pull-left c4p-icon-std glyphicon glyphicon-fw glyphicon-calendar"></span> <span class="pull-left c4p-item-root-txt">{{srvLocale.translations.htmlSlideName[\'calendar\']}}</span></div></li><li class="c4p-list-item-aside c4p-color-{{getTypeColor(\'Event\')}}" ng-class="{active: activeItem == slideNavigationFavorites}" ng-click="setAsideFavoriteSearchMenu()"><div class="btn col-xxs-12"><span class="pull-left c4p-icon-std glyphicon glyphicon-fw glyphicon-star"></span> <span class="pull-left c4p-item-root-txt">{{srvLocale.translations.htmlSlideName[\'favorites\']}}</span></div></li></ul></div><div class="col-xxs-12" ng-show="navAside">&nbsp;</div><div class="col-xxs-12"><ul class="c4p-list-aside nav nav-pills nav-stacked"><li class="c4p-list-item-aside c4p-color-{{getTypeColor(\'Event\')}}" ng-class="{active: activeItem == slideNavigationEvents}" ng-click="setAsideSearchMenu(\'Event\')" ng-show="navAside || activeItem == slideNavigationEvents"><div class="btn col-xxs-12"><span class="pull-left c4p-icon-std glyphicon glyphicon-fw glyphicon-{{getTypeIcon(\'Event\')}}"></span> <span class="pull-left c4p-item-root-txt">{{srvLocale.translations.htmlSlideName[\'events\']}}</span></div></li><li class="c4p-list-item-aside c4p-color-{{getTypeColor(\'Contact\')}}" ng-class="{active: activeItem == slideNavigationContacts}" ng-click="setAsideSearchMenu(\'Contact\')" ng-show="navAside || activeItem == slideNavigationContacts"><div class="btn col-xxs-12"><span class="pull-left c4p-icon-std glyphicon glyphicon-fw glyphicon-{{getTypeIcon(\'Contact\')}}"></span> <span class="pull-left c4p-item-root-txt">{{srvLocale.translations.htmlSlideName[\'contacts\']}}</span></div></li><li class="c4p-list-item-aside c4p-color-{{getTypeColor(\'Account\')}}" ng-class="{active: activeItem == slideNavigationAccounts}" ng-click="setAsideSearchMenu(\'Account\')" ng-show="navAside || activeItem == slideNavigationAccounts"><div class="btn col-xxs-12"><span class="pull-left c4p-icon-std glyphicon glyphicon-fw glyphicon-{{getTypeIcon(\'Account\')}}"></span> <span class="pull-left c4p-item-root-txt">{{srvLocale.translations.htmlSlideName[\'accounts\']}}</span></div></li><li class="c4p-list-item-aside c4p-color-{{getTypeColor(\'Opportunity\')}}" ng-class="{active: activeItem == slideNavigationOpportunities}" ng-click="setAsideSearchMenu(\'Opportunity\')" ng-show="navAside || activeItem == slideNavigationOpportunities"><div class="btn col-xxs-12"><span class="pull-left c4p-icon-std glyphicon glyphicon-fw glyphicon-{{getTypeIcon(\'Opportunity\')}}"></span> <span class="pull-left c4p-item-root-txt">{{srvLocale.translations.htmlSlideName[\'opportunities\']}}</span></div></li><li class="c4p-list-item-aside c4p-color-{{getTypeColor(\'Document\')}}" ng-class="{active: activeItem == slideNavigationDocuments}" ng-click="setAsideSearchMenu(\'Document\')" ng-show="navAside || activeItem == slideNavigationDocuments"><div class="btn col-xxs-12"><span class="pull-left c4p-icon-std glyphicon glyphicon-fw glyphicon-{{getTypeIcon(\'Document\')}}"></span> <span class="pull-left c4p-item-root-txt">{{srvLocale.translations.htmlSlideName[\'documents\']}}</span></div></li><li class="c4p-list-item-aside c4p-color-{{getTypeColor(\'Note\')}}" ng-class="{active: activeItem == slideNavigationNotes}" ng-click="setAsideSearchMenu(\'Note\')" ng-show="navAside || activeItem == slideNavigationNotes"><div class="btn col-xxs-12"><span class="pull-left c4p-icon-std glyphicon glyphicon-fw glyphicon-{{getTypeIcon(\'Note\')}}"></span> <span class="pull-left c4p-item-root-txt">{{srvLocale.translations.htmlSlideName[\'notes\']}}</span></div></li><li class="c4p-list-item-aside" ng-click="setAsideRootMenu()" ng-hide="navAside"><div class="btn c4p-color-action-aside-transparent col-xxs-12" style="padding-bottom:400px"><span class="pull-left c4p-icon-std glyphicon glyphicon-fw glyphicon-angle-down"></span></div></li></ul></div></div></div><div class="c4p-aside-footer" resize-opts="{name:\'aside_root_footer\'}"><div class="row" ng-controller="ctrlTrashObject"><div class="col-xxs-12" ng-show="dndActive"><div class="c4p-aside-trash"><div class="btn btn-danger col-xxs-12" ng-class="{\'active\' : dropOver}" sense-opts="{name:\'dropObjectTrash\'}" sense-dndstart="dndStart($event)" sense-dndend="dndEnd($event)" sense-dndcancel="dndCancel($event)" sense-dropoverenter="dropOverEnter($event)" sense-dropoverleave="dropOverLeave($event)" sense-dropend="dropEnd($event)"><span class="c4p-icon-std glyphicon glyphicon-trash-o"></span></div></div></div><div class="col-xxs-12" ng-hide="dndActive"><ul class="c4p-list-aside nav nav-pills"><li class="c4p-list-item-aside"><div class="btn c4p-gray c4p-color-action-aside-transparent" ng-click="openDialogSendFeedbackReport(\'Menu Feedback\')"><div class="c4p-icon-std glyphicon glyphicon-fw glyphicon-question"></div></div></li><li class="c4p-list-item-aside"><div class="btn c4p-gray c4p-color-action-aside-transparent" ng-click="gotoSlideWithSearchReset(pageNavigation, slideNavigationConfig);"><span class="c4p-icon-std glyphicon glyphicon-fw glyphicon-cog"></span></div></li><li class="c4p-list-item-aside pull-right"><div class="btn c4p-gray c4p-color-action-aside-transparent" ng-click="refreshClient();"><span ng-switch="a4pSpinnerState"><span class="c4p-icon-std glyphicon glyphicon-fw glyphicon-refresh glyphicon-spin" ng-switch-when="run"></span> <span class="c4p-icon-std glyphicon glyphicon-fw glyphicon-refresh alert-error" ng-switch-when="doneWithPb"></span> <span class="c4p-icon-std glyphicon glyphicon-fw glyphicon-refresh close" ng-switch-when="offline"></span> <span class="c4p-icon-std glyphicon glyphicon-fw glyphicon-refresh" ng-switch-default=""></span> <span ng-show="(srvData.objectsToDownload.length + srvData.objectsToSave.length)">{{srvData.objectsToDownload.length + srvData.objectsToSave.length}}</span></span></div></li></ul></div></div></div>'), 
    $templateCache.put("partials/navigation/aside_search.html", '<div ng-controller="ctrlAsideSearch" class="c4p-container c4p-color-z-dark-i"><div class="c4p-waiting" ng-show="asideSearchSpinner" c4p-animateshow="asideSearchSpinner" after-hide="afterAsideSpinnerHide()" after-show="afterAsideSpinnerShow()"><div ng-include="\'partials/spinner.html\'"></div></div><div ng-if="!asideSearchSpinner"><div resize-opts="{name:\'aside_search_header\', watchRefresh:[\'srvFacet.filterFacets.length\', \'srvFacet.lastFacetKey\', \'srvConfig.c4pConfig.exposeAllFacets\']}" class="c4p-color-z-dark-i"><div class="col-xxs-12 c4p-aside-header c4p-header-std"><ul class="nav nav-pills c4p-list-aside" ng-repeat="filterFacet in srvFacet.filterFacets" ng-show="$first || srvConfig.c4pConfig.exposeAllFacets"><li class="c4p-list-item-aside c4p-search-header-aside"><div class="btn"><span ng-hide="srvFacet.isFacetAnObjectType(filterFacet.value)">{{srvLocale.translations.htmlFacetName[filterFacet.key]}}</span><h5 class="c4p-search-header-txt-aside pull-left">{{filterFacet.title}}</h5><span class="c4p-aside-count c4p-gray">{{srvData.getObjectCount(filterFacet.value)}}</span> </div></li><li class="pull-right" ng-hide="$first && !srvConfig.c4pConfig.exposeAllFacets"><a class="btn" ng-click="srvFacet.removeFacet($index)"><span class="c4p-color-action-aside-transparent c4p-stroke c4p-padding-w-packed"><span class="c4p-icon-std glyphicon glyphicon-times-circle"></span></span></a></li><li class="pull-right" ng-switch="filterFacet.value"><a class="btn c4p-color-action-aside-transparent" ng-click="addItemDialog(filterFacet.value)" ng-switch-when="Document" ng-show="objectCreatable(filterFacet.value)"><span class="c4p-icon-std glyphicon glyphicon-camera"></span></a> <a class="btn c4p-color-action-aside-transparent" ng-switch-default="" ng-show="objectCreatable(filterFacet.value)" ng-click="addItemDialog(filterFacet.value)"><span class="c4p-icon-std glyphicon glyphicon-plus"></span></a></li></ul></div></div><div resize-opts="{name:\'aside_search_search\', watchRefresh:[\'srvFacet.filterFacets.length\', \'asideActiveSearch\']}"><div class="col-xxs-12" ng-show="asideActiveSearch"><form class="form-horizontal"><div class="has-feedback"><input type="text" class="form-control" id="inputSearch" placeholder="{{srvLocale.translations.htmlFormSearchPlaceHolder}}" ng-model="asideInputs.itemSearchQuery" ng-change="srvFacet.setFilterQuery(asideInputs.itemSearchQuery);"><span class="c4p-icon-std glyphicon glyphicon-search form-control-feedback" ng-click="toggleSearch()"></span></div></form></div><div class="col-xxs-12" ng-hide="asideActiveSearch"><ul class="nav nav-pills c4p-list-aside c4p-color-z-dark-ii" ng-click="toggleSearch()"><li class="c4p-list-item-aside" ng-show="srvFacet.ascendingOrder"><a class="btn c4p-color-action-aside-transparent" ng-click="$event.stopPropagation(); srvFacet.toggleOrder()"><span class="glyphicon glyphicon-sort-alpha-asc"></span></a></li><li class="c4p-list-item-aside" ng-hide="srvFacet.ascendingOrder"><a class="btn c4p-color-action-aside-transparent" ng-click="$event.stopPropagation(); srvFacet.toggleOrder()"><span class="glyphicon glyphicon-sort-alpha-desc"></span></a></li><li class="c4p-list-item-aside"><div ng-show="asideInputs.itemSearchQuery.length > 0" class="btn btn-info"><div class="pull-left" style="padding-right: 10px">{{asideInputs.itemSearchQuery}}</div><a type="" class="pull-right" ng-click="removeGlobalSearch()">&times;</a></div></li><li class="c4p-list-item-aside pull-right"><div class="btn btn-sm" ng-click="$event.stopPropagation(); toggleSearch()"><span class="c4p-icon-std c4p-color-action-aside-transparent"><span class="glyphicon glyphicon-search"></span></span></div></li></ul></div></div><div class="col-xxs-12" resize-opts="{name:\'aside_search_result_wrapper\'}" resizecss-height="getResizePathValue(\'navigation_ctrlAside\', \'\', \'offsetHeight\') -getResizePathValue(\'aside_search_header\', \'\', \'offsetHeight\') -getResizePathValue(\'aside_search_search\', \'\', \'offsetHeight\') - getResizePathValue(\'aside_root_footer\',\'\',\'offsetHeight\')"><div class="c4p-container c4p-menu-bg c4p-color-z"><nav class="c4p-container-scroll-y ng-cloak" ng-controller="ctrlSingleTap"><div class="c4p-container"><ul class="list-group c4p-list-aside c4p-search-group-separator c4p-color-z" ng-repeat="groupKey in srvFacet.items.keyes"><li class="list-group-item c4p-list-item-aside" ng-show="srvConfig.c4pConfig.exposeAllFacets" ng-click="srvFacet.addFacet(srvFacet.lastFacetKey, groupKey.title, groupKey.value)"><a class="btn btn-sm"><span ng-show="srvFacet.isFacetAnObjectType(groupKey.value)" class="icon-large glyphicon glyphicon-{{getTypeIcon(groupKey.value)}}"></span> <span>{{groupKey.title}}</span></a> <a ng-show="srvFacet.isFacetAnObjectType(groupKey.value)" ng-click="addItemDialog(groupKey.value)"><span class="pull-right icon-large glyphicon glyphicon-plus"></span></a> <span class="badge">{{srvFacet.items.lists[groupKey.value].length}}</span></li><li class="list-group-item c4p-list-item-aside" ng-repeat="listItem in srvFacet.items.lists[groupKey.value]"><div ng-include="\'partials/navigation/aside_search_list.html\'"></div></li></ul><ul class="list-group c4p-list-aside c4p-color-z" ng-if="srvFacet.items.others.length > 0"><li class="list-group-item c4p-list-item-aside" ng-repeat="listItem in srvFacet.items.others"><div ng-include="\'partials/navigation/aside_search_list.html\'"></div></li></ul></div></nav></div></div></div></div>'), 
    $templateCache.put("partials/navigation/aside_search_list.html", '<div id="aside_{{listItem.object.id.dbid}}" ng-class="{\n        \'c4p-color-{{getFacetColor(srvFacet.getFirstFacet())}}\':srvNav.item && (listItem.object.id.dbid == srvNav.item.id.dbid),\n        \'active\':srvNav.item && (listItem.object.id.dbid == srvNav.item.id.dbid)}" sense-opts="{name:\'search-others-{{$index}}\', bubble:true, watchRefresh:[\'srvNav.item\', \'srvNav.holdItem\']}" ng-click="firstSingleTap(listItem.object, selectItem, true)" sense-doubletap="firstSingleTap(listItem.object, selectItem, true)"><div class="row"><div class="btn col-xxs-12" ng-class="{active: singleTapFocusId == listItem.object.id.dbid}"><ul class="nav nav-pills"><li class="" style="width:100%"><div ng-init="cardItem = listItem.object" ng-include="\'partials/navigation/cards/draggable_inlined_card.html\'"></div></li></ul></div></div></div>'), 
    $templateCache.put("partials/navigation/calendar.html", '<div class="c4p-container c4p-color-gradient0"><header class="row c4p-color-gradient0" ng-include="\'partials/navigation/calendar_header.html\'"></header><div class="c4p-waiting" ng-show="calendarLoadingSpinner" c4p-animateshow="calendarLoadingSpinner" after-hide="afterCalendarSpinnerHide()" after-show="afterCalendarSpinnerShow()"><div ng-include="\'partials/spinner.html\'"></div></div><div ng-show="!calendarLoadingSpinner" class="row c4p-color-a-gradient4"><article class="col-xxs-12" ng-switch="" on="calendarView"><div ng-switch-when="dayView"><div ng-include="\'partials/navigation/calendar_day.html\'"></div></div><div ng-switch-when="listView"><div ng-include="\'partials/navigation/calendar_events.html\'"></div></div><div ng-switch-default=""><div ng-include="\'partials/navigation/calendar_month.html\'"></div></div></article></div></div>'), 
    $templateCache.put("partials/navigation/calendar_day.html", "<div style=\"float: left\" ng-style=\"{width:(getMainWidth())+'px'}\"><div ng-style=\"{width:(getMainWidth())+'px'}\" sense-opts=\"{name:'calendar_day_events_wrapper', axeY:'scroll'}\" sense-scrollopts=\"{scrollbarClass:'c4p-scrollbar'}\" resize-opts=\"{name:'calendar_day_events_wrapper', watchRefresh:'navAside'}\" resizecss-height=\"getResizeHeight() -getResizePathValue('calendar_header', '', 'offsetHeight')\"><div resize-opts=\"{name:'calendar_day_event_scroller', watchRefresh:'navAside'}\"><div ng-include=\"'partials/navigation/calendar_day_events.html'\"></div></div></div></div><div style=\"float: left\" ng-style=\"{width:(getAsideWidth())+'px'}\"><div ng-style=\"{width:(getAsideWidth())+'px'}\" sense-opts=\"{name:'calendar_day_hours_wrapper', axeY:'scroll'}\" sense-scrollopts=\"{scrollbarClass:'c4p-scrollbar'}\" resize-opts=\"{name:'calendar_day_hours_wrapper', watchRefresh:'navAside'}\" resizecss-height=\"getResizeHeight() -getResizePathValue('calendar_header', '', 'offsetHeight')\"><div resize-opts=\"{name:'calendar_day_hours_scroller', watchRefresh:'navAside'}\"><div ng-include=\"'partials/navigation/calendar_day_hours.html'\" class=\"c4p-cal-day-hour\"></div></div></div></div>"), 
    $templateCache.put("partials/navigation/calendar_day_events.html", '<div class="row c4p-details c4p-color-a-gradient1"><div class="col-xxs-12"><span class="glyphicon glyphicon-angle-left c4p-icon-std" ng-click="gotoPreviousDay()" style="padding-right: 2em"></span> <span class="c4p-cal-big c4p-gray">{{calendarDayCasualName}}</span> <span class="c4p-cal-big">{{calendarDayFullName}}</span> <span class="glyphicon glyphicon-angle-right c4p-icon-std" ng-click="gotoNextDay()" style="padding-left: 2em"></span></div></div><div class="row c4p-details" ng-show="(calendarSelectedDay.eventsAllDay.length == 0) && (calendarSelectedDay.events.length == 0) "><div class="c4p-infos-txt">{{translate(\'htmlCalendarDayTextNoEvent\')}}</div></div><ul class="nav nav-pills nav-stacked" ng-show="calendarSelectedDay.eventsAllDay.length"><li class="c4p-details c4p-color-a-gradient2"><span class="">{{translate(\'htmlCalendarDayTextAllDayEvent\')}}</span></li><li ng-repeat="item in calendarSelectedDay.eventsAllDay" class="c4p-details c4p-color-a-gradient3"><span ng-include="\'partials/navigation/cards/draggable_summarized_item.html\'"></span></li></ul><ul class="nav nav-pills nav-stacked" ng-show="calendarSelectedDay.events.length"><li class="c4p-details c4p-color-a-gradient2"><span class="">{{translate(\'htmlCalendarDayTextEvents\')}}</span></li><li ng-repeat="item in calendarSelectedDay.events" class="c4p-details c4p-color-a-gradient3"><span ng-include="\'partials/navigation/cards/draggable_summarized_item.html\'"></span></li></ul>'), 
    $templateCache.put("partials/navigation/calendar_day_hours.html", '<div class="row hidden-sm hidden-md hidden-lg"><div class="col-xxs-12 well c4p-well2-a"><div class="row"><div class="col-xxs-12"><span>{{calendarDayCasualName}}</span></div></div><div class="row"><div class="col-xxs-12"><table class="table c4p-table-layout" style="width:100%;table-layout: fixed"><tr><td style="vertical-align:middle;text-align:center" class="c4p-link5" ng-click="gotoPreviousDay()"><a class="c4p-link5"><span class="glyphicon glyphicon-angle-left"></span></a></td><td colspan="6" style="vertical-align:middle;text-align:center"><h4 class="c4p-n-title a4p-dot">{{calendarDayFullName}}</h4></td><td style="vertical-align:middle;text-align:center" class="c4p-link5" ng-click="gotoNextDay()"><a class="c4p-link5"><span class="glyphicon glyphicon-angle-right"></span></a></td></tr></table></div></div></div></div><div class="row"><div ng-repeat="event in calendarSelectedDay.eventsAllDay" class="col-xxs-12 label c4p-label-calendar-all-day pull-left"><div class="pull-left c4p-link5 a4p-dot" style="width:75%;line-height: 15px;height:100%;padding: 2px 15px" ng-click="onEventClick(event)"><span ng-show="isMultiDayEventWithTimeToShow(event,calendarSelectedDay.date,true)">({{getEventTime(event.date_start)}})</span> <span>{{getItemNameById(event.id.dbid)}}</span> <span ng-show="isMultiDayEventWithTimeToShow(event,calendarSelectedDay.date,false)">({{getEventTime(event.date_end)}})</span></div><div ng-show="srvData.isObjectOwnedByUser(event)" ng-click="removeEvent(event)" class="c4p-link5 pull-right" style="width:15%;text-align:center"><span class="glyphicon glyphicon-times-circle"></span></div></div></div><div class="row"><div class="col-xxs-12" style="margin:0"><div style="height:{{(25*40)}}px;width:100%;position:relative"><div style="position:absolute;top:0;left:0;width:100%"><div style="height:40px" class="c4p-hour-disabled c4p-color-a-gradient1">&nbsp;</div><div ng-repeat="hour in calendarHoursDay" class="{{hour.cssClass}}-a-gradient1" style="height:40px; position:relative;width:100%" sense-opts="{bubble:true, callApply:true}" sense-holdstart="selectHour($event, hour)" sense-holdstop="cancelHour($event, hour)" sense-tap="newEventAtHour($event, hour)" ng-class="{scrollTop: (calendarSelectedDay.events.length == 0 && $index == 8)}"><span class="c4p-link5" style="font-size:18px;line-height:18px;top:-9px;position: absolute;left: 4px">{{hour.text}} -</span> <span style="font-size:12px;line-height:12px;top:14px;position: absolute;left: 10px">30 -</span><div ng-show="hour.selected" style="height: 80%; width: 85%; border: 3px solid red; margin: 0 2%" class="pull-right">&nbsp;</div></div></div><div class="c4p-click-through" style="position:absolute;top:40px;left:0;width:100%;height:{{(24*40)}}px;z-index:-1"><div style="position:relative;width:100%;height:100%"><div ng-repeat="event in calendarSelectedDay.events" class="label c4p-label-calendar-hour pull-left c4p-color-a-gradient9" style="position:absolute;width:100%;padding:0;margin:0;pointer-events: all;\n                                top:{{calendarSelectedDay.eventsPosition[$index].posPercent}}%;\n                                height:{{calendarSelectedDay.eventsPosition[$index].lengthPercent}}%"><div style="width: 3%;height: 100%;float: left"></div><div class="pull-left c4p-link5 scrollTop a4p-dot" style="width:87%;line-height: 1em;height:100%;padding: 0 0 0 7%;text-align: left" ng-click="onEventClick(event)">{{getItemNameById(event.id.dbid)}}<br></div><div ng-show="srvData.isObjectOwnedByUser(event)" ng-click="removeEvent(event)" class="c4p-link5 pull-right" style="width:10%;text-align:center"><span class="glyphicon glyphicon-remove"></span></div></div></div></div></div></div></div>'), 
    $templateCache.put("partials/navigation/calendar_events.html", '<div class="row col-xxs-12"><div ng-style="{width:(getMainWidth() + getAsideWidth())+\'px\'}" resize-opts="{name:\'calendar_events\', watchRefresh:\'navAside\'}" resizecss-height="getResizeHeight() -getResizePathValue(\'calendar_header\', \'\', \'offsetHeight\')" sense-opts="{name:\'calendar_events\', axeY:\'scroll\', watchRefresh:\'calendarEventsGroupsByDaySinceToday\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}"><div id="calendar-cards"><div class="row c4p-color-a-gradient1"><div class="col-xxs-12 c4p-details hidden-xs hidden-sm"><h2>{{translate(\'htmlCalendarListPageTitle\')}}</h2></div><div class="col-xxs-12 c4p-details hidden-md hidden-lg"><h4>{{translate(\'htmlCalendarListPageTitle\')}}</h4></div></div><ul class="nav nav-pills nav-stacked c4p-details-title" ng-repeat="group in calendarEventsGroupsByDaySinceToday" ng-show="group.events.length || group.eventsAllDay.length"><li class="c4p-details c4p-color-a-gradient2"><span class="">{{translateDateDayToFullString(group.date)}}</span></li><li ng-repeat="item in group.eventsAllDay" class="c4p-details c4p-color-a-gradient3"><span ng-include="\'partials/navigation/cards/draggable_summarized_item.html\'"></span></li><li ng-repeat="item in group.events" class="c4p-details c4p-color-a-gradient4"><span ng-include="\'partials/navigation/cards/draggable_summarized_item.html\'"></span></li></ul></div></div></div>'), 
    $templateCache.put("partials/navigation/calendar_header.html", '<div class="c4p-header-std" resize-opts="{name:\'calendar_header\', watchRefresh:\'navAside\'}"><div class="row"><div class="col-xxs-12"><ul class="nav nav-pills"><li class=""><a class="btn disabled"><img class="c4p-img-icon" src="l4p/img/logo_meeting_.png"></a></li><li ng-include="\'partials/navigation/header_back.html\'"></li><li class="pull-right" ng-show="configStateAdd"><a class="btn" ng-click="addItemDialog()"><span class="c4p-icon-std glyphicon glyphicon-plus"></span></a></li></ul></div></div></div>'), 
    $templateCache.put("partials/navigation/calendar_month.html", '<div class="ng-cloak"><table class="table c4p-table-calendar-month" style="width:100%;table-layout: fixed"><thead resize-opts="{name:\'calendar_month_header\'}"><tr style="color:whitesmoke"><th class="empty" style="width:20px"></th><th class="c4p-link5" ng-click="gotoPreviousYear()"><span class="glyphicon glyphicon-angle-double-left"></span><br><h5 class="a4p-dot" ng-hide="getResizeOneColumn()">{{calendarPreviousYear}}</h5></th><th class="c4p-link5" ng-click="gotoPreviousMonth()"><span class="glyphicon glyphicon-angle-left"></span><br><h5 class="a4p-dot" ng-hide="getResizeOneColumn()">{{calendarPreviousMonthName}}</h5></th><th class="disabled" colspan="3" style="text-align:center;vertical-align:middle"><h4 ng-hide="getResizeOneColumn()" class="a4p-dot">{{calendarMonthFullName}}</h4><span ng-show="getResizeOneColumn()" class="a4p-dot">{{calendarMonthFullName}}</span></th><th class="c4p-link5" ng-click="gotoNextMonth()"><span class="glyphicon glyphicon-angle-right"></span><br><h5 class="a4p-dot" ng-hide="getResizeOneColumn()">{{calendarNextMonthName}}</h5></th><th class="c4p-link5" ng-click="gotoNextYear()"><span class="glyphicon glyphicon-angle-double-right"></span><br><h5 class="a4p-dot" ng-hide="getResizeOneColumn()">{{calendarNextYear}}</h5></th></tr><tr style="height:20px;line-height:20px" resize-opts="{name:\'calendar_month_week_header\'}"><th style="height:20px;line-height:20px" class="disabled"><small>{{translate(\'htmlCalendarMonthTextWeekAbrev\')}}</small></th><th ng-repeat="day in calendarMonthWeeks[0].days" class="disabled" style="height:20px;line-height:20px; width:{{(width - 20) / calendarMonthWeeks[0].days.length}}px"><small>{{day.shortName}}</small></th></tr></thead><tbody><tr ng-repeat="week in calendarMonthWeeks"><td class="disabled" style="text-align: center;vertical-align: middle"><small>{{week.id}}</small></td><td ng-repeat="day in week.days" class="c4p-link5 c4p-table-cell" ng-click="onDayClick(day.date)" style="height:{{calendarMonthCellHeight}}px" ng-class="{	\'c4p-cell-initial\': translateDateDayToString(day.date) == translateDateDayToString(calendarNow),\r\n								\'c4p-cell-selected\': translateDateDayToString(day.date) == translateDateDayToString(calendarSelected),\r\n								\'c4p-cell-weekend\': day.isWeekend,\r\n								\'c4p-cell-disabled\': day.date.getMonth() != calendarMonth}"><div style="width:100%;height:100%"><div class="pull-left" style="position:relative; height:100%;width:8%"><div ng-repeat="position in day.group.eventsPosition" class="label c4p-label-calendar-notallday-inverse" style="position:absolute; width:90%; padding:2px 0; border:1px solid gray; top:{{position.posPercent}}%; height:{{position.lengthPercent}}%" ng-class="position.event.id">&nbsp;</div></div><div class="pull-right" style="position:relative; height:100%;width:90%"><div style="height:{{(calendarMonthHeight / calendarMonthWeeks.length) - 20}}px;overflow:hidden;text-overflow:ellipsis;display:block"><span ng-repeat="position in day.group.eventsAllDayPosition" style="width:{{position.lengthPercent}}%; margin-left:{{position.posPercent}}%; margin-top:1px; min-height:2px" class="label c4p-label-calendar-all-day a4p-dot"><span class="hidden-xs">{{position.event.name}}</span></span>  <span ng-repeat="event in day.group.events" style="width:100%; margin-top: 1px" class="label c4p-label-calendar-day a4p-dot hidden-xs">{{getEventTime(event.date_start)}} {{event.name}}</span></div><small class="pull-left label c4p-label-calendar-light hidden-xs" style="padding:0" ng-show="(20*(day.group.eventsAllDay.length + day.group.events.length)) > (((calendarMonthHeight -24)/ calendarMonthWeeks.length) - 20)">{{translate(\'htmlCalendarMonthTextMore\')}}</small>  <small class="pull-right label c4p-label-calendar" style="padding:0 3px">{{day.date.getDate()}}</small></div></div></td></tr></tbody></table></div>'), 
    $templateCache.put("partials/navigation/config.html", '<header class="row c4p-color-gradient0" ng-include="\'partials/navigation/config_header.html\'"></header><div class="row c4p-config-panel"><div sense-opts="{name:\'config_main\', axeY:\'scroll\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}" class="col-xxs-12 col-sm-11 col-sm-offset-1" resize-opts="{name:\'config_main\'}" resizecss-height="responsivePageHeight() -getResizePathValue(\'config_header\', \'\', \'offsetHeight\') -getResizePathValue(\'navigation_footer_detail\', \'\', \'offsetHeight\')"><div class="col-xxs-12"><div class="row hidden-xs hidden-sm"><div class="col-xxs-12 col-xs-8 col-xs-offset-2 navbar"><h2 class="c4p-n-title" ng-show="!isDemo">{{translate(\'htmlConfigPageTitle\')}} {{email}}</h2><h2 class="c4p-n-title" ng-show="isDemo">{{translate(\'htmlConfigPageTitle\')}} {{translate(\'htmlConfigTextDemo\')}}</h2></div></div><div class="row hidden-md hidden-lg"><div class="col-xxs-12 col-xs-8 col-xs-offset-2 navbar"><h5 class="c4p-n-title" ng-show="!isDemo">{{translate(\'htmlConfigPageTitle\')}} {{email}}</h5><h5 class="c4p-n-title" ng-show="isDemo">{{translate(\'htmlConfigPageTitle\')}} {{translate(\'htmlConfigTextDemo\')}}</h5></div></div><div class="row"><button class="col-xxs-12 col-xs-8 col-xs-offset-2 btn btn-primary" ng-click="switchUser()">{{translate(\'htmlButtonChangeUser\')}}</button> </div><div class="row"><div class="col-xxs-12 col-xs-8 col-xs-offset-2"><button type="button" class="btn btn-link col-xxs-12" style="padding-top: 20px;padding-bottom: 40px" ng-click="openDialogSendFeedbackReport(\'Your Praise\',\'OtherConnector\',srvLocale.translations.htmlMsgFeedbackOtherConnector)"><span style="white-space:normal">{{srvLocale.translations.htmlMsgFeedbackOtherConnectorQuestion}}</span></button></div></div><div class="row"><div class="col-xxs-12 col-xs-8 col-xs-offset-2"><button type="button" class="btn btn-info col-xxs-12 dropdown-toggle" data-toggle="dropdown"><span>{{srvLocale.lang.title}}</span></button><ul class="dropdown-menu col-xxs-12" role="menu"><li ng-repeat="lang in srvLocale.langs"><a class="" ng-click="srvLocale.setLang(lang)">{{lang.title}}</a></li></ul></div></div><div class="row" ng-show="isDemo"><div class="col-xxs-12 col-xs-8 col-xs-offset-2 well"><a class="btn btn-warning col-xxs-12" ng-click="addMoreDataInDemoMode()">{{srvLocale.translations.htmlTextDemoModeMoreData}}</a></div></div><div class="row"><div class="col-xxs-12"><div class="row"><label class="col-xxs-12 control-label">&nbsp;</label><div class="col-xxs-12 controls">&nbsp;</div></div></div></div><div class="row"><div class="col-xxs-12"><small>{{translate(\'htmlConfigTextAppVersion\')}} v<span id="a4pDeviceDetectorWidth" app-version=""></span> <span id="a4pDeviceDetectorHeight">{{srvConfig.c4pBuildDate}} {{srvConfig.env}}</span> <span ng-show="srvConfig.c4pConfig.exposeBetaFunctionalities">Beta</span></small></div></div></div></div></div>'), 
    $templateCache.put("partials/navigation/config_header.html", '<div class="c4p-header-std" resize-opts="{name:\'config_header\'}"><div class="row"><div class="col-xxs-12"><ul class="nav nav-pills"><li class=""><a class="btn disabled"><img class="c4p-img-icon" src="l4p/img/logo_meeting_.png"></a></li><li ng-include="\'partials/navigation/header_back.html\'"></li></ul></div></div></div>'), 
    $templateCache.put("partials/navigation/footer_detail.html", '<div class="c4p-footer-details c4p-color-gradient0" style="position:relative" resize-opts="{name:\'navigation_footer_detail\', watchRefresh:[\'srvNav.item\', \'srvNav.history\']}" resizecss-width="getPathValue(\'parentNode\', \'offsetWidth\')"><div class="btn c4p-color-action-transparent" ng-click="gotoBack()" resize-opts="{name:\'navigation_footer_detail_back\'}"><span class="c4p-icon-std glyphicon glyphicon-arrow-left"></span></div><div class="btn btn-xs" ng-controller="ctrlNavObject" resize-opts="{name:\'navigation_footer_detail_history\', watchRefresh:[\'srvNav.item\', \'srvNav.history\']}" resizecss-width="getResizePathValue(\'navigation_footer_detail\', \'\', \'offsetWidth\') -1 -getResizePathValue(\'navigation_footer_detail_back\', \'\', \'offsetWidth\') -getResizePathValue(\'navigation_footer_detail_spacer\', \'\', \'offsetWidth\') -getResizePathValue(\'navigation_footer_detail_lock\', \'\', \'offsetWidth\') -getResizePathValue(\'navigation_footer_detail_meeting\', \'\', \'offsetWidth\')"><ul style="overflow-x:hidden" class="c4p-list-footer-details"><li class="c4p-item-list-footer-details" ng-repeat="back in srvNav.history | limitTo:3" ng-class="{\'c4p-item-list-ftr-footer-details\':$last}" style="opacity: {{1-(0.33*$index)}}"><small><span class="glyphicon glyphicon-{{back.itemIcon}}"></span> <span ng-switch="!back.itemName"><span ng-switch-when="true">{{srvLocale.translations.htmlSlideName[back.slide]}}</span> <span ng-switch-default="">{{back.itemName}}</span></span></small></li></ul></div><div class="c4p-hf-spacer" resize-opts="{name:\'navigation_footer_detail_spacer\'}"><div class="btn c4p-padding-w-packed"><div class="c4p-icon-std glyphicon">&nbsp;</div></div></div><div class="btn" ng-show="srvSecurity.isSecured()" ng-click="openDialogLocked()" resize-opts="{name:\'navigation_footer_detail_lock\'}"><a class="c4p-link2"><span class="glyphicon glyphicon-lock"></span></a></div><div class="btn btn-danger" ng-class="{\'active\' : dropOver}" ng-show="dndActive" ng-controller="ctrlTrashObject" sense-opts="{name:\'dropObjectTrash\'}" sense-dndstart="dndStart($event)" sense-dndend="dndEnd($event)" sense-dndcancel="dndCancel($event)" sense-dropoverenter="dropOverEnter($event)" sense-dropoverleave="dropOverLeave($event)" sense-dropend="dropEnd($event)" style="position:absolute;z-index:1041;top:0;left:0"><span class="c4p-icon-std glyphicon glyphicon-trash"></span></div></div>'), 
    $templateCache.put("partials/navigation/footer_related.html", '<div class="c4p-footer-details c4p-color-{{getTypeColor(srvNav.item.a4p_type)}}-gradient2" resize-opts="{name:\'navigation_footer_related\', watchRefresh:[\'srvNav.item\', \'srvNav.history\']}"><div class="btn c4p-color-action-transparent" ng-show="responsiveIsOnePageFormat()" ng-click="gotoBack()" resize-opts="{name:\'navigation_footer_related_back\'}"><span class="c4p-icon-std glyphicon glyphicon-arrow-left"></span></div><div class="btn btn-xs" ng-show="responsiveIsOnePageFormat()" ng-controller="ctrlNavObject" resize-opts="{name:\'navigation_footer_related_history\', watchRefresh:[\'srvNav.item\', \'srvNav.history\']}" resizecss-width="getResizePathValue(\'navigation_footer_related\', \'\', \'offsetWidth\') -1 -getResizePathValue(\'navigation_footer_related_back\', \'\', \'offsetWidth\') -getResizePathValue(\'navigation_footer_related_lock\', \'\', \'offsetWidth\') -getResizePathValue(\'navigation_footer_related_spacer\', \'\', \'offsetWidth\') - getResizePathValue(\'navigation_footer_related_meeting\', \'\', \'offsetWidth\')"><ul style="overflow-x:hidden" class="c4p-list-footer-details"><li class="c4p-item-list-footer-details" ng-repeat="back in srvNav.history | limitTo:3" ng-class="{\'c4p-item-list-ftr-footer-details\':$last}" style="opacity: {{1-(0.33*$index)}}"><small><span class="glyphicon glyphicon-{{back.itemIcon}}"></span> <span ng-switch="!back.itemName"><span ng-switch-when="true">{{srvLocale.translations.htmlSlideName[back.slide]}}</span> <span ng-switch-default="">{{back.itemName}}</span></span></small></li></ul></div><div class="c4p-hf-spacer" resize-opts="{name:\'navigation_footer_related_spacer\'}"><div class="btn"><div class="c4p-icon-std glyphicon">&nbsp;</div></div></div><div class="btn" ng-show="responsiveIsOnePageFormat() && srvSecurity.isSecured()" ng-click="openDialogLocked()" resize-opts="{name:\'navigation_footer_related_lock\'}"><a class="c4p-link2"><span class="glyphicon glyphicon-lock"></span></a></div></div>'), 
    $templateCache.put("partials/navigation/header_back.html", '<div class="dropdown" ng-controller="ctrlNavObject"><a class="btn dropdown-toggle" ng-disabled="srvNav.history.length == 0" style="border: 0"><h5 class="a4p-dot c4p-gray"><i class="glyphicon glyphicon-angle-down" ng-hide="srvNav.history.length == 0"></i> {{navTitle}}</h5></a><ul class="dropdown-menu c4p-dropdown-menu c4p-details-menu-align" role="menu"><li ng-repeat="back in srvNav.history | limitTo:5" ng-style="{opacity:(1/($index + 1))}"><a class="btn" ng-click="gotoIndex($index)"><i class="pull-left glyphicon glyphicon-fw glyphicon-{{back.itemIcon}}"></i><div class="a4p-dot" style="text-align: left" ng-switch="!back.itemName"><span ng-switch-when="true">{{srvLocale.translations.htmlSlideName[back.slide]}}</span> <span ng-switch-default="">{{back.itemName}}</span></div></a></li></ul></div>'), 
    $templateCache.put("partials/navigation/main.html", '<div ng-controller="ctrlAside"><div class="c4p-ltr c4p-height-full" ng-style="{width:(responsiveToolbarWidth())+\'px\'}"><div id="" class="col-xxs-12 c4p-height-full" ng-style="{width:(responsiveAsideWidth()+ responsiveToolbarWidth())+\'px\'}" resize-opts="{name:\'navigation_ctrlAside\'}" ng-include="\'partials/navigation/aside_root.html\'"></div></div><div class="c4p-ltr c4p-click-intercepted" ng-style="{height:(responsivePageHeight() - 44)+\'px\'}" style="z-index: 3; width: 0px" ng-switch="" on="asideRootMenuUp"><div ng-switch-when="false" class="c4p-click-intercepted" ng-style="{height:(responsivePageHeight() - 44)+\'px\', width:responsiveAsideWidth()+\'px\'}" style="position: relative"><div ng-include="\'partials/navigation/aside_search.html\'"></div></div></div><div class="c4p-ltr c4p-height-full c4p-click-through" ng-style="{height:(responsivePageHeight())+\'px\',width:responsiveCentralContainerWidth()+\'px\'}" resize-opts="{name:\'navigation_ctrlPanelMove\'}" sense-opts="{name:\'navigation_ctrlPanelMove\', axeX:\'scroll\', init:\'setSensePanel($sense)\'}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\', hScrollbar : false, x:getPanelX(), momentum: 0}" sense-afterscrollend="onPanelAfterScrollEnd($x, $y)" style="z-index: 5"><div class="c4p-ltr c4p-height-full" resize-opts="{name:\'navigation_panel_scroller\'}" ng-style="{width:(responsiveAsideWidth() + responsiveDetailWidth() + responsiveRelatedWidth())+\'px\'}"><div id="a4pAside" class="c4p-ltr c4p-click-through" ng-style="{height:(responsivePageHeight() - 44)+\'px\', width:responsiveAsideWidth()+\'px\'}" resize-opts="{name:\'navigation_translucent\'}" ontouchstart="a4pBlockMove(event)"><div ng-include="\'partials/navigation/translucent_panel.html\'"></div></div><div id="a4pPage" class="c4p-ltr c4p-click-intercepted"><div ng-switch="" on="getSlideFromNavIndex()"><div ng-switch-when="config"><div ng-controller="ctrlConfig" ng-include="\'partials/navigation/config.html\'" ng-style="{width:(responsiveMainWidth() + (!responsiveIsOnePageFormat() * responsiveRelatedWidth()))+\'px\'}"></div></div><div ng-switch-when="calendar"><div ng-controller="ctrlCalendar" ng-include="\'partials/navigation/calendar.html\'" ng-style="{width:(responsiveMainWidth() + (!responsiveIsOnePageFormat() * responsiveRelatedWidth()))+\'px\'}"></div></div><div ng-switch-default=""><div ng-controller="ctrlDetail" ng-include="\'partials/navigation/view_n.html\'" ng-style="{width:(responsiveDetailWidth() + responsiveRelatedWidth())+\'px\'}"></div></div></div></div></div></div><div ng-controller="ctrlRightToolbar" class="c4p-ltr c4p-toolbar c4p-height-full" ng-if="!responsiveIsOnePageFormat()" ng-style="{width:(responsiveToolbarWidth())+\'px\'}" resize-opts="{name:\'right_toolbar\'}" style="box-shadow: 0px 0px 10px 4px rgba(0, 0, 0, 0.2);z-index: 6"><div class="c4p-toolbar-header c4p-color-a-gradient1" resize-opts="{name:\'right_toolbar_header\'}" ng-show="(getSlideFromNavIndex() != \'calendar\')"><div class="btn c4p-color-action-transparent c4p-padding-w-packed" ng-click="toggleNavRelated()"><span class="c4p-icon-std glyphicon glyphicon-link"></span></div></div><div class="c4p-color-a-gradient2 row" sense-opts="{name:\'right_toolbar_wrapper\', axeY:\'scroll\', watchRefresh:[\'srvNav.item\', \'srvNav.itemRelatedGroupList\']}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}" resize-opts="{name:\'right_toolbar_wrapper\'}" resizecss-height="responsivePageHeight() - getResizePathValue(\'right_toolbar_header\', \'\', \'offsetHeight\')"><div class="col-xxs-12" resize-opts="{name:\'right_toolbar_scroller\', watchRefresh:[\'srvNav.item\', \'srvNav.itemRelatedGroupList\']}"><div ng-if="!detailLoadingSpinner" ng-click="setNavRelated(true);showAsideGroupSuggestion(true);" ng-show="(getSlideFromNavIndex() != \'calendar\')"><div class="c4p-color-j-dark-iii"><div class="c4p-related-square-icon"><span class="c4p-icon-std glyphicon glyphicon-ellipsis-h"></span></div><div class="c4p-related-square-text"><span>&nbsp;</span></div></div></div><div ng-if="!detailLoadingSpinner" ng-repeat="group in srvNav.itemRelatedGroupList" ng-show="group.type != \'Plan\' && group.type != \'Facet\'" ng-class="{\'active\': linksPageY == $index}" ng-click="setNavRelated(true);showAsideGroup(group, true);"><div class="c4p-color-{{group.colorType}}-dark-iii"><div class="c4p-related-square-icon"><span class="c4p-icon-std glyphicon glyphicon-{{group.icon}}"></span></div><div class="c4p-related-square-text"><span>{{group.size}}</span></div></div></div></div></div></div></div>'), 
    $templateCache.put("partials/navigation/translucent_panel.html", '<div class="btn c4p-padding-w-packed c4p-color-gradient0 c4p-click-intercepted" style="position:absolute; top:50%; right: 0;height:2em; margin-top:-1em;box-shadow: 0px 0px 10px 4px rgba(0, 0, 0, 0.5);z-index: 5" ng-click="setNavAside(false)" ng-show="responsiveIsOnePageFormat() && (srvNav.current == null) "><span class="c4p-icon-std glyphicon glyphicon-ellipsis-v"></span></div><div class="half-circle-left c4p-color-gradient0 c4p-click-intercepted" style="position:absolute; top:50%; right: 0; margin-top:-4em;box-shadow: 0px 0px 10px 4px rgba(0, 0, 0, 0.5);z-index: 8" ng-show="responsiveIsOnePageFormat() && (srvNav.current!=null) " ng-class="{\'c4p-dropzone-active\': dndActive, \'c4p-dropzone-active-hover\': dropOver}" ng-controller="ctrlLinkActions" ng-click="setNavAside(false)" sense-opts="{name:\'navigation_detail_small_drop_zone\'}" sense-dndstart="dndStart($event)" sense-dndend="dndEnd($event)" sense-dndcancel="dndCancel($event)" sense-dropstart="dropStart($event)" sense-dropend="dropEnd($event)" sense-dropcancel="dropCancel($event)" sense-dropoverenter="dropOverEnter($event)" sense-dropoverleave="dropOverLeave($event)"><div class="c4p-icn-side-drop"><span class="c4p-icon-std glyphicon glyphicon-{{srvNav.current.itemIcon}}"></span></div><div class="c4p-txt-side-drop"><div class="rotate-txt"><div class="c4p-no-dot-container"><small class="a4p-dot">{{srvNav.current.itemName}}</small></div></div></div></div>'), 
    $templateCache.put("partials/navigation/view_n.html", '<div class="c4p-container c4p-color-gradient0" resize-opts="{name:\'navigation_view_n\'}"><div class="c4p-waiting" ng-show="detailLoadingSpinner" ng-style="{\'max-width\':(responsivePageWidth())+\'px\'}" c4p-animateshow="detailLoadingSpinner" after-hide="afterDetailSpinnerHide()" after-show="afterDetailSpinnerShow()"><div ng-include="\'partials/spinner.html\'"></div></div><div ng-if="!detailLoadingSpinner"><div class="c4p-ltr c4p-height-full ng-cloak" ng-style="{width:responsiveDetailWidth()+\'px\'}" resize-opts="{name:\'navigation_view_detailed\'}"><div class="btn c4p-padding-w-packed c4p-color-gradient0" style="position:absolute; top:50%; right: 0;height:2em; margin-top:-1em;box-shadow: 0px 0px 5px 2px rgba(0, 0, 0, 0.5);z-index: 10" ng-click="setNavRelated(true)" ng-show="responsiveIsOnePageFormat()"><span class="c4p-icon-std glyphicon glyphicon-ellipsis-v"></span></div><div ng-include="\'partials/navigation/view_n_1.html\'"></div></div><div class="c4p-ltr c4p-height-full ng-cloak" ng-style="{width:responsiveRelatedWidth()+\'px\'}" resize-opts="{name:\'navigation_view_links\'}"><div ng-include="\'partials/navigation/view_n_2.html\'"></div></div></div></div>'), 
    $templateCache.put("partials/navigation/view_n_1.html", '<div ng-controller="ctrlDetailedObject" class="c4p-color-a-gradient{{cards.length}}"><div ng-controller="ctrlAction" ng-init="watchSrvNav();"><div class="col-xxs-12 c4p-header-std c4p-header-details c4p-color-gradient0" resize-opts="{name:\'navigation_detail_title\'}" ng-include="\'partials/navigation/view_n_1_header.html\'"></div><div class="col-xxs-12" sense-opts="{name:\'detailed_item_wrapper\', axeY:\'scroll\', watchRefresh:[\'srvNav.item\', \'srvNav.itemRelatedList[srvNav.itemRelatedGroup.type]\']}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\', momentum:0}" resize-opts="{name:\'detailed_item_wrapper\'}" resizecss-height="responsivePageHeight() - getResizePathValue(\'navigation_detail_title\', \'\', \'offsetHeight\') - getResizePathValue(\'navigation_footer_detail\', \'\', \'offsetHeight\')"><div class="col-xxs-12 c4p-color-gradient0" resize-opts="{name:\'detailed_item_scroller\', watchRefresh:[\'srvNav.item\', \'srvNav.itemRelatedList[srvNav.itemRelatedGroup.type]\']}"><div ng-repeat="card in cards" class="c4p-color-a-gradient{{$index}} c4p-card row" ng-class="{\'c4p-card-thumb\': $first}" ng-init="cardItem = srvNav.item; cardGroups = card.groups; cardHasThumb = ($first == true); cardItemName = itemName; cardIsAboutVideo = isVideo; cardIsAboutFile = isFile; cardItemColor = \'c4p-color-\'+itemColor" ng-include="\'partials/navigation/cards/detail_card.html\'"></div></div><div ng-controller="ctrlLinkActions"><div ng-show="dndActive" style="position: absolute; z-index: 1041; top: 0; left: 0; bottom:0; right:0" ng-class="{\'c4p-dropzone-active\': dndActive, \'c4p-dropzone-active-hover\': dropOver}" resize-opts="{name:\'navigation_detail_link_drop_zone\', watchRefresh:[\'getSensePanelScrollX()\', \'srvNav.item.id.dbid\']}" resizecss-height="getResizePathValue(\'detailed_item_wrapper\', \'\', \'offsetHeight\')" sense-opts="{name:\'navigation_detail_link_drop_zone\'}" sense-dndstart="dndStart($event)" sense-dndend="dndEnd($event)" sense-dndcancel="dndCancel($event)" sense-dropstart="dropStart($event)" sense-dropend="dropEnd($event)" sense-dropcancel="dropCancel($event)" sense-dropoverenter="dropOverEnter($event)" sense-dropoverleave="dropOverLeave($event)"><div><div>&nbsp;</div></div></div></div></div></div></div>'), 
    $templateCache.put("partials/navigation/view_n_1_header.html", '<div class="col-xxs-12"><ul class="nav nav-pills"><li class=""><a class="btn btn-sm disabled"><img class="c4p-img-icon" src="l4p/img/logo_meeting_.png"></a></li><li ng-include="\'partials/navigation/header_back.html\'"></li><li class="pull-right"><a class="btn" ng-click="doAction(\'editItem\')"><span class="c4p-icon-std glyphicon glyphicon-edit"></span></a></li></ul></div>'), 
    $templateCache.put("partials/navigation/view_n_2.html", '<div class="row c4p-header-related c4p-color-a-gradient2" resize-opts="{name:\'detailed_links_header\'}"><div class="col-xxs-12"><ul class="nav nav-pills"><li ng-show="responsiveIsOnePageFormat()"><a class="btn" ng-click="setNavRelated(false)"><span class="pull-left c4p-icon-std glyphicon glyphicon-angle-left"></span><c4p-thumb width="20" height="20" text="{{getItemNameById(srvNav.item.id.dbid)}}" indic="##todo" icon="##todo" color="c4p-color-{{srvNav.itemColor}}" url="{{srvNav.item.thumb_url}}"></c4p-thumb></a></li><li ng-hide="linkStateAdd" style="width:80%"><a class="btn disabled"><h5 class="a4p-dot">{{translate(\'htmlViewNrelatedPageTitle\')}}</h5></a></li><li><a class="btn" ng-show="linkStateAdd"><span class="">{{translate(\'htmlViewNrelatedPageTitleNew\')}}</span></a></li></ul></div><div class="btn c4p-padding-w-packed c4p-color-action-transparent pull-right" ng-show="linkStateAdd" ng-click="toggleLinkStateAdd()"><span class="c4p-icon-std glyphicon glyphicon-times-circle"></span></div></div><div class="row c4p-color-a-gradient1"><article class="col-xxs-12" resizecss-height="responsivePageHeight() -getResizePathValue(\'detailed_links_header\', \'\', \'offsetHeight\')" ng-include="\'partials/navigation/view_n_2_links_item.html\'"></article></div>'), 
    $templateCache.put("partials/navigation/view_n_2_link_editor__deprecated.html", '<div sense-opts="{name:\'detailed_links_wrapper\', axeY:\'scroll\', watchRefresh:[\'srvNav.itemRelatedGroup\', \'srvNav.item.a4p_type\']}" sense-scrollopts="{scrollbarClass:\'c4p-scrollbar\'}" resize-opts="{name:\'detailed_links_wrapper\'}" resizecss-height="responsivePageHeight() -getResizePathValue(\'detailed_links_header\', \'\', \'offsetHeight\')"><div resize-opts="{name:\'detailed_links_scroller\', watchRefresh:[\'srvNav.itemRelatedGroup\', \'srvNav.item.a4p_type\']}"><div class="c4p-related-card" ng-repeat="objectType in objectTypes()" ng-show="isPossibleLinkAction(srvNav.item.a4p_type, objectType)"><ul class="c4p-related-card-list"><li class="c4p-related-card-header c4p-color-{{objectTypeColor(objectType)}}-dark-iii"><span class="glyphicon glyphicon-{{objectTypeIcon(objectType)}}"></span> <span>{{srvLocale.translations.htmlTitleType[objectType]}}</span></li><li class="c4p-related-card-item c4p-color-{{objectTypeColor(objectType)}}-gradient3" ng-repeat="linkName in getPossibleLinkActionList(srvNav.item.a4p_type, objectType)"><div class="btn c4p-padding-w-packed">{{srvLocale.translations.htmlShortLinkName[linkName]}}</div><div class="btn c4p-padding-w-packed pull-right"><span class="c4p-icon-std glyphicon glyphicon-list c4p-color-action-transparent c4p-related-card-item-icon" ng-click="linkAddDialog(srvNav.item, linkName, objectType)"></span> <span class="c4p-icon-std glyphicon glyphicon-plus c4p-color-action-transparent c4p-related-card-item-icon" ng-click="createAndLinkDialog(srvNav.item, linkName, objectType)"></span></div></li></ul></div></div></div>'), 
    $templateCache.put("partials/navigation/view_n_2_links_item.html", '<div class="c4p-container-scroll-y"><div class="c4p-container"><div class="c4p-related-card c4p-color-a-gradient1" ng-controller="ctrlAction" ng-init="watchSrvNav();"><ul class="c4p-related-card-list"><li id="related_suggestion" class="c4p-related-card-header c4p-color-j-dark-iii" ng-click="showAsideGroupSuggestion(!bShowAsideGroupSuggestion)"><span class="glyphicon glyphicon-fw glyphicon-ellipsis-h"></span></li><li ng-show="bShowAsideGroupSuggestion"><div class="row c4p-color-j-gradient3"><div class="col-xxs-8 col-xxs-offset-2"><div class="btn-group btn-group-justified btn-block"><a ng-show="srvData.isMethodPossibleForObject(\'createNewPicture\', srvNav.item)" class="btn close" ng-click="createNewPicture(srvNav.item)"><span class="glyphicon glyphicon-camera"></span></a> <a ng-show="srvData.isMethodPossibleForObject(\'createNewNote\', srvNav.item)" class="btn close" ng-click="createNewNote(srvNav.item)"><span class="glyphicon glyphicon-{{getTypeIcon(\'Note\')}}"></span></a> <a ng-hide="srvData.isMethodPossibleForObject(\'createNewNote\', srvNav.item) || srvData.isMethodPossibleForObject(\'createNewPicture\', srvNav.item)" class="btn" ng-click="openDialogSendFeedbackReport(\'Your Praise\',\'Suggestion\',srvLocale.translations.htmlMsgFeedbackSuggestion)"><small>{{srvLocale.translations.htmlMsgFeedbackSuggestionQuestion}}</small></a></div><div class="btn-block well well-sm" style="border-radius: 1em" ng-show="srvNav.itemRelatedGroupList.length == 0"><a class="btn" style="white-space:normal" ng-click="setAsideRootMenu()"><span>{{getHtmlLinkHowto()}}</span><br><br><span class="c4p-icon-std glyphicon glyphicon-plus"></span></a></div></div></div></li></ul></div><div class="c4p-related-card c4p-color-a-gradient1" ng-repeat="group in srvNav.itemRelatedGroupList" ng-show="group.type != \'Plan\' && group.type != \'Facet\'"><ul class="c4p-related-card-list"><li id="related_{{group.name}}" class="c4p-related-card-header c4p-color-{{group.colorType}}-dark-iii" ng-click="showAsideGroup(group,!group.show)"><span class="glyphicon glyphicon-fw glyphicon-{{group.icon}}"></span> <span>{{group.name}}</span><span class="c4p-aside-count">{{group.size}}</span> <span ng-show="isDocumentGroup(group.type) && (srvNav.imageRelatedList.length > 0)" ng-click="$event.stopPropagation();showGallery();" class="glyphicon glyphicon-eye-open pull-right"></span></li><li ng-repeat="link in srvNav.itemRelatedList[group.type]" ng-show="group.show"><div class="row c4p-color-{{group.colorType}}-gradient3 {{{true: \'c4p-related-card-item-1st\', false: \'c4p-related-card-item-others\'}[$first]}}"><div class="col-xxs-11 c4p-related-card-holder"><span ng-include="\'partials/navigation/cards/summarized_card.html\'" ng-init="item = link.item; cardItemColor = \'c4p-color-\'+group.colorType"></span></div><div class="col-xxs-1" style="text-align: center"><div ng-if="link.linkNames.length == 1"><div id="{{link.item.id.dbid}}-unlink" class="btn c4p-color-action-transparent c4p-padding-w-packed" ng-click="unlinkDialog(link.linkNames[0], link.item)"><span class="c4p-icon-std close">&times;</span></div></div><div class="dropdown" ng-if="link.linkNames.length > 1"><div id="{{link.item.id.dbid}}-unlink" class="dropdown-toggle btn c4p-color-action-transparent c4p-padding-w-packed" data-toggle="dropdown"><span class="c4p-icon-std close">&times;</span></div><ul class="dropdown-menu c4p-dropdown-menu pull-right c4p-dropdown" aria-labelledby="{{link.item.id.dbid}}-unlink"><li>{{translate(\'htmlViewNlinkItemTextRemoveLink\')}}</li><li ng-repeat="linkName in getPossibleLinkActionList(srvNav.item.a4p_type, link.item.a4p_type)" ng-show="srvData.isObjectOwnedByUser(link.item) && srvData.isObjectOwnedByUser(srvNav.item)"><div class="btn" ng-click="unlinkDialog(linkName, link.item)"><span style="vertical-align:top">{{srvLocale.translations.htmlShortLinkName[linkName]}}</span></div></li></ul></div></div></div></li></ul></div></div></div>'), 
    $templateCache.put("partials/navigation/cards/4_rating.html", '<span style="position:relative;side:left" ng-switch="" on="item.type"><span ng-switch-when="check"><c4p-check ng-model="item.value" readonly></c4p-check><span style="padding:0 0 0 10px">{{item.name}}</span></span> <span ng-switch-when="star"><span style="padding:0 10px 0 0">{{item.name}}</span><c4p-angular-ratings ng-model="item.value" readonly></c4p-angular-ratings></span></span>'), 
    $templateCache.put("partials/navigation/cards/4_rating_ro.html", '<span style="position:relative;side:left" ng-switch="" on="item.type"><span ng-switch-when="check"><span class="glyphicon glyphicon-unchecked icon-large"></span> <span style="padding:0 0 0 10px">{{item.name}}</span></span> <span ng-switch-when="star"><span class="glyphicon glyphicon-star-empty icon-large"></span> <span style="padding:0 0 0 10px">{{item.name}}</span></span></span>'), 
    $templateCache.put("partials/navigation/cards/4_rating_ro2.html", '<span style="position:relative;side:left" ng-switch="" on="item.type"><span ng-switch-when="check"><c4p-check ng-model="item.value" readonly></c4p-check><span style="padding:0 0 0 10px">{{item.name}}</span></span> <span ng-switch-when="star"><span style="padding:0 10px 0 0">{{item.name}}</span><c4p-angular-ratings ng-model="item.value" readonly></c4p-angular-ratings></span></span>'), 
    $templateCache.put("partials/navigation/cards/detail_card.html", '<div class="row"><div class="c4p-card-text" ng-class="{\'col-xxs-12\': !cardHasThumb,\'col-xxs-11\' : (cardHasThumb && (cardIsAboutFile || cardIsAboutVideo || cardItem.a4p_type == \'Event\')),\'col-sm-9 col-xxs-11\' : (cardHasThumb && !cardIsAboutFile && !cardIsAboutVideo && cardItem.a4p_type != \'Event\')}"><div ng-repeat="group in cardGroups" class="col-xxs-12 c4p-size-{{group.size}}"><span ng-if="group.name && cardItem.a4p_type != \'Event\'" ng-class="{\'a4p-dot\': (cardIsAboutFile || cardIsAboutVideo)}">{{cardItemName}}</span> <span ng-if="group.name && cardItem.a4p_type == \'Event\'" ng-class="{\'a4p-dot\': (cardIsAboutFile || cardIsAboutVideo)}">{{cardItem.name}}</span> <span ng-if="group.title">{{group.title}}</span> <span ng-if="group.synchro" ng-init="itemSynchro = cardItem.c4p_synchro" ng-include="\'partials/navigation/cards/detail_synchro.html\'"></span> <address ng-if="group.fields.length > 1" class="col-xxs-12"><ul class="list-inline"><li ng-repeat-start="field in group.fields" ng-show="group.icon && $first && field.value && field.value.length" class=""><i class="glyphicon glyphicon-fw glyphicon-{{group.icon}}" ng-class="{\'c4p-icon-calendar-allday\':allDayEvent}"></i></li><li ng-repeat-end=""><div class="c4p-size-{{field.size}}" ng-include="\'partials/navigation/cards/detail_field.html\'"></div></li></ul></address><address ng-if="group.fields.length == 1" ng-init="field = group.fields[0]" class="col-xxs-12"><ul ng-class="{\'list-inline\': field.type !=\'textarea\', \'list-unstyled\': field.type ==\'textarea\'}"><li ng-show="group.icon && field.value && field.value.length" class=""><i class="glyphicon glyphicon-fw glyphicon-{{group.icon}}" ng-class="{\'c4p-icon-calendar-allday\':allDayEvent}"></i></li><li><div class="c4p-size-{{field.size}}" ng-include="\'partials/navigation/cards/detail_field.html\'"></div></li></ul></address></div></div><div class="c4p-card-thumb pull-right col-sm-2 hidden-xs" ng-if="cardHasThumb && !cardIsAboutFile && !cardIsAboutVideo && cardItem.a4p_type != \'Event\'"><c4p-thumb class="pull-right" width="70" height="70" text="{{cardItemName}}" indic="{{itemRelationCount}}" icon="glyphicon-{{itemIcon}}" color="{{cardItemColor}}" url="{{cardItem.thumb_url}}"></c4p-thumb></div><div class="c4p-card-thumb pull-right col-xxs-1" ng-if="cardHasThumb"><div class="pull-right c4p-color-action-transparent" ng-click="doAction(\'toggleFavorite\')"><span class="c4p-icon-std glyphicon c4p-outline-star" ng-class="{\'glyphicon-star\' : srvData.isTaggedFavorite(cardItem), \'glyphicon-star-o\' : !srvData.isTaggedFavorite(cardItem)}"></span></div></div><div class="c4p-card-thumb center-block col-xxs-11" ng-if="cardHasThumb && cardIsAboutFile && !cardIsAboutVideo && cardItem.a4p_type != \'Event\'"><div class="btn c4p-card-thumb-media" ng-class="{\'disabled\': actionMap.viewDocument.disabled}" ng-click="doAction(\'viewDocument\')" style="background:url(\'{{cardItem.thumb_url}}\') no-repeat center center;-webkit-background-size: contain"></div></div><div class="c4p-card-thumb center-block col-xxs-11" ng-if="cardHasThumb && cardIsAboutVideo && cardItem.a4p_type != \'Event\'"><video controls="" ng-src="{{cardItem.url}}" class="c4p-card-thumb-media"></video></div></div>'), 
    $templateCache.put("partials/navigation/cards/detail_field.html", ' <span ng-show="field.title">{{field.title}} :</span> <span ng-show="field.prefix">{{field.prefix}}</span> <span ng-switch="field.isArray"><span ng-switch-when="true"><span ng-repeat="item in field.value"><span ng-show="($index > 0) && (field.separator != \'br\')">{{field.separator}}</span><br ng-show="($index > 0) && (field.separator == \'br\')"><span ng-switch="field.type"><a ng-switch-when="tel" class="c4p-color-lnk" href="tel:{{item}}" target="_blank">{{item}}</a> <a ng-switch-when="mail" class="c4p-color-lnk" href="mailto:{{item}}" target="_blank">{{item}}</a> <a ng-switch-when="url" class="c4p-color-lnk" href="{{item}}" target="_blank">{{item}}</a> <span ng-switch-when="currency">{{item | c4pCurrency}}</span> <span ng-switch-when="percent">{{item}}%</span> <span ng-switch-when="probability">{{item}}%</span> <span ng-switch-when="datetime">{{srvLocale.formatDate(item, \'short\')}}</span> <span ng-switch-when="dateTIME">{{srvLocale.formatDate(item, \'shortDate\')}} <b>{{srvLocale.formatDate(item, \'shortTime\')}}</b></span> <span ng-switch-when="date">{{srvLocale.formatDate(item, \'shortDate\')}}</span> <span ng-switch-when="time">{{srvLocale.formatDate(item, \'shortTime\')}}</span> <span ng-switch-when="TIME"><b>{{srvLocale.formatDate(item, \'shortTime\')}}</b></span> <span ng-switch-when="number">{{item | c4pNumber}}</span> <span ng-switch-when="rating"><span ng-include="\'partials/navigation/cards/4_rating_ro2.html\'" style="padding: 0 10px"></span></span><blockquote ng-switch-when="textarea" ng-bind-html="renderHtmlText(item)"></blockquote><address ng-switch-when="address">{{item}}</address><span ng-switch-default="">{{item}}</span></span></span></span> <span ng-switch-default=""><span ng-switch="field.type"><a ng-switch-when="tel" class="c4p-color-lnk" href="tel:{{field.value}}" target="_blank">{{field.value}}</a> <a ng-switch-when="mail" class="c4p-color-lnk" href="mailto:{{field.value}}" target="_blank">{{field.value}}</a> <a ng-switch-when="url" class="c4p-color-lnk" href="{{field.value}}" target="_blank">{{field.value}}</a> <span ng-switch-when="currency">{{field.value | c4pCurrency}}</span> <span ng-switch-when="percent">{{field.value}}%</span> <span ng-switch-when="probability">{{field.value}}%</span> <span ng-switch-when="datetime">{{srvLocale.formatDate(field.value, \'short\')}}</span> <span ng-switch-when="dateTIME">{{srvLocale.formatDate(field.value, \'shortDate\')}} <b>{{srvLocale.formatDate(field.value, \'shortTime\')}}</b></span> <span ng-switch-when="date">{{srvLocale.formatDate(field.value, \'shortDate\')}}</span> <span ng-switch-when="time">{{srvLocale.formatDate(field.value, \'shortTime\')}}</span> <span ng-switch-when="TIME"><b>{{srvLocale.formatDate(field.value, \'shortTime\')}}</b></span> <span ng-switch-when="number">{{field.value | c4pNumber}}</span> <span ng-switch-when="rating"><span ng-init="item = field.value" ng-include="\'partials/navigation/cards/4_rating_ro2.html\'" style="padding: 0 10px"></span></span><blockquote ng-switch-when="textarea" ng-bind-html="renderHtmlText(field.value)"></blockquote><address ng-switch-when="address">{{field.value}}</address><span ng-switch-default="">{{field.value}}</span></span></span></span> <span ng-if="field.suffix">{{field.suffix}}</span>'), 
    $templateCache.put("partials/navigation/cards/detail_synchro.html", "<div ng-if=\"itemSynchro && (itemSynchro.creating || itemSynchro.writing || itemSynchro.reading || itemSynchro.deleting)\" class=\"glyphicon\" ng-class=\"{\n	        'glyphicon-trash'    : (itemSynchro.deleting > 1),\n	        'glyphicon-times-circle' : (!itemSynchro.deleting && (itemSynchro.creating > 1)),\n	        'glyphicon-upload'   : (!itemSynchro.deleting && !itemSynchro.creating && (itemSynchro.writing > 1)),\n	        'glyphicon-download' : (!itemSynchro.deleting && !itemSynchro.creating && !itemSynchro.writing && (itemSynchro.reading > 1)),\n	        'glyphicon-spinner'  : ((itemSynchro.deleting == 1) || (itemSynchro.creating == 1) || (itemSynchro.writing == 1) || (itemSynchro.reading == 1)),\n	        'glyphicon-spin'          : ((itemSynchro.deleting == 1) || (itemSynchro.creating == 1) || (itemSynchro.writing == 1) || (itemSynchro.reading == 1))\n	      }\"></div>"), 
    $templateCache.put("partials/navigation/cards/draggable_inlined_card.html", '<div ng-controller="ctrlDragObject" ng-init="init(cardItem)" sense-opts="{}" sense-longdragoverenter="dragOverEnter($event,$element)" sense-longdragoverleave="dragOverLeave($event,$element)" sense-longdragstart="dragStart($event,$element)" sense-longdragmove="dragMove($event,$element)" sense-longdragend="dragEnd($event,$element)" sense-longdragcancel="dragCancel($event,$element)" sense-holdstart="holdStart($event,$element)" sense-holdstop="holdStop($event,$element)"><div ng-include="\'partials/navigation/cards/inlined_card.html\'"></div></div>'), 
    $templateCache.put("partials/navigation/cards/draggable_summarized_card.html", '<div class="col-xxs-12 c4p-link5" ng-controller="ctrlDragObject" ng-init="init(cardItem)"><div ng-class="{\'c4p-hover-drag\':srvNav.item && srvConfig.c4pConfig.exposeDraggableHover, \'c4p-border-drag\':srvNav.item && srvConfig.c4pConfig.exposeDraggableBorder}" style="border-width: 1px;padding:2px" ng-include="\'partials/navigation/cards/summarized_card.html\'"></div></div>'), 
    $templateCache.put("partials/navigation/cards/inlined_card.html", '<ul class="nav nav-pills" ng-controller="ctrlInlinedObject" ng-init="init(cardItem)"><li class="" style="width:95%; text-align: left"><div ng-show="inlinedItemSecondName"><span class="pull-left a4p-dot" style="max-width: 75%">{{inlinedItemName}}</span> <small class="pull-right" style="max-width: 20%; color: rgb(172, 172, 172)">{{inlinedItemSecondName}}</small></div><div ng-hide="inlinedItemSecondName"><span class="pull-left a4p-dot" style="max-width: 95%">{{inlinedItemName}}</span></div></li><li><span ng-show="(inlinedItem.c4p_synchro.creating || inlinedItem.c4p_synchro.writing || inlinedItem.c4p_synchro.reading || inlinedItem.c4p_synchro.deleting)" class="glyphicon" ng-class="{\n            \'glyphicon-trash\'    : (inlinedItem.c4p_synchro.deleting > 1),\n            \'glyphicon-times-circle\' : (!inlinedItem.c4p_synchro.deleting && (inlinedItem.c4p_synchro.creating > 1)),\n            \'glyphicon-upload\'   : (!inlinedItem.c4p_synchro.deleting && !inlinedItem.c4p_synchro.creating && (inlinedItem.c4p_synchro.writing > 1)),\n            \'glyphicon-download\' : (!inlinedItem.c4p_synchro.deleting && !inlinedItem.c4p_synchro.creating && !inlinedItem.c4p_synchro.writing && (inlinedItem.c4p_synchro.reading > 1)),\n            \'glyphicon-spinner\'  : ((inlinedItem.c4p_synchro.deleting == 1) || (inlinedItem.c4p_synchro.creating == 1) || (inlinedItem.c4p_synchro.writing == 1) || (inlinedItem.c4p_synchro.reading == 1)),\n            \'glyphicon-spin\'          : ((inlinedItem.c4p_synchro.deleting == 1) || (inlinedItem.c4p_synchro.creating == 1) || (inlinedItem.c4p_synchro.writing == 1) || (inlinedItem.c4p_synchro.reading == 1))\n        }"></span></li></ul>'), 
    $templateCache.put("partials/navigation/cards/summarized_card.html", ' <a ng-controller="ctrlSummarizedObject" ng-init="set(item, \'displaySummarizedObjectGroups\')" ng-click="selectItem(item,true)"><div class="btn c4p-click-intercepted" style="position:absolute;top:0;bottom:0;left:0;right:0"></div><div class="c4p-card c4p-card-summarized c4p-card-thumb c4p-click-through" ng-init="cardItem = item; cardGroups = groups; cardHasThumb = true; cardItemName = itemName; cardIsAboutVideo = isVideo; cardIsAboutFile = isFile;" ng-include="\'partials/navigation/cards/detail_card.html\'"></div></a>');
} ]);

var SrvConfig = function() {
    function Service(srvDataTransfer, srvLoad, srvLocalStorage, srvAnalytics) {
        this.dataTransfer = srvDataTransfer, this.srvLoad = srvLoad, this.srvLocalStorage = srvLocalStorage, 
        this.srvAnalytics = srvAnalytics, this.c4pUrlConf = "models/c4p_conf.json", this.c4pUrlBase = "", 
        this.c4pUrlForget = this.c4pUrlBase + "/c4p_forget.php", this.c4pUrlCreateAccount = this.c4pUrlBase + "/c4p_createAccount.php", 
        this.c4pUrlData = this.c4pUrlBase + "/c4p_fill.php", this.c4pUrlFullMap = this.c4pUrlBase + "/c4p_fullMap.php", 
        this.c4pUrlRefreshMap = this.c4pUrlBase + "/c4p_refreshMap.php", this.c4pUrlUpload = this.c4pUrlBase + "/c4p_upload.php", 
        this.c4pUrlUploadFile = this.c4pUrlBase + "/c4p_uploadFile.php", this.c4pUrlSendEmail = this.c4pUrlBase + "/c4p_sendEmail.php", 
        this.c4pUrlSendICal = this.c4pUrlBase + "/c4p_sendICal.php", this.c4pUrlShareDoc = this.c4pUrlBase + "/c4p_shareDoc.php", 
        this.c4pUrlSfCreate = this.c4pUrlBase + "/c4p_create.php", this.c4pUrlSfUpdate = this.c4pUrlBase + "/c4p_update.php", 
        this.c4pUrlSfDelete = this.c4pUrlBase + "/c4p_delete.php", this.c4pUrlErrorReport = this.c4pUrlBase + "/c4p_errorReport.php", 
        this.c4pUrlFeedbackReport = this.c4pUrlBase + "/c4p_feedbackReport.php", this.c4pUrlFeedback = this.c4pUrlBase + "/c4p_feedback.php", 
        this.c4pUrlDownload = this.c4pUrlBase + "/c4p_download.php", this.c4pUrlPing = this.c4pUrlBase + "/c4p_ping.php", 
        this.trustAllHosts = !1, this.c4pBuildDate = "", this.c4pLicence = "", this.possibleCrms = [ "ios", "c4p" ], 
        this.activeCrms = [ "ios", "c4p" ], this.c4pConfig = {
            exposeBetaFunctionalities: !1
        }, this.nameComposition = {}, this.sizeCss = "", this.themeCss = "c4p-cosmo", this.initBetaOptions(), 
        this.env = "P", this.initDone = !1;
    }
    var betaOptions = [ "exposeCreateAccount", "exposeRequestPassword", "exposeUserFeedback", "exposeFileStorage", "exposeDataSynchro", "exposeGoogleMap", "exposeTimeline", "exposeFacetDialog", "exposeDraggableHover", "exposeDraggableBorder", "exposeAllFacets", "phoneFormatIfSmall" ];
    return Service.prototype.initBetaOptions = function() {
        for (var i = 0, nb = betaOptions.length; nb > i; i++) {
            var key = betaOptions[i];
            a4p.isUndefinedOrNull(this.c4pConfig[key]) && (this.c4pConfig[key] = !1);
        }
    }, Service.prototype.init = function() {
        if (!this.initDone) {
            var urlBase = this.srvLocalStorage.get("UrlBase", "");
            this.setUrlBase(urlBase), this.trustAllHosts = this.srvLocalStorage.get("TrustAllHosts", !1), 
            this.c4pBuildDate = this.srvLocalStorage.get("BuildDate", ""), this.c4pLicence = this.srvLocalStorage.get("Licence", ""), 
            this.possibleCrms = this.srvLocalStorage.get("PossibleCrms", [ "ios", "c4p" ]), 
            this.activeCrms = this.srvLocalStorage.get("ActiveCrms", [ "ios", "c4p" ]), this.c4pConfig = this.srvLocalStorage.get("Config", {
                exposeBetaFunctionalities: !1
            }), this.initBetaOptions(), this.nameComposition = this.srvLocalStorage.get("NameComposition", {});
            var sizeCss = this.srvLocalStorage.get("SizeCss", "");
            if ("" != sizeCss) {
                this.sizeCss = sizeCss;
                var html = document.documentElement;
                html.style.fontSize = this.sizeCss;
            }
            this.themeCss = this.srvLocalStorage.get("ThemeCss", "c4p-cosmo");
            var appVersion = "Free";
            2 == this.activeCrms.length && (appVersion = "Freemium"), this.activeCrms.length > 2 && (appVersion = "Premium"), 
            this.srvAnalytics.setVid(this.c4pBuildDate + " " + this.env + " " + appVersion), 
            this.initDone = !0, a4p.InternalLog.log("srvConfig", "initialized");
        }
    }, Service.prototype.setC4pUrlConf = function(c4pUrlConf) {
        this.c4pUrlConf = c4pUrlConf;
    }, Service.prototype.startLoading = function(callback) {
        var msg = "Initializing Configuration ...";
        a4p.InternalLog.log("srvConfig", msg), this.srvLoad.setStatus(msg), this.srvLoad.setError("");
        var self = this, onSuccess = function(response) {
            var msg = "Configuration ready.";
            a4p.InternalLog.log("srvConfig", msg), self.srvLoad.setStatus(msg), self.srvLoad.setError(""), 
            "" == self.c4pUrlBase && "" == self.c4pBuildDate && (a4p.InternalLog.log("srvConfig", "First init"), 
            a4p.isDefinedAndNotNull(response.data.possibleCrms) && self.setPossibleCrms(response.data.possibleCrms), 
            a4p.isDefinedAndNotNull(response.data.activeCrms) && self.setActiveCrms(response.data.activeCrms), 
            a4p.isDefinedAndNotNull(response.data.config) && self.setConfig(response.data.config)), 
            a4p.isDefinedAndNotNull(response.data.buildDate) && (a4p.InternalLog.log("srvConfig", "buildDate=" + response.data.buildDate), 
            self.setBuildDate(response.data.buildDate)), a4p.isDefinedAndNotNull(response.data.urlBase) && (a4p.InternalLog.log("srvConfig", "urlBase=" + response.data.urlBase), 
            self.setUrlBase(response.data.urlBase)), a4p.isDefinedAndNotNull(response.data.trustAllHosts) && (a4p.InternalLog.log("srvConfig", "trustAllHosts=" + response.data.trustAllHosts), 
            self.setTrustAllHosts(response.data.trustAllHosts));
            var appVersion = self.activeCrms.length > 1 ? "Premium" : "Free";
            self.srvAnalytics.setVid(self.c4pBuildDate + " " + self.env + " " + appVersion), 
            callback();
        }, onFailure = function(response) {
            var msg = "Initializing Configuration failed : use default values.";
            a4p.InternalLog.log("srvConfig", msg), self.srvLoad.setStatus(msg), self.srvLoad.setError(response.data), 
            callback();
        };
        this.dataTransfer.recvData(this.c4pUrlConf).then(onSuccess, onFailure);
    }, Service.prototype.setTrustAllHosts = function(trustAllHosts) {
        this.trustAllHosts = trustAllHosts, this.srvLocalStorage.set("TrustAllHosts", this.trustAllHosts);
    }, Service.prototype.setBuildDate = function(date) {
        this.c4pBuildDate = date, this.srvLocalStorage.set("BuildDate", this.c4pBuildDate);
    }, Service.prototype.setLicence = function(licence) {
        this.c4pLicence = licence, this.srvLocalStorage.set("Licence", this.c4pLicence);
    }, Service.prototype.setConfig = function(config) {
        this.c4pConfig = config, this.initBetaOptions(), this.c4pConfig.exposeBetaFunctionalities || this.setBetaMode(!1), 
        this.srvLocalStorage.set("Config", this.c4pConfig);
    }, Service.prototype.setBetaMode = function(isBetaMode) {
        if (this.c4pConfig.exposeBetaFunctionalities = isBetaMode, !isBetaMode) for (var key in this.c4pConfig) this.c4pConfig.hasOwnProperty(key) && "exposeBetaFunctionalities" != key && (this.c4pConfig[key] = !1);
        this.srvLocalStorage.set("Config", this.c4pConfig);
    }, Service.prototype.setBetaCfgPrm = function(prmKey, flag) {
        this.c4pConfig[prmKey] = flag, this.srvLocalStorage.set("Config", this.c4pConfig);
    }, Service.prototype.setPossibleCrms = function(possibleCrms) {
        this.possibleCrms = possibleCrms, this.srvLocalStorage.set("PossibleCrms", this.possibleCrms);
        for (var crmIdx = this.activeCrms.length - 1; crmIdx >= 0; crmIdx--) {
            var key = this.activeCrms[crmIdx];
            isValueInList(this.possibleCrms, key) || removeValueFromList(this.activeCrms, key);
        }
        this.srvLocalStorage.set("ActiveCrms", this.activeCrms);
    }, Service.prototype.setActiveCrms = function(activeCrms) {
        this.activeCrms = activeCrms.slice(0);
        for (var crmIdx = this.activeCrms.length - 1; crmIdx >= 0; crmIdx--) {
            var key = this.activeCrms[crmIdx];
            isValueInList(this.possibleCrms, key) || removeValueFromList(this.activeCrms, key);
        }
        this.srvLocalStorage.set("ActiveCrms", this.activeCrms);
    }, Service.prototype.getActiveCrms = function() {
        return this.activeCrms;
    }, Service.prototype.hasActiveRemoteCrm = function() {
        return isValueInList(this.activeCrms, "ios") ? this.activeCrms.length > 1 : this.activeCrms.length > 0;
    }, Service.prototype.setUrlBase = function(c4pUrlBase) {
        this.c4pUrlBase = c4pUrlBase, this.c4pUrlForget = this.c4pUrlBase + "/c4p_forget.php", 
        this.c4pUrlCreateAccount = this.c4pUrlBase + "/c4p_createAccount.php", this.c4pUrlData = this.c4pUrlBase + "/c4p_fill.php", 
        this.c4pUrlFullMap = this.c4pUrlBase + "/c4p_fullMap.php", this.c4pUrlRefreshMap = this.c4pUrlBase + "/c4p_refreshMap.php", 
        this.c4pUrlUpload = this.c4pUrlBase + "/c4p_upload.php", this.c4pUrlUploadFile = this.c4pUrlBase + "/c4p_uploadFile.php", 
        this.c4pUrlSendEmail = this.c4pUrlBase + "/c4p_sendEmail.php", this.c4pUrlSendICal = this.c4pUrlBase + "/c4p_sendICal.php", 
        this.c4pUrlShareDoc = this.c4pUrlBase + "/c4p_shareDoc.php", this.c4pUrlSfCreate = this.c4pUrlBase + "/c4p_create.php", 
        this.c4pUrlSfUpdate = this.c4pUrlBase + "/c4p_update.php", this.c4pUrlSfDelete = this.c4pUrlBase + "/c4p_delete.php", 
        this.c4pUrlErrorReport = this.c4pUrlBase + "/c4p_errorReport.php", this.c4pUrlFeedbackReport = this.c4pUrlBase + "/c4p_feedbackReport.php", 
        this.c4pUrlFeedback = this.c4pUrlBase + "/c4p_feedback.php", this.c4pUrlDownload = this.c4pUrlBase + "/c4p_download.php", 
        this.c4pUrlPing = this.c4pUrlBase + "/c4p_ping.php", this.env = this.c4pUrlBase.indexOf("ssl15.ovh.net") > -1 ? this.c4pUrlBase.indexOf("~appsprok") > -1 ? "D" : this.c4pUrlBase.indexOf("~appspron") > -1 ? "D" : "P" : this.c4pUrlBase.indexOf("apps4pro.net") > -1 ? "D" : this.c4pUrlBase.indexOf("apps4pro.biz") > -1 ? "D" : this.c4pUrlBase.indexOf("apps4pro.com") > -1 ? "P" : this.c4pUrlBase.indexOf("apps4pro.eu") > -1 ? "P" : this.c4pUrlBase.indexOf("ssl14.ovh.net") > -1 ? "P" : this.c4pUrlBase.indexOf("http://127.0.0.1") > -1 ? "L" : this.c4pUrlBase.indexOf("https://127.0.0.1") > -1 ? "LS" : this.c4pUrlBase.indexOf("http://192.168.") > -1 ? "L" : this.c4pUrlBase.indexOf("https://192.168.") > -1 ? "LS" : "P", 
        this.srvLocalStorage.set("UrlBase", this.c4pUrlBase);
    }, Service.prototype.setNameComposition = function(objectType, idx) {
        this.nameComposition[objectType] = idx, this.srvLocalStorage.set("NameComposition", this.nameComposition);
    }, Service.prototype.getNameComposition = function(objectType) {
        return this.nameComposition[objectType] || 0;
    }, Service.prototype.getItemName = function(item) {
        var result = "";
        if (null != item && a4p.isDefined(c4p.Model.a4p_types[item.a4p_type])) {
            var idx = this.nameComposition[item.a4p_type] || 0, nameList = c4p.Model.a4p_types[item.a4p_type].displayNameList[idx];
            if (nameList) {
                for (var fieldNameIdx = 0; fieldNameIdx < nameList.length; fieldNameIdx++) {
                    var fieldName = nameList[fieldNameIdx];
                    result = result + " " + item[fieldName];
                }
                result = result.trim();
            }
        }
        return result;
    }, Service.prototype.setSizeCss = function(value) {
        this.sizeCss = value, this.srvLocalStorage.set("SizeCss", this.sizeCss);
        var html = document.documentElement;
        html.style.fontSize = this.sizeCss;
    }, Service.prototype.getSizeCss = function() {
        return this.sizeCss || "";
    }, Service.prototype.setThemeCss = function(value) {
        this.themeCss = value, this.srvLocalStorage.set("ThemeCss", this.themeCss);
    }, Service.prototype.getThemeCss = function() {
        return this.themeCss || "c4p-cosmo";
    }, Service;
}(), c4p;

c4p || (c4p = {}), c4p.Synchro = function() {
    function Synchro() {
        this.version = "0.1";
    }
    return Synchro.NEW = 3, Synchro.QUEUE = 2, Synchro.NETWORK = 1, Synchro.NONE = 0, 
    Synchro;
}();

var SrvData = function() {
    function Service(exceptionHandlerService, qService, srvLocalStorage, srvConfig, srvLog, srvLocale, srvSecurity, srvDataTransfer, srvRunning, srvSynchro, srvFileStorage, $rootScope) {
        this.exceptionHandler = exceptionHandlerService, this.q = qService, this.srvLocalStorage = srvLocalStorage, 
        this.srvConfig = srvConfig, this.srvLog = srvLog, this.srvLocale = srvLocale, this.srvSecurity = srvSecurity, 
        this.dataTransfer = srvDataTransfer, this.srvRunning = srvRunning, this.srvSynchro = srvSynchro, 
        this.srvFileStorage = srvFileStorage, this.rootScope = $rootScope, this.callbackHandle = 0, 
        this.callbacksUpdate = [], this.a4pTypesInC4PFirst = [ "Note", "Report" ], this.a4pTypesForSF = [ "Contact", "Account", "Event", "Task", "Opportunity", "Lead", "Document", "Attendee" ], 
        this.a4p_methods = {
            toggleFavorite: {
                icon: "star-empty",
                iconeToggle: {
                    icon: "star",
                    when: "isTaggedFavorite"
                },
                objectTypes: {
                    Contact: !0,
                    Account: !0,
                    Event: !0,
                    Task: !0,
                    Opportunity: !0,
                    Lead: !0,
                    Document: !0,
                    Note: !0,
                    Report: !0
                },
                mustHaveFavorite: !0
            },
            viewDocument: {
                icon: "eye-open",
                objectTypes: {
                    Document: !0,
                    Note: !0,
                    Report: !0
                },
                mustBeCreated: !0
            },
            setItemAndGoTimeline: {
                icon: "tags",
                objectTypes: {
                    Event: !0
                },
                mustHaveBetaOption: "exposeTimeline"
            },
            setItemAndGoCalendar: {
                icon: "calendar",
                objectTypes: {
                    Event: !0,
                    Task: !0
                }
            },
            setItemAndGoMeeting: {
                icon: "comments",
                objectTypes: {
                    Event: !0
                }
            },
            shareDocumentByChatter: {
                icon: "share",
                objectTypes: {
                    Document: !0
                },
                possibleCrms: [ "sf" ]
            },
            shareDocumentByEmail: {
                icon: "envelope",
                objectTypes: {
                    Document: !0
                },
                possibleCrms: [ "c4p", "sf" ]
            },
            addDocuments: {
                icon: "paper-clip",
                objectTypes: {
                    Contact: !0,
                    Account: !0,
                    Event: !0,
                    Opportunity: !0
                },
                mustBeOwner: !0
            },
            addContacts: {
                icon: "user",
                objectTypes: {
                    Event: !0
                },
                mustBeOwner: !0
            },
            createNewEmail: {
                icon: "envelope",
                objectTypes: {
                    Contact: !0,
                    Account: !0,
                    Event: !0,
                    Opportunity: !0
                },
                mustBeOwner: !0
            },
            sendICal: {
                icon: "group",
                objectTypes: {
                    Event: !0
                },
                mustBeOwner: !0,
                mustBeInFuture: !0
            },
            createNewPicture: {
                icon: "camera",
                objectTypes: {
                    Contact: !0,
                    Account: !0,
                    Event: !0,
                    Opportunity: !0
                },
                mustBeOwner: !0
            },
            createNewNote: {
                icon: "comment",
                objectTypes: {
                    Contact: !0,
                    Account: !0,
                    Event: !0,
                    Opportunity: !0
                },
                mustBeOwner: !0
            },
            createNewReport: {
                icon: "book",
                objectTypes: {
                    Contact: !0,
                    Account: !0,
                    Event: !0,
                    Opportunity: !0
                },
                mustBeOwner: !0
            },
            editItem: {
                icon: "pencil",
                objectTypes: {
                    Facet: !0,
                    Contact: !0,
                    Account: !0,
                    Event: !0,
                    Task: !0,
                    Opportunity: !0,
                    Lead: !0,
                    Document: !0,
                    Note: !0,
                    Report: !0
                },
                mustBeOwner: !0
            },
            dupMeeting: {
                icon: "plus",
                objectTypes: {
                    Event: !0
                },
                mustBeOwner: !0
            }
        }, this.isDemo = !1, this.originalDbIndex = {}, this.index = {
            db: {},
            sf: {},
            ios: {},
            c4p: {}
        }, this.userId = {
            sf_id: "005i0000000I8c5AAC",
            c4p_id: "demo@apps4pro.com"
        }, a4p.InternalLog.log("srvData", "constructor : userId=" + a4pDumpData(this.userId, 2)), 
        this.userObject = void 0, this.favoritesObject = void 0, this.currentItems = {}, 
        this.originalItems = {};
        var i, type;
        for (i = 0; i < c4p.Model.allTypes.length; i++) type = c4p.Model.allTypes[i], this.currentItems[type] = [], 
        this.originalItems[type] = [];
        this.lastRefreshMindMap = 0, this.nbObjects = 0, this.objectsToSave = [], this.objectsToDownload = [], 
        this.savingObject = {}, this.initDone = !1;
    }
    function triggerUpdate(self, action, type, id) {
        for (var callbacks = self.callbacksUpdate.slice(0), idx = 0, max = callbacks.length; max > idx; idx++) try {
            callbacks[idx].callback(callbacks[idx].id, action, type, id);
        } catch (e) {
            self.exceptionHandler(e, "SrvData.callbacksUpdate#" + idx);
        }
    }
    function onRunningPause(self, callbackId, value) {
        if (value) {
            a4p.InternalLog.log("srvData", "pause begin"), self.srvLocalStorage.set("Data-Uid", a4p.getUid()), 
            self.srvLocalStorage.set("Data-isDemo", self.isDemo), self.srvLocalStorage.set("Data-userId", self.userId), 
            self.srvLocalStorage.set("Data-userObject", self.userObject), self.srvLocalStorage.set("Data-favoritesObject", self.favoritesObject);
            for (var i = 0; i < c4p.Model.allTypes.length; i++) {
                var type = c4p.Model.allTypes[i];
                self.srvLocalStorage.set("Data-" + type, self.currentItems[type]), self.srvLocalStorage.set("Data-Original" + type, self.originalItems[type]);
            }
            self.srvLocalStorage.set("Data-lastRefreshMindMap", self.lastRefreshMindMap), self.srvLocalStorage.set("Data-objectsToSave", self.objectsToSave), 
            self.srvLocalStorage.set("Data-objectsToDownload", self.objectsToDownload), self.srvLocalStorage.set("Data-savingObject", self.savingObject), 
            a4p.InternalLog.log("srvData", "data saved in srvLocalStorage");
        } else a4p.InternalLog.log("srvData", "pause ended");
    }
    function onSynchroStart(self, callbackId, requestId, requestCtx, requestNbTry) {
        self.srvLog.logInfo(self.srvConfig.c4pConfig.exposeDataSynchro, requestCtx.title + " started try#" + requestNbTry, ""), 
        a4p.isDefined(requestCtx.dbid) && a4p.safeApply(self.rootScope, function() {
            var object = self.getObject(requestCtx.dbid);
            "Create" == requestCtx.type ? a4p.isDefined(object) && object.c4p_synchro.creating == c4p.Synchro.QUEUE && (object.c4p_synchro.creating = c4p.Synchro.NETWORK) : "Update" == requestCtx.type ? a4p.isDefined(object) && object.c4p_synchro.writing == c4p.Synchro.QUEUE && (object.c4p_synchro.writing = c4p.Synchro.NETWORK) : "Delete" == requestCtx.type ? a4p.isDefined(object) && object.c4p_synchro.deleting == c4p.Synchro.QUEUE && (object.c4p_synchro.deleting = c4p.Synchro.NETWORK) : "Share" == requestCtx.type ? a4p.isDefined(object) && object.c4p_synchro.sharing == c4p.Synchro.QUEUE && (object.c4p_synchro.sharing = c4p.Synchro.NETWORK) : "Email" == requestCtx.type ? a4p.isDefined(object) && object.c4p_synchro.writing == c4p.Synchro.QUEUE && (object.c4p_synchro.writing = c4p.Synchro.NETWORK) : "Note" == requestCtx.type ? a4p.isDefined(object) && object.c4p_synchro.writing == c4p.Synchro.QUEUE && (object.c4p_synchro.writing = c4p.Synchro.NETWORK) : "Download" == requestCtx.type ? a4p.isDefined(object) && object.c4p_synchro.reading == c4p.Synchro.QUEUE && (object.c4p_synchro.reading = c4p.Synchro.NETWORK) : "Attachment" == requestCtx.type;
        });
    }
    function onSynchroCancel(self, callbackId, requestId, requestCtx, requestNbTry) {
        self.srvLog.logInfo(self.srvConfig.c4pConfig.exposeDataSynchro, requestCtx.title + " cancelled try#" + requestNbTry, ""), 
        "Create" == requestCtx.type ? onCreateFailure(self, requestCtx) : "Update" == requestCtx.type ? onUpdateFailure(self, requestCtx) : "Delete" == requestCtx.type ? onDeleteFailure(self, requestCtx) : "Download" == requestCtx.type ? onDownloadFailure(self, requestCtx) : "Attachment" == requestCtx.type || ("Share" == requestCtx.type ? onShareFailure(self, requestCtx) : "Email" == requestCtx.type ? onEmailFailure(self, requestCtx) : "Note" == requestCtx.type && onNoteFailure(self, requestCtx));
    }
    function onSynchroError(self, callbackId, requestId, requestCtx, requestNbTry, message) {
        self.srvSynchro.serverHs(), a4p.safeApply(self.rootScope, function() {
            a4p.InternalLog.log("srvData", "onSynchroError: requestNbTry=" + requestNbTry + " requestCtx=" + a4pDumpData(requestCtx, 2) + "message=" + message), 
            requestNbTry > 3 ? (self.srvLog.logWarning(self.srvConfig.c4pConfig.exposeDataSynchro, requestCtx.title + " failed try#" + requestNbTry + " : cancelled", message), 
            self.srvSynchro.cancelRequest(requestId)) : self.srvLog.logWarning(self.srvConfig.c4pConfig.exposeDataSynchro, requestCtx.title + " failed try#" + requestNbTry + " : retry", message);
        });
    }
    function onSynchroSuccess(self, callbackId, requestId, requestCtx, requestNbTry, responseStatus, responseData) {
        if ("Download" != requestCtx.type) {
            var diag = checkErrorData(responseData);
            if (diag) return diag.maintenance ? (self.srvSynchro.serverHs(), self.srvSynchro.tryAgainCurrentRequest()) : diag.redirect || 3 >= requestNbTry && self.srvSynchro.tryAgainCurrentRequest(), 
            void a4p.safeApply(self.rootScope, function() {
                if (diag.maintenance) self.srvLog.logWarning(self.srvConfig.c4pConfig.exposeDataSynchro, requestCtx.title + " failed try#" + requestNbTry + ' (server in status "' + diag.maintenance + '") : retry', diag.log); else if (diag.redirect) self.srvLog.logWarning(self.srvConfig.c4pConfig.exposeDataSynchro, requestCtx.title + " redirected try#" + requestNbTry + " : cancelled", diag.log), 
                sendNextObjectToSave(self); else {
                    var errorMsg = "";
                    errorMsg = a4p.isDefined(diag.error) && a4p.isDefined(self.srvLocale.translations[diag.error]) ? self.srvLocale.translations[diag.error] : diag.error, 
                    requestNbTry > 3 ? (self.srvLog.logWarning(self.srvConfig.c4pConfig.exposeDataSynchro, requestCtx.title + " failed try#" + requestNbTry + " (" + errorMsg + ") : cancelled", diag.log), 
                    sendNextObjectToSave(self)) : self.srvLog.logWarning(self.srvConfig.c4pConfig.exposeDataSynchro, requestCtx.title + " failed try#" + requestNbTry + " (" + errorMsg + ") : retry", diag.log);
                }
            });
        }
        a4p.safeApply(self.rootScope, function() {
            self.srvLog.logSuccess(self.srvConfig.c4pConfig.exposeDataSynchro, requestCtx.title + " success", ""), 
            "Create" == requestCtx.type ? onCreateSuccess(self, requestCtx, responseData) : "Update" == requestCtx.type ? onUpdateSuccess(self, requestCtx, responseData) : "Delete" == requestCtx.type ? onDeleteSuccess(self, requestCtx, responseData) : "Download" == requestCtx.type ? onDownloadSuccess(self, requestCtx, responseStatus) : "Attachment" == requestCtx.type || ("Share" == requestCtx.type ? onShareSuccess(self, requestCtx, responseData) : "Email" == requestCtx.type ? onEmailSuccess(self, requestCtx, responseData) : "Note" == requestCtx.type && onNoteSuccess(self, requestCtx, responseData));
        });
    }
    function onCreateSuccess(self, requestCtx, responseData) {
        var object = self.getObject(requestCtx.dbid), askedCreated = responseData.askedCreated, created = responseData.created, errors = responseData.errors;
        a4p.isTrueOrNonEmpty(errors) && a4p.ErrorLog.log("srvData", "reject creating parts of item " + requestCtx.dbid + " : " + a4pDumpData(errors, 1)), 
        a4p.isDefined(object) ? (object.c4p_synchro.creating = c4p.Synchro.NONE, createdObject(self, requestCtx.dbid, askedCreated, created)) : a4p.InternalLog.log("srvData", "create success on unknown object " + requestCtx.dbid + " : object has been deleted during the request"), 
        sendNextObjectToSave(self);
    }
    function onCreateFailure(self, requestCtx) {
        var object = self.getObject(requestCtx.dbid);
        if (a4p.isDefined(object)) {
            object.c4p_synchro.creating = c4p.Synchro.NONE;
            for (var deleted = [], askedCrms = self.srvConfig.getActiveCrms() || [], i = 0, nb = askedCrms.length; nb > i; i++) {
                var crm = askedCrms[i], id = object.id[crm + "_id"];
                delete self.index[crm][id], deleted.push({
                    crm: crm,
                    id: id
                });
            }
            deletedObject(self, requestCtx.dbid, askedCrms, deleted, !1);
        } else a4p.InternalLog.log("srvData", "create failure on unknown object " + requestCtx.dbid + " : object has been deleted during the request");
        sendNextObjectToSave(self);
    }
    function onUpdateSuccess(self, requestCtx, responseData) {
        var object = self.getObject(requestCtx.dbid), askedUpdated = responseData.askedUpdated, updated = responseData.updated, errors = responseData.errors;
        a4p.isTrueOrNonEmpty(errors) && a4p.ErrorLog.log("srvData", "reject updating parts of item " + requestCtx.dbid + " : " + a4pDumpData(errors, 1)), 
        a4p.isDefined(object) ? (object.c4p_synchro.writing = c4p.Synchro.NONE, updatedObject(self, requestCtx.dbid, askedUpdated, updated)) : a4p.InternalLog.log("srvData", "update success on unknown object " + requestCtx.dbid + " : object has been deleted during the request"), 
        sendNextObjectToSave(self);
    }
    function onUpdateFailure(self, requestCtx) {
        var object = self.getObject(requestCtx.dbid);
        a4p.isDefined(object) ? (object.c4p_synchro.writing = c4p.Synchro.NONE, self.srvLocalStorage.set("Data-" + object.a4p_type, self.currentItems[object.a4p_type])) : a4p.InternalLog.log("srvData", "update failure on unknown object " + requestCtx.dbid + " : object has been deleted during the request"), 
        sendNextObjectToSave(self);
    }
    function onDeleteSuccess(self, requestCtx, responseData) {
        var object = self.getObject(requestCtx.dbid), askedDeleted = responseData.askedDeleted, deleted = responseData.deleted, errors = responseData.errors;
        a4p.isTrueOrNonEmpty(errors) && a4p.ErrorLog.log("srvData", "reject deleting parts of item " + requestCtx.dbid + " : " + a4pDumpData(errors, 1)), 
        a4p.isDefined(object) ? (object.c4p_synchro.deleting = c4p.Synchro.NONE, deletedObject(self, requestCtx.dbid, askedDeleted, deleted, !1)) : a4p.InternalLog.log("srvData", "delete success on unknown object " + requestCtx.dbid + " : object has been deleted during the request"), 
        sendNextObjectToSave(self);
    }
    function onDeleteFailure(self, requestCtx) {
        var object = self.getObject(requestCtx.dbid);
        a4p.isDefined(object) ? (object.c4p_synchro.deleting = c4p.Synchro.NONE, self.srvLocalStorage.set("Data-" + object.a4p_type, self.currentItems[object.a4p_type])) : a4p.InternalLog.log("srvData", "delete failure on unknown object " + requestCtx.dbid + " : object has been deleted during the request"), 
        sendNextObjectToSave(self);
    }
    function onDownloadSuccess(self, requestCtx, responseStatus) {
        var object = self.getObject(requestCtx.dbid);
        a4p.isDefined(object) ? ("Document" == object.a4p_type && a4p.isDefined(object.email) && delete object.email, 
        object.fileUrl = responseStatus, a4p.InternalLog.log("srvData", "Document " + object.filePath + " has after download fileUrl=" + object.fileUrl), 
        c4p.Model.isImage(object.extension) && (object.thumb_url = object.fileUrl, a4p.InternalLog.log("srvData", "Image " + object.filePath + " has after download thumb_url=" + object.thumb_url)), 
        updateOriginalObject(self, object, {
            fileUrl: object.fileUrl,
            thumb_url: object.thumb_url
        }), object.c4p_synchro.reading = c4p.Synchro.NONE, self.srvLocalStorage.set("Data-" + object.a4p_type, self.currentItems[object.a4p_type])) : a4p.InternalLog.log("srvData", "download success on unknown object " + requestCtx.dbid + " : object has been deleted during the request"), 
        getNextObjectToDownload(self, requestCtx.dbid);
    }
    function onDownloadFailure(self, requestCtx) {
        var object = self.getObject(requestCtx.dbid);
        a4p.isDefined(object) ? (object.c4p_synchro.reading = c4p.Synchro.NONE, self.srvLocalStorage.set("Data-" + object.a4p_type, self.currentItems[object.a4p_type]), 
        a4p.InternalLog.log("srvData", "download failure //TODO : what todo with this document not downloaded ? " + requestCtx.dbid)) : a4p.InternalLog.log("srvData", "download failure on unknown object " + requestCtx.dbid + " : object has been deleted during the request"), 
        getNextObjectToDownload(self, requestCtx.dbid);
    }
    function onShareSuccess(self, requestCtx, responseData) {
        if ("Document shared." == responseData.log && a4p.isDefined(responseData.id)) {
            var object = self.getObject(requestCtx.dbid);
            a4p.isDefined(object) ? (delete object.feed, object.c4p_synchro.sharing = c4p.Synchro.NONE, 
            self.setObject(object, !1), self.addObjectToSave(object.a4p_type, object.id.dbid)) : a4p.InternalLog.log("srvData", "share success on unknown object " + requestCtx.dbid + " : object has been deleted during the request");
        }
        sendNextObjectToSave(self);
    }
    function onShareFailure(self, requestCtx) {
        var object = self.getObject(requestCtx.dbid);
        a4p.isDefined(object) ? (object.c4p_synchro.sharing = c4p.Synchro.NONE, self.srvLocalStorage.set("Data-" + object.a4p_type, self.currentItems[object.a4p_type])) : a4p.InternalLog.log("srvData", "share failure on unknown object " + requestCtx.dbid + " : object has been deleted during the request"), 
        sendNextObjectToSave(self);
    }
    function onEmailSuccess(self, requestCtx, responseData) {
        var object = self.getObject(requestCtx.dbid);
        if (a4p.isDefined(object)) if (a4p.isDefined(responseData.nbSent)) {
            responseData.nbSent > 0, object.c4p_synchro.writing = c4p.Synchro.NONE;
            var pdfEmailExists = !1;
            if (a4p.isDefined(responseData.created)) for (var i = 0, nb = responseData.created.length; nb > i; i++) {
                var crm = responseData.created[i].crm, id = responseData.created[i].id;
                object.id[crm + "_id"] = id, self.savingObject.fields.id[crm + "_id"] = id, pdfEmailExists = !0;
            } else a4p.isDefined(responseData.id) && a4p.isDefined(responseData.id.sf_id) && (object.id.sf_id = responseData.id.sf_id, 
            self.savingObject.fields.id.sf_id = object.id.sf_id, pdfEmailExists = !0);
            if (self.setObject(object, !1), addOriginalObject(self, self.savingObject.fields, !self.isDemo && pdfEmailExists), 
            a4p.isDefined(responseData.created)) for (var i = 0, nb = responseData.created.length; nb > i; i++) {
                var crm = responseData.created[i].crm, id = responseData.created[i].id;
                updateLinkedObjects(self, "Document", object.id.dbid, crm + "_id", id);
            } else a4p.isDefined(responseData.id) && a4p.isDefined(responseData.id.sf_id) && updateLinkedObjects(self, "Document", object.id.dbid, "sf_id", object.id.sf_id);
        } else "Create email success." == responseData.responseStatus && a4p.isDefined(responseData.id) && (object.id.sf_id = responseData.id.sf_id, 
        object.c4p_synchro.writing = c4p.Synchro.NONE, self.setObject(object, !1), self.savingObject.fields.id.sf_id = object.id.sf_id, 
        addOriginalObject(self, self.savingObject.fields, !self.isDemo), updateLinkedObjects(self, "Document", object.id.dbid, "sf_id", object.id.sf_id)); else a4p.InternalLog.log("srvData", "email success on unknown object " + requestCtx.dbid + " : object has been deleted during the request");
        sendNextObjectToSave(self);
    }
    function onEmailFailure(self, requestCtx) {
        var object = self.getObject(requestCtx.dbid);
        a4p.isDefined(object) ? (object.c4p_synchro.writing = c4p.Synchro.NONE, self.srvLocalStorage.set("Data-" + object.a4p_type, self.currentItems[object.a4p_type])) : a4p.InternalLog.log("srvData", "email failure on unknown object " + requestCtx.dbid + " : object has been deleted during the request"), 
        sendNextObjectToSave(self);
    }
    function onNoteSuccess(self, requestCtx, responseData) {
        if (("Create report success." == responseData.responseStatus || "Create note success." == responseData.responseStatus) && a4p.isDefined(responseData.id)) {
            var object = self.getObject(requestCtx.dbid);
            a4p.isDefined(object) ? (object.id.sf_id = responseData.id.sf_id, object.c4p_synchro.writing = c4p.Synchro.NONE, 
            self.setObject(object, !1), self.savingObject.fields.id.sf_id = object.id.sf_id, 
            addOriginalObject(self, self.savingObject.fields, !self.isDemo), updateLinkedObjects(self, "Document", object.id.dbid, "sf_id", object.id.sf_id)) : a4p.InternalLog.log("srvData", "note success on unknown object " + requestCtx.dbid + " : object has been deleted during the request");
        }
        sendNextObjectToSave(self);
    }
    function onNoteFailure(self, requestCtx) {
        var object = self.getObject(requestCtx.dbid);
        a4p.isDefined(object) ? (object.c4p_synchro.writing = c4p.Synchro.NONE, self.srvLocalStorage.set("Data-" + object.a4p_type, self.currentItems[object.a4p_type])) : a4p.InternalLog.log("srvData", "note failure on unknown object " + requestCtx.dbid + " : object has been deleted during the request"), 
        sendNextObjectToSave(self);
    }
    function checkErrorData(responseData) {
        if (a4p.isUndefined(responseData)) return {
            error: "htmlMsgSynchronizationServerPb",
            log: "Received no data"
        };
        var responseLog = responseData.responseLog;
        a4p.isUndefined(responseLog) && (responseLog = responseData.log);
        var maintenance = responseData.maintenance;
        if (a4p.isDefined(maintenance) && null != maintenance && maintenance.length > 0) return {
            maintenance: maintenance,
            log: "Server is in maintenance status " + maintenance + " : " + responseLog
        };
        var responseRedirect = responseData.responseRedirect;
        if (a4p.isDefined(responseRedirect) && null != responseRedirect && responseRedirect.length > 0) return {
            redirect: responseRedirect,
            log: "Received a redirect for " + responseRedirect + " : " + responseLog
        };
        var errorCode = responseData.error;
        if (a4p.isDefined(errorCode) && "" != errorCode) return {
            error: errorCode,
            log: "Received error code " + errorCode + " : " + (responseLog || a4pDumpData(responseData, 1))
        };
        var responseOk = responseData.responseOK;
        return a4p.isUndefined(responseOk) || !responseOk ? {
            error: "htmlMsgSynchronizationServerPb",
            log: "Received no OK : " + (responseLog || a4pDumpData(responseData, 1))
        } : !1;
    }
    function checkMetaData(self, data) {
        var metaData = data.metaData;
        a4p.isDefinedAndNotNull(metaData) && (a4p.isDefinedAndNotNull(metaData.licence) && self.srvConfig.setLicence(metaData.licence), 
        a4p.isDefinedAndNotNull(metaData.possibleCrms) && self.srvConfig.setPossibleCrms(metaData.possibleCrms), 
        a4p.isDefinedAndNotNull(metaData.config) && self.srvConfig.setConfig(metaData.config));
    }
    function addFullMap(self, userId, fullmap, requestTimestamp) {
        a4p.InternalLog.log("srvData", "addFullMap : userId=" + a4pDumpData(self.userId, 2) + " userObject=" + a4pDumpData(self.userObject, 2));
        var i, dbid, item, index = {};
        if (fullmap.objects) {
            for (var i = 0; i < fullmap.objects.length; i++) {
                item = fullmap.objects[i], deleteOldDbLinkIds(item);
                for (var mergeIdx = 0; mergeIdx < item.crmObjects.length; mergeIdx++) {
                    var object = item.crmObjects[mergeIdx].data, crm = item.crmObjects[mergeIdx].crmId.crm, id = item.crmObjects[mergeIdx].crmId.id;
                    if (object.a4p_type = item.a4p_type, a4p.isUndefinedOrNull(item.id)) if (a4p.isDefined(self.index[crm]) && a4p.isDefined(self.index[crm][id])) {
                        var oldItem = self.index[crm][id];
                        item.id = oldItem.id.dbid, object.id = {
                            dbid: oldItem.id.dbid
                        };
                    } else dbid = item.a4p_type + "-" + a4p.nextUid(), object.id = {
                        dbid: dbid
                    }; else object.id = {
                        dbid: item.id
                    };
                    object.id[crm + "_id"] = id, a4p.isUndefined(index[crm]) && (index[crm] = {}), index[crm][id] = object;
                }
            }
            self.srvLocalStorage.set("Data-Uid", a4p.getUid());
            for (var i = 0; i < fullmap.objects.length; i++) item = fullmap.objects[i], updateLinkIds(self.index, index, item);
        }
        var login = self.srvSecurity.getA4pLogin();
        a4p.isEmptyOrFalse(login) && (login = "demo@apps4pro.com");
        var deleteCrm = [], deleteIndex = {};
        for (var crm in self.index) if (self.index.hasOwnProperty(crm) && "db" != crm) {
            "ios" != crm && deleteCrm.push(crm), deleteIndex[crm] = {};
            for (var id in self.index[crm]) if (self.index[crm].hasOwnProperty(id)) {
                var object = self.index[crm][id];
                deleteIndex[crm][object.id.dbid] = !0;
            }
        }
        for (var oldCrmKeyId in self.userId) if ("dbid" != oldCrmKeyId && self.userId.hasOwnProperty(oldCrmKeyId)) {
            var crm = oldCrmKeyId.substr(0, oldCrmKeyId.length - 3);
            a4p.isUndefinedOrNull(userId[oldCrmKeyId]) ? "ios" == crm || delete self.userId[oldCrmKeyId] : self.userId[oldCrmKeyId] == userId[oldCrmKeyId] || (self.userId[oldCrmKeyId] = userId[oldCrmKeyId]);
        }
        for (var newCrmKeyId in userId) if ("dbid" != newCrmKeyId && userId.hasOwnProperty(newCrmKeyId)) {
            var crm = newCrmKeyId.substr(0, newCrmKeyId.length - 3);
            a4p.isUndefinedOrNull(self.userId[newCrmKeyId]) && (self.userId[newCrmKeyId] = userId[newCrmKeyId]);
        }
        var userFound = !1;
        if (a4p.isDefined(self.userId.sf_id) && a4p.isDefined(index.sf[self.userId.sf_id])) {
            var object = index.sf[self.userId.sf_id];
            "Contact" == object.a4p_type && (self.userObject = object, self.userId.dbid = object.id.dbid, 
            a4p.isDefined(deleteIndex.sf) && a4p.isDefined(deleteIndex.sf[object.id.dbid]) && delete deleteIndex.sf[object.id.dbid], 
            userFound = !0);
        }
        if (!userFound && a4p.isDefined(self.userId.c4p_id) && a4p.isDefined(index.c4p[self.userId.c4p_id])) {
            var object = index.c4p[self.userId.c4p_id];
            "Contact" == object.a4p_type && (self.userObject = object, self.userId.dbid = object.id.dbid, 
            a4p.isDefined(deleteIndex.c4p) && a4p.isDefined(deleteIndex.c4p[object.id.dbid]) && delete deleteIndex.c4p[object.id.dbid], 
            userFound = !0);
        }
        if (!userFound && fullmap.objects) for (var i = 0; i < fullmap.objects.length; i++) if (item = fullmap.objects[i], 
        "Contact" == item.a4p_type) for (var mergeIdx = 0; mergeIdx < item.crmObjects.length; mergeIdx++) {
            var crm = item.crmObjects[mergeIdx].crmId.crm, id = item.crmObjects[mergeIdx].crmId.id, object = index[crm][id];
            "c4p" == crm && object.email == login && (self.userObject = object, self.userId.dbid = object.id.dbid, 
            self.userId.c4p_id = object.id.c4p_id, a4p.isDefined(deleteIndex.c4p) && a4p.isDefined(deleteIndex.c4p[object.id.dbid]) && delete deleteIndex.c4p[object.id.dbid], 
            userFound = !0);
        }
        if (!userFound) {
            a4p.isDefined(self.index.db[self.userId.dbid]) ? (self.srvLog.logWarning(!1, "NO object in FullMap matches userId" + (a4p.isDefined(self.userId.sf_id) ? " SF_ID=" + self.userId.sf_id : "") + (a4p.isDefined(self.userId.c4p_id) ? " C4P_ID=" + self.userId.c4p_id : "") + " => Update a Contact."), 
            self.userObject = self.index.db[self.userId.dbid], self.userObject.email = login, 
            self.userObject.contact_type = "User", self.userObject.salutation = "", self.userObject.first_name = "User", 
            self.userObject.last_name = "", self.userObject.title = "", self.userObject.account_id = {}, 
            self.userObject.phone_work = "", self.userObject.phone_mobile = "", self.userObject.phone_fax = "", 
            self.userObject.phone_house = "", self.userObject.phone_other = "", self.userObject.email_home = "", 
            self.userObject.email_list = "", self.userObject.email_other = "", self.userObject.primary_address_street = "", 
            self.userObject.primary_address_city = "", self.userObject.primary_address_zipcode = "", 
            self.userObject.primary_address_state = "", self.userObject.primary_address_country = "", 
            self.userObject.alt_address_street = "", self.userObject.alt_address_city = "", 
            self.userObject.alt_address_zipcode = "", self.userObject.alt_address_state = "", 
            self.userObject.alt_address_country = "", self.userObject.description = "", self.userObject.manager_id = {}, 
            self.userObject.assigned_contact_id = {}, self.userObject.birthday = "", self.userObject.department = "", 
            self.userObject.assistant_name = "", self.userObject.assistant_phone = "", self.userObject.lead_source = "") : (self.srvLog.logWarning(!1, "NO object in FullMap matches userId" + (a4p.isDefined(self.userId.sf_id) ? " SF_ID=" + self.userId.sf_id : "") + (a4p.isDefined(self.userId.c4p_id) ? " C4P_ID=" + self.userId.c4p_id : "") + " => Create a Contact."), 
            self.userId.dbid = login, self.userObject = {
                id: {
                    dbid: login
                },
                email: login,
                contact_type: "User",
                first_name: "User"
            });
            var sepIdx = login.indexOf("@");
            self.userObject.last_name = sepIdx >= 0 ? login.substr(0, sepIdx) : login, a4p.isDefined(self.userId.sf_id) && (self.userObject.id.sf_id = self.userId.sf_id), 
            a4p.isDefined(deleteIndex.sf) && a4p.isDefined(deleteIndex.sf[self.userId.dbid]) && delete deleteIndex.sf[self.userId.dbid], 
            a4p.isDefined(self.userId.c4p_id) && (self.userObject.id.c4p_id = self.userId.c4p_id), 
            a4p.isDefined(deleteIndex.c4p) && a4p.isDefined(deleteIndex.c4p[self.userId.dbid]) && delete deleteIndex.c4p[self.userId.dbid], 
            a4p.isDefined(self.index.db[self.userId.dbid]) ? self.setAndSaveObject(self.userObject) : (self.userObject = self.createObject("Contact", self.userObject), 
            self.addAndSaveObject(self.userObject)), self.userId.dbid = self.userObject.id.dbid;
        }
        if (self.srvLocalStorage.set("Data-userId", self.userId), self.srvLocalStorage.set("Data-userObject", self.userObject), 
        a4p.InternalLog.log("srvData", "downloadFullMap : userId=" + a4pDumpData(self.userId, 2) + " userObject=" + a4pDumpData(self.userObject, 2)), 
        fullmap.objects) for (var i = 0; i < fullmap.objects.length; i++) {
            item = fullmap.objects[i];
            for (var mergeIdx = 0; mergeIdx < item.crmObjects.length; mergeIdx++) {
                var crm = item.crmObjects[mergeIdx].crmId.crm, id = item.crmObjects[mergeIdx].crmId.id, object = index[crm][id];
                a4p.isDefined(self.index[crm]) && a4p.isDefined(self.index[crm][id]) ? (self.setObject(object, !0), 
                a4p.isDefined(deleteIndex[crm]) && a4p.isDefined(deleteIndex[crm][object.id.dbid]) && delete deleteIndex[crm][object.id.dbid]) : self.addObject(object, !0);
            }
        }
        for (var i = 0, n = deleteCrm.length; n > i; i++) {
            var crm = deleteCrm[i];
            for (var dbid in deleteIndex[crm]) deleteIndex[crm].hasOwnProperty(dbid) && self.removeObject(dbid, !0);
        }
        if (delete self.favoritesObject, fullmap.objects) for (var i = 0; i < fullmap.objects.length; i++) if (item = fullmap.objects[i], 
        "Facet" == item.a4p_type) {
            for (var mergeIdx = 0; mergeIdx < item.crmObjects.length; mergeIdx++) {
                var crm = item.crmObjects[mergeIdx].crmId.crm, id = item.crmObjects[mergeIdx].crmId.id, object = index[crm][id];
                if (object.name == self.srvLocale.translations.htmlFavorites) {
                    self.favoritesObject = object;
                    break;
                }
            }
            if (a4p.isDefined(self.favoritesObject)) break;
        }
        a4p.isUndefined(self.favoritesObject) && (self.favoritesObject = self.createObject("Facet", {
            prefix: "",
            name: self.srvLocale.translations.htmlFavorites
        }), self.addObject(self.favoritesObject), self.linkToItem(self.favoritesObject.a4p_type, "owner", [ self.favoritesObject ], self.userObject), 
        self.addObjectToSave(self.favoritesObject.a4p_type, self.favoritesObject.id.dbid)), 
        self.srvLocalStorage.set("Data-favoritesObject", self.favoritesObject), self.lastRefreshMindMap = Math.floor(requestTimestamp / 1e3), 
        self.srvLocalStorage.set("Data-lastRefreshMindMap", self.lastRefreshMindMap);
    }
    function deleteOldDbLinkIds(item) {
        for (var mergeIdx = 0; mergeIdx < item.crmObjects.length; mergeIdx++) for (var object = item.crmObjects[mergeIdx].data, crm = item.crmObjects[mergeIdx].crmId.crm, type = item.a4p_type, objDesc = c4p.Model.a4p_types[type], j = 0; j < objDesc.linkFields.length; j++) {
            var linkModel = objDesc.linkFields[j], key = linkModel.key;
            if (a4p.isTrueOrNonEmpty(object[key])) {
                var isArrayField = a4p.isDefined(c4p.Model.objectArrays[type][key]);
                if (isArrayField) for (var valueIdx = 0, valueNb = object[key].length; valueNb > valueIdx; valueIdx++) "c4p" == crm && delete object[key][valueIdx].dbid; else "c4p" == crm && delete object[key].dbid;
            }
        }
    }
    function updateDbid(index1, index2, field, crm, id) {
        if (a4p.isDefined(index1) && a4p.isDefined(index1[crm])) {
            var object = index1[crm][id];
            a4p.isDefined(object) ? field.dbid = object.id.dbid : a4p.isDefined(index2) && a4p.isDefined(index2[crm]) && (object = index2[crm][id], 
            a4p.isDefined(object) && (field.dbid = object.id.dbid));
        }
    }
    function updateLinkIds(index1, index2, item) {
        for (var mergeIdx = 0; mergeIdx < item.crmObjects.length; mergeIdx++) for (var object = item.crmObjects[mergeIdx].data, crm = item.crmObjects[mergeIdx].crmId.crm, type = item.a4p_type, objDesc = c4p.Model.a4p_types[type], j = 0; j < objDesc.linkFields.length; j++) {
            var linkModel = objDesc.linkFields[j], key = linkModel.key;
            if (a4p.isTrueOrNonEmpty(object[key])) {
                var linkId, isArrayField = a4p.isDefined(c4p.Model.objectArrays[type][key]);
                if (isArrayField) for (var valueIdx = 0, valueNb = object[key].length; valueNb > valueIdx; valueIdx++) "c4p" == crm ? (linkId = object[key][valueIdx].c4p_id, 
                a4p.isTrueOrNonEmpty(linkId) && updateDbid(index1, index2, object[key][valueIdx], crm, linkId), 
                linkId = object[key][valueIdx].sf_id, a4p.isTrueOrNonEmpty(linkId) && updateDbid(index1, index2, object[key][valueIdx], "sf", linkId), 
                linkId = object[key][valueIdx].ios_id, a4p.isTrueOrNonEmpty(linkId) && updateDbid(index1, index2, object[key][valueIdx], "ios", linkId)) : (linkId = object[key][valueIdx], 
                object[key][valueIdx] = {}, a4p.isTrueOrNonEmpty(linkId) && (object[key][valueIdx][crm + "_id"] = linkId, 
                updateDbid(index1, index2, object[key][valueIdx], crm, linkId))); else "c4p" == crm ? (linkId = object[key].c4p_id, 
                a4p.isTrueOrNonEmpty(linkId) && updateDbid(index1, index2, object[key], crm, linkId), 
                linkId = object[key].sf_id, a4p.isTrueOrNonEmpty(linkId) && updateDbid(index1, index2, object[key], "sf", linkId), 
                linkId = object[key].ios_id, a4p.isTrueOrNonEmpty(linkId) && updateDbid(index1, index2, object[key], "ios", linkId)) : (linkId = object[key], 
                object[key] = {}, a4p.isTrueOrNonEmpty(linkId) && (object[key][crm + "_id"] = linkId, 
                updateDbid(index1, index2, object[key], crm, linkId)));
            }
        }
    }
    function updFullMap(self, refreshMap, requestTimestamp) {
        a4p.InternalLog.log("srvData", "updFullMap");
        var i, key, dbid, type, item, object, index = {
            sf: {},
            c4p: {}
        };
        if (refreshMap.updates) {
            for (i = 0; i < refreshMap.updates.length; i++) {
                item = refreshMap.updates[i];
                for (var mergeIdx = 0; mergeIdx < item.crmObjects.length; mergeIdx++) {
                    var object = item.crmObjects[mergeIdx].data, crm = item.crmObjects[mergeIdx].crmId.crm, id = item.crmObjects[mergeIdx].crmId.id, oldItem = self.index[crm][id];
                    a4p.isDefined(oldItem) ? (item.id = oldItem.id.dbid, object.id = {
                        dbid: oldItem.id.dbid
                    }, object.id[crm + "_id"] = id) : (dbid = item.a4p_type + "-" + a4p.nextUid(), object.id = {
                        dbid: dbid
                    }, object.id[crm + "_id"] = id, index[crm][id] = object);
                }
            }
            for (self.srvLocalStorage.set("Data-Uid", a4p.getUid()), i = 0; i < refreshMap.updates.length; i++) item = refreshMap.updates[i], 
            deleteOldDbLinkIds(item), updateLinkIds(self.index, index, item);
            for (i = 0; i < refreshMap.updates.length; i++) {
                item = refreshMap.updates[i];
                for (var mergeIdx = 0; mergeIdx < item.crmObjects.length; mergeIdx++) {
                    var object = item.crmObjects[mergeIdx].data, crm = item.crmObjects[mergeIdx].crmId.crm, id = item.crmObjects[mergeIdx].crmId.id;
                    type = item.a4p_type;
                    var oldItem = self.index[crm][id];
                    if (a4p.isDefined(oldItem)) {
                        for (var key in object) "id" != key && object.hasOwnProperty(key) && (oldItem[key] = object[key]);
                        self.setObject(oldItem, !0);
                    } else object.a4p_type = type, self.addObject(object, !0);
                }
            }
        }
        if (refreshMap.deletes) for (i = 0; i < refreshMap.deletes.length; i++) {
            item = refreshMap.deletes[i];
            for (var mergeIdx = 0; mergeIdx < item.crmObjects.length; mergeIdx++) {
                var object = item.crmObjects[mergeIdx].data, crm = item.crmObjects[mergeIdx].crmId.crm, id = item.crmObjects[mergeIdx].crmId.id, oldItem = self.index[crm][id];
                a4p.isDefined(oldItem) && self.removeObject(oldItem.id.dbid, !0);
            }
        }
        self.lastRefreshMindMap = Math.floor(requestTimestamp / 1e3), self.srvLocalStorage.set("Data-lastRefreshMindMap", self.lastRefreshMindMap);
    }
    function saveObject(self, type, dbid) {
        var fromObject = self.originalDbIndex[dbid], toObject = self.getObject(dbid), diffResult = diffObject(fromObject, toObject);
        if (null == diffResult) {
            if (a4p.isDefined(toObject)) {
                if (toObject.c4p_synchro.creating == c4p.Synchro.QUEUE && (toObject.c4p_synchro.creating = c4p.Synchro.NONE), 
                toObject.c4p_synchro.writing == c4p.Synchro.QUEUE && (toObject.c4p_synchro.writing = c4p.Synchro.NONE), 
                toObject.c4p_synchro.deleting == c4p.Synchro.QUEUE && (toObject.c4p_synchro.deleting = c4p.Synchro.NONE), 
                "Document" == type && a4p.isDefined(toObject.feed) && toObject.feed) return self.srvConfig.hasActiveRemoteCrm() && sendSharing(self, toObject) ? (self.srvLocalStorage.set("Data-" + type, self.currentItems[type]), 
                !0) : (toObject.c4p_synchro.sharing = c4p.Synchro.NONE, toObject.toSaveWhenCrm = !0, 
                self.srvLocalStorage.set("Data-" + type, self.currentItems[type]), !1);
                self.srvLocalStorage.set("Data-" + type, self.currentItems[type]);
            }
            return !1;
        }
        if ("new" == diffResult) {
            var changed = !1;
            if (a4p.isDefined(toObject.email) && toObject.email.editable && (toObject.email.editable = !1, 
            changed = !0), changed && self.srvLocalStorage.set("Data-" + toObject.a4p_type, self.currentItems[toObject.a4p_type]), 
            "Document" == type) {
                if (a4p.isTrueOrNonEmpty(toObject.feed)) return self.srvConfig.hasActiveRemoteCrm() && sendSharing(self, toObject) ? !0 : (toObject.c4p_synchro.sharing = c4p.Synchro.NONE, 
                toObject.toSaveWhenCrm = !0, self.srvLocalStorage.set("Data-" + type, self.currentItems[type]), 
                !1);
                if (a4p.isTrueOrNonEmpty(toObject.email)) return sendEmail(self, toObject), !0;
            }
            return self.srvConfig.hasActiveRemoteCrm() && sendCreation(self, toObject) ? !0 : (toObject.c4p_synchro.creating = c4p.Synchro.NONE, 
            toObject.c4p_synchro.writing = c4p.Synchro.NONE, toObject.toSaveWhenCrm = !0, self.srvLocalStorage.set("Data-" + type, self.currentItems[type]), 
            !1);
        }
        if ("delete" == diffResult) {
            if (self.srvConfig.hasActiveRemoteCrm() && sendDeletion(self, fromObject, toObject)) return !0;
            if (a4p.isDefined(toObject)) {
                toObject.c4p_synchro.deleting = c4p.Synchro.NONE, toObject.toSaveWhenCrm = !0;
                for (var oldCrmKeyId in toObject.id) if ("dbid" != oldCrmKeyId && toObject.id.hasOwnProperty(oldCrmKeyId)) {
                    var crm = oldCrmKeyId.substr(0, oldCrmKeyId.length - 3), id = toObject.id[oldCrmKeyId];
                    delete self.index[crm][id];
                }
                {
                    removeObjectFromList(self.currentItems[type], dbid);
                }
                delete self.index.db[dbid], self.nbObjects--, self.srvLocalStorage.set("Data-" + type, self.currentItems[type]), 
                triggerUpdate(self, "remove", type, dbid), unlinkLinkedObjects(self, dbid);
            }
            return !1;
        }
        var changed = !1;
        if ("Document" == toObject.a4p_type && a4p.isDefined(toObject.email) && toObject.email.editable && (toObject.email.editable = !1, 
        changed = !0), changed && self.srvLocalStorage.set("Data-" + toObject.a4p_type, self.currentItems[toObject.a4p_type]), 
        "Document" == type) {
            if (a4p.isTrueOrNonEmpty(toObject.feed)) return self.srvConfig.hasActiveRemoteCrm() && sendSharing(self, toObject) ? !0 : (toObject.c4p_synchro.sharing = c4p.Synchro.NONE, 
            toObject.toSaveWhenCrm = !0, self.srvLocalStorage.set("Data-" + type, self.currentItems[type]), 
            !1);
            if (a4p.isTrueOrNonEmpty(toObject.email)) return sendEmail(self, toObject), !0;
        }
        return self.srvConfig.hasActiveRemoteCrm() && sendUpdate(self, toObject, diffResult) ? !0 : (toObject.c4p_synchro.writing = c4p.Synchro.NONE, 
        toObject.toSaveWhenCrm = !0, self.srvLocalStorage.set("Data-" + type, self.currentItems[type]), 
        !1);
    }
    function sendEmail(self, object) {
        for (var email = object.email, event = self.getObject(object.parent_id.dbid), emails = [], i = 0; i < email.emailsInput.length; i++) emails.push(email.emailsInput[i].email);
        for (var i = 0; i < email.contacts.length; i++) {
            var contact = self.getObject(email.contacts[i].dbid);
            emails.push(contact.email);
        }
        var askedCrms = self.srvConfig.getActiveCrms(), params = {
            askedCrms: askedCrms,
            mail_object: email.subject,
            mail_body: email.body,
            object_id: event.id,
            emails: emails,
            files: []
        }, requestCtx = {
            type: "Email",
            title: "Send Email body for " + event.a4p_type + " " + self.srvConfig.getItemName(event),
            dbid: object.id.dbid
        };
        if (self.savingObject = {
            type: "Document",
            dbid: object.id.dbid,
            action: "create",
            fields: angular.copy(object)
        }, self.srvLocalStorage.set("Data-savingObject", self.savingObject), self.isDemo) {
            for (var createdIds = [], i = 0; i < askedCrms.length; i++) createdIds.push({
                crm: askedCrms[i],
                id: "demo" + askedCrms[i].toUpperCase() + object.id.dbid
            });
            var answerId = {
                dbid: object.id.dbid
            };
            isValueInList(self.srvConfig.getActiveCrms(), "sf") && (answerId.sf_id = "demoSF" + object.id.dbid), 
            onEmailSuccess(self, requestCtx, {
                responseOK: !0,
                id: answerId,
                responseStatus: "Create email success.",
                askedCrms: askedCrms,
                created: createdIds,
                errors: [],
                log: "SendEmail done.",
                nbSent: 1
            });
        } else {
            for (var i = 0; i < email.documents.length; i++) {
                var document = self.getObject(email.documents[i].dbid);
                if ("share" == email.emailType) params.files.push({
                    name: document.name,
                    uid: document.id.dbid,
                    id: document.id
                }); else {
                    var fileName = document.name, fileUid = document.id.dbid;
                    params.files.push({
                        name: fileName,
                        uid: fileUid
                    }), self.srvSynchro.addFileRequest("data", {
                        type: "Attachment",
                        title: "Send Email attachment " + self.srvConfig.getItemName(document) + " for " + event.a4p_type + " " + self.srvConfig.getItemName(event)
                    }, self.srvConfig.c4pUrlUploadFile, "POST", {
                        type: "Document",
                        id: document.id.dbid,
                        created: [ {
                            crm: "sf",
                            id: ""
                        } ],
                        askedCrms: askedCrms,
                        uploadFileInCrm: !1,
                        shareFileInCrm: !1,
                        fileName: fileName,
                        fileUid: fileUid,
                        object_id: params.object_id
                    }, document.filePath, {
                        "Content-Type": "application/x-www-form-urlencoded"
                    }, {
                        fileKey: "file",
                        fileName: document.name
                    });
                }
            }
            self.srvSynchro.addRequest("data", requestCtx, self.srvConfig.c4pUrlSendEmail, "POST", params, {
                "Content-Type": "application/x-www-form-urlencoded"
            });
        }
        return !0;
    }
    function sendCreation(self, object) {
        var requestCtx = {
            type: "Create",
            title: "Create " + object.a4p_type + " " + self.srvConfig.getItemName(object),
            dbid: object.id.dbid
        }, askedCrms = self.srvConfig.getActiveCrms(), created = [];
        if (isValueInList(self.a4pTypesInC4PFirst, object.a4p_type) ? (isValueInList(askedCrms, "c4p") && created.push({
            crm: "c4p",
            id: object.id.c4p_id
        }), isValueInList(askedCrms, "sf") && created.push({
            crm: "sf",
            id: object.id.sf_id
        })) : isValueInList(self.a4pTypesForSF, object.a4p_type) ? isValueInList(askedCrms, "sf") ? created.push({
            crm: "sf",
            id: object.id.sf_id
        }) : isValueInList(askedCrms, "c4p") && created.push({
            crm: "c4p",
            id: object.id.c4p_id
        }) : isValueInList(askedCrms, "c4p") && created.push({
            crm: "c4p",
            id: object.id.c4p_id
        }), created.length <= 0) return !1;
        if (self.savingObject = {
            type: object.a4p_type,
            dbid: object.id.dbid,
            action: "create",
            fields: angular.copy(object)
        }, self.srvLocalStorage.set("Data-savingObject", self.savingObject), self.isDemo) {
            var answerCreated = {
                crm: created[0].crm,
                tmpId: created[0].id
            };
            isValueInList(self.srvConfig.getActiveCrms(), "sf") && (answerCreated.id = "demoSF" + object.id.dbid), 
            onCreateSuccess(self, requestCtx, {
                id: object.id.dbid,
                type: object.a4p_type,
                askedCreated: created,
                created: [ answerCreated ],
                errors: []
            });
        } else {
            var params;
            if (a4p.isDefined(c4p.Model.files[object.a4p_type])) {
                var loadFields = c4p.Model.files[object.a4p_type];
                params = {
                    type: object.a4p_type,
                    id: object.id.dbid,
                    created: created,
                    askedCrms: askedCrms,
                    uploadFileInCrm: !0,
                    shareFileInCrm: !1,
                    fileName: object[loadFields.fileName],
                    fileUid: object.id.dbid,
                    object_id: object[loadFields.parent]
                };
                var options = {
                    fileKey: "file",
                    fileName: object[loadFields.fileName]
                };
                self.srvSynchro.addFileRequest("data", requestCtx, self.srvConfig.c4pUrlUploadFile, "POST", params, object[loadFields.filePath], {
                    "Content-Type": "application/x-www-form-urlencoded"
                }, options);
            } else {
                if (params = {
                    type: object.a4p_type,
                    id: object.id.dbid,
                    created: created,
                    fields: object,
                    askedCrms: askedCrms
                }, "Attachee" == object.a4p_type) {
                    var objDesc = c4p.Model.a4p_types[object.a4p_type], attachedObject = self.getObject(object[objDesc.attached].dbid);
                    params.fields.attachedName = self.srvConfig.getItemName(attachedObject);
                    var attacheeObject = self.getObject(object[objDesc.attachee].dbid);
                    params.fields.attacheeName = self.srvConfig.getItemName(attacheeObject);
                } else if ("Report" == object.a4p_type) {
                    var i, nb;
                    for (params.contacts = [], params.accounts = [], i = 0, nb = object.contact_ids.length; nb > i; i++) {
                        var contact = self.getObject(object.contact_ids[i].dbid);
                        if (params.contacts.push(contact), a4p.isDefined(contact.account_id)) {
                            var account = self.getObject(contact.account_id.dbid);
                            params.accounts.push(account);
                        }
                    }
                    params.documents = [];
                    for (i = 0, nb = object.document_ids.length; nb > i; i++) {
                        var document = self.getObject(object.document_ids[i].dbid);
                        params.documents.push(document);
                    }
                }
                self.srvSynchro.addRequest("data", requestCtx, self.srvConfig.c4pUrlSfCreate, "POST", params, {
                    "Content-Type": "application/x-www-form-urlencoded"
                });
            }
        }
        return !0;
    }
    function sendDeletion(self, fromObject) {
        var requestCtx = {
            type: "Delete",
            title: "Delete " + fromObject.a4p_type + " " + self.srvConfig.getItemName(fromObject),
            dbid: fromObject.id.dbid
        }, askedCrms = self.srvConfig.getActiveCrms(), deleted = [];
        if (isValueInList(self.a4pTypesInC4PFirst, fromObject.a4p_type) ? (isValueInList(askedCrms, "c4p") && deleted.push({
            crm: "c4p",
            id: fromObject.id.c4p_id
        }), isValueInList(askedCrms, "sf") && deleted.push({
            crm: "sf",
            id: fromObject.id.sf_id
        })) : isValueInList(self.a4pTypesForSF, fromObject.a4p_type) ? isValueInList(askedCrms, "sf") ? deleted.push({
            crm: "sf",
            id: fromObject.id.sf_id
        }) : isValueInList(askedCrms, "c4p") && deleted.push({
            crm: "c4p",
            id: fromObject.id.c4p_id
        }) : isValueInList(askedCrms, "c4p") && deleted.push({
            crm: "c4p",
            id: fromObject.id.c4p_id
        }), deleted.length <= 0) return !1;
        var params = {
            type: fromObject.a4p_type,
            id: fromObject.id.dbid,
            deleted: deleted,
            askedCrms: askedCrms
        };
        return self.savingObject = {
            type: fromObject.a4p_type,
            dbid: fromObject.id.dbid,
            action: "delete",
            fields: angular.copy(fromObject)
        }, self.srvLocalStorage.set("Data-savingObject", self.savingObject), self.isDemo ? onDeleteSuccess(self, requestCtx, {
            id: fromObject.id.dbid,
            type: fromObject.a4p_type,
            askedDeleted: deleted,
            deleted: deleted,
            errors: []
        }) : self.srvSynchro.addRequest("data", requestCtx, self.srvConfig.c4pUrlSfDelete, "POST", params, {
            "Content-Type": "application/x-www-form-urlencoded"
        }), !0;
    }
    function sendUpdate(self, object, diffResult) {
        var requestCtx = {
            type: "Update",
            title: "Update " + object.a4p_type + " " + self.srvConfig.getItemName(object),
            dbid: object.id.dbid
        }, askedCrms = self.srvConfig.getActiveCrms(), updated = [];
        if (isValueInList(self.a4pTypesInC4PFirst, object.a4p_type) ? (isValueInList(askedCrms, "c4p") && updated.push({
            crm: "c4p",
            id: object.id.c4p_id
        }), isValueInList(askedCrms, "sf") && updated.push({
            crm: "sf",
            id: object.id.sf_id
        })) : isValueInList(self.a4pTypesForSF, object.a4p_type) ? isValueInList(askedCrms, "sf") ? updated.push({
            crm: "sf",
            id: object.id.sf_id
        }) : isValueInList(askedCrms, "c4p") && updated.push({
            crm: "c4p",
            id: object.id.c4p_id
        }) : isValueInList(askedCrms, "c4p") && updated.push({
            crm: "c4p",
            id: object.id.c4p_id
        }), updated.length <= 0) return !1;
        if (self.savingObject = {
            type: object.a4p_type,
            dbid: object.id.dbid,
            action: "update",
            fields: angular.copy(object)
        }, self.srvLocalStorage.set("Data-savingObject", self.savingObject), self.isDemo) onUpdateSuccess(self, requestCtx, {
            id: object.id.dbid,
            type: object.a4p_type,
            askedUpdated: updated,
            updated: updated,
            errors: []
        }); else {
            var len, i, key, updatedFields = {};
            for (updatedFields.id = object.id, i = 0, len = diffResult.length; len > i; i++) key = diffResult[i], 
            updatedFields[key] = object[key];
            var params = {
                id: object.id.dbid,
                type: object.a4p_type,
                updated: updated,
                object: object,
                fields: updatedFields,
                askedCrms: askedCrms
            };
            if ("Report" == object.a4p_type) {
                for (params.contacts = [], params.accounts = [], i = 0; i < object.contact_ids.length; i++) {
                    var contact = self.getObject(object.contact_ids[i].dbid);
                    if (params.contacts.push(contact), a4p.isDefined(contact.account_id)) {
                        var account = self.getObject(contact.account_id.dbid);
                        params.accounts.push(account);
                    } else params.accounts.push({});
                }
                params.documents = [];
                for (i = 0; i < object.document_ids.length; i++) {
                    var document = self.getObject(object.document_ids[i].dbid);
                    params.documents.push(document);
                }
            }
            self.srvSynchro.addRequest("data", requestCtx, self.srvConfig.c4pUrlSfUpdate, "POST", params, {
                "Content-Type": "application/x-www-form-urlencoded"
            });
        }
        return !0;
    }
    function sendSharing(self, object) {
        if (!isValueInList(self.srvConfig.getActiveCrms(), "sf")) return !1;
        var feed = object.feed, params = {
            file: {
                id: object.id
            },
            body: feed.body,
            title: feed.title
        }, requestCtx = {
            type: "Share",
            title: "Share Document " + self.srvConfig.getItemName(object),
            dbid: object.id.dbid
        };
        if (self.savingObject = {
            type: "Document",
            dbid: object.id.dbid,
            action: "share",
            fields: angular.copy(object)
        }, self.srvLocalStorage.set("Data-savingObject", self.savingObject), self.isDemo) {
            var answerId = {};
            isValueInList(self.srvConfig.getActiveCrms(), "sf") && (answerId.sf_id = "feedSF" + object.id.dbid), 
            onShareSuccess(self, requestCtx, {
                log: "Document shared.",
                id: answerId
            });
        } else self.srvSynchro.addRequest("data", requestCtx, self.srvConfig.c4pUrlShareDoc, "POST", params, {
            "Content-Type": "application/x-www-form-urlencoded"
        });
        return !0;
    }
    function addLinkedObject(self, result, index, linkName, dbid) {
        var toObject = self.index.db[dbid];
        if (a4p.isDefined(toObject)) {
            var link = index[dbid];
            a4p.isUndefined(link) && (link = {
                item: toObject,
                linkNames: []
            }, index[dbid] = link, result.push(link)), addValueToList(link.linkNames, linkName);
        }
    }
    function unlinkLinkedObjects(self, dbid, isOriginal) {
        for (var otherTypeIdx = 0; otherTypeIdx < c4p.Model.allTypes.length; otherTypeIdx++) for (var fromOtherType = c4p.Model.allTypes[otherTypeIdx], objDesc = c4p.Model.a4p_types[fromOtherType], otherObjectIdx = 0; otherObjectIdx < self.currentItems[fromOtherType].length; otherObjectIdx++) for (var otherObject = self.currentItems[fromOtherType][otherObjectIdx], otherId = otherObject.id.dbid, fromOtherFieldIdx = 0; fromOtherFieldIdx < objDesc.linkFields.length; fromOtherFieldIdx++) {
            var linkOtherModel = objDesc.linkFields[fromOtherFieldIdx], fromOtherField = linkOtherModel.key, isArrayField = a4p.isDefined(c4p.Model.objectArrays[fromOtherType][fromOtherField]);
            if (isArrayField) {
                for (var valueIdx = 0, valueNb = otherObject[fromOtherField].length; valueNb > valueIdx; valueIdx++) if (otherObject[fromOtherField][valueIdx].dbid == dbid) {
                    otherObject[fromOtherField].splice(valueIdx, 1), otherObject[fromOtherField].length <= 0 && "many" == linkOtherModel.cascadeDelete ? self.removeObject(otherId, isOriginal) : self.setObject(otherObject, isOriginal), 
                    isOriginal || self.addObjectToSave(fromOtherType, otherId);
                    break;
                }
            } else otherObject[fromOtherField].dbid == dbid && (otherObject[fromOtherField] = {}, 
            "many" == linkOtherModel.cascadeDelete ? self.removeObject(otherId, isOriginal) : self.setObject(otherObject, isOriginal), 
            isOriginal || self.addObjectToSave(fromOtherType, otherId));
        }
    }
    function diffObject(fromObject, toObject) {
        if (a4p.isDefined(toObject)) {
            if (toObject.c4p_synchro.deleting == c4p.Synchro.NEW || toObject.c4p_synchro.deleting == c4p.Synchro.QUEUE) return "delete";
            if (a4p.isDefinedAndNotNull(fromObject)) {
                for (var type = fromObject.a4p_type, updated = !1, updates = [], objDesc = c4p.Model.a4p_types[type], fieldIdx = 0, len = objDesc.fields.length; len > fieldIdx; fieldIdx++) {
                    var fieldName = objDesc.fields[fieldIdx], isArrayField = a4p.isDefined(c4p.Model.objectArrays[type][fieldName]);
                    if (isArrayField) {
                        if (toObject[fieldName].length != fromObject[fieldName].length) updated = !0, updates.push(fieldName); else for (var valueIdx = 0, valueNb = toObject[fieldName].length; valueNb > valueIdx; valueIdx++) if (diffField(type, fieldName, fromObject[fieldName][valueIdx], toObject[fieldName][valueIdx])) {
                            updated = !0, updates.push(fieldName);
                            break;
                        }
                    } else diffField(type, fieldName, fromObject[fieldName], toObject[fieldName]) && (updated = !0, 
                    updates.push(fieldName));
                }
                return updated ? updates : null;
            }
            return "new";
        }
        return a4p.isDefinedAndNotNull(fromObject) ? "delete" : null;
    }
    function diffField(a4p_type, fieldname, fromField, toField) {
        if (a4p.isDefined(c4p.Model.a4p_types[a4p_type].linkDescs[fieldname])) {
            var isArrayField = a4p.isDefined(c4p.Model.objectArrays[a4p_type][fieldname]);
            if (isArrayField) {
                if (toField.length != fromField.length) return !0;
                for (var valueIdx = 0, valueNb = toField.length; valueNb > valueIdx; valueIdx++) if (toField[valueIdx].dbid != fromField[valueIdx].dbid) return !0;
            } else if (toField.dbid != fromField.dbid) return !0;
        } else if (toField instanceof Object) {
            for (var k in toField) if (toField.hasOwnProperty(k) && toField[k] != fromField[k]) return !0;
        } else if (toField != fromField) return !0;
        return !1;
    }
    function convertField(fieldEditModel, value) {
        if ("number" == fieldEditModel.type || "probability" == fieldEditModel.type || "currency" == fieldEditModel.type) return "string" == typeof value ? parseInt(value, 10) : value;
        if ("boolean" == fieldEditModel.type) return "string" == typeof value ? !(0 == value.length || "0" == value.toLowerCase() || "no" == value.toLowerCase() || "null" == value.toLowerCase() || "false" == value.toLowerCase()) : "number" == typeof value ? !(0 == value) : value ? !0 : !1;
        if ("time" == fieldEditModel.type || "datetime" == fieldEditModel.type) return "undefined" == typeof value ? "" : "string" == typeof value && "false" === value ? "" : a4pDateFormat(a4pDateParse(value));
        if ("date" == fieldEditModel.type) return "undefined" == typeof value ? "" : "string" == typeof value && "false" === value ? "" : "string" != typeof value ? "" : a4pDateFormat(a4pDateParse(value));
        if ("rating" == fieldEditModel.type) {
            var rating = {};
            return "undefined" == typeof value ? {
                code: "Feeling",
                name: "Feeling",
                type: "star",
                value: 0
            } : "string" == typeof value ? (rating = a4p.Json.string2Object(value), "star" != rating.type && "check" != rating.type && (rating.type = "star"), 
            rating.name || (rating.name = "Feeling", rating.code = "Feeling"), "undefined" == typeof rating.value && (rating.value = 0), 
            rating) : (rating = {}, rating.type = "star" != value.type && "check" != value.type ? "star" : value.type, 
            value.name ? (rating.name = value.name, rating.code = value.code || value.name) : (rating.name = "Feeling", 
            rating.code = "Feeling"), rating.value = value.value ? value.value : 0, rating);
        }
        return "undefined" == typeof value ? "" : value && "string" != typeof value ? value.toString() : value;
    }
    function sendFirstObjectToSave(self) {
        var sentRequest = !1;
        if (a4p.isDefined(self.savingObject.dbid)) {
            if (sentRequest = saveObject(self, self.savingObject.type, self.savingObject.dbid)) return;
            self.savingObject = {}, self.srvLocalStorage.set("Data-savingObject", self.savingObject);
        }
        for (;0 == sentRequest && self.objectsToSave.length > 0; ) {
            var removedObject = self.objectsToSave.shift();
            self.srvLocalStorage.set("Data-objectsToSave", self.objectsToSave), sentRequest = saveObject(self, removedObject.type, removedObject.dbid);
        }
        0 == sentRequest && (self.savingObject = {}, self.srvLocalStorage.set("Data-savingObject", self.savingObject));
    }
    function sendNextObjectToSave(self) {
        self.savingObject = {}, self.srvLocalStorage.set("Data-savingObject", self.savingObject), 
        0 == self.objectsToDownload.length && sendFirstObjectToSave(self);
    }
    function getFirstObjectToDownload(self) {
        if (self.objectsToDownload.length > 0) {
            for (var sentRequest = !1; 0 == sentRequest && self.objectsToDownload.length > 0; ) sentRequest = downloadObject(self, self.objectsToDownload[0].dbid);
            return sentRequest;
        }
        return !1;
    }
    function getNextObjectToDownload(self, dbid) {
        self.objectsToDownload.length > 0 && self.objectsToDownload[0].dbid == dbid && (removeObjectToDownload(self, self.objectsToDownload[0].dbid), 
        getFirstObjectToDownload(self) || sendFirstObjectToSave(self));
    }
    function updateLinkedObjects(self, type, dbid, idKey, idValue) {
        for (var typeIdx = 0; typeIdx < c4p.Model.allTypes.length; typeIdx++) for (var fromOtherType = c4p.Model.allTypes[typeIdx], objDesc = c4p.Model.a4p_types[fromOtherType], fromFieldIdx = 0; fromFieldIdx < objDesc.linkFields.length; fromFieldIdx++) for (var linkModel = objDesc.linkFields[fromFieldIdx], fromField = linkModel.key, isArrayField = a4p.isDefined(c4p.Model.objectArrays[fromOtherType][fromField]), toTypeIdx = 0; toTypeIdx < linkModel.types.length; toTypeIdx++) {
            var toType = linkModel.types[toTypeIdx];
            if (toType == type) for (var objectIdx = 0; objectIdx < self.currentItems[fromOtherType].length; objectIdx++) {
                var linkField = self.currentItems[fromOtherType][objectIdx][fromField];
                if (isArrayField) for (var valueIdx = 0, valueNb = linkField.length; valueNb > valueIdx; valueIdx++) linkField[valueIdx].dbid == dbid && (linkField[valueIdx][idKey] = idValue); else linkField.dbid == dbid && (linkField[idKey] = idValue);
            }
        }
    }
    function copyObject(object) {
        if (a4p.isDefined(object)) {
            var i, len, fieldname, copyObject = {
                a4p_type: object.a4p_type
            };
            copyObject.id = {};
            for (var k in object.id) object.id.hasOwnProperty(k) && (copyObject.id[k] = object.id[k]);
            var objDesc = c4p.Model.a4p_types[object.a4p_type];
            for (i = 0, len = objDesc.fields.length; len > i; i++) {
                fieldname = objDesc.fields[i];
                var isArrayField = a4p.isDefined(c4p.Model.objectArrays[object.a4p_type][fieldname]);
                if (isArrayField) {
                    copyObject[fieldname] = [];
                    for (var valueIdx = 0, valueNb = object[fieldname].length; valueNb > valueIdx; valueIdx++) copyObject[fieldname].push(copyField(object.a4p_type, fieldname, object[fieldname][valueIdx]));
                } else copyObject[fieldname] = copyField(object.a4p_type, fieldname, object[fieldname]);
            }
            return copyObject;
        }
        return void 0;
    }
    function copyField(a4p_type, fieldname, fromField) {
        if (a4p.isDefined(c4p.Model.a4p_types[a4p_type].linkDescs[fieldname]) || fromField instanceof Object) {
            var copyField = {};
            for (var k in fromField) fromField.hasOwnProperty(k) && (copyField[k] = fromField[k]);
            return copyField;
        }
        return fromField;
    }
    function createdObject(self, itemId, askedCreated, created) {
        var object = self.index.db[itemId];
        if (a4p.isDefinedAndNotNull(created)) for (var i = 0, nb = created.length; nb > i; i++) {
            var crm = created[i].crm, id = created[i].id;
            object.id[crm + "_id"] = id, created[i].tmpId && delete self.index[crm][created[i].tmpId], 
            self.index[crm][id] = object, self.savingObject.fields.id[crm + "_id"] = id, updateLinkedObjects(self, object.a4p_type, itemId, crm + "_id", id);
        }
        addOriginalObject(self, self.savingObject.fields, !1), self.srvLocalStorage.set("Data-" + object.a4p_type, self.currentItems[object.a4p_type]), 
        self.addObjectToSave(object.a4p_type, itemId);
    }
    function updatedObject(self, itemId, askedUpdated, updated) {
        for (var object = self.index.db[itemId], i = 0, nb = updated.length; nb > i; i++) {
            updated[i].crm, updated[i].id;
        }
        setOriginalObject(self, self.savingObject.fields, !1), self.srvLocalStorage.set("Data-" + object.a4p_type, self.currentItems[object.a4p_type]), 
        self.addObjectToSave(object.a4p_type, object.id.dbid);
    }
    function deletedObject(self, itemId, askedDeleted, deleted, isOriginal) {
        for (var object = self.index.db[itemId], i = 0, nb = deleted.length; nb > i; i++) {
            var crm = deleted[i].crm, id = deleted[i].id;
            delete self.index[crm][id];
        }
        if (askedDeleted.length >= deleted.length) {
            {
                removeObjectFromList(self.currentItems[object.a4p_type], itemId);
            }
            delete self.index.db[itemId], self.nbObjects--;
        }
        self.srvLocalStorage.set("Data-" + object.a4p_type, self.currentItems[object.a4p_type]), 
        removeOriginalObject(self, itemId), triggerUpdate(self, "remove", object.a4p_type, object.id.dbid), 
        unlinkLinkedObjects(self, itemId, isOriginal);
    }
    function addOriginalObject(self, object, downloadFile) {
        a4p.InternalLog.log("srvData", "addOriginalObject " + object.id.dbid);
        var copy = copyObject(object);
        a4p.isDefined(copy) && (self.originalDbIndex[object.id.dbid] = copy, self.originalItems[copy.a4p_type].push(copy), 
        self.srvLocalStorage.set("Data-Original" + copy.a4p_type, self.originalItems[copy.a4p_type])), 
        a4p.isDefined(c4p.Model.files[object.a4p_type]) && (a4p.isDefined(object.id.sf_id) || a4p.isDefined(object.id.c4p_id)) && downloadFile && addObjectToDownload(self, object.a4p_type, object.id.dbid);
    }
    function updateOriginalObject(self, object, fields) {
        a4p.InternalLog.log("srvData", "updateOriginalObject " + object.id.dbid);
        var original = self.originalDbIndex[object.id.dbid];
        if (a4p.isDefined(original)) {
            for (var objDesc = c4p.Model.a4p_types[object.a4p_type], i = 0, len = objDesc.fields.length; len > i; i++) {
                var fieldname = objDesc.fields[i];
                if (a4p.isDefined(fields[fieldname])) {
                    var isArrayField = a4p.isDefined(c4p.Model.objectArrays[object.a4p_type][fieldname]);
                    if (isArrayField) {
                        original[fieldname] = [];
                        for (var valueIdx = 0, valueNb = fields[fieldname].length; valueNb > valueIdx; valueIdx++) original[fieldname].push(copyField(object.a4p_type, fieldname, fields[fieldname][valueIdx]));
                    } else original[fieldname] = copyField(object.a4p_type, fieldname, fields[fieldname]);
                }
            }
            self.srvLocalStorage.set("Data-Original" + object.a4p_type, self.originalItems[object.a4p_type]);
        }
    }
    function setOriginalObject(self, object, downloadFile) {
        a4p.InternalLog.log("srvData", "setOriginalObject " + object.id.dbid);
        var copy = copyObject(object);
        a4p.isDefined(copy) && (self.originalDbIndex[object.id.dbid] = copy, replaceObjectFromList(self.originalItems[copy.a4p_type], object.id.dbid, copy) !== !1 && self.srvLocalStorage.set("Data-Original" + copy.a4p_type, self.originalItems[copy.a4p_type])), 
        a4p.isDefined(c4p.Model.files[object.a4p_type]) && (a4p.isDefined(object.id.sf_id) || a4p.isDefined(object.id.c4p_id)) && downloadFile && addObjectToDownload(self, object.a4p_type, object.id.dbid);
    }
    function removeOriginalObject(self, dbid) {
        a4p.InternalLog.log("srvData", "removeOriginalObject " + dbid);
        var object = self.originalDbIndex[dbid];
        a4p.isDefined(object) && (delete self.originalDbIndex[dbid], removeObjectFromList(self.originalItems[object.a4p_type], dbid) !== !1 && self.srvLocalStorage.set("Data-Original" + object.a4p_type, self.originalItems[object.a4p_type]));
    }
    function addObjectToDownload(self, type, dbid) {
        a4p.InternalLog.log("srvData", "addObjectToDownload " + dbid);
        var delayedDownload = !0;
        if (0 == self.objectsToDownload.length && (delayedDownload = !1), getLinkFromList(self.objectsToDownload, dbid) !== !1) return !1;
        var object = self.getObject(dbid);
        return "Document" == object.a4p_type && (object.fileUrl = "", a4p.InternalLog.log("srvData", "Document " + object.filePath + " has before download an empty fileUrl"), 
        c4p.Model.isImage(object.extension) && (object.thumb_url = object.fileUrl, a4p.InternalLog.log("srvData", "Image " + object.filePath + " has before download an empty thumb_url"))), 
        object.c4p_synchro.reading = c4p.Synchro.QUEUE, self.srvLocalStorage.set("Data-" + object.a4p_type, self.currentItems[object.a4p_type]), 
        self.objectsToDownload.push({
            type: type,
            dbid: dbid
        }), self.srvLocalStorage.set("Data-objectsToDownload", self.objectsToDownload), 
        delayedDownload || getFirstObjectToDownload(self) || sendFirstObjectToSave(self), 
        !0;
    }
    function removeObjectToDownload(self, dbid) {
        return a4p.InternalLog.log("srvData", "removeObjectToDownload " + dbid), removeLinkFromList(self.objectsToDownload, dbid) !== !1 ? (self.srvLocalStorage.set("Data-objectsToDownload", self.objectsToDownload), 
        !0) : !1;
    }
    function downloadObject(self, dbid) {
        a4p.InternalLog.log("srvData", "downloadObject " + dbid);
        var object = self.getObject(dbid);
        if (a4p.isDefined(object)) {
            var loadFields = c4p.Model.files[object.a4p_type];
            return a4p.isDefined(object.id.sf_id) ? (self.srvSynchro.addFileRequest("data", {
                type: "Download",
                title: "Download " + object.a4p_type + " " + self.srvConfig.getItemName(object),
                dbid: object.id.dbid
            }, self.srvConfig.c4pUrlDownload + "?type=" + encodeURIComponent(object.a4p_type) + "&dbid=" + encodeURIComponent(dbid) + "&sf_id=" + encodeURIComponent(object.id.sf_id) + "&mimetype=" + encodeURIComponent(object.mimetype), "GET", null, object[loadFields.filePath], null, null), 
            !0) : a4p.isDefined(object.id.c4p_id) ? (self.srvSynchro.addFileRequest("data", {
                type: "Download",
                title: "Download " + object.a4p_type + " " + self.srvConfig.getItemName(object),
                dbid: object.id.dbid
            }, self.srvConfig.c4pUrlDownload + "?type=" + encodeURIComponent(object.a4p_type) + "&dbid=" + encodeURIComponent(dbid) + "&c4p_id=" + encodeURIComponent(object.id.c4p_id) + "&mimetype=" + encodeURIComponent(object.mimetype), "GET", null, object[loadFields.filePath], null, null), 
            !0) : (removeObjectToDownload(self, dbid), !1);
        }
        return removeObjectToDownload(self, dbid), !1;
    }
    return Service.prototype.isMethodPossibleForObject = function(methodName, object) {
        var methodDesc = this.a4p_methods[methodName];
        return !!methodDesc.objectTypes[object.a4p_type];
    }, Service.prototype.getMethodIcon = function(methodName, object) {
        var methodDesc = this.a4p_methods[methodName], icon = methodDesc.icon;
        return a4p.isDefined(methodDesc.iconeToggle) && a4p.isDefined(this[methodDesc.iconeToggle.when]) && this[methodDesc.iconeToggle.when](object) && (icon = methodDesc.iconeToggle.icon), 
        icon;
    }, Service.prototype.isMethodDisabledForObject = function(methodName, object) {
        var methodDesc = this.a4p_methods[methodName], disabled = !1;
        if (methodDesc.mustBeOwner && !this.isObjectOwnedByUser(object)) disabled = !0; else if (a4p.isDefined(methodDesc.mustHaveFavorite) && !this.favoritesObject) disabled = !0; else if (a4p.isDefined(methodDesc.mustHaveBetaOption) && !this.srvConfig.c4pConfig[methodDesc.mustHaveBetaOption]) disabled = !0; else if (a4p.isDefined(methodDesc.mustBeCreated) && (object.c4p_synchro.creating || object.c4p_synchro.reading)) disabled = !0; else if (a4p.isDefined(methodDesc.mustBeInFuture) && a4p.isDefined(object.date_start)) {
            var date = new Date();
            a4pDateParse(object.date_start).getTime() < date.getTime() && (disabled = !0);
        } else if (a4p.isDefinedAndNotNull(methodDesc.possibleCrms)) {
            for (var enabled = !1, j = 0, max = methodDesc.possibleCrms.length; max > j; j++) {
                var crm = methodDesc.possibleCrms[j];
                if (isValueInList(this.srvConfig.getActiveCrms(), crm)) {
                    enabled = !0;
                    break;
                }
            }
            enabled || (disabled = !0);
        }
        return disabled;
    }, Service.prototype.isTaggedFavorite = function(object) {
        return a4p.isUndefinedOrNull(object) ? !1 : a4p.isUndefinedOrNull(this.favoritesObject) ? !1 : this.hasDirectNamedLinkTo("Facet", "faceted", this.favoritesObject, object);
    }, Service.prototype.toggleFavorite = function(object) {
        return a4p.isUndefinedOrNull(object) ? !1 : a4p.isUndefinedOrNull(this.favoritesObject) ? !1 : (this.hasDirectNamedLinkTo("Facet", "faceted", this.favoritesObject, object) ? this.unlinkFromItem("Facet", "faceted", [ this.favoritesObject ], object) : this.linkToItem("Facet", "faceted", [ this.favoritesObject ], object), 
        !0);
    }, Service.prototype.addListenerOnUpdate = function(fct) {
        return this.callbackHandle++, this.callbacksUpdate.push({
            id: this.callbackHandle,
            callback: fct
        }), this.callbackHandle;
    }, Service.prototype.cancelListener = function(callbackHandle) {
        return removeIdFromList(this.callbacksUpdate, callbackHandle) !== !1;
    }, Service.prototype.clear = function() {
        a4p.InternalLog.log("srvData", "clearData : " + this.nbObjects + " objects"), this.srvSynchro.clearChannel("data"), 
        a4p.initUid(), this.isDemo = !1, this.srvLocalStorage.set("Data-isDemo", this.isDemo), 
        this.originalDbIndex = {}, this.index = {
            db: {},
            sf: {},
            ios: {},
            c4p: {}
        }, this.userId = {
            sf_id: "005i0000000I8c5AAC",
            c4p_id: "demo@apps4pro.com"
        }, this.userObject = void 0, this.favoritesObject = void 0, this.srvLocalStorage.set("Data-userId", this.userId), 
        a4p.InternalLog.log("srvData", "clear : userId=" + a4pDumpData(this.userId, 2)), 
        this.currentItems = {}, this.originalItems = {};
        var i, type;
        for (i = 0; i < c4p.Model.allTypes.length; i++) type = c4p.Model.allTypes[i], this.currentItems[type] = [], 
        this.srvLocalStorage.set("Data-" + type, this.currentItems[type]), this.originalItems[type] = [], 
        this.srvLocalStorage.set("Data-Original" + type, this.originalItems[type]);
        this.lastRefreshMindMap = 0, this.srvLocalStorage.set("Data-lastRefreshMindMap", this.lastRefreshMindMap), 
        this.nbObjects = 0, this.objectsToSave = [], this.srvLocalStorage.set("Data-objectsToSave", this.objectsToSave), 
        this.objectsToDownload = [], this.srvLocalStorage.set("Data-objectsToDownload", this.objectsToDownload), 
        this.savingObject = {}, this.srvLocalStorage.set("Data-savingObject", this.savingObject);
        var self = this, onRemoveSuccess = function() {
            var msg = "File storage successfully cleared";
            self.srvLog.logSuccess(self.srvConfig.c4pConfig.exposeFileStorage, self.srvLocale.translations.htmlMsgClearFileStorageOK, msg);
        }, onRemoveFailure = function(message) {
            var msg = "File storage clearing failure : " + message;
            self.srvLog.logInfo(self.srvConfig.c4pConfig.exposeFileStorage, self.srvLocale.translations.htmlMsgClearFileStoragePb, msg);
        };
        this.srvFileStorage.deleteFullDir("/a4p/c4p/doc", onRemoveSuccess, onRemoveFailure), 
        triggerUpdate(this, "clear");
    }, Service.prototype.init = function() {
        if (!this.initDone) {
            var i, j, type, object, self = this;
            for (a4p.initUid(this.srvLocalStorage.get("Data-Uid", "000")), this.isDemo = this.srvLocalStorage.get("Data-isDemo", !1), 
            this.originalDbIndex = {}, this.index = {
                db: {},
                sf: {},
                ios: {},
                c4p: {}
            }, this.userId = this.srvLocalStorage.get("Data-userId", {
                sf_id: "005i0000000I8c5AAC",
                c4p_id: "demo@apps4pro.com"
            }), a4p.InternalLog.log("srvData", "init : a4p.uid=" + a4p.getUid() + " userId=" + a4pDumpData(this.userId, 2)), 
            this.userObject = this.srvLocalStorage.get("Data-userObject", void 0), this.favoritesObject = this.srvLocalStorage.get("Data-favoritesObject", void 0), 
            this.currentItems = {}, this.originalItems = {}, this.nbObjects = 0, this.lastRefreshMindMap = this.srvLocalStorage.get("Data-lastRefreshMindMap", 0), 
            this.objectsToSave = this.srvLocalStorage.get("Data-objectsToSave", []), this.objectsToDownload = this.srvLocalStorage.get("Data-objectsToDownload", []), 
            this.savingObject = this.srvLocalStorage.get("Data-savingObject", {}), i = 0; i < c4p.Model.allTypes.length; i++) for (type = c4p.Model.allTypes[i], 
            this.originalItems[type] = this.srvLocalStorage.get("Data-Original" + type, []), 
            j = 0; j < this.originalItems[type].length; j++) object = this.originalItems[type][j], 
            this.originalDbIndex[object.id.dbid] = object;
            for (i = 0; i < c4p.Model.allTypes.length; i++) {
                for (type = c4p.Model.allTypes[i], this.currentItems[type] = this.srvLocalStorage.get("Data-" + type, []), 
                this.nbObjects += this.currentItems[type].length, j = 0; j < this.currentItems[type].length; j++) {
                    if (object = this.currentItems[type][j], !this.isObjectToSave(object.id.dbid)) if (object.toSaveWhenCrm) {
                        delete object.toSaveWhenCrm;
                        var fromObject = this.originalDbIndex[object.id.dbid], diffResult = diffObject(fromObject, object);
                        if (null == diffResult) "Document" == type && a4p.isTrueOrNonEmpty(object.feed) && object.c4p_synchro.sharing == c4p.Synchro.NONE && (object.c4p_synchro.sharing = c4p.Synchro.NEW); else if ("new" == diffResult) object.c4p_synchro.creating = c4p.Synchro.NEW, 
                        "Document" == type && a4p.isTrueOrNonEmpty(object.feed) && object.c4p_synchro.sharing == c4p.Synchro.NONE && (object.c4p_synchro.sharing = c4p.Synchro.NEW); else if ("delete" == diffResult) {
                            if (object.c4p_synchro.deleting == c4p.Synchro.NONE) {
                                if (object.c4p_synchro.creating == c4p.Synchro.NEW || object.c4p_synchro.creating == c4p.Synchro.QUEUE) {
                                    this.currentItems[type].splice(j, 1), this.nbObjects--, j--;
                                    continue;
                                }
                                object.c4p_synchro.deleting = c4p.Synchro.NEW, object.c4p_synchro.writing == c4p.Synchro.NEW && (object.c4p_synchro.writing = c4p.Synchro.NONE);
                            }
                        } else object.c4p_synchro.writing == c4p.Synchro.NONE && (object.c4p_synchro.writing = c4p.Synchro.NEW), 
                        "Document" == type && a4p.isTrueOrNonEmpty(object.feed) && object.c4p_synchro.sharing == c4p.Synchro.NONE && (object.c4p_synchro.sharing = c4p.Synchro.NEW);
                        a4p.isTrueOrNonEmpty(object.feed) && object.c4p_synchro.sharing == c4p.Synchro.NEW && (object.c4p_synchro.sharing = c4p.Synchro.QUEUE), 
                        object.c4p_synchro.creating == c4p.Synchro.NEW && (object.c4p_synchro.creating = c4p.Synchro.QUEUE), 
                        object.c4p_synchro.writing == c4p.Synchro.NEW && (object.c4p_synchro.writing = c4p.Synchro.QUEUE), 
                        object.c4p_synchro.deleting == c4p.Synchro.NEW && (object.c4p_synchro.deleting = c4p.Synchro.QUEUE), 
                        this.objectsToSave.push({
                            type: type,
                            dbid: object.id.dbid
                        }), this.srvLocalStorage.set("Data-objectsToSave", this.objectsToSave);
                    } else {
                        if (a4p.isEmptyOrFalse(this.originalDbIndex[object.id.dbid])) {
                            this.currentItems[type].splice(j, 1), this.nbObjects--, j--;
                            continue;
                        }
                        object = copyObject(this.originalDbIndex[object.id.dbid]), object.c4p_synchro = {
                            creating: c4p.Synchro.NONE,
                            sharing: c4p.Synchro.NONE,
                            writing: c4p.Synchro.NONE,
                            reading: c4p.Synchro.NONE,
                            deleting: c4p.Synchro.NONE
                        }, this.completeFields(object), this.isObjectToDownload(object.id.dbid) && (object.c4p_synchro.reading = c4p.Synchro.QUEUE), 
                        this.currentItems[type][j] = object;
                    }
                    this.index.db[object.id.dbid] = object, a4p.isDefined(object.id) && (a4p.isDefined(object.id.sf_id) && (this.index.sf[object.id.sf_id] = object), 
                    a4p.isDefined(object.id.c4p_id) && (this.index.c4p[object.id.c4p_id] = object));
                }
                this.srvLocalStorage.set("Data-" + type, this.currentItems[type]);
            }
            for (i = 0; i < c4p.Model.allTypes.length; i++) {
                for (type = c4p.Model.allTypes[i], j = 0; j < this.originalItems[type].length; j++) {
                    var originalObject = this.originalItems[type][j];
                    object = this.index.db[originalObject.id.dbid], a4p.isUndefined(object) && !this.isObjectToSave(originalObject.id.dbid) && (object = copyObject(originalObject), 
                    this.currentItems[type].push(object), this.nbObjects++);
                }
                this.srvLocalStorage.set("Data-" + type, this.currentItems[type]);
            }
            this.userObject = a4p.isDefinedAndNotNull(this.userObject) ? this.index.db[this.userObject.id.dbid] : void 0, 
            this.favoritesObject = a4p.isDefinedAndNotNull(this.favoritesObject) ? this.index.db[this.favoritesObject.id.dbid] : void 0, 
            this.srvConfig.init(), this.srvLog.init(), this.srvLocale.init(), this.srvSynchro.init(), 
            this.srvSynchro.clearChannel("data"), this.srvSynchro.setPingUrl(this.srvConfig.c4pUrlPing), 
            this.synchroListenerOnStart = this.srvSynchro.addListenerOnStart("data", function(callbackId, requestId, requestCtx, requestNbTry) {
                onSynchroStart(self, callbackId, requestId, requestCtx, requestNbTry);
            }), this.synchroListenerOnCancel = this.srvSynchro.addListenerOnCancel("data", function(callbackId, requestId, requestCtx, requestNbTry) {
                onSynchroCancel(self, callbackId, requestId, requestCtx, requestNbTry);
            }), this.synchroListenerOnError = this.srvSynchro.addListenerOnError("data", function(callbackId, requestId, requestCtx, requestNbTry, message) {
                onSynchroError(self, callbackId, requestId, requestCtx, requestNbTry, message);
            }), this.synchroListenerOnSuccess = this.srvSynchro.addListenerOnSuccess("data", function(callbackId, requestId, requestCtx, requestNbTry, responseStatus, responseData, responseHeaders) {
                onSynchroSuccess(self, callbackId, requestId, requestCtx, requestNbTry, responseStatus, responseData, responseHeaders);
            }), this.runningListenerOnPause = this.srvRunning.addListenerOnPause(function(callbackId, value) {
                onRunningPause(self, callbackId, value);
            }), this.initDone = !0, a4p.InternalLog.log("srvData", "initialized"), triggerUpdate(this, "init");
        }
    }, Service.prototype.start = function() {
        this.init(), getFirstObjectToDownload(this) || sendFirstObjectToSave(this);
    }, Service.prototype.destroy = function() {
        this.srvSynchro.cancelListener(this.synchroListenerOnStart), this.srvSynchro.cancelListener(this.synchroListenerOnCancel), 
        this.srvSynchro.cancelListener(this.synchroListenerOnError), this.srvSynchro.cancelListener(this.synchroListenerOnSuccess), 
        this.srvRunning.cancelListener(this.runningListenerOnPause);
    }, Service.prototype.getObject = function(dbid) {
        return this.index.db[dbid];
    }, Service.prototype.getObjectCount = function(type) {
        return this.currentItems[type] ? this.currentItems[type].length : 0;
    }, Service.prototype.isObjectOwnedByUser = function(item) {
        if (a4p.isEmptyOrFalse(item)) return !1;
        if (a4p.isEmptyOrFalse(item.crmObjects)) {
            if (a4p.isTrueOrNonEmpty(item.owner_id) && item.owner_id.dbid != this.userId.dbid) return !1;
        } else for (var mergeIdx = item.crmObjects.length - 1; mergeIdx >= 0; mergeIdx--) if (a4p.isDefined(item.crmObjects[mergeIdx].owner_id)) {
            var crm = item.crmObjects[mergeIdx].crm;
            if (item.crmObjects[mergeIdx].owner_id != this.userId[crm + "_id"]) return !1;
        }
        return !0;
    }, Service.prototype.completeFields = function(object) {
        this.setDefaultFields(object), this.convertFields(object), this.setCalculatedFields(object);
    }, Service.prototype.createObject = function(type, object) {
        if (object.a4p_type = type, a4p.isDefined(object.feed) && delete object.feed, a4p.isUndefined(object.id) && (object.id = {}), 
        a4p.isUndefined(object.id.dbid)) object.id.dbid = type + "-" + a4p.nextUid(), this.srvLocalStorage.set("Data-Uid", a4p.getUid()); else if (a4p.isDefined(this.index.db[object.id.dbid])) throw new Error("Object of type " + type + " and id " + object.id.dbid + " already exists");
        object.c4p_synchro = {
            creating: c4p.Synchro.NONE,
            sharing: c4p.Synchro.NONE,
            writing: c4p.Synchro.NONE,
            reading: c4p.Synchro.NONE,
            deleting: c4p.Synchro.NONE
        }, this.completeFields(object);
        for (var now = new Date(), objDesc = c4p.Model.a4p_types[object.a4p_type], owner = this.index.db[this.userId.dbid], fieldIdx = 0, fieldNb = objDesc.fields.length; fieldNb > fieldIdx; fieldIdx++) {
            var fieldName = objDesc.fields[fieldIdx];
            if ("owner_id" == fieldName) {
                a4p.isDefined(owner) && (a4p.isUndefined(object.owner_id) || a4p.isUndefined(object.owner_id.dbid)) && (owner ? object.owner_id = angular.copy(owner.id) : a4p.ErrorLog.log("srvData", "object " + object.id.dbid + " has NO owner."));
                break;
            }
        }
        return (a4p.isUndefined(object.created_by_id) || a4p.isUndefined(object.created_by_id.dbid)) && (owner ? object.created_by_id = angular.copy(owner.id) : a4p.ErrorLog.log("srvData", "object " + object.id.dbid + " has NO owner.")), 
        (a4p.isUndefined(object.created_date) || "" == object.created_date) && (object.created_date = a4pDateFormat(now)), 
        (a4p.isUndefined(object.last_modified_by_id) || a4p.isUndefined(object.last_modified_by_id.dbid)) && (owner ? object.last_modified_by_id = angular.copy(owner.id) : a4p.ErrorLog.log("srvData", "object " + object.id.dbid + " has NO owner.")), 
        (a4p.isUndefined(object.last_modified_date) || "" == object.last_modified_date) && (object.last_modified_date = a4pDateFormat(now)), 
        object;
    }, Service.prototype.addObject = function(object, isOriginal) {
        if (a4p.isUndefined(object.a4p_type)) throw new Error("Object must have a type");
        if (a4p.isDefined(object.feed) && delete object.feed, a4p.isUndefined(object.id) && (object.id = {}), 
        a4p.isUndefined(object.id.dbid)) object.id.dbid = object.a4p_type + "-" + a4p.nextUid(), 
        this.srvLocalStorage.set("Data-Uid", a4p.getUid()); else if (a4p.isDefined(this.index.db[object.id.dbid])) throw new Error("Object of type " + object.a4p_type + " and id " + object.id.dbid + " already exists");
        return object.c4p_synchro = {
            creating: c4p.Synchro.NONE,
            sharing: c4p.Synchro.NONE,
            writing: c4p.Synchro.NONE,
            reading: c4p.Synchro.NONE,
            deleting: c4p.Synchro.NONE
        }, this.completeFields(object), this.index.db[object.id.dbid] = object, a4p.isDefined(object.id.sf_id) && (this.index.sf[object.id.sf_id] = object, 
        a4p.isDefined(this.userId.sf_id) && this.userId.sf_id == object.id.sf_id && (this.userId.dbid = object.id.dbid, 
        this.srvLocalStorage.set("Data-userId", this.userId), a4p.InternalLog.log("srvData", "addObject : userId=" + a4pDumpData(this.userId, 2)))), 
        a4p.isDefined(object.id.c4p_id) && (this.index.c4p[object.id.c4p_id] = object, a4p.isDefined(this.userId.c4p_id) && this.userId.c4p_id == object.id.c4p_id && (this.userId.dbid = object.id.dbid, 
        this.srvLocalStorage.set("Data-userId", this.userId), a4p.InternalLog.log("srvData", "addObject : userId=" + a4pDumpData(this.userId, 2)))), 
        a4p.isDefined(object.id.ios_id) && (this.index.ios[object.id.ios_id] = object, a4p.isDefined(this.userId.ios_id) && this.userId.ios_id == object.id.ios_id && (this.userId.dbid = object.id.dbid, 
        this.srvLocalStorage.set("Data-userId", this.userId), a4p.InternalLog.log("srvData", "addObject : userId=" + a4pDumpData(this.userId, 2)))), 
        isOriginal || (object.c4p_synchro.creating = c4p.Synchro.NEW), this.currentItems[object.a4p_type].push(object), 
        this.nbObjects++, this.srvLocalStorage.set("Data-" + object.a4p_type, this.currentItems[object.a4p_type]), 
        a4p.isDefined(isOriginal) && isOriginal && addOriginalObject(this, object, !this.isDemo), 
        triggerUpdate(this, "add", object.a4p_type, object.id.dbid), object;
    }, Service.prototype.setObject = function(object, isOriginal) {
        if (!object.a4p_type) return a4p.ErrorLog.log("srvData", "reject updating object without type"), 
        !1;
        if (a4p.isUndefinedOrNull(object.id) || a4p.isUndefinedOrNull(object.id.dbid)) return a4p.ErrorLog.log("srvData", "reject updating object without id"), 
        !1;
        var oldObject = this.index.db[object.id.dbid];
        if (!oldObject) return a4p.ErrorLog.log("srvData", "reject updating object which is not indexed"), 
        !1;
        if (object.a4p_type != oldObject.a4p_type) return a4p.ErrorLog.log("srvData", "reject updating object with different type"), 
        !1;
        a4p.isUndefinedOrNull(object.c4p_synchro) && (object.c4p_synchro = {
            creating: c4p.Synchro.NONE,
            sharing: c4p.Synchro.NONE,
            writing: c4p.Synchro.NONE,
            reading: c4p.Synchro.NONE,
            deleting: c4p.Synchro.NONE
        }), this.completeFields(object);
        for (var type = object.a4p_type, oldObject = !1, objectIdx = this.currentItems[type].length - 1; objectIdx >= 0; objectIdx--) if (this.currentItems[type][objectIdx].id.dbid == object.id.dbid) {
            oldObject = this.currentItems[type][objectIdx];
            break;
        }
        return a4p.isTrueOrNonEmpty(oldObject) ? isOriginal || this.isObjectOwnedByUser(oldObject) ? (object.c4p_synchro.sharing = oldObject.c4p_synchro.sharing, 
        object.c4p_synchro.creating = oldObject.c4p_synchro.creating, object.c4p_synchro.writing = oldObject.c4p_synchro.writing, 
        object.c4p_synchro.reading = oldObject.c4p_synchro.reading, object.c4p_synchro.deleting = oldObject.c4p_synchro.deleting, 
        a4p.isDefined(object.feed) && object.feed && object.c4p_synchro.sharing == c4p.Synchro.NONE && (object.c4p_synchro.sharing = c4p.Synchro.NEW), 
        a4p.isDefined(isOriginal) && isOriginal ? (object.c4p_synchro.creating = c4p.Synchro.NONE, 
        object.c4p_synchro.writing = c4p.Synchro.NONE, object.c4p_synchro.reading = c4p.Synchro.NONE, 
        object.c4p_synchro.deleting = c4p.Synchro.NONE) : object.c4p_synchro.creating == c4p.Synchro.NONE && object.c4p_synchro.writing == c4p.Synchro.NONE && (object.c4p_synchro.writing = c4p.Synchro.NEW), 
        this.completeFields(object), this.index.db[object.id.dbid] = object, a4p.isDefined(object.id.sf_id) && (this.index.sf[object.id.sf_id] = object), 
        a4p.isDefined(object.id.c4p_id) && (this.index.c4p[object.id.c4p_id] = object), 
        a4p.isDefined(object.id.ios_id) && (this.index.ios[object.id.ios_id] = object), 
        this.currentItems[type][objectIdx] = object, this.srvLocalStorage.set("Data-" + type, this.currentItems[type]), 
        a4p.isDefined(isOriginal) && isOriginal && setOriginalObject(this, object, !this.isDemo), 
        triggerUpdate(this, "set", type, object.id.dbid), object) : !1 : !1;
    }, Service.prototype.removeObject = function(dbid, isOriginal) {
        var object = this.getObject(dbid);
        if (a4p.isDefined(object)) {
            if (!isOriginal && !this.isObjectOwnedByUser(object)) return !1;
            if (a4p.isDefined(isOriginal) && isOriginal) {
                object.c4p_synchro.creating = c4p.Synchro.NONE, object.c4p_synchro.writing = c4p.Synchro.NONE, 
                object.c4p_synchro.reading = c4p.Synchro.NONE, object.c4p_synchro.deleting = c4p.Synchro.NONE;
                var deleted = [];
                deleted.push(a4p.isDefined(object.id.c4p_id) ? {
                    crm: "c4p",
                    id: object.id.c4p_id
                } : a4p.isDefined(object.id.sf_id) ? {
                    crm: "sf",
                    id: object.id.sf_id
                } : {
                    crm: "ios",
                    id: object.id.ios_id
                }), deletedObject(this, object.id.dbid, deleted, deleted, !0);
            } else if (object.c4p_synchro.deleting == c4p.Synchro.NONE && (object.c4p_synchro.deleting = c4p.Synchro.NEW, 
            object.c4p_synchro.writing == c4p.Synchro.NEW && (object.c4p_synchro.writing = c4p.Synchro.NONE), 
            object.c4p_synchro.creating == c4p.Synchro.NEW || object.c4p_synchro.creating == c4p.Synchro.QUEUE)) {
                var deleted = [];
                deleted.push(a4p.isDefined(object.id.c4p_id) ? {
                    crm: "c4p",
                    id: object.id.c4p_id
                } : {
                    crm: "sf",
                    id: object.id.sf_id
                }), deletedObject(this, object.id.dbid, deleted, deleted, !1);
            }
            return object;
        }
        return !1;
    }, Service.prototype.linkToObjects = function(fromLink, fromObject, toType, toObjects) {
        for (var done = !1, fromFieldIdx = 0; fromFieldIdx < c4p.Model.a4p_types[fromObject.a4p_type].linkFields.length; fromFieldIdx++) {
            var linkModel = c4p.Model.a4p_types[fromObject.a4p_type].linkFields[fromFieldIdx], fromField = linkModel.key;
            if (linkModel.one == fromLink) {
                for (var toTypeIdx = 0; toTypeIdx < linkModel.types.length; toTypeIdx++) if (linkModel.types[toTypeIdx] == toType) {
                    this.linkItemToAllObjects(fromObject, fromField, toObjects), done = !0;
                    break;
                }
                if (done) break;
            }
        }
        done = !1;
        for (var fromFieldIdx = 0; fromFieldIdx < c4p.Model.a4p_types[toType].linkFields.length; fromFieldIdx++) {
            var linkModel = c4p.Model.a4p_types[toType].linkFields[fromFieldIdx], fromField = linkModel.key;
            if (linkModel.many == fromLink) {
                for (var toTypeIdx = 0; toTypeIdx < linkModel.types.length; toTypeIdx++) if (linkModel.types[toTypeIdx] == fromObject.a4p_type) {
                    this.linkAllObjectsToItem(toObjects, fromField, fromObject), done = !0;
                    break;
                }
                if (done) break;
            }
        }
    }, Service.prototype.linkToItem = function(fromType, fromLink, fromObjects, toObject) {
        for (var done = !1, fromFieldIdx = 0; fromFieldIdx < c4p.Model.a4p_types[fromType].linkFields.length; fromFieldIdx++) {
            var linkModel = c4p.Model.a4p_types[fromType].linkFields[fromFieldIdx], fromField = linkModel.key;
            if (linkModel.one == fromLink) {
                for (var toTypeIdx = 0; toTypeIdx < linkModel.types.length; toTypeIdx++) if (linkModel.types[toTypeIdx] == toObject.a4p_type) {
                    this.linkAllObjectsToItem(fromObjects, fromField, toObject), done = !0;
                    break;
                }
                if (done) break;
            }
        }
        done = !1;
        for (var fromFieldIdx = 0; fromFieldIdx < c4p.Model.a4p_types[toObject.a4p_type].linkFields.length; fromFieldIdx++) {
            var linkModel = c4p.Model.a4p_types[toObject.a4p_type].linkFields[fromFieldIdx], fromField = linkModel.key;
            if (linkModel.many == fromLink) {
                for (var toTypeIdx = 0; toTypeIdx < linkModel.types.length; toTypeIdx++) if (linkModel.types[toTypeIdx] == fromType) {
                    this.linkItemToAllObjects(toObject, fromField, fromObjects), done = !0;
                    break;
                }
                if (done) break;
            }
        }
    }, Service.prototype.unlinkFromItem = function(fromType, fromLink, fromObjects, toObject) {
        for (var done = !1, fromFieldIdx = 0; fromFieldIdx < c4p.Model.a4p_types[fromType].linkFields.length; fromFieldIdx++) {
            var linkModel = c4p.Model.a4p_types[fromType].linkFields[fromFieldIdx], fromField = linkModel.key;
            if (linkModel.one == fromLink) {
                for (var toTypeIdx = 0; toTypeIdx < linkModel.types.length; toTypeIdx++) if (linkModel.types[toTypeIdx] == toObject.a4p_type) {
                    this.unlinkAllObjectsFromItem(fromObjects, fromField, toObject), done = !0;
                    break;
                }
                if (done) break;
            }
        }
        done = !1;
        for (var fromFieldIdx = 0; fromFieldIdx < c4p.Model.a4p_types[toObject.a4p_type].linkFields.length; fromFieldIdx++) {
            var linkModel = c4p.Model.a4p_types[toObject.a4p_type].linkFields[fromFieldIdx], fromField = linkModel.key;
            if (linkModel.many == fromLink) {
                for (var toTypeIdx = 0; toTypeIdx < linkModel.types.length; toTypeIdx++) if (linkModel.types[toTypeIdx] == fromType) {
                    this.unlinkItemFromAllObjects(toObject, fromField, fromObjects), done = !0;
                    break;
                }
                if (done) break;
            }
        }
    }, Service.prototype.hasDirectNamedLinkTo = function(fromType, fromLink, fromObject, toObject) {
        if (fromObject.a4p_type != fromType) return !1;
        for (var fromFieldIdx = 0; fromFieldIdx < c4p.Model.a4p_types[fromType].linkFields.length; fromFieldIdx++) {
            var linkModel = c4p.Model.a4p_types[fromType].linkFields[fromFieldIdx], fromField = linkModel.key;
            if (linkModel.one == fromLink) for (var toTypeIdx = 0; toTypeIdx < linkModel.types.length; toTypeIdx++) if (linkModel.types[toTypeIdx] == toObject.a4p_type) return this.isItemLinkedToObject(fromObject, fromField, toObject);
        }
        for (var fromFieldIdx = 0; fromFieldIdx < c4p.Model.a4p_types[toObject.a4p_type].linkFields.length; fromFieldIdx++) {
            var linkModel = c4p.Model.a4p_types[toObject.a4p_type].linkFields[fromFieldIdx], fromField = linkModel.key;
            if (linkModel.many == fromLink) for (var toTypeIdx = 0; toTypeIdx < linkModel.types.length; toTypeIdx++) if (linkModel.types[toTypeIdx] == fromType) return this.isItemLinkedToObject(toObject, fromField, fromObject);
        }
        return !1;
    }, Service.prototype.linkAllObjectsToItem = function(fromObjects, fromLinkName, toItem) {
        for (var fromObjectIdx = 0, fromObjectNb = fromObjects.length; fromObjectNb > fromObjectIdx; fromObjectIdx++) {
            var object = fromObjects[fromObjectIdx], isArrayField = a4p.isDefined(c4p.Model.objectArrays[object.a4p_type][fromLinkName]);
            isArrayField ? addLinkToList(object[fromLinkName], angular.copy(toItem.id)) && this.setAndSaveObject(object) : (object[fromLinkName] = angular.copy(toItem.id), 
            this.setAndSaveObject(object));
        }
    }, Service.prototype.unlinkAllObjectsFromItem = function(fromObjects, fromLinkName, toItem) {
        for (var fromObjectIdx = 0, fromObjectNb = fromObjects.length; fromObjectNb > fromObjectIdx; fromObjectIdx++) {
            var object = fromObjects[fromObjectIdx], isArrayField = a4p.isDefined(c4p.Model.objectArrays[object.a4p_type][fromLinkName]);
            if (isArrayField) {
                if (removeLinkFromList(object[fromLinkName], toItem.id.dbid) !== !1) {
                    var fromDesc = c4p.Model.a4p_types[object.a4p_type], fromLinkDesc = fromDesc.linkDescs[fromLinkName];
                    object[fromLinkName].length <= 0 && "many" == fromLinkDesc.cascadeDelete ? this.removeAndSaveObject(object) : this.setAndSaveObject(object);
                }
            } else if (object[fromLinkName].dbid == toItem.id.dbid) {
                object[fromLinkName] = {};
                var fromDesc = c4p.Model.a4p_types[object.a4p_type], fromLinkDesc = fromDesc.linkDescs[fromLinkName];
                "many" == fromLinkDesc.cascadeDelete ? this.removeAndSaveObject(object) : this.setAndSaveObject(object);
            }
        }
    }, Service.prototype.linkItemToOneOfObjects = function(fromItem, fromLinkName, toObjects) {
        var isArrayField = a4p.isDefined(c4p.Model.objectArrays[fromItem.a4p_type][fromLinkName]);
        isArrayField ? this.linkItemToAllObjects(fromItem, fromLinkName, toObjects) : toObjects.length > 0 && getObjectFromList(toObjects, fromItem[fromLinkName].dbid) === !1 && (fromItem[fromLinkName] = angular.copy(toObjects[0].id), 
        this.setAndSaveObject(fromItem));
    }, Service.prototype.unlinkItemFromOneOfObjects = function(fromItem, fromLinkName, toObjects) {
        var isArrayField = a4p.isDefined(c4p.Model.objectArrays[fromItem.a4p_type][fromLinkName]);
        if (isArrayField) this.unlinkItemFromAllObjects(fromItem, fromLinkName, toObjects); else if (getObjectFromList(toObjects, fromItem[fromLinkName].dbid) !== !1) {
            fromItem[fromLinkName] = {};
            var fromDesc = c4p.Model.a4p_types[fromItem.a4p_type], fromLinkDesc = fromDesc.linkDescs[fromLinkName];
            "many" == fromLinkDesc.cascadeDelete ? this.removeAndSaveObject(fromItem) : this.setAndSaveObject(fromItem);
        }
    }, Service.prototype.isItemLinkedToObject = function(fromItem, fromLinkName, toObject) {
        var isArrayField = a4p.isDefined(c4p.Model.objectArrays[fromItem.a4p_type][fromLinkName]);
        return isArrayField ? getLinkFromList(fromItem[fromLinkName], toObject.id.dbid) !== !1 : fromItem[fromLinkName].dbid == toObject.id.dbid;
    }, Service.prototype.linkItemToAllObjects = function(fromItem, fromLinkName, toObjects) {
        var isArrayField = a4p.isDefined(c4p.Model.objectArrays[fromItem.a4p_type][fromLinkName]);
        if (isArrayField) {
            for (var itemUpdated = !1, toObjectIdx = 0, toObjectNb = toObjects.length; toObjectNb > toObjectIdx; toObjectIdx++) {
                var toObject = toObjects[toObjectIdx];
                addLinkToList(fromItem[fromLinkName], angular.copy(toObject.id)) && (itemUpdated = !0);
            }
            itemUpdated && this.setAndSaveObject(fromItem);
        } else this.linkItemToOneOfObjects(fromItem, fromLinkName, toObjects);
    }, Service.prototype.unlinkItemFromAllObjects = function(fromItem, fromLinkName, toObjects) {
        var isArrayField = a4p.isDefined(c4p.Model.objectArrays[fromItem.a4p_type][fromLinkName]);
        if (isArrayField) {
            for (var itemUpdated = !1, toObjectIdx = 0, toObjectNb = toObjects.length; toObjectNb > toObjectIdx; toObjectIdx++) {
                var toObject = toObjects[toObjectIdx];
                removeLinkFromList(fromItem[fromLinkName], toObject.id.dbid) !== !1 && (itemUpdated = !0);
            }
            if (itemUpdated) {
                var fromDesc = c4p.Model.a4p_types[fromItem.a4p_type], fromLinkDesc = fromDesc.linkDescs[fromLinkName];
                fromItem[fromLinkName].length <= 0 && "many" == fromLinkDesc.cascadeDelete ? this.removeAndSaveObject(fromItem) : this.setAndSaveObject(fromItem);
            }
        } else this.unlinkItemFromOneOfObjects(fromItem, fromLinkName, toObjects);
    }, Service.prototype.linkDocumentToAllObjects = function(fromItem, toObjects) {
        for (var toIdx = 0, toNb = toObjects.length; toNb > toIdx; toIdx++) {
            var document = angular.copy(fromItem);
            delete document.id, document.rootname = "copy_" + document.rootname, document.parent_id = angular.copy(toObjects[toIdx].id), 
            this.addAndSaveObject(document);
        }
    }, Service.prototype.linkAllDocumentsToItem = function(fromDocuments, toItem) {
        for (var documentIdx = 0, documentNb = fromDocuments.length; documentNb > documentIdx; documentIdx++) {
            var document = angular.copy(fromDocuments[documentIdx]);
            delete document.id, document.rootname = "copy_" + document.rootname, document.parent_id = angular.copy(toItem.id), 
            this.addAndSaveObject(document);
        }
    }, Service.prototype.newAttachment = function(a4p_type, attachee, attached) {
        var objDesc = c4p.Model.a4p_types[a4p_type], attachment = {
            a4p_type: a4p_type
        };
        return attachment[objDesc.attached] = angular.copy(attached.id), attachment[objDesc.attachee] = angular.copy(attachee.id), 
        this.addObject(attachment), attachment;
    }, Service.prototype.newAndSaveAttachment = function(a4p_type, attachee, attached) {
        var objDesc = c4p.Model.a4p_types[a4p_type], attachment = {
            a4p_type: a4p_type
        };
        return attachment[objDesc.attached] = angular.copy(attached.id), attachment[objDesc.attachee] = angular.copy(attachee.id), 
        this.addAndSaveObject(attachment), attachment;
    }, Service.prototype.delAndSaveAttachment = function(a4p_type, attachee, attached) {
        for (var objDesc = c4p.Model.a4p_types[a4p_type], i = 0, nb = this.currentItems[a4p_type].length; nb > i; i++) {
            var attachment = this.currentItems[a4p_type][i];
            attachment[objDesc.attached].dbid == attached.id.dbid && attachment[objDesc.attachee].dbid == attachee.id.dbid && this.removeAndSaveObject(attachment);
        }
    }, Service.prototype.getAttachment = function(a4p_type, attachee, attached) {
        for (var objDesc = c4p.Model.a4p_types[a4p_type], i = 0, nb = this.currentItems[a4p_type].length; nb > i; i++) {
            var attachment = this.currentItems[a4p_type][i];
            if (attachment[objDesc.attached].dbid == attached.id.dbid && attachment[objDesc.attachee].dbid == attachee.id.dbid) return attachment;
        }
        return null;
    }, Service.prototype.addAndSaveObject = function(object) {
        this.addObject(object), this.addObjectToSave(object.a4p_type, object.id.dbid);
    }, Service.prototype.setAndSaveObject = function(object) {
        this.setObject(object), this.addObjectToSave(object.a4p_type, object.id.dbid);
    }, Service.prototype.removeAndSaveObject = function(object) {
        this.removeObject(object.id.dbid), this.addObjectToSave(object.a4p_type, object.id.dbid);
    }, Service.prototype.addObjectToSave = function(type, dbid) {
        if (getLinkFromList(this.objectsToSave, dbid) !== !1) return !1;
        var delayedSave = a4p.isDefined(this.savingObject.dbid) || this.objectsToSave.length > 0 || this.objectsToDownload.length > 0, object = this.getObject(dbid);
        return a4p.isDefined(object) && (a4p.isTrueOrNonEmpty(object.feed) && object.c4p_synchro.sharing == c4p.Synchro.NEW && (object.c4p_synchro.sharing = c4p.Synchro.QUEUE), 
        object.c4p_synchro.creating == c4p.Synchro.NEW && (object.c4p_synchro.creating = c4p.Synchro.QUEUE), 
        object.c4p_synchro.writing == c4p.Synchro.NEW && (object.c4p_synchro.writing = c4p.Synchro.QUEUE), 
        object.c4p_synchro.deleting == c4p.Synchro.NEW && (object.c4p_synchro.deleting = c4p.Synchro.QUEUE), 
        this.srvLocalStorage.set("Data-" + object.a4p_type, this.currentItems[object.a4p_type])), 
        this.objectsToSave.push({
            type: type,
            dbid: dbid
        }), this.srvLocalStorage.set("Data-objectsToSave", this.objectsToSave), delayedSave || sendFirstObjectToSave(this), 
        !0;
    }, Service.prototype.isObjectToSave = function(dbid) {
        return this.savingObject.dbid == dbid ? !0 : getLinkFromList(this.objectsToSave, dbid) !== !1;
    }, Service.prototype.isObjectToDownload = function(dbid) {
        return getLinkFromList(this.objectsToDownload, dbid) !== !1;
    }, Service.prototype.getObjectOrderToDownload = function(dbid) {
        for (var i = 0, len = this.objectsToDownload.length; len > i; i++) if (this.objectsToDownload[i].dbid == dbid) return i + 1;
        return !1;
    }, Service.prototype.adjustDate = function(data, from, to) {
        for (var timestampDif = to.getTime() - from.getTime() - 1e3 * (60 * (60 * to.getHours() + to.getMinutes()) + to.getSeconds()), keysToAdjust = new Array("date_start", "date_end", "date_reminder"), typesToAdjust = new Array("Event", "Task"), i = 0; i < typesToAdjust.length; i++) {
            typesToAdjust[i];
        }
        if (a4p.isDefined(data.objects)) for (var j = 0; j < data.objects.length; j++) {
            var item = data.objects[j];
            if (isValueInList(typesToAdjust, item.a4p_type)) for (var mergeIdx = 0; mergeIdx < item.crmObjects.length; mergeIdx++) for (var object = item.crmObjects[mergeIdx].data, k = 0; k < keysToAdjust.length; k++) {
                var key = keysToAdjust[k];
                if (a4p.isDefined(object[key])) {
                    var date = a4pDateParse(object[key]), timestamp = date.getTime() + timestampDif;
                    object[key] = a4pDateFormat(new Date(timestamp));
                }
            }
        }
        return data;
    }, Service.prototype.loginUser = function(isDemo, userEmail, userPassword, c4pToken, keepCrmLogin, userFeedback, appVersion) {
        var deferred = this.q.defer();
        if (isDemo) this.isDemo = !0, this.srvLocalStorage.set("Data-isDemo", this.isDemo), 
        deferred.resolve(); else {
            var self = this, fctOnHttpSuccess = function(response) {
                var data = response.data;
                self.isDemo = !1, self.srvLocalStorage.set("Data-isDemo", self.isDemo), a4p.isTrueOrNonEmpty(data.infoMessage) && self.srvLog.userLogPersistentMessage(data.infoMessage);
                var c4pToken = data.c4pToken;
                a4p.isDefined(c4pToken) && "" != c4pToken && (self.srvSecurity.setA4pLogin(userEmail), 
                self.srvSecurity.setA4pPassword(userPassword), self.srvSecurity.setC4pServerToken(c4pToken));
                var urlBase = data.urlBase;
                if (a4p.isTrueOrNonEmpty(urlBase) && self.srvConfig.c4pUrlBase != urlBase) return self.srvConfig.setUrlBase(urlBase), 
                self.srvSynchro.setPingUrl(self.srvConfig.c4pUrlPing), void deferred.reject({
                    urlBase: urlBase
                });
                var diag = checkErrorData(data);
                if (diag) {
                    if (diag.maintenance) self.srvSynchro.serverHs(), self.srvLog.logWarning(self.srvConfig.c4pConfig.exposeDataSynchro, 'Login User failed (server in status "' + diag.maintenance + '") : cancelled', diag.log); else if (diag.redirect) self.srvLog.logWarning(self.srvConfig.c4pConfig.exposeDataSynchro, "Login User redirected : cancelled", diag.log); else {
                        var errorMsg = "";
                        errorMsg = a4p.isDefined(diag.error) && a4p.isDefined(self.srvLocale.translations[diag.error]) ? self.srvLocale.translations[diag.error] : diag.error, 
                        self.srvLog.logWarning(self.srvConfig.c4pConfig.exposeDataSynchro, "Login User failed (" + errorMsg + ") : cancelled", diag.log);
                    }
                    return void deferred.reject(diag);
                }
                "undefined" != typeof data.currencySymbol && null != data.currencySymbol && data.currencySymbol.length > 0 ? self.srvLocale.setCurrency(a4p.Utf8.encode(data.currencySymbol)) : "undefined" != typeof data.currencyIsoCode && null != data.currencyIsoCode && data.currencyIsoCode.length > 0 && self.srvLocale.setCurrency(a4p.Utf8.encode(data.currencyIsoCode)), 
                checkMetaData(self, data), deferred.resolve();
            }, fctOnHttpError = function(response) {
                self.srvSynchro.serverHs(), deferred.reject({
                    error: "htmlMsgSynchronizationClientPb",
                    log: response.data
                });
            }, feedbackValue = {
                company_name: userFeedback.company_name || "",
                phone: userFeedback.phone || "",
                feedback: userFeedback.feedback || "",
                star: userFeedback.star || ""
            }, deviceName = "", deviceCordova = "", devicePlatform = "", deviceUuid = "", deviceVersion = "";
            window.device ? (deviceName = window.device.name, deviceCordova = window.device.cordova, 
            devicePlatform = window.device.platform, deviceUuid = window.device.uuid, deviceVersion = window.device.version) : deviceUuid = window.location.hostname;
            var deviceValue = {
                uuid: deviceUuid,
                name: deviceName,
                cordova: deviceCordova,
                platform: devicePlatform,
                version: deviceVersion
            }, params = {
                login: userEmail,
                password: userPassword,
                rememberPassword: keepCrmLogin,
                serverUpdates: {
                    fifo: "",
                    feedback: feedbackValue,
                    device: deviceValue,
                    appVersion: appVersion,
                    c4pBuildDate: this.srvConfig.c4pBuildDate,
                    language: this.srvLocale.getLanguage()
                }
            };
            this.dataTransfer.sendData(this.srvConfig.c4pUrlData, params, null, 3e4).then(fctOnHttpSuccess, fctOnHttpError);
        }
        return deferred.promise;
    }, Service.prototype.importFile = function(url, targetDirPath) {
        var deferred = this.q.defer();
        a4p.InternalLog.log("srvData", "Try to import file " + url + " targetDirPath=" + targetDirPath);
        var self = this, getDirSuccess = function() {
            console.log("importFile getDirSuccess " + targetDirPath + " success");
            var onGetUrlFailure = function(message) {
                var msg = "Getting file entry from " + url + " failure : " + message;
                console.log(msg), a4p.safeApply(self.rootScope, function() {
                    deferred.reject({
                        error: "htmlMsgFileImportPb",
                        log: msg
                    });
                });
            }, onGetUrlSuccess = function(fileEntry) {
                console.log("importFile getFileFromUrl " + url + " success : " + fileEntry.name);
                var targetFileName = fileEntry.name, targetFileUid = "file_" + new Date().getTime(), targetFileExtension = c4p.Model.fileExtension(targetFileName), onWriteFailure = function(message) {
                    var msg = "Copying newly imported file from " + url + " to " + targetFileUid + "." + targetFileExtension + " failure : " + message;
                    console.log(msg), a4p.safeApply(self.rootScope, function() {
                        deferred.reject({
                            error: "htmlMsgFileImportPb",
                            log: msg
                        });
                    });
                }, onWriteSuccess = function(newFileEntry) {
                    console.log("importFile copyFileFromUrl " + targetFileUid + "." + targetFileExtension + " success"), 
                    console.log("importFile copyFileFromUrl success : " + newFileEntry.fullPath), console.log("importFile copyFileFromUrl success : " + newFileEntry.toNativeURL()), 
                    console.log("importFile copyFileFromUrl success : " + newFileEntry.toURL());
                    var filePath = targetDirPath + "/" + targetFileUid + "." + targetFileExtension, newUrl = newFileEntry.toNativeURL();
                    a4p.safeApply(self.rootScope, function() {
                        a4p.InternalLog.log("srvData", "File importation from " + url + " ok : fileName = " + targetFileName + ", filePath = " + filePath + ", url = " + newUrl);
                        var document = self.createObject("Document", {
                            name: targetFileName,
                            body: "",
                            length: "0",
                            path: targetDirPath,
                            description: "Imported file",
                            uid: targetFileUid,
                            url: newUrl,
                            fileUrl: newUrl,
                            src: newUrl,
                            filePath: filePath
                        });
                        deferred.resolve(document);
                    });
                };
                console.log("importFile copyFileFromUrl url:" + url + " to:" + targetDirPath + "/" + targetFileUid + "." + targetFileExtension), 
                self.srvFileStorage.copyFileFromUrl(url, targetDirPath + "/" + targetFileUid + "." + targetFileExtension, onWriteSuccess, onWriteFailure);
            };
            console.log("importFile getFileFromUrl " + url), self.srvFileStorage.getFileFromUrl(url, onGetUrlSuccess, onGetUrlFailure);
        }, getDirFailure = function(message) {
            console.log("importFile getDirFailure " + targetDirPath + " failure " + message), 
            console.log("importFile createDir " + targetDirPath), self.srvFileStorage.createDir(targetDirPath, getDirSuccess, createDirFailure);
        }, createDirFailure = function(message) {
            var msg = "Getting/Creating directory entry for " + targetDirPath + " failure : " + message;
            console.log(msg), a4p.safeApply(self.rootScope, function() {
                deferred.reject({
                    error: "htmlMsgFileImportPb",
                    log: msg
                });
            });
        };
        return console.log("importFile getDir " + targetDirPath), this.srvFileStorage.getDir(targetDirPath, getDirSuccess, getDirFailure), 
        deferred.promise;
    }, Service.prototype.downloadFullMap = function(c4pToken) {
        var deferred = this.q.defer(), self = this, requestTimestamp = new Date().getTime(), askedCrms = this.srvConfig.getActiveCrms(), fctOnHttpSuccess = function(response) {
            var data = response.data, today_app4pro = a4pDateParse("2013-04-25 00:00:00"), today = new Date();
            if (self.isDemo) data = self.adjustDate(data, today_app4pro, today), addFullMap(self, {
                sf_id: "005i0000000I8c5AAC",
                c4p_id: "demo@apps4pro.com"
            }, data, requestTimestamp), deferred.resolve(data); else {
                var diag = checkErrorData(data);
                if (diag) {
                    if (diag.maintenance) self.srvSynchro.serverHs(), self.srvLog.logWarning(self.srvConfig.c4pConfig.exposeDataSynchro, 'Full Mind Map failed (server in status "' + diag.maintenance + '") : cancelled', diag.log); else if (diag.redirect) self.srvLog.logWarning(self.srvConfig.c4pConfig.exposeDataSynchro, "Full Mind Map redirected : cancelled", diag.log); else {
                        var errorMsg = "";
                        errorMsg = a4p.isDefined(diag.error) && a4p.isDefined(self.srvLocale.translations[diag.error]) ? self.srvLocale.translations[diag.error] : diag.error, 
                        self.srvLog.logWarning(self.srvConfig.c4pConfig.exposeDataSynchro, "Full Mind Map failed (" + errorMsg + ") : cancelled", diag.log);
                    }
                    return void deferred.reject(diag);
                }
                "undefined" != typeof data.currencySymbol && null != data.currencySymbol && data.currencySymbol.length > 0 ? self.srvLocale.setCurrency(a4p.Utf8.encode(data.currencySymbol)) : "undefined" != typeof data.currencyIsoCode && null != data.currencyIsoCode && data.currencyIsoCode.length > 0 && self.srvLocale.setCurrency(a4p.Utf8.encode(data.currencyIsoCode));
                var dataInsert = data.map;
                a4p.isDefinedAndNotNull(dataInsert) ? (addFullMap(self, data.userId, dataInsert, requestTimestamp), 
                deferred.resolve(dataInsert)) : deferred.reject({
                    nop: !0
                });
            }
        }, fctOnHttpError = function(response) {
            self.srvSynchro.serverHs(), deferred.reject({
                error: "htmlMsgSynchronizationClientPb",
                log: response.data
            });
        };
        if (this.isDemo) this.dataTransfer.recvData("models/data.json").then(fctOnHttpSuccess, fctOnHttpError); else {
            var params = {
                c4pToken: c4pToken,
                askedCrms: askedCrms
            };
            this.dataTransfer.sendData(this.srvConfig.c4pUrlFullMap, params, null, 12e4).then(fctOnHttpSuccess, fctOnHttpError);
        }
        return deferred.promise;
    }, Service.prototype.refreshFullMap = function(c4pToken) {
        var deferred = this.q.defer();
        if (this.isDemo) return deferred.resolve({}), deferred.promise;
        var self = this, askedCrms = this.srvConfig.getActiveCrms(), time = new Date().getTime();
        this.lastRefreshMindMap < Math.floor(time / 1e3 - 2419200) ? this.lastRefreshMindMap = Math.floor(time / 1e3 - 2419200) : this.lastRefreshMindMap > Math.floor(time / 1e3 - 60) && (this.lastRefreshMindMap = Math.floor(time / 1e3 - 60));
        var params = {
            since: this.lastRefreshMindMap,
            c4pToken: c4pToken,
            askedCrms: askedCrms
        }, requestTimestamp = new Date().getTime(), fctOnHttpSuccess = function(response) {
            var data = response.data;
            a4p.isTrueOrNonEmpty(data.infoMessage) && self.srvLog.userLogPersistentMessage(data.infoMessage);
            var diag = checkErrorData(data);
            if (diag) {
                if (diag.maintenance) self.srvSynchro.serverHs(), self.srvLog.logWarning(self.srvConfig.c4pConfig.exposeDataSynchro, 'Refresh Mind Map failed (server in status "' + diag.maintenance + '") : cancelled', diag.log); else if (diag.redirect) self.srvLog.logWarning(self.srvConfig.c4pConfig.exposeDataSynchro, "Refresh Mind Map redirected : cancelled", diag.log); else {
                    var errorMsg = "";
                    errorMsg = a4p.isDefined(diag.error) && a4p.isDefined(self.srvLocale.translations[diag.error]) ? self.srvLocale.translations[diag.error] : diag.error, 
                    self.srvLog.logWarning(self.srvConfig.c4pConfig.exposeDataSynchro, "Refresh Mind Map failed (" + errorMsg + ") : cancelled", diag.log);
                }
                return void deferred.reject(diag);
            }
            var dataUpdate = data.responseUpdate;
            a4p.isDefinedAndNotNull(dataUpdate) ? (updFullMap(self, dataUpdate, requestTimestamp), 
            deferred.resolve(dataUpdate)) : deferred.reject({
                nop: !0
            });
        }, fctOnHttpError = function(response) {
            self.srvSynchro.serverHs(), deferred.reject({
                error: "htmlMsgSynchronizationClientPb",
                log: response.data
            });
        };
        return this.dataTransfer.sendData(this.srvConfig.c4pUrlRefreshMap, params, null, 6e4).then(fctOnHttpSuccess, fctOnHttpError), 
        deferred.promise;
    }, Service.prototype.createDemoData = function(nb) {
        var deferred = this.q.defer(), howMany = nb || 50, self = this;
        return this.demoDataCreation = {
            deferred: deferred,
            nbFacet: {
                ask: howMany,
                done: 0
            },
            nbContact: {
                ask: howMany,
                done: 0
            },
            nbAccount: {
                ask: howMany,
                done: 0
            },
            nbEvent: {
                ask: howMany,
                done: 0
            },
            nbTask: {
                ask: howMany,
                done: 0
            },
            nbOpportunity: {
                ask: howMany,
                done: 0
            },
            nbLead: {
                ask: howMany,
                done: 0
            },
            nbDocument: {
                ask: howMany,
                done: 0
            },
            nbNote: {
                ask: howMany,
                done: 0
            },
            nbReport: {
                ask: howMany,
                done: 0
            },
            nbPlan: {
                ask: howMany,
                done: 0
            },
            nbAttachee: {
                ask: howMany,
                done: 0
            },
            nbAttendee: {
                ask: howMany,
                done: 0
            },
            nbPlannee: {
                ask: howMany,
                done: 0
            }
        }, window.setTimeout(function() {
            self.createMoreDemoData();
        }, 10), deferred.promise;
    }, Service.prototype.createMoreDemoData = function() {
        var self = this;
        if (this.demoDataCreation.nbFacet.done < this.demoDataCreation.nbFacet.ask) {
            var num = 1 + this.demoDataCreation.nbFacet.done, obj = this.createObject("Facet", {
                prefix: "",
                name: "Demo-" + num,
                description: "Description of Demo-" + num
            });
            return this.addObject(obj), 0 == this.demoDataCreation.nbFacet.done ? this.demoDataCreation.firstFacet = obj : this.linkToItem(obj.a4p_type, "parent", [ obj ], this.demoDataCreation.firstFacet), 
            this.addObjectToSave(obj.a4p_type, obj.id.dbid), this.demoDataCreation.nbFacet.done = num, 
            void window.setTimeout(function() {
                self.createMoreDemoData();
            }, 10);
        }
        if (this.demoDataCreation.nbAccount.done < this.demoDataCreation.nbAccount.ask) {
            var num = 1 + this.demoDataCreation.nbAccount.done, obj = this.createObject("Account", {
                company_name: "Demo-Company-" + num,
                phone: "01 23 45 67 " + num,
                web_url: "www.Demo-Company-" + num + ".com",
                bil_addr_street: "Bill Avenue-" + num,
                bil_addr_city: "Bill City-" + num,
                bil_addr_postal_code: "Bill Zip-" + num,
                bil_addr_state: "Indre et Loire",
                bil_addr_country: "France",
                description: "Description of Demo-" + num,
                annual_revenue: 1e6,
                nb_employees: 10
            });
            return this.addObject(obj), 0 == this.demoDataCreation.nbAccount.done ? this.demoDataCreation.firstAccount = obj : this.linkToItem(obj.a4p_type, "parent", [ obj ], this.demoDataCreation.firstAccount), 
            this.addObjectToSave(obj.a4p_type, obj.id.dbid), this.demoDataCreation.nbAccount.done = num, 
            void window.setTimeout(function() {
                self.createMoreDemoData();
            }, 10);
        }
        if (this.demoDataCreation.nbContact.done < this.demoDataCreation.nbContact.ask) {
            var num = 1 + this.demoDataCreation.nbContact.done, obj = this.createObject("Contact", {
                salutation: "Mr.",
                first_name: "Demo-FirstName-" + num,
                last_name: "Demo-LastName-" + num,
                title: "Demo-Title-" + num,
                phone_work: "01 23 45 67 " + num,
                phone_mobile: "06 78 90 12 " + num,
                email: "Demo-FirstName-" + num + ".Demo-LastName-" + num + "@apps4pro.com",
                primary_address_street: "Primary Avenue-" + num,
                primary_address_city: "Primary City-" + num,
                primary_address_zipcode: "Primary Zip-" + num,
                primary_address_state: "Indre et Loire",
                primary_address_country: "France",
                description: "Description of Demo-" + num,
                birthday: "1990-01-31",
                department: "Informatique",
                assistant_name: "Assistant-" + num,
                assistant_phone: "01 23 45 68 " + num
            });
            return this.addObject(obj), 0 == this.demoDataCreation.nbContact.done ? this.demoDataCreation.firstContact = obj : this.linkToItem(obj.a4p_type, "manager", [ obj ], this.demoDataCreation.firstContact), 
            a4p.isTrueOrNonEmpty(this.demoDataCreation.firstAccount) && this.linkToItem(obj.a4p_type, "accounter", [ obj ], this.demoDataCreation.firstAccount), 
            this.addObjectToSave(obj.a4p_type, obj.id.dbid), this.demoDataCreation.nbContact.done = num, 
            void window.setTimeout(function() {
                self.createMoreDemoData();
            }, 10);
        }
        if (this.demoDataCreation.nbEvent.done < this.demoDataCreation.nbEvent.ask) {
            var num = 1 + this.demoDataCreation.nbEvent.done, obj = this.createObject("Event", {
                name: "Demo-Name-" + num,
                location: "City-" + num,
                date_start: c4p.Model.nextHour(),
                date_end: c4p.Model.nextNextHour(),
                description: "Description of Demo-" + num
            });
            return this.addObject(obj), 0 == this.demoDataCreation.nbEvent.done && (this.demoDataCreation.firstEvent = obj), 
            a4p.isTrueOrNonEmpty(this.demoDataCreation.firstContact) && (this.linkToItem(obj.a4p_type, "leader", [ obj ], this.demoDataCreation.firstContact), 
            this.demoDataCreation.nbAttendee.done < this.demoDataCreation.nbAttendee.ask && this.newAndSaveAttachment("Attendee", this.demoDataCreation.firstContact, obj)), 
            this.addObjectToSave(obj.a4p_type, obj.id.dbid), this.demoDataCreation.nbEvent.done = num, 
            void window.setTimeout(function() {
                self.createMoreDemoData();
            }, 10);
        }
        if (this.demoDataCreation.nbTask.done < this.demoDataCreation.nbTask.ask) {
            var num = 1 + this.demoDataCreation.nbTask.done, obj = this.createObject("Task", {
                name: "Demo-Name-" + num,
                date_start: c4p.Model.nextHour(),
                description: "Description of Demo-" + num
            });
            return this.addObject(obj), 0 == this.demoDataCreation.nbTask.done && (this.demoDataCreation.firstTask = obj), 
            a4p.isTrueOrNonEmpty(this.demoDataCreation.firstContact) && this.linkToItem(obj.a4p_type, "leader", [ obj ], this.demoDataCreation.firstContact), 
            this.addObjectToSave(obj.a4p_type, obj.id.dbid), this.demoDataCreation.nbTask.done = num, 
            void window.setTimeout(function() {
                self.createMoreDemoData();
            }, 10);
        }
        if (this.demoDataCreation.nbOpportunity.done < this.demoDataCreation.nbOpportunity.ask) {
            var num = 1 + this.demoDataCreation.nbOpportunity.done, obj = this.createObject("Opportunity", {
                name: "Demo-Name-" + num,
                amount: 1e3,
                probability: 65,
                description: "Description of Demo-" + num
            });
            return this.addObject(obj), 0 == this.demoDataCreation.nbOpportunity.done && (this.demoDataCreation.firstOpportunity = obj), 
            a4p.isTrueOrNonEmpty(this.demoDataCreation.firstContact) && this.linkToItem(obj.a4p_type, "accounter", [ obj ], this.demoDataCreation.firstContact), 
            a4p.isTrueOrNonEmpty(this.demoDataCreation.firstAccount) && this.linkToItem(obj.a4p_type, "accounter", [ obj ], this.demoDataCreation.firstAccount), 
            this.addObjectToSave(obj.a4p_type, obj.id.dbid), this.demoDataCreation.nbOpportunity.done = num, 
            void window.setTimeout(function() {
                self.createMoreDemoData();
            }, 10);
        }
        if (this.demoDataCreation.nbLead.done < this.demoDataCreation.nbLead.ask) {
            var num = 1 + this.demoDataCreation.nbLead.done, obj = this.createObject("Lead", {
                salutation: "Mr.",
                first_name: "Demo-FirstName-" + num,
                last_name: "Demo-LastName-" + num,
                description: "Description of Demo-" + num,
                email: "Demo-FirstName-" + num + ".Demo-LastName-" + num + "@apps4pro.com"
            });
            return this.addObject(obj), 0 == this.demoDataCreation.nbLead.done && (this.demoDataCreation.firstLead = obj), 
            a4p.isTrueOrNonEmpty(this.demoDataCreation.firstContact) && this.linkToItem(obj.a4p_type, "accounter", [ obj ], this.demoDataCreation.firstContact), 
            a4p.isTrueOrNonEmpty(this.demoDataCreation.firstAccount) && this.linkToItem(obj.a4p_type, "accounter", [ obj ], this.demoDataCreation.firstAccount), 
            this.addObjectToSave(obj.a4p_type, obj.id.dbid), this.demoDataCreation.nbLead.done = num, 
            void window.setTimeout(function() {
                self.createMoreDemoData();
            }, 10);
        }
        if (this.demoDataCreation.nbPlan.done < this.demoDataCreation.nbPlan.ask) {
            var num = 1 + this.demoDataCreation.nbPlan.done, obj = this.createObject("Plan", {
                title: "Demo-Title-" + num,
                pos: num
            });
            return this.addObject(obj), 0 == this.demoDataCreation.nbPlan.done ? (this.demoDataCreation.firstPlan = obj, 
            a4p.isTrueOrNonEmpty(this.demoDataCreation.firstEvent) && this.linkToItem(obj.a4p_type, "parent", [ obj ], this.demoDataCreation.firstEvent)) : this.linkToItem(obj.a4p_type, "parent", [ obj ], this.demoDataCreation.firstPlan), 
            this.addObjectToSave(obj.a4p_type, obj.id.dbid), this.demoDataCreation.nbPlan.done = num, 
            void window.setTimeout(function() {
                self.createMoreDemoData();
            }, 10);
        }
        if (this.demoDataCreation.nbDocument.done < this.demoDataCreation.nbDocument.ask && a4p.isTrueOrNonEmpty(this.demoDataCreation.firstEvent)) {
            var num = 1 + this.demoDataCreation.nbDocument.done;
            this.takePicture(this.demoDataCreation.firstEvent, "pictureName").then(function(document) {
                a4p.safeApply(self.rootScope, function() {
                    self.addObject(document), self.linkToItem(document.a4p_type, "parent", [ document ], self.demoDataCreation.firstEvent), 
                    self.addObjectToSave(document.a4p_type, document.id.dbid), self.demoDataCreation.nbAttachee.done < self.demoDataCreation.nbAttachee.ask && (self.newAndSaveAttachment("Attachee", document, self.demoDataCreation.firstEvent), 
                    self.demoDataCreation.nbAttachee.done = 1 + self.demoDataCreation.nbAttachee.done), 
                    self.demoDataCreation.nbDocument.done = num, self.createMoreDemoData();
                });
            }, function(diag) {
                a4p.safeApply(self.rootScope, function() {
                    self.demoDataCreation.deferred.reject(diag);
                });
            });
        }
        if (this.demoDataCreation.nbNote.done < this.demoDataCreation.nbNote.ask) {
            var num = 1 + this.demoDataCreation.nbNote.done, obj = this.createObject("Note", {
                title: "Demo-Title-" + num,
                description: "Description of Demo-" + num
            });
            return this.addObject(obj), 0 == this.demoDataCreation.nbNote.done && (this.demoDataCreation.firstNote = obj), 
            a4p.isTrueOrNonEmpty(this.demoDataCreation.firstEvent) && this.linkToItem(obj.a4p_type, "parent", [ obj ], this.demoDataCreation.firstEvent), 
            a4p.isTrueOrNonEmpty(this.demoDataCreation.firstPlan) && this.demoDataCreation.nbPlannee.done < this.demoDataCreation.nbPlannee.ask && this.newAndSaveAttachment("Plannee", obj, this.demoDataCreation.firstPlan), 
            this.addObjectToSave(obj.a4p_type, obj.id.dbid), this.demoDataCreation.nbNote.done = num, 
            void window.setTimeout(function() {
                self.createMoreDemoData();
            }, 10);
        }
        if (this.demoDataCreation.nbReport.done < this.demoDataCreation.nbReport.ask) {
            var num = 1 + this.demoDataCreation.nbReport.done, obj = this.createObject("Report", {
                title: "Demo-Title-" + num,
                message: "Message of Demo-" + num,
                description: "Description of Demo-" + num
            });
            return this.addObject(obj), 0 == this.demoDataCreation.nbReport.done && (this.demoDataCreation.firstReport = obj), 
            a4p.isTrueOrNonEmpty(this.demoDataCreation.firstEvent) && this.linkToItem(obj.a4p_type, "parent", [ obj ], this.demoDataCreation.firstEvent), 
            this.addObjectToSave(obj.a4p_type, obj.id.dbid), this.demoDataCreation.nbReport.done = num, 
            void window.setTimeout(function() {
                self.createMoreDemoData();
            }, 10);
        }
        this.demoDataCreation.deferred.resolve({
            log: "Created " + this.demoDataCreation.nbFacet + " facets," + this.demoDataCreation.nbContact + " contacts, " + this.demoDataCreation.nbAccount + " accounts, " + this.demoDataCreation.nbEvent + " events, " + this.demoDataCreation.nbTask + " tasks, " + this.demoDataCreation.nbOpportunity + " opportunities, " + this.demoDataCreation.nbLead + " leads, " + this.demoDataCreation.nbDocument + " documents, " + this.demoDataCreation.nbNote + " notes, " + this.demoDataCreation.nbReport + " reports, " + this.demoDataCreation.nbPlan + " plans, " + this.demoDataCreation.nbAttachee + " attachees, " + this.demoDataCreation.nbAttendee + " attendees, " + this.demoDataCreation.nbPlannee + " plannees"
        });
    }, Service.prototype.takePicture = function(parentObject, pictureName) {
        a4p.InternalLog.log("srvData", "takePicture " + pictureName);
        var deferred = this.q.defer(), self = this, targetDirPath = "a4p/c4p/doc", photoRootname = sanitizeFilename(pictureName, !0), photoExtension = window.device ? "jpg" : "png", filePath = normalizedPath(targetDirPath, photoRootname, photoExtension), createPicture = function() {
            self.srvFileStorage.getUrlFromFile(filePath, function(url) {
                a4p.safeApply(self.rootScope, function() {
                    a4p.InternalLog.log("srvData", "Picture file creation ok : filePath = " + filePath + ", url = " + url);
                    var document = self.createObject("Document", {
                        name: photoRootname + "." + photoExtension,
                        body: "",
                        length: "0",
                        path: targetDirPath,
                        description: "",
                        uid: "pict_" + photoRootname,
                        url: url,
                        fileUrl: url,
                        src: url,
                        filePath: filePath
                    });
                    deferred.resolve(document);
                });
            }, function(message) {
                a4p.safeApply(self.rootScope, function() {
                    var msg = "Getting URL of picture file " + filePath + " failure : " + message;
                    deferred.reject({
                        error: "htmlMsgTakePicturePb",
                        log: msg
                    });
                });
            });
        };
        if (window.device) {
            var onGetPictureSuccess = function(imageURI) {
                a4p.InternalLog.log("srvData", "Picture saved temporarily in " + imageURI);
                var onGetUriSuccess = function(fileEntry) {
                    a4p.InternalLog.log("srvData", "File entry of newly taken picture at " + imageURI + " as " + fileEntry.fullPath + " will be moved to " + filePath);
                    var onMoveFailure = function(message) {
                        a4p.safeApply(self.rootScope, function() {
                            var msg = "Moving newly taken picture from " + imageURI + " to " + filePath + " failure : " + message;
                            deferred.reject({
                                error: "htmlMsgTakePicturePb",
                                log: msg
                            });
                        });
                    };
                    self.srvFileStorage.moveFileEntry(fileEntry, filePath, createPicture, onMoveFailure);
                }, onGetUriFailure = function(message) {
                    a4p.safeApply(self.rootScope, function() {
                        var msg = "Getting file entry of newly taken picture at " + imageURI + " failure : " + message;
                        deferred.reject({
                            error: "htmlMsgTakePicturePb",
                            log: msg
                        });
                    });
                };
                self.srvFileStorage.getFileFromUrl(imageURI, onGetUriSuccess, onGetUriFailure);
            }, onGetPictureFailure = function(message) {
                a4p.safeApply(self.rootScope, function() {
                    var msg = "Camera getting picture failure : " + message;
                    deferred.reject({
                        error: "htmlMsgTakePicturePb",
                        log: msg
                    });
                });
            };
            navigator.camera.getPicture(onGetPictureSuccess, onGetPictureFailure, {
                quality: 50,
                destinationType: Camera.DestinationType.FILE_URI
            });
        } else {
            for (var onWriteFailure = function(message) {
                a4p.safeApply(self.rootScope, function() {
                    var msg = "Writing dummy picture file " + filePath + " failure : " + message;
                    deferred.reject({
                        error: "htmlMsgTakePicturePb",
                        log: msg
                    });
                });
            }, pngData = 'PNG\r\n\n\x00\x00\x00\rIHDR\x00\x00\x00È\x00\x00\x00È\b\x00\x00\x00^¬\x00\x00\x00 cHRM\x00\x00z%\x00\x00\x00\x00ùÿ\x00\x00é\x00\x00u0\x00\x00ê`\x00\x00:\x00\x00o_ÅF\x00\x00\x00PLTE\r\x00\x00\r"4&)\'6\x0072!*\'2((")7%8\'&2<+;41-B+1A,5L4:U6H\x00J\nDX\x00X\b]T%C*(F1.H77Y8)S97g\x00gfw\x00w|f*s#{!k\'\'g5\'o32z)&y1-z76NC(@J5GY?VX>Af>S`7iF={@=LDBI[F[HH_PM^PPGgDKvGPfKSxNU~QcLIhQNiXX}EDzULuYUp_`g`Ded[mxNr`_occwgg}pl~ppOLVMWS]U_¡\\g^pZgdvmh [i§fm±ju§iq¶nwºszÈu	\x00\f\x00\b!"\r)% >=¦\r\x00§´\r\x00·\x00¨$©(ª2¾ \x00·(¹3¢7&·9%@-I6B/K6ªF/¤J4¶B,ºK6µT>IHOPQLWVYE^`aYgYccwujkoppoww¦XB²fQ±weÆÑÇ!\x00É(Ê3×%Ü(Ø1Î<%Ò8#â,á-é4	é8ð;\rð=é<#ÍE-ÌK4ÊQ:ÓC-ÜU<îAóDíB&èK3ëS;óJ%òL1÷S)÷X5úb:ÄZBÔ\\CÍjRÑzcë]D÷]AâaJæjRës[úhFùlRürNüxX÷|bz~§{¿~¶uÆ|Ò}Ñvý_÷p¦·¼¤¨«±³ ª ­¢¢·§§¸¯°½°¯½²²ÄÚÈ×æñèõþØß Ä¸¸éå¢Æ¿ÀÊÀ¿ËÄÃÒÊË×ÏÐÔÐÏÚÕÕáÝÜäàßèæçðîîðïðððïóòò\x00\x00\x00\x00\x00\x00#bâ\x00\x00\x00	pHYs\x00\x00\x00\x00ÒÝ~ü\x00\x00\x00tEXtSoftware\x00Paint.NET v3.5.11GóB7\x00\x00¤IDATx^í\rtSeÇ#NhÅÕªlBé.Õ¶û)Ù±¤Ôu5ôÎÎ.³+mIBÚ2ø1î \n\rR`À(eÝ]EñûÌâ\f#\n9¥JÕF+XÛ:u´h9{ÎþÜô#ÉMÂ¬\'¿÷Þ÷¾7¹÷}ß}Þ{Ö÷\r!%l¤DH²I6R"ÉFJ$ÙH$I)ÒÍôê^t$£Hos»îFGJäI6R"ÉFJ$ÙH$)d#%òÇ§7nÑ]=vBD#Ïmzð(¤DIJÄDJ$|cDzoa®D>Iwùzð($Èzm,òÿÿýcöH}EIR"ÉFJ$ÙH$)d#%l|sDnc"|oB2ÄDJ$ÙHÊóî¸ýúÇë[ã\'N¼þ;æ}¨o[)Ò=ÿ¶cl¶4 xwþõsO|¬+%Ò=ÿÆI!¡¤¥tû|k]bôþhÒù,aOÏq¸ttv\r\buu¶y]Éév¶¹hæzFâ_¤÷õcÈÂ>Îáí<û¿Ã83ØßQ~Ë¤]øýn=/ÁÄ+Ò;ïb¶ÈquÑÀGâì6g&\'fÒçbÅ\'Òûñ¤é\fo¡hs¤SZ.93,ÞyBÃã ³(¨ÏÒkYÏ~ýõT¼bõ{3YÅÚ©(CäNÊÝÑÛâÌÙ3X¯Q¨¦õ5èËÁ\fKôºv b91WÖîhDt\bn³î¡E\rÞrCª/LÆ¹cnÔC¬"?Ä\'-óÈ F;#½>àÅ½6>·Jl"Ý3iVÝúÆeÓï;p!ls÷üIdþù6JÇ¨¦E+)_9M|ufðÌW§OòCR¾°OXDæt8û%8.áé¯Ð ztºt\rÊþºSþU;ë"½ß£iå¤X°FáÀÂ#¶á;dæ ñÕà`¿&iwh¿qbY¤>ÉÓp$§©"¡qÍ»²D÷ 2IÝ=g&äF±*Ò=Wq\\Ç¦F\nÚ%@zZ-xö©ò±ènR"L,¸<ÞÓ8¬s*)qéÎXÐwI	øaÅH7=®ÆµÒH|ÁË)-_|ñÅ)YO\råV\\7 ;`ÀK_$\'ÆobI¤òîC¬§N})(Ã#6cz÷\bDÒ¾8E6¨ù>IÀì²"Âv¯a¿××áïê§³:ñÃ¢Í¯?w	ôìßÄ\bßç6\')H #BºZ|HC-=3çº[Ëéø#z¶ÐE\'¶x]DþÆË1~eBþù\x002Ð/»\\Úä/\x00L(ïèÓðÓðgüCµ_õ#z¹äîD@ ^·ýØåÅhb§¿ c¸ÈájówÏººÊé6Iï+dÔ"óð9h³¹hÜþ.\nï3ª8PZøgúZðþ~ÿws23Óéo\x00n¦OèDw]]~þ9&®ï]Ñ ¯í¶É¸¤\x001:8ÚúJ&{xé®®6|´Ù.éÑÁb!Zi$ûhàºúù~Éqdá8ÞçÞüüä²EøK¦°D)Â7-§³ë¸«ÿüý (ÔüÀ¨?ñÓq~´üØ Ñïï §ßßáCvÒ\'ø;ßïôwúßãÄsD\'ò;XöV\fÉ¼O"<®\b4%tªà\r¬¤ó>FàÛVÚuÚnóùÑegg§¦ä¢Ø\'Wt"yÉïÁCU@@AKà%Ã^ðûé&I×6`ÎN¾Kì¶ïéÖJDX6WgGg;ôµ1½ã]ÿ»þwwßé¤n;ô\b¶÷;Ò2Ñt_Äã|xöðøï ?¡ØÊïÐB L,¨L8 bCWï #thÀ%vÛ$Ó2ÑÈnÏiÓ1\r+è)8Õ	´ríÈ ­ÃG¿¸Ãýë¾QÈGÍ^Öáëx[8À@c\bòÎp\\üØÒôÈ¥Íç@>ÀxÕ*QÐoâàîõù|oão7B½¢â¸2â@ìAÐ­ÏÇ_çA),ÒËÝÛí×ÂMP4Ç×Ë\nEi_	a-LÖ@«Ï;&XbLId¹Clöï¬%hZFbXÌ#âËÉI¡û|k_C>îxíÚÉvÉIl)(Â?Ý"!öÝ&<¯Ñuxíö÷;v¹K&êÈÖ(òCÒHFY£·QÇ4q`ÝµëÞ>Iâóâ-·èuÙÑ£ÃñP)®ØbúQ,ÄYek×¬il|øaXç[{\x00wÝªijÑVÚò:A³h\bkÖ®aÒ\fJLïDæ%$«Ak$B1:,óùÔ\\¥,LÀÛDn¤áõ`Ù¸¬q\\AöæëþðôxNU0þ\x00eYI,_#àÇ:N\b2Â42@³àÁÆ° ,B&3up+Dù-}]d¬2U«4E#¾oWC"¥4Lè.¹0oóDær>pd]ZZZº¢tEÐYÕ FlÆMÝòFåÊLYÃ2ô[,[1üSi<³È"YìQº|yéãDµÊ):_©ËqmJ©G®Ï yrÅ0·Â DsB²²yXI+X¹RT°Êå+8öÒåe(³KK±0×Ð(oëø\b/ò£À}\'¬$e%k©z}ÅJÄè	\\Il,")±þ^äïhbIB²\nfÏÐAf	=3@13fsM&ëàð"è£7cL-.¾ãAÇ/-]L±háÈM \x00ÚP§ÅWd©\bL¬¸éN$$;ë\nQñs/¾+åËïGMëâåÀ|ÙéÂ£«ÄÜÙàâMÐ\b¢\'¬ÈëòÌ¢kt@Å÷/¦K»FäQñy;tªKi°\b°þ-%¬È<ö R)((. !b\nZá\fQ®®)¾¦Ü"Î-ËaEn4\'${jaaq!((***.,.B°»¸p1öó«Ø+\n?¡~\nÐ¦ ð\nEïËw{Xè"2Bv6\rËA"®AMaMQ­5Q£^\\\b+¥¸qR1N	TÄýÈKP"DS2OC°"GP/\\ADA!D^ST¼¨× ¢kàQTCñN e8Y¹($Û\\\r!jÂ\\Ä	Q\f£c ±¢*Â¶VäFC\')]ºÉÍ«pJ®×¢&H/¾êãäft\x00V¡èQ³N\\Fg:-T°L¥þ	ÉøK!jÂfÄ¡3¯F^¯cSÑ%lÅh/Ü\n Ñ3Øp++K°Ï­\fËß¶ÂfÄ¦ê:Dn.4àÂAT.^³PÃªÂéé´éùùX¤ðbç2bù·[a38ù:úÂüéÖ@Qß¯.gÈDþô|Bêü©Tåiÿ@n÷?Ñ¢&ÈÇ$"	1 Ñ±Tå×T!4µªª(HZäcÄN}pGÒÛô|ô§ç=ãB!jÂN-aÆA°È¯B ¶÷0èapLx;yyL8#±ñ-´@ÉÂ<é÷løtn°7Ø E2;µHDf\r!cM£PDÆð¨ZÄ¥jQ56ÕÕÕU(j9»Ñ¸_ÆÈÎÈÅCÔDÎXyy::É1Sø¼^%xDT.ökd]lõOSÂ¤Ë-Ãà@\x00[ \bºR7`£P5ÊªÊJZ±äU È¥$öQDB,hÔJR]åÖ #SU]	W7J2ai¤R![/À¥!DMØd\fXQQYé®rWaqWsYÄ57¸\rÈÕîJJ¯\nw\bDk^îåù¾Æ5a32ÁN-UË&£UVCbD°9*)´ÜÅûm¹Ð:$3.eC?¶þYC°"\b.Ñ!+((\n 0=ÕÁ·Û³Èãæ6&2»Ì%¹4#Ãò?[¹~ªQ¹`D\'¡»ëÝ8B_êö,õÔ»R¯Ê»N,ä5T\'/SëË8Välô1¢KeÅ*x,ò0nO½nÔnµáãáä \f&èa©\\Páæ¾Ae}m«DOXßÅÔ¢\x00Í\b|P¡\b9n\\rk=\neÅsöiEEÉbÓ©\'¸T¸iÃ½¢wýÒÉÿÂ1¬È±túî¸Í4L(6N¸\x00r "mnBwÉCôB CRP)ÈÈ_kÑVäÃzüªÐ±8!M&9°©eø#.º,C=×ì=ëAôéqØù	jÐÕÃE¼Ì³¬¾J]ÚuX°#BQÅíYâ^²`Z]Ê)xj½®DOx¿AÁ|x<KxõY=Ø©¯S1;tg-AµÀ³WVd7èÄìË¬ÿUX¾éHPÃÁFÅ¡²E]ý2H !^À½N;TB¡ë® E6TQA÷ù[ßD&d°HP1à (\x00¼AC!	Ò@pÚØSCÝ\rI°\f\n6yZÿ¨ã[ ¼H»Ó"BÑWÃBPI\nåCd¨­È	r.¤ðFÚKpß¸IÄú-Aä#×X|@Ä\x00!b¡á°áÁGSÅ\'râ`xPÏ¸NÓr/ÿÞ\náEzZ3ùù+ÈÉ"`"ÑÀÙð/nÐwäHÕ	\bÑÂ6¢Dn)Ù1Ì¬\b"}Gyn<èúÑ¸AâGèd\raÙ¼ËP£¥DC=Ð;22eJ,3+È®ô,Ü$¬ad¤n	Á²¦&`5ò`Íºº& tÄWEM<Êi¹S®ÒÁ-A¤ÇC7H\x00"(8\\ó°&:ÔTj=Tê$#Ó¦\\þ/:¸%"ôµÞ<7	y	\r¬!Ç&4À&SlÚÐÔDîMz¾êni¹WÆôçØDÚË31·ÂSKsAMÓ(9t@®¼\f5¢3È%T¦¶®û­]²\x003ëthkDéñ:3T¤v	¦I£b¢è(f{(7L:>dHG:¬­Å·È´+OèÐÖ$ÒwÐ`n¡AQ\x00ÎoHlÑm\x00}ÄCN\r@2H	¹Ô-¨Ìò÷±ýg«"yo À©«mªÕ\b\r]é Yl²E¶fø(T8IrBÈµMä[äòÿ:>¢H_«+Ï-dD-c#¤MÖSxÆ"-ªxß{¬Mílpm¨kzfÄø?/"´ÏºÀH	\'¬oZ¿	Ç¾i$PsáÆç°\nPè¹ò7:¬U"ôy]5­b	_5DbN9*ÛP¨1*Sét°YSfÇhDÚËo¾\x00·»)4<#q!H5¶a!ºa¡\\õ[Ô2Qà.q\\:Åí1nã 4L1 *F_äUûFtXMô[}ÊXH»÷¦ÉWTS:ø§$x5¼Î³X0vÒ:Ñô´ºM«ô@a#\r¹yýæM7mÚ¼eËVÃÊvÝ cd%àÂ ©®ºò*oìÿa7|¸UÝUKb±yÓV*PÙÖ0Ù,² 0¼t ]¡Ëõëê+ÿÌuR¨Dðñîºjª»~ãúÍ7n`Ñ¼¥¹y[ó6,¨8	ÛiØðaX·4\nÍ(¨\rõîé³ZãøÔÑôx]ÎÉùî»7âÒ1[·nmÞÚÌTmon!8üíÛÍÛÛZ¶µlÇ¬"òÍÍäE:\\¶ôÏ¯õ~¤ÃÅBt"}\'areÕÒ»eThÀb«-(;[v¶ìÔ«4¶· ø tPô¸qéÂ«½qL¬¨Eú¹n-¹²z)&\rÍq RÑ1arÙx÷Ò«]ãXÑàÉuSIÁ¢»7>öØÖ[wh,°hÞù¤FêIè\fOÍÖÇ~¹¨èoÌ!L´"}áì(¸÷ÇÉcëÍ(-»vî"=n(òjð=j5ïAÙÑ²CeÐÇ~ùcxÄs¨Eð±èr^{õïy|²xr×]{vîQ6½Oó{ò>jÈìykÎ¤.`åW÷ÍëEèEúÚçÀ¤\b9a\rx´p|ûN\n}=h±È!©C÷óø¯îûIYùQ$f,ôuavÝ{  \bè¡\nËìÚ±DîûsN«;VDðíñgIñ½?|÷®]Oí1Ê^\r5\nö²ÅS\\§öìÞõ?»¿ÌÕßNXéiÅì*ño?û¯ÝO	{ðÌÞg\f¸ýô3úðôÞ½OíÕSÝ»ø÷esàaMDr2kÆOþ $ÄeÀº\b=$è°+ù°,Â9u-LþÇ\r7,Ûû¥ÊîøéìyXéë¡;ÞYrÿ/þó¹_~VâZ¨z\nµBÁqzxñ¿±Ò(Ë"}=ôyâ,)}äÙç^D4F|Ê+/¿ÂPôÊ^¢BÏ=9Ç´ßx±,Â·8o(}àÙg_Ü\'\nû°\n#±ÿý/ïßÃp lö½ôü³Ýâò&Ê#¾­4½³}þù_ïû£f~ýü#\rVñ}á\r!¾å4½JÊ¾ýÃEÞxãý(\\¡y+h<ÚàtºÊÆùýÊLL"<½HeÖêç_xUyÓÄZZ¯¾©1/¬[]Féý7\r#£HßGH\ngeõPA¤oî§¨%îQaGWÏFBÓbARøNq:JV­;¬qFæðá5eNçMxè¶ÇõcÔpbéë9ÆóY½ú0\\>åP¹Ö\n®hý×5÷hb><LÄ!¢*pù.¹:üé\'Î§øôÓß¯kµóÒHì¬bâ	ª /c$£ñùý\'5:tË5Ç{,áÙ âÊ[­¸íÙÅép8ËV:tè°°ª¬Ìé¸A,\\^oû9ÑH\b8yÔK.7³Ì¬Yh¥¤ÄéE¯ÞTÆçbN)\'¶z]XÇëV¼ì*÷¶;àU\b	=oóÖ	B{^ïÁcíç.BâDÞööö#­­ÞVrBÝÚÚþÖÉsíÀ$VäHJ$ÙH$)d#%l¤DH²I.úúþB:<½	ÿ\x00\x00\x00\x00IEND®B`', byteArray = new Uint8Array(pngData.length), i = 0; i < pngData.length; i++) byteArray[i] = 255 & pngData.charCodeAt(i);
            var fromBlob = new Blob([ byteArray ], {
                type: "image/png",
                endings: "transparent"
            });
            self.srvFileStorage.writeFile(fromBlob, filePath, createPicture, onWriteFailure);
        }
        return deferred.promise;
    }, Service.prototype.sendICal = function(object) {
        for (var self = this, ical = object, emails = [], i = 0; i < ical.emailsInput.length; i++) emails.push(ical.emailsInput[i].email);
        for (var i = 0; i < ical.contacts.length; i++) {
            var contact = self.getObject(ical.contacts[i].dbid);
            emails.push(contact.email);
        }
        var params = {
            title: ical.title,
            description: ical.description,
            emails: emails,
            startDate: ical.startDate / 1e3,
            endDate: ical.endDate / 1e3,
            organizer: ical.organizer,
            location: ical.location
        }, requestCtx = {
            type: "ICal",
            title: "Send ICal" + ical.title,
            dbid: ""
        };
        if (self.isDemo) {
            var answerId = {
                dbid: object.id.dbid
            };
            onEmailSuccess(self, requestCtx, {
                responseOK: !0,
                id: answerId,
                responseStatus: "Create ical success.",
                errors: [],
                log: "SendICal done.",
                nbSent: 1
            });
        } else self.srvSynchro.addRequest("data", requestCtx, self.srvConfig.c4pUrlSendICal, "POST", params, {
            "Content-Type": "application/x-www-form-urlencoded"
        });
        return !0;
    }, Service.prototype.getRemoteObjects = function(fromObject, toType, acceptedLinkNames) {
        var index = {}, typedObjects = [], fromType = fromObject.a4p_type, objDesc = c4p.Model.a4p_types[fromType];
        this.addDirectObjects(fromObject, toType, acceptedLinkNames, typedObjects, index);
        for (var viaTypeIdx = 0; viaTypeIdx < c4p.Model.attachTypes.length; viaTypeIdx++) {
            var viaType = c4p.Model.attachTypes[viaTypeIdx], viaDesc = c4p.Model.a4p_types[viaType], attachedField = viaDesc.attached, attacheeField = viaDesc.attachee, linkOtherModel = viaDesc.linkDescs[attachedField];
            if (acceptedLinkNames[linkOtherModel.many]) {
                for (var fromFieldIdx = 0, nb1 = objDesc.linkFields.length; nb1 > fromFieldIdx; fromFieldIdx++) {
                    var linkModel = objDesc.linkFields[fromFieldIdx], fromField = linkModel.key, linkName = linkModel.one;
                    acceptedLinkNames[linkName] && this.addFromTypedLinkedRemoteObjectInList(fromObject, fromField, linkName, viaType, toType, attachedField, attacheeField, typedObjects, index);
                }
                this.addGlobalTypedLinkedRemoteObjectInList(fromObject, linkOtherModel.many, viaType, toType, attachedField, attacheeField, typedObjects, index);
            }
            var linkOtherModel = viaDesc.linkDescs[attacheeField];
            if (acceptedLinkNames[linkOtherModel.many]) {
                for (var fromFieldIdx = 0, nb2 = objDesc.linkFields.length; nb2 > fromFieldIdx; fromFieldIdx++) {
                    var linkModel = objDesc.linkFields[fromFieldIdx], fromField = linkModel.key, linkName = linkModel.one;
                    acceptedLinkNames[linkName] && this.addFromTypedLinkedRemoteObjectInList(fromObject, fromField, linkName, viaType, toType, attacheeField, attachedField, typedObjects, index);
                }
                this.addGlobalTypedLinkedRemoteObjectInList(fromObject, linkOtherModel.many, viaType, toType, attacheeField, attachedField, typedObjects, index);
            }
        }
        return typedObjects;
    }, Service.prototype.addDirectObjects = function(fromObject, toType, acceptedLinkNames, typedObjects, index) {
        for (var fromType = fromObject.a4p_type, objDesc = c4p.Model.a4p_types[fromType], fromFieldIdx = 0, nb = objDesc.linkFields.length; nb > fromFieldIdx; fromFieldIdx++) {
            var linkModel = objDesc.linkFields[fromFieldIdx], fromField = linkModel.key, linkName = linkModel.one;
            acceptedLinkNames[linkName] && this.addFromLinkedTypedDirectObjectInList(fromObject, fromField, linkName, toType, typedObjects, index);
        }
        objDesc = c4p.Model.a4p_types[toType];
        for (var fromOtherFieldIdx = 0, otherNb = objDesc.linkFields.length; otherNb > fromOtherFieldIdx; fromOtherFieldIdx++) {
            var linkOtherModel = objDesc.linkFields[fromOtherFieldIdx], fromOtherField = linkOtherModel.key;
            acceptedLinkNames[linkOtherModel.many] && this.addGlobalLinkedDirectObjectInList(fromObject, linkOtherModel.many, toType, fromOtherField, typedObjects, index);
        }
        return typedObjects;
    }, Service.prototype.addGlobalTypedLinkedRemoteObjectInList = function(fromObject, linkName, viaType, toType, toAttach1Field, toAttach2Field, typedObjects, index) {
        for (var viaObjectIdx = 0; viaObjectIdx < this.currentItems[viaType].length; viaObjectIdx++) {
            var viaObject = this.currentItems[viaType][viaObjectIdx];
            a4p.isDefined(viaObject) && this.addTypedLinkedRemoteObjectInList(fromObject, linkName, viaObject, toType, toAttach1Field, toAttach2Field, typedObjects, index);
        }
    }, Service.prototype.addFromTypedLinkedRemoteObjectInList = function(fromObject, fromField, linkName, viaType, toType, toAttach1Field, toAttach2Field, typedObjects, index) {
        var isArrayField = a4p.isDefined(c4p.Model.objectArrays[fromObject.a4p_type][fromField]);
        if (isArrayField) {
            for (var valueIdx = 0, valueNb = fromObject[fromField].length; valueNb > valueIdx; valueIdx++) if (fromObject[fromField][valueIdx]) {
                var viaObject = this.index.db[fromObject[fromField][valueIdx].dbid];
                a4p.isDefined(viaObject) && viaObject.a4p_type == viaType && this.addTypedLinkedRemoteObjectInList(fromObject, linkName, viaObject, toType, toAttach1Field, toAttach2Field, typedObjects, index);
                break;
            }
        } else if (fromObject[fromField]) {
            var viaObject = this.index.db[fromObject[fromField].dbid];
            a4p.isDefined(viaObject) && viaObject.a4p_type == viaType && this.addTypedLinkedRemoteObjectInList(fromObject, linkName, viaObject, toType, toAttach1Field, toAttach2Field, typedObjects, index);
        }
    }, Service.prototype.addTypedLinkedRemoteObjectInList = function(fromObject, linkName, viaObject, toType, toAttach1Field, toAttach2Field, typedObjects, index) {
        var isArrayField = a4p.isDefined(c4p.Model.objectArrays[viaObject.a4p_type][toAttach1Field]);
        if (isArrayField) for (var valueIdx = 0, valueNb = viaObject[toAttach1Field].length; valueNb > valueIdx; valueIdx++) viaObject[toAttach1Field][valueIdx].dbid == fromObject.id.dbid && this.addTypedLinkObjectInList(linkName, viaObject, toAttach2Field, toType, typedObjects, index); else viaObject[toAttach1Field].dbid == fromObject.id.dbid && this.addTypedLinkObjectInList(linkName, viaObject, toAttach2Field, toType, typedObjects, index);
    }, Service.prototype.addFromLinkedTypedDirectObjectInList = function(fromObject, fromField, linkName, toType, typedObjects, index) {
        var isArray = a4p.isDefined(c4p.Model.objectArrays[fromObject.a4p_type][fromField]), linkId = fromObject[fromField];
        if (a4p.isTrueOrNonEmpty(linkId)) if (isArray) for (var i = 0, nb = linkId.length; nb > i; i++) linkId[i] && this.addTypedIdObjectInList(linkName, toType, linkId[i].dbid, typedObjects, index); else this.addTypedIdObjectInList(linkName, toType, linkId.dbid, typedObjects, index);
    }, Service.prototype.addTypedLinkObjectInList = function(linkName, fromObject, fromField, toType, typedObjects, index) {
        var isArray = a4p.isDefined(c4p.Model.objectArrays[fromObject.a4p_type][fromField]), linkId = fromObject[fromField];
        if (a4p.isTrueOrNonEmpty(linkId)) if (isArray) for (var i = 0, nb = linkId.length; nb > i; i++) a4p.isTrueOrNonEmpty(linkId[i]) && this.addTypedIdObjectInList(linkName, toType, linkId[i].dbid, typedObjects, index); else this.addTypedIdObjectInList(linkName, toType, linkId.dbid, typedObjects, index);
    }, Service.prototype.addGlobalLinkedDirectObjectInList = function(fromObject, linkName, toType, toField, typedObjects, index) {
        for (var toObjectIdx = 0; toObjectIdx < this.currentItems[toType].length; toObjectIdx++) {
            var toObject = this.currentItems[toType][toObjectIdx];
            a4p.isDefined(toObject) && this.addLinkedDirectObjectInList(fromObject, linkName, toObject, toField, typedObjects, index);
        }
    }, Service.prototype.addLinkedDirectObjectInList = function(fromObject, linkName, toObject, toField, typedObjects, index) {
        var isArrayField = a4p.isDefined(c4p.Model.objectArrays[toObject.a4p_type][toField]);
        if (isArrayField) {
            for (var valueIdx = 0, valueNb = toObject[toField].length; valueNb > valueIdx; valueIdx++) if (toObject[toField][valueIdx].dbid == fromObject.id.dbid) {
                this.addLinkName(linkName, toObject, typedObjects, index);
                break;
            }
        } else toObject[toField].dbid == fromObject.id.dbid && this.addLinkName(linkName, toObject, typedObjects, index);
    }, Service.prototype.addTypedIdObjectInList = function(linkName, toType, toId, typedObjects, index) {
        var toObject = this.index.db[toId];
        toObject && toObject.a4p_type == toType && this.addLinkName(linkName, toObject, typedObjects, index);
    }, Service.prototype.addLinkName = function(linkName, toObject, typedObjects, index) {
        if (a4p.isTrueOrNonEmpty(toObject)) {
            var toId = toObject.id.dbid, link = (toObject.a4p_type, index[toId]);
            a4p.isUndefined(link) ? (link = {
                item: toObject,
                linkNames: [ linkName ]
            }, index[toId] = link, typedObjects.push(link)) : addValueToList(link.linkNames, linkName);
        }
    }, Service.prototype.getTypedDirectLinks = function(fromObject, linkName, toType) {
        for (var index = {}, toObjects = [], fromType = fromObject.a4p_type, objDesc = c4p.Model.a4p_types[fromType], fromFieldIdx = 0; fromFieldIdx < objDesc.linkFields.length; fromFieldIdx++) {
            var linkModel = objDesc.linkFields[fromFieldIdx], fromField = linkModel.key;
            linkModel.one == linkName && this.addTypedLinkInList(fromObject, fromField, toType, toObjects, index);
        }
        objDesc = c4p.Model.a4p_types[toType];
        for (var fromOtherFieldIdx = 0; fromOtherFieldIdx < objDesc.linkFields.length; fromOtherFieldIdx++) {
            var linkOtherModel = objDesc.linkFields[fromOtherFieldIdx], toField = linkOtherModel.key;
            linkOtherModel.many == linkName && isValueInList(linkOtherModel.types, fromType) && this.addGlobalLinkedDirectLinkInList(fromObject, toType, toField, toObjects, index);
        }
        return toObjects;
    }, Service.prototype.getTypedRemoteLinks = function(fromObject, linkName, toType) {
        var index = {}, toObjects = [], fromType = fromObject.a4p_type, objDesc = c4p.Model.a4p_types[fromType];
        toObjects = this.getTypedDirectLinks(fromObject, linkName, toType);
        for (var viaTypeIdx = 0; viaTypeIdx < c4p.Model.attachTypes.length; viaTypeIdx++) {
            var viaType = c4p.Model.attachTypes[viaTypeIdx], viaDesc = c4p.Model.a4p_types[viaType], attachedField = viaDesc.attached, attacheeField = viaDesc.attachee, linkOtherModel = viaDesc.linkDescs[attachedField];
            if (linkOtherModel.many == linkName) {
                for (var fromFieldIdx = 0; fromFieldIdx < objDesc.linkFields.length; fromFieldIdx++) {
                    var linkModel = objDesc.linkFields[fromFieldIdx], fromField = linkModel.key;
                    linkModel.one == linkName && this.addFromTypedLinkedRemoteLinkInList(fromObject, fromField, viaType, toType, attachedField, attacheeField, toObjects, index);
                }
                this.addGlobalTypedLinkedRemoteLinkInList(fromObject, viaType, toType, attachedField, attacheeField, toObjects, index);
            }
            var linkOtherModel = viaDesc.linkDescs[attacheeField];
            if (linkOtherModel.many == linkName) {
                for (var fromFieldIdx = 0; fromFieldIdx < objDesc.linkFields.length; fromFieldIdx++) {
                    var linkModel = objDesc.linkFields[fromFieldIdx], fromField = linkModel.key;
                    linkModel.one == linkName && this.addFromTypedLinkedRemoteLinkInList(fromObject, fromField, viaType, toType, attacheeField, attachedField, toObjects, index);
                }
                this.addGlobalTypedLinkedRemoteLinkInList(fromObject, viaType, toType, attacheeField, attachedField, toObjects, index);
            }
        }
        return toObjects;
    }, Service.prototype.getDirectLinks = function(fromObject, linkName) {
        for (var index = {}, toObjects = [], fromType = fromObject.a4p_type, objDesc = c4p.Model.a4p_types[fromType], fromFieldIdx = 0; fromFieldIdx < objDesc.linkFields.length; fromFieldIdx++) {
            var linkModel = objDesc.linkFields[fromFieldIdx], fromField = linkModel.key;
            linkModel.one == linkName && this.addLinkInList(fromObject, fromField, toObjects, index);
        }
        for (var toTypeIdx = 0; toTypeIdx < c4p.Model.objectTypes.length; toTypeIdx++) {
            var toType = c4p.Model.objectTypes[toTypeIdx];
            objDesc = c4p.Model.a4p_types[toType];
            for (var fromOtherFieldIdx = 0; fromOtherFieldIdx < objDesc.linkFields.length; fromOtherFieldIdx++) {
                var linkOtherModel = objDesc.linkFields[fromOtherFieldIdx], toField = linkOtherModel.key;
                linkOtherModel.many == linkName && isValueInList(linkOtherModel.types, fromType) && this.addGlobalLinkedDirectLinkInList(fromObject, toType, toField, toObjects, index);
            }
        }
        return toObjects;
    }, Service.prototype.getRemoteLinks = function(fromObject, linkName) {
        for (var index = {}, toObjects = [], fromType = fromObject.a4p_type, objDesc = c4p.Model.a4p_types[fromType], fromFieldIdx = 0; fromFieldIdx < objDesc.linkFields.length; fromFieldIdx++) {
            var linkModel = objDesc.linkFields[fromFieldIdx], fromField = linkModel.key;
            if (linkModel.one == linkName) {
                var isArray = a4p.isDefined(c4p.Model.objectArrays[fromObject.a4p_type][fromField]), linkId = fromObject[fromField];
                if (a4p.isTrueOrNonEmpty(linkId)) if (isArray) {
                    for (var i = 0, nb = linkId.length; nb > i; i++) if (a4p.isTrueOrNonEmpty(linkId[i])) {
                        var toId = linkId[i].dbid, toObject = this.index.db[toId];
                        if (a4p.isDefined(toObject)) {
                            var toType = toObject.a4p_type;
                            isValueInList(c4p.Model.objectTypes, toType) ? this.addIdInList(toId, toObjects, index) : isValueInList(c4p.Model.attachTypes, toType) && this.addAnyLinkedRemoteLinkInList(fromObject, linkName, toObject, toObjects, index);
                        }
                    }
                } else {
                    var toId = linkId.dbid, toObject = this.index.db[toId];
                    if (a4p.isDefined(toObject)) {
                        var toType = toObject.a4p_type;
                        isValueInList(c4p.Model.objectTypes, toType) ? this.addIdInList(toId, toObjects, index) : isValueInList(c4p.Model.attachTypes, toType) && this.addAnyLinkedRemoteLinkInList(fromObject, linkName, toObject, toObjects, index);
                    }
                }
            }
        }
        for (var toTypeIdx = 0; toTypeIdx < c4p.Model.objectTypes.length; toTypeIdx++) {
            var toType = c4p.Model.objectTypes[toTypeIdx];
            objDesc = c4p.Model.a4p_types[toType];
            for (var fromOtherFieldIdx = 0, nb = objDesc.linkFields.length; nb > fromOtherFieldIdx; fromOtherFieldIdx++) {
                var linkOtherModel = objDesc.linkFields[fromOtherFieldIdx], toField = linkOtherModel.key;
                linkOtherModel.many == linkName && isValueInList(linkOtherModel.types, fromType) && this.addGlobalLinkedDirectLinkInList(fromObject, toType, toField, toObjects, index);
            }
        }
        for (var viaTypeIdx = 0; viaTypeIdx < c4p.Model.attachTypes.length; viaTypeIdx++) {
            var viaType = c4p.Model.attachTypes[viaTypeIdx], viaDesc = c4p.Model.a4p_types[viaType], attachedField = viaDesc.attached, attacheeField = viaDesc.attachee, linkOtherModel = viaDesc.linkDescs[attachedField];
            linkOtherModel.many == linkName && this.addGlobalLinkedRemoteLinkInList(fromObject, viaType, attachedField, attacheeField, toObjects, index), 
            linkOtherModel = viaDesc.linkDescs[attacheeField], linkOtherModel.many == linkName && this.addGlobalLinkedRemoteLinkInList(fromObject, viaType, attacheeField, attachedField, toObjects, index);
        }
        return toObjects;
    }, Service.prototype.addGlobalLinkedDirectLinkInList = function(fromObject, toType, toField, list, index) {
        for (var toObjectIdx = 0; toObjectIdx < this.currentItems[toType].length; toObjectIdx++) {
            var toObject = this.currentItems[toType][toObjectIdx];
            a4p.isDefined(toObject) && this.addLinkedDirectLinkInList(fromObject, toObject, toField, list, index);
        }
    }, Service.prototype.addLinkedDirectLinkInList = function(fromObject, toObject, toField, list, index) {
        var isArrayField = a4p.isDefined(c4p.Model.objectArrays[toObject.a4p_type][toField]);
        if (isArrayField) {
            for (var valueIdx = 0, valueNb = toObject[toField].length; valueNb > valueIdx; valueIdx++) if (toObject[toField][valueIdx].dbid == fromObject.id.dbid) {
                this.addObjectInList(toObject, list, index);
                break;
            }
        } else toObject[toField].dbid == fromObject.id.dbid && this.addObjectInList(toObject, list, index);
    }, Service.prototype.addObjectInList = function(toObject, list, index) {
        a4p.isUndefined(index[toObject.id.dbid]) && (index[toObject.id.dbid] = toObject, 
        list.push(toObject));
    }, Service.prototype.addFromTypedLinkedRemoteLinkInList = function(fromObject, fromField, viaType, toType, toAttach1Field, toAttach2Field, list, index) {
        var isArrayField = a4p.isDefined(c4p.Model.objectArrays[fromObject.a4p_type][fromField]);
        if (isArrayField) {
            for (var valueIdx = 0, valueNb = fromObject[fromField].length; valueNb > valueIdx; valueIdx++) if (fromObject[fromField][valueIdx]) {
                var viaObject = this.index.db[fromObject[fromField][valueIdx].dbid];
                a4p.isDefined(viaObject) && viaObject.a4p_type == viaType && this.addTypedLinkedRemoteLinkInList(fromObject, viaObject, toType, toAttach1Field, toAttach2Field, list, index);
                break;
            }
        } else if (fromObject[fromField]) {
            var viaObject = this.index.db[fromObject[fromField].dbid];
            a4p.isDefined(viaObject) && viaObject.a4p_type == viaType && this.addTypedLinkedRemoteLinkInList(fromObject, viaObject, toType, toAttach1Field, toAttach2Field, list, index);
        }
    }, Service.prototype.addGlobalTypedLinkedRemoteLinkInList = function(fromObject, viaType, toType, toAttach1Field, toAttach2Field, list, index) {
        for (var viaObjectIdx = 0; viaObjectIdx < this.currentItems[viaType].length; viaObjectIdx++) {
            var viaObject = this.currentItems[viaType][viaObjectIdx];
            a4p.isDefined(viaObject) && this.addTypedLinkedRemoteLinkInList(fromObject, viaObject, toType, toAttach1Field, toAttach2Field, list, index);
        }
    }, Service.prototype.addTypedLinkedRemoteLinkInList = function(fromObject, viaObject, toType, toAttach1Field, toAttach2Field, list, index) {
        var isArrayField = a4p.isDefined(c4p.Model.objectArrays[viaObject.a4p_type][toAttach1Field]);
        if (isArrayField) for (var valueIdx = 0, valueNb = viaObject[toAttach1Field].length; valueNb > valueIdx; valueIdx++) viaObject[toAttach1Field][valueIdx].dbid == fromObject.id.dbid && this.addTypedLinkInList(viaObject, toAttach2Field, toType, list, index); else viaObject[toAttach1Field].dbid == fromObject.id.dbid && this.addTypedLinkInList(viaObject, toAttach2Field, toType, list, index);
    }, Service.prototype.addTypedLinkInList = function(fromObject, fromField, toType, list, index) {
        var isArray = a4p.isDefined(c4p.Model.objectArrays[fromObject.a4p_type][fromField]), linkId = fromObject[fromField];
        if (a4p.isTrueOrNonEmpty(linkId)) if (isArray) for (var i = 0, nb = linkId.length; nb > i; i++) a4p.isTrueOrNonEmpty(linkId[i]) && this.addTypedIdInList(toType, linkId[i].dbid, list, index); else this.addTypedIdInList(toType, linkId.dbid, list, index);
    }, Service.prototype.addTypedIdInList = function(toType, toId, list, index) {
        var toObject = this.index.db[toId];
        a4p.isDefined(toObject) && a4p.isUndefined(index[toId]) && toObject.a4p_type == toType && (index[toId] = toObject, 
        list.push(toObject));
    }, Service.prototype.addAnyLinkedRemoteLinkInList = function(fromObject, linkName, viaObject, list, index) {
        var viaType = viaObject.a4p_type, objDesc = c4p.Model.a4p_types[viaType], attachedField = objDesc.attached, attacheeField = objDesc.attachee;
        objDesc.linkDescs[attachedField].many == linkName && this.addLinkedRemoteLinkInList(fromObject, viaObject, attachedField, attacheeField, list, index), 
        objDesc.linkDescs[attacheeField].many == linkName && this.addLinkedRemoteLinkInList(fromObject, viaObject, attacheeField, attachedField, list, index);
    }, Service.prototype.addGlobalLinkedRemoteLinkInList = function(fromObject, viaType, toAttach1Field, toAttach2Field, list, index) {
        for (var viaObjectIdx = 0; viaObjectIdx < this.currentItems[viaType].length; viaObjectIdx++) {
            var viaObject = this.currentItems[viaType][viaObjectIdx];
            a4p.isDefined(viaObject) && this.addLinkedRemoteLinkInList(fromObject, viaObject, toAttach1Field, toAttach2Field, list, index);
        }
    }, Service.prototype.addLinkedRemoteLinkInList = function(fromObject, viaObject, toAttach1Field, toAttach2Field, list, index) {
        var isArrayField = a4p.isDefined(c4p.Model.objectArrays[viaObject.a4p_type][toAttach1Field]);
        if (isArrayField) {
            for (var valueIdx = 0, valueNb = viaObject[toAttach1Field].length; valueNb > valueIdx; valueIdx++) if (viaObject[toAttach1Field][valueIdx].dbid == fromObject.id.dbid) {
                this.addLinkInList(viaObject, toAttach2Field, list, index);
                break;
            }
        } else viaObject[toAttach1Field].dbid == fromObject.id.dbid && this.addLinkInList(viaObject, toAttach2Field, list, index);
    }, Service.prototype.addLinkInList = function(fromObject, fromField, list, index) {
        var isArray = a4p.isDefined(c4p.Model.objectArrays[fromObject.a4p_type][fromField]), linkId = fromObject[fromField];
        if (a4p.isTrueOrNonEmpty(linkId)) if (isArray) for (var i = 0, nb = linkId.length; nb > i; i++) a4p.isTrueOrNonEmpty(linkId[i]) && this.addIdInList(linkId[i].dbid, list, index); else this.addIdInList(linkId.dbid, list, index);
    }, Service.prototype.addIdInList = function(toId, list, index) {
        var toObject = this.index.db[toId];
        a4p.isDefined(toObject) && a4p.isUndefined(index[toId]) && (index[toId] = toObject, 
        list.push(toObject));
    }, Service.prototype.hasAnyLinkTo = function(fromObject, toObject) {
        if ("Event" == fromObject.a4p_type) {
            if (this.getAttachment("Attendee", toObject, fromObject)) return !0;
            if (this.getAttachment("Attachee", toObject, fromObject)) return !0;
        } else if ("Contact" == fromObject.a4p_type) {
            if (this.getAttachment("Attendee", fromObject, toObject)) return !0;
        } else if ("Document" == fromObject.a4p_type && this.getAttachment("Attachee", fromObject, toObject)) return !0;
        for (var fromFieldIdx = 0; fromFieldIdx < c4p.Model.a4p_types[fromObject.a4p_type].linkFields.length; fromFieldIdx++) for (var linkModel = c4p.Model.a4p_types[fromObject.a4p_type].linkFields[fromFieldIdx], fromField = linkModel.key, toTypeIdx = 0; toTypeIdx < linkModel.types.length; toTypeIdx++) if (linkModel.types[toTypeIdx] == toObject.a4p_type && this.isItemLinkedToObject(fromObject, fromField, toObject)) return !0;
        for (var fromFieldIdx = 0; fromFieldIdx < c4p.Model.a4p_types[toObject.a4p_type].linkFields.length; fromFieldIdx++) for (var linkModel = c4p.Model.a4p_types[toObject.a4p_type].linkFields[fromFieldIdx], fromField = linkModel.key, toTypeIdx = 0; toTypeIdx < linkModel.types.length; toTypeIdx++) if (linkModel.types[toTypeIdx] == fromObject.a4p_type && this.isItemLinkedToObject(toObject, fromField, fromObject)) return !0;
        return !1;
    }, Service.prototype.getLinkedObjects = function(fromObject) {
        var result = [];
        if (!fromObject || "undefined" == typeof fromObject || a4p.isUndefined(fromObject)) return result;
        for (var index = {}, dbid = fromObject.id.dbid, otherTypeIdx = (fromObject.a4p_type, 
        0); otherTypeIdx < c4p.Model.objectTypes.length; otherTypeIdx++) for (var fromOtherType = c4p.Model.objectTypes[otherTypeIdx], objDesc = c4p.Model.a4p_types[fromOtherType], otherObjectIdx = 0; otherObjectIdx < this.currentItems[fromOtherType].length; otherObjectIdx++) for (var otherObject = this.currentItems[fromOtherType][otherObjectIdx], otherId = otherObject.id.dbid, fromOtherFieldIdx = 0; fromOtherFieldIdx < objDesc.linkFields.length; fromOtherFieldIdx++) {
            var linkOtherModel = objDesc.linkFields[fromOtherFieldIdx], fromOtherField = linkOtherModel.key, isArrayField = a4p.isDefined(c4p.Model.objectArrays[fromOtherType][fromOtherField]), fromOtherLinkName = linkOtherModel.many;
            if (isArrayField) {
                for (var valueIdx = 0, valueNb = otherObject[fromOtherField].length; valueNb > valueIdx; valueIdx++) if (otherObject[fromOtherField][valueIdx].dbid == dbid) {
                    addLinkedObject(this, result, index, fromOtherLinkName, otherId);
                    break;
                }
            } else otherObject[fromOtherField].dbid == dbid && addLinkedObject(this, result, index, fromOtherLinkName, otherId);
        }
        for (var otherTypeIdx = 0; otherTypeIdx < c4p.Model.attachTypes.length; otherTypeIdx++) for (var fromOtherType = c4p.Model.attachTypes[otherTypeIdx], objDesc = c4p.Model.a4p_types[fromOtherType], nbLink = objDesc.linkFields.length, otherObjectIdx = 0; otherObjectIdx < this.currentItems[fromOtherType].length; otherObjectIdx++) for (var otherObject = this.currentItems[fromOtherType][otherObjectIdx], otherId = otherObject.id.dbid, fromOtherFieldIdx = 0; nbLink > fromOtherFieldIdx; fromOtherFieldIdx++) {
            var linkOtherModel = objDesc.linkFields[fromOtherFieldIdx], fromOtherField = linkOtherModel.key, isArrayField = a4p.isDefined(c4p.Model.objectArrays[fromOtherType][fromOtherField]), fromOtherLinkName = linkOtherModel.many;
            if (isArrayField) {
                for (var valueIdx = 0, valueNb = otherObject[fromOtherField].length; valueNb > valueIdx; valueIdx++) if (otherObject[fromOtherField][valueIdx].dbid == dbid) {
                    for (var otherFieldIdx = 0; nbLink > otherFieldIdx; otherFieldIdx++) {
                        var otherModel = objDesc.linkFields[otherFieldIdx], otherField = otherModel.key;
                        if (otherField != fromOtherField) {
                            var toNp2Id = otherObject[otherField].dbid;
                            addLinkedObject(this, result, index, fromOtherLinkName, toNp2Id);
                        }
                    }
                    break;
                }
            } else if (otherObject[fromOtherField].dbid == dbid) for (var otherFieldIdx = 0; nbLink > otherFieldIdx; otherFieldIdx++) {
                var otherModel = objDesc.linkFields[otherFieldIdx], otherField = otherModel.key;
                if (otherField != fromOtherField) {
                    var toNp2Id = otherObject[otherField].dbid;
                    addLinkedObject(this, result, index, fromOtherLinkName, toNp2Id);
                }
            }
        }
        return result;
    }, Service.prototype.setThumbNail = function(object) {
        var type = object.a4p_type.toLowerCase();
        object.thumb_url = "account" == type || "contact" == type || "document" == type || "event" == type || "opportunity" == type || "picture" == type || "add" == type ? "l4p/img/default_thumb_" + type + ".png" : "lead" == type ? "l4p/img/default_thumb_opportunity.png" : "note" == type ? "l4p/img/default_thumb_document.png" : "report" == type ? "l4p/img/default_thumb_document.png" : "doc" == object.extension ? "l4p/img/default_logo_doc.png" : "pdf" == object.extension ? "l4p/img/default_logo_pdf.png" : "txt" == object.extension ? "l4p/img/default_logo_txt.png" : "avi" == object.extension ? "l4p/img/default_logo_avi.png" : "css" == object.extension ? "l4p/img/default_logo_CSS.png" : "fla" == object.extension ? "l4p/img/default_logo_fla.png" : "htm" == object.extension ? "l4p/img/default_logo_htm.png" : "jpg" == object.extension ? "l4p/img/default_logo_jpg.png" : "mov" == object.extension ? "l4p/img/default_logo_mov.png" : "mp3" == object.extension ? "l4p/img/default_logo_mp3.png" : "mp4" == object.extension ? "l4p/img/default_logo_mp4.png" : "png" == object.extension ? "l4p/img/default_logo_png.png" : "ppt" == object.extension ? "l4p/img/default_logo_ppt.png" : "swf" == object.extension ? "l4p/img/default_logo_swf.png" : "wav" == object.extension ? "l4p/img/default_logo_wav.png" : "xls" == object.extension ? "l4p/img/default_logo_xls.png" : "xsl" == object.extension ? "l4p/img/default_logo_xsl.png" : "l4p/img/default_logo_unknown.png";
    }, Service.prototype.setDefaultFields = function(object) {
        for (var objDesc = c4p.Model.a4p_types[object.a4p_type], i = 0, len = objDesc.fields.length; len > i; i++) {
            var key = objDesc.fields[i];
            if (!a4p.isDefined(object[key])) {
                var isArrayField = a4p.isDefined(c4p.Model.objectArrays[object.a4p_type][key]);
                if (isArrayField) object[key] = []; else if (a4p.isDefined(objDesc.linkDescs[key])) object[key] = {}; else if (object[key] = "", 
                a4p.isDefined(objDesc.editObjectFields) && a4p.isDefined(objDesc.editObjectFields[key])) {
                    var fieldEditModel = objDesc.editObjectFields[key];
                    if (a4p.isDefined(fieldEditModel.defaultValue) && "" !== fieldEditModel.defaultValue) {
                        var translated = this.srvLocale.translations[fieldEditModel.defaultValue];
                        object[key] = void 0 != translated ? translated : fieldEditModel.defaultValue;
                    } else if (a4p.isDefined(fieldEditModel.defaultSetter)) {
                        var values = [];
                        a4p.isDefined(fieldEditModel.defaultSetterParam) && (values.push(this.srvLocale), 
                        values.push(fieldEditModel.defaultSetterParam)), object[key] = c4p.Model[fieldEditModel.defaultSetter].apply(c4p.Model, values);
                    }
                }
            }
        }
    }, Service.prototype.convertFields = function(object) {
        for (var objDesc = c4p.Model.a4p_types[object.a4p_type], i = 0, len = objDesc.fields.length; len > i; i++) {
            var key = objDesc.fields[i];
            if (a4p.isDefined(objDesc.editObjectFields) && a4p.isDefined(objDesc.editObjectFields[key])) {
                var fieldEditModel = objDesc.editObjectFields[key], isArrayField = a4p.isDefined(c4p.Model.objectArrays[object.a4p_type][key]);
                if (isArrayField) {
                    for (var newField = [], valueIdx = 0, valueNb = object[key].length; valueNb > valueIdx; valueIdx++) newField.push(convertField(fieldEditModel, object[key][valueIdx]));
                    object[key] = newField;
                } else object[key] = convertField(fieldEditModel, object[key]);
            }
        }
    }, Service.prototype.setCalculatedFields = function(object) {
        var objDesc = c4p.Model.a4p_types[object.a4p_type];
        if (a4p.isDefined(objDesc.calculateObjectFields)) for (var calculations = objDesc.calculateObjectFields, i = 0, len = calculations.length; len > i; i++) {
            for (var calculation = calculations[i], fieldName = calculation.key, values = [], j = 0, len2 = calculation.fields.length; len2 > j; j++) values.push(object[calculation.fields[j]]);
            (calculation.force || a4p.isUndefined(object[fieldName]) || "" == object[fieldName]) && (object[fieldName] = c4p.Model[calculation.getter].apply(c4p.Model, values));
        }
        if (this.setThumbNail(object), "Document" == object.a4p_type) {
            if (this.isDemo && "undefined" != typeof object.url && "http" != object.url.substr(0, 4) && "file" != object.url.substr(0, 4)) {
                var location = document.location.href, idx = location.lastIndexOf("/"), urlClientBase = location.substr(0, idx);
                object.url = urlClientBase + "/" + object.url, object.fileUrl = object.url;
            }
            a4p.InternalLog.log("srvData", "Document " + object.filePath + " has url=" + object.url + " and fileUrl=" + object.fileUrl), 
            c4p.Model.isImage(object.extension) && (object.thumb_url = object.fileUrl, a4p.InternalLog.log("srvData", "Image " + object.filePath + " has thumb_url=" + object.thumb_url));
        }
    }, Service;
}(), SrvDataTransfer = function() {
    function Service(deferService, httpService, $rootScope) {
        this.defer = deferService, this.http = httpService, this.rootScope = $rootScope;
    }
    return Service.prototype.sendData = function(url, params, headers, timeout) {
        if ("undefined" == typeof url || null == url) throw new Error("send requires a url parameter");
        "undefined" == typeof params && (params = null), "undefined" == typeof headers && (headers = null), 
        "undefined" == typeof timeout && (timeout = null);
        var self = this, deferred = this.defer.defer(), promise = deferred.promise;
        null == params && (params = {}), ("undefined" == typeof params.time || null == params.time) && (params.time = new Date().getTime()), 
        ("undefined" == typeof params.cache || null == params.cache) && (params.cache = !1), 
        null != headers ? ("undefined" == typeof headers["Content-Type"] || null == headers["Content-Type"]) && (headers["Content-Type"] = "application/x-www-form-urlencoded") : (headers = {}, 
        headers["Content-Type"] = "application/x-www-form-urlencoded");
        var fctOnHttpSuccess = function(response) {
            a4p.safeApply(self.rootScope, function() {
                deferred.resolve(response);
            });
        }, fctOnHttpError = function(response) {
            var msg = "Data upload failure (status=" + response.status + ") : " + response.data;
            a4p.safeApply(self.rootScope, function() {
                a4p.ErrorLog.log("srvDataTransfer", msg), deferred.reject({
                    data: msg,
                    status: "error"
                });
            });
        }, urlData = {
            method: "POST",
            url: url,
            headers: headers,
            data: a4p.Json.uriEncode(params)
        };
        return null != timeout && (urlData.timeout = timeout), a4p.InternalLog.log("srvDataTransfer", "Data uploading to " + url), 
        a4p.promiseWakeup(this.rootScope, this.http(urlData), fctOnHttpSuccess, fctOnHttpError), 
        promise;
    }, Service.prototype.recvData = function(url, timeout) {
        if ("undefined" == typeof url || null == url) throw new Error("send requires a url parameter");
        "undefined" == typeof timeout && (timeout = null);
        var self = this, deferred = this.defer.defer(), promise = deferred.promise, fctOnHttpSuccess = function(response) {
            a4p.safeApply(self.rootScope, function() {
                deferred.resolve(response);
            });
        }, fctOnHttpError = function(response) {
            var msg = "Data download failure : response=" + a4pDumpData(response.data, 3) + " (status=" + response.status + ")";
            a4p.safeApply(self.rootScope, function() {
                a4p.ErrorLog.log("srvDataTransfer", msg), deferred.reject({
                    data: msg,
                    status: "error"
                });
            });
        }, urlData = {
            method: "GET",
            url: url
        };
        return null != timeout && (urlData.timeout = timeout), a4p.InternalLog.log("srvDataTransfer", "Data downloading from " + url), 
        a4p.promiseWakeup(this.rootScope, this.http(urlData), fctOnHttpSuccess, fctOnHttpError), 
        promise;
    }, Service;
}(), c4p;

c4p || (c4p = {}), c4p.Organizer || (c4p.Organizer = {});

var SrvFacet = function() {
    function Service(srvData, srvLocale, srvConfig) {
        function nextDirName(path, rootLevel) {
            var slashBeg, antiSlashBeg, previousSlashEnd, previousAntiSlashEnd;
            if (slashBeg = path.indexOf("/"), previousSlashEnd = -1, antiSlashBeg = path.indexOf("\\"), 
            previousAntiSlashEnd = -1, 0 == slashBeg) for (previousSlashEnd = slashBeg, slashBeg = path.indexOf("/", previousSlashEnd + 1); slashBeg == previousSlashEnd + 1; ) previousSlashEnd = slashBeg, 
            slashBeg = path.indexOf("/", previousSlashEnd + 1); else if (0 == antiSlashBeg) for (previousAntiSlashEnd = antiSlashBeg, 
            antiSlashBeg = path.indexOf("\\", previousAntiSlashEnd + 1); antiSlashBeg == previousAntiSlashEnd + 1; ) previousAntiSlashEnd = antiSlashBeg, 
            antiSlashBeg = path.indexOf("\\", previousAntiSlashEnd + 1);
            return slashBeg >= 0 ? antiSlashBeg >= 0 ? antiSlashBeg > slashBeg ? rootLevel ? [ path.substring(0, slashBeg), path.substring(slashBeg + 1) ] : [ path.substring(previousSlashEnd + 1, slashBeg), path.substring(slashBeg + 1) ] : rootLevel ? [ path.substring(0, antiSlashBeg), path.substring(antiSlashBeg + 1) ] : [ path.substring(previousAntiSlashEnd + 1, antiSlashBeg), path.substring(antiSlashBeg + 1) ] : rootLevel ? [ path.substring(0, slashBeg), path.substring(slashBeg + 1) ] : [ path.substring(previousSlashEnd + 1, slashBeg), path.substring(slashBeg + 1) ] : antiSlashBeg >= 0 ? rootLevel ? [ path.substring(0, antiSlashBeg), path.substring(antiSlashBeg + 1) ] : [ path.substring(previousAntiSlashEnd + 1, antiSlashBeg), path.substring(antiSlashBeg + 1) ] : void 0;
        }
        function inRootFacet(biblio, object) {
            if (a4p.isUndefined(object.id.dbid)) return !1;
            for (var i = 0, nb = biblio.facets_ids.length; nb > i; i++) if (object.id.dbid == biblio.facets_ids[i].dbid) return !0;
            for (var i = 0, nb = biblio.items_ids.length; nb > i; i++) if (object.id.dbid == biblio.items_ids[i].dbid) return !0;
            return !1;
        }
        function inFacet(facet, object, alreadyScanned) {
            if (a4p.isUndefined(alreadyScanned) && (alreadyScanned = {}), a4p.isUndefined(object.id.dbid)) return !1;
            if (inRootFacet(facet, object)) return !0;
            alreadyScanned[facet.id.dbid] = facet;
            for (var i = 0, nb = facet.facets_ids.length; nb > i; i++) if (!a4p.isUndefined(facet.facets_ids[i].dbid)) {
                var subFacet = srvData.getObject(facet.facets_ids[i].dbid);
                if (!a4p.isUndefined(subFacet) && !a4p.isDefined(alreadyScanned[subFacet.id.dbid]) && inFacet(subFacet, object)) return !0;
            }
            return !1;
        }
        c4p.Organizer.objects = {
            key: "objects",
            icon: "fullscreen",
            keepValue: function(title, value, parentFilterFacets) {
                for (var typeDocument = !1, facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) if ("objects" == parentFilterFacets[facetIdx].key) {
                    if (typeDocument || "Document" != parentFilterFacets[facetIdx].value) return !1;
                    typeDocument = !0;
                }
                return !typeDocument && c4p.Model.allTypes.indexOf(value) < 0 ? !1 : !0;
            },
            keepActive: function(parentFilterFacets) {
                for (var typeDocument = !1, facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) if ("objects" == parentFilterFacets[facetIdx].key) {
                    if (typeDocument || "Document" != parentFilterFacets[facetIdx].value) return !1;
                    typeDocument = !0;
                }
                return !0;
            },
            filter: function(parentObjects, parentFilterFacets) {
                for (var typeDocument = !1, typeUndefined = !1, facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) if ("objects" == parentFilterFacets[facetIdx].key) {
                    if (typeDocument || "Document" != parentFilterFacets[facetIdx].value) {
                        typeUndefined = !0;
                        break;
                    }
                    typeDocument = !0;
                }
                var items = {
                    keyes: [],
                    lists: {},
                    others: []
                };
                if (0 == parentFilterFacets.length) {
                    for (var i = 0, nb = c4p.Model.objectTypes.length; nb > i; i++) {
                        var value = c4p.Model.objectTypes[i], title = srvLocale.translations.htmlTitleType[value];
                        addKey(items, "", title, value);
                    }
                    for (var objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                        var item = parentObjects[objectIdx], value = item.object.a4p_type, title = srvLocale.translations.htmlTitleType[value];
                        isValueInList(c4p.Model.objectTypes, value) ? addItem(items, "", title, value, item) : addOther(items, item);
                    }
                } else for (var objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                    var value, title, item = parentObjects[objectIdx];
                    typeUndefined ? (value = void 0, title = "") : typeDocument ? (value = item.object.extension, 
                    title = value) : (value = item.object.a4p_type, title = srvLocale.translations.htmlTitleType[value]), 
                    addItem(items, "", title, value, item);
                }
                return items;
            }
        }, c4p.Organizer.recents = {
            key: "recents",
            icon: "archive",
            keepValue: function(title, value, parentFilterFacets) {
                for (var facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) {
                    if ("recents" == parentFilterFacets[facetIdx].key) return !1;
                    if ("top20" == parentFilterFacets[facetIdx].key) return !1;
                    if ("mine" == parentFilterFacets[facetIdx].key) return !1;
                    if ("favorites" == parentFilterFacets[facetIdx].key) return !1;
                }
                return !0;
            },
            keepActive: function(parentFilterFacets) {
                for (var facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) {
                    if ("recents" == parentFilterFacets[facetIdx].key) return !1;
                    if ("top20" == parentFilterFacets[facetIdx].key) return !1;
                    if ("mine" == parentFilterFacets[facetIdx].key) return !1;
                    if ("favorites" == parentFilterFacets[facetIdx].key) return !1;
                }
                return !0;
            },
            filter: function(parentObjects, parentFilterFacets) {
                for (var items = {
                    keyes: [],
                    lists: {},
                    others: []
                }, now = new Date().getTime(), rootLevel = !0, facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) "recents" == parentFilterFacets[facetIdx].key && (rootLevel = !1);
                if (rootLevel) {
                    addKey(items, "1", srvLocale.translations.htmlRecently.hour, 1), addKey(items, "2", srvLocale.translations.htmlRecently.day, 24), 
                    addKey(items, "3", srvLocale.translations.htmlRecently.week, 168), addKey(items, "4", srvLocale.translations.htmlRecently.month, 672), 
                    addKey(items, "5", srvLocale.translations.htmlRecently.year, 8760), addKey(items, "6", srvLocale.translations.htmlRecently.epoch, 219e3);
                    for (var objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                        var prefix, value, title, item = parentObjects[objectIdx];
                        if (a4p.isUndefined(item.object.last_modified_date)) value = void 0, title = ""; else {
                            var date = a4pDateParse(item.object.last_modified_date);
                            if (date) {
                                var diffMs = Math.abs(now - date.getTime());
                                36e5 > diffMs ? (prefix = "1", value = 1, title = srvLocale.translations.htmlRecently.hour) : 864e5 > diffMs ? (prefix = "2", 
                                value = 24, title = srvLocale.translations.htmlRecently.day) : 6048e5 > diffMs ? (prefix = "3", 
                                value = 168, title = srvLocale.translations.htmlRecently.week) : 24192e5 > diffMs ? (prefix = "4", 
                                value = 672, title = srvLocale.translations.htmlRecently.month) : 31536e6 > diffMs ? (prefix = "5", 
                                value = 8760, title = srvLocale.translations.htmlRecently.year) : (prefix = "6", 
                                value = 219e3, title = srvLocale.translations.htmlRecently.epoch);
                            } else value = void 0, title = "";
                        }
                        addItem(items, prefix, title, value, item);
                    }
                } else for (var objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) addOther(items, parentObjects[objectIdx]);
                return items;
            }
        }, c4p.Organizer.top20 = {
            key: "top20",
            icon: "thumbs-up",
            keepValue: function(title, value, parentFilterFacets) {
                for (var facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) {
                    if ("top20" == parentFilterFacets[facetIdx].key) return !1;
                    if ("recents" == parentFilterFacets[facetIdx].key) return !1;
                    if ("mine" == parentFilterFacets[facetIdx].key) return !1;
                    if ("favorites" == parentFilterFacets[facetIdx].key) return !1;
                }
                return !0;
            },
            keepActive: function(parentFilterFacets) {
                for (var facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) {
                    if ("top20" == parentFilterFacets[facetIdx].key) return !1;
                    if ("recents" == parentFilterFacets[facetIdx].key) return !1;
                    if ("mine" == parentFilterFacets[facetIdx].key) return !1;
                    if ("favorites" == parentFilterFacets[facetIdx].key) return !1;
                }
                return !0;
            },
            filter: function(parentObjects) {
                var items = {
                    keyes: [],
                    lists: {},
                    others: []
                }, itemList = (new Date().getTime(), parentObjects.slice(0));
                itemList.sort(function(a, b) {
                    if (a4p.isUndefined(a.object.last_modified_date)) return -1;
                    if (a4p.isUndefined(b.object.last_modified_date)) return 1;
                    var dateA = a4pDateParse(a.object.last_modified_date);
                    if (!dateA) return -1;
                    var dateB = a4pDateParse(b.object.last_modified_date);
                    return dateB ? dateA.getTime() < dateB.getTime() ? -1 : dateA.getTime() > dateB.getTime() ? 1 : 0 : 1;
                });
                for (var objectIdx = 0, objectNb = itemList.length; objectNb > objectIdx && 20 > objectIdx; objectIdx++) addOther(items, itemList[objectIdx]);
                return items;
            }
        }, c4p.Organizer.mine = {
            key: "mine",
            icon: "gift",
            keepValue: function(title, value, parentFilterFacets) {
                for (var facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) {
                    if ("mine" == parentFilterFacets[facetIdx].key) return !1;
                    if ("top20" == parentFilterFacets[facetIdx].key) return !1;
                    if ("recents" == parentFilterFacets[facetIdx].key) return !1;
                    if ("favorites" == parentFilterFacets[facetIdx].key) return !1;
                }
                return !0;
            },
            keepActive: function(parentFilterFacets) {
                for (var facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) {
                    if ("mine" == parentFilterFacets[facetIdx].key) return !1;
                    if ("top20" == parentFilterFacets[facetIdx].key) return !1;
                    if ("recents" == parentFilterFacets[facetIdx].key) return !1;
                    if ("favorites" == parentFilterFacets[facetIdx].key) return !1;
                }
                return !0;
            },
            filter: function(parentObjects) {
                for (var items = {
                    keyes: [],
                    lists: {},
                    others: []
                }, objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                    var item = parentObjects[objectIdx], object = item.object;
                    srvData.isObjectOwnedByUser(object) && addOther(items, item);
                }
                return items;
            }
        }, c4p.Organizer.favorites = {
            key: "favorites",
            icon: "star",
            keepValue: function(title, value, parentFilterFacets) {
                for (var facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) {
                    if ("favorites" == parentFilterFacets[facetIdx].key) return !1;
                    if ("mine" == parentFilterFacets[facetIdx].key) return !1;
                    if ("top20" == parentFilterFacets[facetIdx].key) return !1;
                    if ("recents" == parentFilterFacets[facetIdx].key) return !1;
                }
                return !0;
            },
            keepActive: function(parentFilterFacets) {
                for (var facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) {
                    if ("favorites" == parentFilterFacets[facetIdx].key) return !1;
                    if ("mine" == parentFilterFacets[facetIdx].key) return !1;
                    if ("top20" == parentFilterFacets[facetIdx].key) return !1;
                    if ("recents" == parentFilterFacets[facetIdx].key) return !1;
                }
                return !0;
            },
            filter: function(parentObjects) {
                var items = {
                    keyes: [],
                    lists: {},
                    others: []
                }, favoriteFacet = srvData.favoritesObject;
                if (a4p.isDefinedAndNotNull(favoriteFacet)) for (var objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                    var item = parentObjects[objectIdx];
                    inFacet(favoriteFacet, item.object) && addOther(items, item);
                }
                return items;
            }
        }, c4p.Organizer.month = {
            key: "month",
            icon: "calendar",
            keepValue: function(title, value, parentFilterFacets) {
                for (var typeYear = !1, typeMonth = !1, facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) if ("month" == parentFilterFacets[facetIdx].key) if (typeYear) {
                    if (typeMonth) return !1;
                    typeMonth = !0;
                } else typeYear = !0; else if ("week" == parentFilterFacets[facetIdx].key) return !1;
                if (typeMonth) {
                    if ("" + value != title) return !1;
                    if (1 > value || value > 31) return !1;
                } else if (typeYear) {
                    if (srvLocale.translations.htmlMonth["" + value] != title) return !1;
                    if (0 > value || value > 11) return !1;
                } else if ("" + value != title) return !1;
                return !0;
            },
            keepActive: function(parentFilterFacets) {
                for (var typeYear = !1, typeMonth = !1, facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) if ("month" == parentFilterFacets[facetIdx].key) if (typeYear) {
                    if (typeMonth) return !1;
                    typeMonth = !0;
                } else typeYear = !0; else if ("week" == parentFilterFacets[facetIdx].key) return !1;
                return !0;
            },
            filter: function(parentObjects, parentFilterFacets) {
                for (var typeYear = !1, typeMonth = !1, facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) "month" == parentFilterFacets[facetIdx].key && (typeYear ? typeMonth || (typeMonth = !0) : typeYear = !0);
                var items = {
                    keyes: [],
                    lists: {},
                    others: []
                };
                if (typeMonth) for (var objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                    var item = parentObjects[objectIdx], modifiedDate = item.object.last_modified_date;
                    if (a4p.isUndefined(modifiedDate)) addOther(items, item); else {
                        var date = a4pDateParse(modifiedDate);
                        if (date) {
                            var value = date.getDate(), title = "" + value;
                            addItem(items, "", title, value, item);
                        } else addOther(items, item);
                    }
                } else if (typeYear) for (var objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                    var item = parentObjects[objectIdx], modifiedDate = item.object.last_modified_date;
                    if (a4p.isUndefined(modifiedDate)) addOther(items, item); else {
                        var date = a4pDateParse(modifiedDate);
                        if (date) {
                            var value = date.getMonth(), title = srvLocale.translations.htmlMonth["" + value];
                            addItem(items, "", title, value, item);
                        } else addOther(items, item);
                    }
                } else for (var objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                    var item = parentObjects[objectIdx], modifiedDate = item.object.last_modified_date;
                    if (a4p.isUndefined(modifiedDate)) addOther(items, item); else {
                        var date = a4pDateParse(modifiedDate);
                        if (date) {
                            var value = date.getFullYear(), title = "" + value;
                            addItem(items, "", title, value, item);
                        } else addOther(items, item);
                    }
                }
                return items;
            }
        }, c4p.Organizer.week = {
            key: "week",
            icon: "calendar-empty",
            keepValue: function(title, value, parentFilterFacets) {
                for (var typeYear = !1, typeWeek = !1, facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) if ("week" == parentFilterFacets[facetIdx].key) if (typeYear) {
                    if (typeWeek) return !1;
                    typeWeek = !0;
                } else typeYear = !0; else if ("month" == parentFilterFacets[facetIdx].key) return !1;
                if (typeWeek) {
                    if (srvLocale.translations.htmlDayOfWeek["" + value] != title) return !1;
                    if (0 > value || value > 6) return !1;
                } else if (typeYear) {
                    if ("" + value != title) return !1;
                    if (1 > value || value > 54) return !1;
                } else if ("" + value != title) return !1;
                return !0;
            },
            keepActive: function(parentFilterFacets) {
                for (var typeYear = !1, typeWeek = !1, facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) if ("week" == parentFilterFacets[facetIdx].key) if (typeYear) {
                    if (typeWeek) return !1;
                    typeWeek = !0;
                } else typeYear = !0; else if ("month" == parentFilterFacets[facetIdx].key) return !1;
                return !0;
            },
            filter: function(parentObjects, parentFilterFacets) {
                for (var typeYear = !1, typeWeek = !1, facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) "week" == parentFilterFacets[facetIdx].key && (typeYear ? typeWeek || (typeWeek = !0) : typeYear = !0);
                var items = {
                    keyes: [],
                    lists: {},
                    others: []
                };
                if (typeWeek) for (var objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                    var item = parentObjects[objectIdx], modifiedDate = item.object.last_modified_date;
                    if (a4p.isUndefined(modifiedDate)) addOther(items, item); else {
                        var date = a4pDateParse(modifiedDate);
                        if (date) {
                            var value = date.getDay(), title = srvLocale.translations.htmlDayOfWeek["" + value];
                            addItem(items, "", title, value, item);
                        } else addOther(items, item);
                    }
                } else if (typeYear) for (var objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                    var item = parentObjects[objectIdx], modifiedDate = item.object.last_modified_date;
                    if (a4p.isUndefined(modifiedDate)) addOther(items, item); else {
                        var date = a4pDateParse(modifiedDate);
                        if (date) {
                            var value = date.getWeek(), title = "" + value;
                            addItem(items, "", title, value, item);
                        } else addOther(items, item);
                    }
                } else for (var objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                    var item = parentObjects[objectIdx], modifiedDate = item.object.last_modified_date;
                    if (a4p.isUndefined(modifiedDate)) addOther(items, item); else {
                        var date = a4pDateParse(modifiedDate);
                        if (date) {
                            var value = date.getFullYear(), title = "" + value;
                            addItem(items, "", title, value, item);
                        } else addOther(items, item);
                    }
                }
                return items;
            }
        }, c4p.Organizer.fileDir = {
            key: "fileDir",
            icon: "folder-open",
            keepValue: function() {
                return !0;
            },
            keepActive: function() {
                return !0;
            },
            filter: function(parentObjects, parentFilterFacets) {
                for (var dirLevel = 0, facetIdx = 0; facetIdx < parentFilterFacets.length; facetIdx++) "fileDir" == parentFilterFacets[facetIdx].key && dirLevel++;
                for (var items = {
                    keyes: [],
                    lists: {},
                    others: []
                }, objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                    var item = parentObjects[objectIdx], filePath = item.object.filePath;
                    if (a4p.isUndefined(filePath)) addOther(items, item); else {
                        for (var result, done = !1, rootLevel = !0, level = dirLevel; level > 0; level--) {
                            if (result = nextDirName(filePath, rootLevel), a4p.isUndefined(result)) {
                                addOther(items, item), done = !0;
                                break;
                            }
                            filePath = result[1], rootLevel = !1;
                        }
                        done || (result = nextDirName(filePath, rootLevel), a4p.isUndefined(result) ? addOther(items, item) : addItem(items, "", result[0], result[0], item));
                    }
                }
                return items;
            }
        }, c4p.Organizer.biblio = {
            key: "biblio",
            icon: "sitemap",
            keepValue: function() {
                return !0;
            },
            keepActive: function() {
                return !0;
            },
            filter: function(parentObjects, parentFilterFacets) {
                for (var rootFacet, items = {
                    keyes: [],
                    lists: {},
                    others: []
                }, rootFacetIdx = parentFilterFacets.length - 1; rootFacetIdx >= 0; rootFacetIdx--) if ("biblio" == parentFilterFacets[rootFacetIdx].key) {
                    if (a4p.isUndefined(parentFilterFacets[rootFacetIdx].value)) {
                        for (var objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) addOther(items, parentObjects[objectIdx]);
                        return items;
                    }
                    for (var dataIdx = 0, dataNb = srvData.currentItems.Facet.length; dataNb > dataIdx; dataIdx++) {
                        var facet = srvData.currentItems.Facet[dataIdx];
                        if ((a4p.isUndefined(facet.parent_id) || a4p.isUndefined(facet.parent_id.dbid)) && facet.name == parentFilterFacets[rootFacetIdx].value) {
                            rootFacet = facet;
                            break;
                        }
                    }
                    if (a4p.isDefined(rootFacet)) break;
                }
                if (a4p.isUndefined(rootFacet)) {
                    for (var rootFacets = [], dataIdx = 0, dataNb = srvData.currentItems.Facet.length; dataNb > dataIdx; dataIdx++) {
                        var facet = srvData.currentItems.Facet[dataIdx];
                        (a4p.isUndefined(facet.parent_id) || a4p.isUndefined(facet.parent_id.dbid)) && rootFacets.push(facet);
                    }
                    for (var i = 0, nb = rootFacets.length; nb > i; i++) addKey(items, rootFacets[i].prefix, rootFacets[i].name, rootFacets[i].name);
                    for (var objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                        var item = parentObjects[objectIdx];
                        if ("Facet" != item.object.a4p_type || !a4p.isUndefined(item.object.parent_id) && !a4p.isUndefined(item.object.parent_id.dbid)) {
                            for (var others = !0, i = 0, nb = rootFacets.length; nb > i; i++) inFacet(rootFacets[i], item.object) && (addItem(items, rootFacets[i].prefix, rootFacets[i].name, rootFacets[i].name, item), 
                            others = !1);
                            others && addOther(items, item);
                        }
                    }
                    return items;
                }
                for (var facetIdx = rootFacetIdx + 1; facetIdx < parentFilterFacets.length; facetIdx++) if ("biblio" == parentFilterFacets[facetIdx].key) {
                    if (a4p.isUndefined(parentFilterFacets[facetIdx].value)) {
                        for (var objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) addOther(items, parentObjects[objectIdx]);
                        return items;
                    }
                    for (var found = !1, i = 0, nb = rootFacet.facets_ids.length; nb > i; i++) if (!a4p.isUndefined(rootFacet.facets_ids[i].dbid)) {
                        var subFacet = srvData.getObject(rootFacet.facets_ids[i].dbid);
                        if (!a4p.isUndefined(subFacet) && subFacet.name == parentFilterFacets[facetIdx].value) {
                            rootFacet = subFacet, found = !0;
                            break;
                        }
                    }
                    if (!found) {
                        for (var objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) addOther(items, parentObjects[objectIdx]);
                        return items;
                    }
                }
                for (var i = 0, nb = rootFacet.facets_ids.length; nb > i; i++) if (!a4p.isUndefined(rootFacet.facets_ids[i].dbid)) {
                    var subFacet = srvData.getObject(rootFacet.facets_ids[i].dbid);
                    a4p.isUndefined(subFacet) || addKey(items, subFacet.prefix, subFacet.name, subFacet.name);
                }
                for (var objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                    var item = parentObjects[objectIdx];
                    if ("Facet" != item.object.a4p_type || item.object.parent_id.dbid != rootFacet.id.dbid) {
                        for (var i = 0, nb = rootFacet.facets_ids.length; nb > i; i++) if (!a4p.isUndefined(rootFacet.facets_ids[i].dbid)) {
                            var subFacet = srvData.getObject(rootFacet.facets_ids[i].dbid);
                            a4p.isUndefined(subFacet) || inFacet(subFacet, item.object) && addItem(items, subFacet.prefix, subFacet.name, subFacet.name, item);
                        }
                        inRootFacet(rootFacet, item.object) && addOther(items, item);
                    }
                }
                return items;
            }
        }, this.srvData = srvData, this.srvLocale = srvLocale, this.srvConfig = srvConfig, 
        this.definedFacetKeyes = [], this.definedOrganizers = {}, this.ascendingOrder = !0, 
        this.caseSensitive = !1, this.filterQuery = "", this.filterFacets = [], this.lastFacetKey = "", 
        this.rootItems = [], this.queryItems = [], this.items = {
            keyes: [],
            lists: {},
            others: []
        };
        var self = this;
        this.srvData.addListenerOnUpdate(function() {
            self.updateItems();
        });
    }
    return Service.prototype.createSameCompanyOrganizer = function(companyDbid) {
        var account = this.srvData.getObject(companyDbid), companyName = a4p.isDefined(account) ? this.srvConfig.getItemName(account) : this.srvLocale.translations.htmlFacetName.sameCompany;
        return {
            key: "sameCompany",
            icon: "building-o",
            keepValue: function() {
                return !0;
            },
            keepActive: function() {
                return !0;
            },
            filter: function(parentObjects) {
                for (var items = {
                    keyes: [],
                    lists: {},
                    others: []
                }, objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                    var item = parentObjects[objectIdx];
                    item.object.id.dbid == companyDbid ? addItem(items, "", companyName, companyName, item) : a4p.isDefined(item.object.account_id) && item.object.account_id.dbid == companyDbid ? addItem(items, "", companyName, companyName, item) : addOther(items, item);
                }
                return items;
            }
        };
    }, Service.prototype.createSameManagerOrganizer = function(managerDbid) {
        var contact = this.srvData.getObject(managerDbid), managerName = a4p.isDefined(contact) ? this.srvConfig.getItemName(contact) : this.srvLocale.translations.htmlFacetName.sameManager;
        return {
            key: "sameManager",
            icon: "user",
            keepValue: function() {
                return !0;
            },
            keepActive: function() {
                return !0;
            },
            filter: function(parentObjects) {
                for (var items = {
                    keyes: [],
                    lists: {},
                    others: []
                }, objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                    var item = parentObjects[objectIdx];
                    item.object.id.dbid == managerDbid ? addItem(items, "", managerName, managerName, item) : a4p.isDefined(item.object.manager_id) && item.object.manager_id.dbid == managerDbid ? addItem(items, "", managerName, managerName, item) : addOther(items, item);
                }
                return items;
            }
        };
    }, Service.prototype.createSameTeamOrganizer = function(managerDbid) {
        var contact = this.srvData.getObject(managerDbid), managerName = a4p.isDefined(contact) ? this.srvConfig.getItemName(contact) : this.srvLocale.translations.htmlFacetName.sameTeam;
        return {
            key: "sameTeam",
            icon: "group",
            keepValue: function() {
                return !0;
            },
            keepActive: function() {
                return !0;
            },
            filter: function(parentObjects) {
                for (var items = {
                    keyes: [],
                    lists: {},
                    others: []
                }, objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                    var item = parentObjects[objectIdx];
                    item.object.id.dbid == managerDbid ? addItem(items, "", managerName, managerName, item) : a4p.isDefined(item.object.manager_id) && item.object.manager_id.dbid == managerDbid ? addItem(items, "", managerName, managerName, item) : addOther(items, item);
                }
                return items;
            }
        };
    }, Service.prototype.createEventAttendeesOrganizer = function(attendeesList) {
        var facetName = this.srvLocale.translations.htmlFacetName.eventAttendees;
        return {
            key: "eventAttendees",
            icon: "coffee",
            keepValue: function() {
                return !0;
            },
            keepActive: function() {
                return !0;
            },
            filter: function(parentObjects) {
                for (var items = {
                    keyes: [],
                    lists: {},
                    others: []
                }, objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                    for (var item = parentObjects[objectIdx], found = !1, i = 0; i < attendeesList.length; i++) if (attendeesList[i].relation_id.dbid == item.object.id.dbid) {
                        var event = this.srvData.getObject(attendeesList[i].event_id.dbid), eventName = a4p.isDefined(event) ? this.srvConfig.getItemName(event) : facetName;
                        addItem(items, "", eventName, eventName, item), found = !0;
                    }
                    found || addOther(items, item);
                }
                return items;
            }
        };
    }, Service.prototype.createEventAttachmentsOrganizer = function(attachmentsList) {
        var facetName = this.srvLocale.translations.htmlFacetName.eventAttachments;
        return {
            key: "eventAttachments",
            icon: "file-text-alt",
            keepValue: function() {
                return !0;
            },
            keepActive: function() {
                return !0;
            },
            filter: function(parentObjects) {
                for (var items = {
                    keyes: [],
                    lists: {},
                    others: []
                }, objectIdx = 0, objectNb = parentObjects.length; objectNb > objectIdx; objectIdx++) {
                    for (var item = parentObjects[objectIdx], found = !1, i = 0; i < attachmentsList.length; i++) if (attachmentsList[i].id.dbid == item.object.id.dbid) {
                        addItem(items, "", facetName, facetName, item), found = !0;
                        break;
                    }
                    found || addOther(items, item);
                }
                return items;
            }
        };
    }, Service.prototype.addPossibleOrganizerFacet = function(organizer) {
        a4p.isUndefined(this.definedOrganizers[organizer.key]) && this.definedFacetKeyes.push(organizer.key), 
        this.definedOrganizers[organizer.key] = organizer, "" == this.lastFacetKey && this.setFacet(organizer.key);
    }, Service.prototype.setFacet = function(facetKey) {
        var updateFromLevel = -1;
        "" == this.lastFacetKey ? (this.lastFacetKey = facetKey, updateFromLevel = -1) : (this.lastFacetKey = facetKey, 
        updateFromLevel = this.filterFacets.length), this.isFacetActivable(facetKey) || (this.lastFacetKey = this.definedFacetKeyes[0]), 
        this.updateItems(updateFromLevel);
    }, Service.prototype.addFacet = function(facetKey, title, value) {
        var updateFromLevel = -1;
        this.lastFacetKey != facetKey && ("" == this.lastFacetKey ? (this.lastFacetKey = facetKey, 
        updateFromLevel = -1) : (this.lastFacetKey = facetKey, updateFromLevel = this.filterFacets.length)), 
        this.filterFacets.push(a4p.isDefined(value) ? {
            key: facetKey,
            title: title,
            value: value,
            items: this.items.lists[value]
        } : {
            key: facetKey,
            title: title,
            value: value,
            items: this.items.others
        });
        for (var facetIdx = this.filterFacets.length - 1; facetIdx >= 0; facetIdx--) {
            var filterFacet = this.filterFacets[facetIdx], organizer = this.definedOrganizers[filterFacet.key];
            a4p.isDefined(organizer) && a4p.isDefined(organizer.keepValue) && (organizer.keepValue(filterFacet.title, filterFacet.value, this.filterFacets.slice(0, facetIdx)) || (this.filterFacets.splice(facetIdx, 1), 
            updateFromLevel >= facetIdx && (updateFromLevel = facetIdx - 1)));
        }
        this.isFacetActivable(facetKey) || (this.lastFacetKey = this.definedFacetKeyes[0]), 
        this.updateItems(updateFromLevel);
    }, Service.prototype.removeFacet = function(facetIdx) {
        var updateFromLevel = facetIdx - 1;
        this.filterFacets.splice(facetIdx, 1);
        for (var i = this.filterFacets.length - 1; i >= 0; i--) {
            var filterFacet = this.filterFacets[i], organizer = this.definedOrganizers[filterFacet.key];
            a4p.isDefined(organizer) && a4p.isDefined(organizer.keepValue) && (organizer.keepValue(filterFacet.title, filterFacet.value, this.filterFacets.slice(0, i)) || (this.filterFacets.splice(i, 1), 
            updateFromLevel >= i && (updateFromLevel = i - 1)));
        }
        this.filterFacets.length > 0 && (this.lastFacetKey = this.getFacet(this.filterFacets.length - 1).key), 
        "" != this.lastFacetKey && this.isFacetActivable(this.lastFacetKey) || (this.lastFacetKey = this.definedFacetKeyes[0]), 
        this.updateItems(updateFromLevel);
    }, Service.prototype.removeLastFacet = function() {
        this.filterFacets.length > 0 && this.removeFacet(this.filterFacets.length - 1);
    }, Service.prototype.clearOrRemoveFacet = function(doClear, removeIndex) {
        doClear ? this.clear() : this.removeFacet(removeIndex);
    }, Service.prototype.getFacet = function(facetIdx) {
        return this.filterFacets[facetIdx];
    }, Service.prototype.getFirstFacet = function() {
        return this.filterFacets.length > 0 ? this.getFacet(0) : null;
    }, Service.prototype.getFirstFacetKey = function() {
        return this.filterFacets.length > 0 ? this.getFacet(0).key : "";
    }, Service.prototype.getFirstFacetValue = function() {
        return this.filterFacets.length > 0 ? this.getFacet(0).value : "";
    }, Service.prototype.getFirstFacetTitle = function() {
        return this.filterFacets.length > 0 ? this.getFacet(0).title : "";
    }, Service.prototype.isFirstFacetAnObjectType = function() {
        return this.filterFacets.length > 0 ? c4p.Model.allTypes.indexOf(this.getFirstFacet().value) >= 0 : !1;
    }, Service.prototype.getLastFacet = function() {
        return this.filterFacets.length > 0 ? this.getFacet(this.filterFacets.length - 1) : null;
    }, Service.prototype.getLastFacetKey = function() {
        return this.filterFacets.length > 0 ? this.getFacet(this.filterFacets.length - 1).key : "";
    }, Service.prototype.getLastFacetValue = function() {
        return this.filterFacets.length > 0 ? this.getFacet(this.filterFacets.length - 1).value : "";
    }, Service.prototype.getLastFacetTitle = function() {
        return this.filterFacets.length > 0 ? this.getFacet(this.filterFacets.length - 1).title : "";
    }, Service.prototype.isLastFacetAnObjectType = function() {
        return this.filterFacets.length > 0 ? c4p.Model.allTypes.indexOf(this.getLastFacet().value) >= 0 : !1;
    }, Service.prototype.isFacetActivable = function(facetKey) {
        var organizer = this.definedOrganizers[facetKey];
        return a4p.isDefined(organizer) && a4p.isDefined(organizer.keepActive) ? organizer.keepActive(this.filterFacets) : !1;
    }, Service.prototype.isFacetAnObjectType = function(value) {
        return c4p.Model.allTypes.indexOf(value) >= 0;
    }, Service.prototype.toggleOrder = function() {
        this.ascendingOrder = !this.ascendingOrder, this.updateItems(0);
    }, Service.prototype.toggleCaseSensitive = function() {
        this.caseSensitive = !this.caseSensitive, this.updateItems(0);
    }, Service.prototype.setFilterQuery = function(filterQuery) {
        this.filterQuery = filterQuery, this.updateItems(0);
    }, Service.prototype.clear = function() {
        this.ascendingOrder = !0, this.caseSensitive = !1, this.filterQuery = "", this.filterFacets = [], 
        this.lastFacetKey = "", this.queryItems = [], this.items = {
            keyes: [],
            lists: {},
            others: []
        }, this.definedFacetKeyes.length && (this.lastFacetKey = this.definedFacetKeyes[0], 
        this.updateItems(0));
    }, Service.prototype.updateItems = function(from) {
        "" != this.lastFacetKey && (a4p.isUndefined(from) && (from = -1), 0 > from && this.updateRootItems(), 
        0 >= from && (this.queryItems = this.queryFilter(this.rootItems, this.filterQuery, this.caseSensitive), 
        this.sortItems(this.queryItems, this.ascendingOrder, this.caseSensitive)), this.applyFilterFacets(from), 
        this.updateFinalItems());
    }, Service.prototype.updateRootItems = function() {
        this.rootItems = [];
        for (var typeIdx = 0; typeIdx < c4p.Model.objectTypes.length; typeIdx++) for (var type = c4p.Model.objectTypes[typeIdx], i = 0, nb = this.srvData.currentItems[type].length; nb > i; i++) this.rootItems.push({
            object: this.srvData.currentItems[type][i]
        });
    }, Service.prototype.applyFilterFacets = function(from) {
        if (a4p.isUndefined(from) && (from = 0), 0 > from && (from = 0), from < this.filterFacets.length) for (var parentItems = 0 >= from ? this.queryItems : this.filterFacets[from - 1].items, facetIdx = from; facetIdx < this.filterFacets.length; facetIdx++) this.applyFilterFacet(this.definedOrganizers, parentItems, this.filterFacets.slice(0, facetIdx), this.filterFacets[facetIdx]), 
        parentItems = this.filterFacets[facetIdx].items;
    }, Service.prototype.updateFinalItems = function() {
        var parentItems = this.filterFacets.length <= 0 ? this.queryItems : this.filterFacets[this.filterFacets.length - 1].items;
        this.items = this.applyFacet(this.definedOrganizers, parentItems, this.filterFacets, this.lastFacetKey), 
        this.sortKeyes(this.items.keyes, this.ascendingOrder, this.caseSensitive);
    }, Service.prototype.applyFilterFacet = function(definedOrganizers, parentItems, parentFilterFacets, filterFacet) {
        var items = [], facetKey = filterFacet.key, facetValue = filterFacet.value, organizer = definedOrganizers[facetKey];
        if (a4p.isDefined(organizer.filter)) {
            var objectList = organizer.filter(parentItems, parentFilterFacets);
            filterFacet.items = a4p.isUndefined(facetValue) ? objectList.others : objectList.lists[facetValue], 
            a4p.isUndefined(filterFacet.items) && (filterFacet.items = []);
        } else {
            for (var i = 0, nb = parentItems.length; nb > i; i++) {
                var item = parentItems[i];
                items.push(item);
            }
            filterFacet.items = items;
        }
    }, Service.prototype.applyFacet = function(definedOrganizers, parentItems, parentFilterFacets, facetKey) {
        var objectList = {
            keyes: [],
            lists: {},
            others: []
        }, organizer = definedOrganizers[facetKey];
        if (a4p.isDefined(organizer.filter)) objectList = organizer.filter(parentItems, parentFilterFacets); else for (var i = 0, nb = parentItems.length; nb > i; i++) addOther(objectList, parentItems[i]);
        return objectList;
    }, Service.prototype.sortKeyes = function(keyList, ascendingOrder, caseSensitive) {
        keyList.sort(caseSensitive ? ascendingOrder ? function(a, b) {
            return strCompare(a.prefix + a.title, b.prefix + b.title);
        } : function(a, b) {
            return strCompare(b.prefix + b.title, a.prefix + a.title);
        } : ascendingOrder ? function(a, b) {
            return strCompare((a.prefix + a.title).toLowerCase(), (b.prefix + b.title).toLowerCase());
        } : function(a, b) {
            return strCompare((b.prefix + b.title).toLowerCase(), (a.prefix + a.title).toLowerCase());
        });
    }, Service.prototype.sortItems = function(itemList, ascendingOrder, caseSensitive) {
        var self = this;
        itemList.sort(caseSensitive ? ascendingOrder ? function(a, b) {
            var nameA = self.srvConfig.getItemName(a.object), nameB = self.srvConfig.getItemName(b.object);
            return strCompare(nameA, nameB);
        } : function(a, b) {
            var nameA = self.srvConfig.getItemName(a.object), nameB = self.srvConfig.getItemName(b.object);
            return strCompare(nameB, nameA);
        } : ascendingOrder ? function(a, b) {
            var nameA = self.srvConfig.getItemName(a.object).toLowerCase(), nameB = self.srvConfig.getItemName(b.object).toLowerCase();
            return strCompare(nameA, nameB);
        } : function(a, b) {
            var nameA = self.srvConfig.getItemName(a.object).toLowerCase(), nameB = self.srvConfig.getItemName(b.object).toLowerCase();
            return strCompare(nameB, nameA);
        });
    }, Service.prototype.queryFilter = function(itemList, query, caseSensitive) {
        query = query || "";
        for (var words = query.split(/\s/), filteredList = [], j = 0; j < itemList.length; j++) {
            for (var item = itemList[j], acceptItem = !0, i = 0; i < words.length; i++) {
                var word = words[i];
                caseSensitive || (word = word.toLowerCase());
                var acceptWord = !1;
                for (var k in item.object) if (item.object.hasOwnProperty(k)) {
                    var attr = item.object[k];
                    if ("string" == typeof attr && (caseSensitive || (attr = attr.toLowerCase()), attr.indexOf(word) >= 0)) {
                        acceptWord = !0;
                        break;
                    }
                }
                if (!acceptWord) {
                    acceptItem = !1;
                    break;
                }
            }
            acceptItem && filteredList.push(item);
        }
        return filteredList;
    }, Service;
}(), SrvFileTransfer = function() {
    function Service(deferService, httpService, srvFileStorage, $rootScope) {
        this.defer = deferService, this.http = httpService, this.srvFileStorage = srvFileStorage, 
        this.rootScope = $rootScope;
    }
    function transferErrorMessage(fileTransferError) {
        var msg = "";
        switch (fileTransferError.code) {
          case FileTransferError.FILE_NOT_FOUND_ERR:
            msg = "File not found";
            break;

          case FileTransferError.CONNECTION_ERR:
            msg = "Connection error";
            break;

          case FileTransferError.INVALID_URL_ERR:
            msg = "Invalid URL error";
            break;

          default:
            msg = "Unknown FileTransferError code (code= " + fileTransferError.code + ", type=" + typeof fileTransferError + ")";
        }
        return msg;
    }
    return Service.prototype.sendFile = function(filePath, options, url, params, headers, timeout) {
        if ("undefined" == typeof url || null == url) throw new Error("send requires a url parameter");
        "undefined" == typeof params && (params = null), "undefined" == typeof headers && (headers = null), 
        "undefined" == typeof timeout && (timeout = null);
        var self = this, deferred = this.defer.defer(), promise = deferred.promise;
        if (null == params && (params = {}), ("undefined" == typeof params.time || null == params.time) && (params.time = new Date().getTime()), 
        ("undefined" == typeof params.cache || null == params.cache) && (params.cache = !1), 
        a4p.isDefinedAndNotNull(FileTransfer)) {
            var onTransferSuccessFct = function(fileUploadResult) {
                a4p.safeApply(self.rootScope, function() {
                    var data = fileUploadResult.response;
                    if ("string" == typeof data) {
                        var JSON_START = /^\s*(\[|\{[^\{])/, JSON_END = /[\}\]]\s*$/, PROTECTION_PREFIX = /^\)\]\}',?\n/;
                        data = data.replace(PROTECTION_PREFIX, ""), JSON_START.test(data) && JSON_END.test(data) && (data = a4p.Json.string2Object(data));
                    }
                    deferred.resolve({
                        data: data,
                        status: fileUploadResult.responseCode
                    });
                });
            }, onTransferFailureFct = function(fileTransferError) {
                var msg = "File upload failure for " + filePath + " : " + transferErrorMessage(fileTransferError) + "(source=" + fileTransferError.source + ", target=" + fileTransferError.target + ")";
                a4p.safeApply(self.rootScope, function() {
                    a4p.ErrorLog.log("srvFileTransfer", msg), deferred.reject({
                        data: msg,
                        status: "error"
                    });
                });
            }, onGetFileSuccessFct = function(fileEntry) {
                var uploadOptions = new FileUploadOptions();
                uploadOptions.chunkedMode = !1, uploadOptions.mimeType = "multipart/form-data", 
                uploadOptions.fileKey = "file", uploadOptions.fileName = "noname";
                for (var optionKey in options) options.hasOwnProperty(optionKey) && (uploadOptions[optionKey] = options[optionKey]);
                if (null != params) {
                    var optionsParams = {};
                    for (var paramKey in params) params.hasOwnProperty(paramKey) && ("object" == typeof params[paramKey] && (params[paramKey] = a4p.Json.object2String(params[paramKey])), 
                    optionsParams[paramKey] = params[paramKey]);
                    uploadOptions.params = optionsParams;
                }
                var ft = new FileTransfer(), trustAllHosts = !0, feUrl = fileEntry.fullPath;
                a4p.isDefined(fileEntry.toNativeURL) && (feUrl = fileEntry.toNativeURL());
                var destUri = url;
                a4p.InternalLog.log("srvFileTransfer", "File uploading " + feUrl + " to " + destUri), 
                ft.upload(feUrl, destUri, onTransferSuccessFct, onTransferFailureFct, uploadOptions, trustAllHosts);
            }, onGetFileFailureFct = function(message) {
                var msg = "File get failure for " + filePath + " : " + message;
                a4p.safeApply(self.rootScope, function() {
                    a4p.ErrorLog.log("srvFileTransfer", msg), deferred.reject({
                        data: msg,
                        status: "error"
                    });
                });
            };
            this.srvFileStorage.getFile(filePath, onGetFileSuccessFct, onGetFileFailureFct);
        } else {
            var fileName = c4p.Model.fileLastname(filePath);
            null != options ? (("undefined" == typeof options.fileKey || null == options.fileKey) && (options.fileKey = "file"), 
            ("undefined" == typeof options.fileName || null == options.fileName) && (options.fileName = fileName)) : (options = {}, 
            options.fileKey = "file", options.fileName = fileName);
            var onReadFileSuccessFct = function(data) {
                var fullMd5 = calcMD5(data), sendPartFile = function(params, idx, nb, nbTry) {
                    params.idx = idx, params.nb = nb;
                    var trunkSize = Math.ceil(data.length / nb), begOffset = (idx - 1) * trunkSize;
                    begOffset + trunkSize > data.length && (trunkSize = data.length - begOffset);
                    for (var partData = data.substr(begOffset, trunkSize), partMd5 = calcMD5(partData), n = 1, boundary = "----srvPartFileTransferBoundary"; partData.indexOf(boundary + n) >= 0; ) n++;
                    boundary += n, null == headers && (headers = {}), headers["Content-Type"] = "multipart/form-data; boundary=" + boundary;
                    var body = "";
                    body += "--" + boundary + '\r\nContent-Disposition: form-data; name="' + encodeURIComponent(options.fileKey) + '"; filename="' + encodeURIComponent(options.fileName) + '"\r\nContent-Type: ' + c4p.Model.fileFirstMimetype(options.fileName) + "\r\n\r\n" + partData + "\r\n", 
                    body += "--" + boundary + "--\r\n";
                    for (var len = body.length, byteArray = new Uint8Array(len), i = 0; len > i; i++) byteArray[i] = 255 & body.charCodeAt(i);
                    for (var k in params) params.hasOwnProperty(k) && params[k] instanceof Array && (params[k] = a4p.Json.object2String(params[k]));
                    var urlData = {
                        method: "POST",
                        url: url,
                        headers: headers,
                        params: params,
                        data: byteArray,
                        transformRequest: angular.identity
                    };
                    null != timeout && (urlData.timeout = timeout), a4p.InternalLog.log("srvFileTransfer", "File uploading " + filePath + " to " + url);
                    var fctOnHttpSuccess = function(response) {
                        nb > 1 ? nb > idx ? partMd5 == response.data.md5 ? (a4p.InternalLog.log("srvFileTransfer", "File upload success for " + filePath + " " + idx + "/" + nb + " : (status=" + response.status + ") response=" + a4pDumpData(response.data, 1)), 
                        idx++, sendPartFile(params, idx, nb, 1)) : 5 > nbTry ? (nbTry++, a4p.ErrorLog.log("srvFileTransfer", "File upload retried for " + filePath + " " + idx + "/" + nb + " : md5 mismatch, client md5=" + partMd5 + ", server md5=" + response.data.md5), 
                        sendPartFile(params, idx, nb, nbTry)) : a4p.safeApply(self.rootScope, function() {
                            a4p.ErrorLog.log("srvFileTransfer", "File upload failure for " + filePath + " " + idx + "/" + nb + " : md5 mismatch, client md5=" + partMd5 + ", server md5=" + response.data.md5), 
                            deferred.reject({
                                data: "File upload failure for " + filePath + " : md5 mismatch => file integrity compromised",
                                status: "error"
                            });
                        }) : fullMd5 == response.data.md5 ? a4p.safeApply(self.rootScope, function() {
                            a4p.InternalLog.log("srvFileTransfer", "File upload success for " + filePath + " : (status=" + response.status + ") response=" + a4pDumpData(response.data, 1)), 
                            deferred.resolve(response);
                        }) : 5 > nbTry ? (nbTry++, a4p.ErrorLog.log("srvFileTransfer", "File upload retried for " + filePath + " " + idx + "/" + nb + " : md5 mismatch, client md5=" + fullMd5 + ", server md5=" + response.data.md5), 
                        sendPartFile(params, idx, nb, nbTry)) : a4p.safeApply(self.rootScope, function() {
                            a4p.ErrorLog.log("srvFileTransfer", "File upload failure for " + filePath + " " + idx + "/" + nb + " : md5 mismatch, client md5=" + fullMd5 + ", server md5=" + response.data.md5), 
                            deferred.reject({
                                data: "File upload failure for " + filePath + " : md5 mismatch => file integrity compromised",
                                status: "error"
                            });
                        }) : a4p.safeApply(self.rootScope, function() {
                            a4p.InternalLog.log("srvFileTransfer", "File upload success for " + filePath + " : (status=" + response.status + ") response=" + a4pDumpData(response.data, 1)), 
                            deferred.resolve(response);
                        });
                    }, fctOnHttpError = function(response) {
                        a4p.ErrorLog.log("srvFileTransfer", "File upload failure for " + filePath + " : (status=" + response.status + ") response=" + a4pDumpData(response.data, 1)), 
                        5 > nbTry ? (nbTry++, a4p.ErrorLog.log("srvFileTransfer", "File upload retried for " + filePath + " " + idx + "/" + nb + " : (status=" + response.status + ") response=" + a4pDumpData(response.data, 1)), 
                        sendPartFile(params, idx, nb, nbTry)) : a4p.safeApply(self.rootScope, function() {
                            a4p.ErrorLog.log("srvFileTransfer", "File upload failure for " + filePath + " " + idx + "/" + nb + " : (status=" + response.status + ") response=" + a4pDumpData(response.data, 1)), 
                            deferred.reject({
                                data: "File upload failure for " + filePath + " : (status=" + response.status + ") response=" + a4pDumpData(response.data, 1),
                                status: "error"
                            });
                        });
                    };
                    a4p.promiseWakeup(self.rootScope, self.http(urlData), fctOnHttpSuccess, fctOnHttpError);
                }, filePartSize = 1e4;
                if (data.length > filePartSize) {
                    var nb = Math.ceil(data.length / filePartSize);
                    sendPartFile(params, 1, nb, 1);
                } else sendPartFile(params, 1, 1, 1);
            }, onReadFileFailureFct = function(message) {
                var msg = "File read failure for " + filePath + " : " + message;
                a4p.safeApply(self.rootScope, function() {
                    a4p.ErrorLog.log("srvFileTransfer", msg), deferred.reject({
                        data: msg,
                        status: "error"
                    });
                });
            };
            this.srvFileStorage.readFileAsBinaryString(filePath, onReadFileSuccessFct, onReadFileFailureFct);
        }
        return promise;
    }, Service.prototype.recvFile = function(filePath, url, timeout) {
        if ("undefined" == typeof url || null == url) throw new Error("send requires a url parameter");
        "undefined" == typeof timeout && (timeout = null);
        var self = this, deferred = this.defer.defer(), promise = deferred.promise;
        if (a4p.isDefinedAndNotNull(FileTransfer)) {
            var onTransferSuccessFct = function(fileEntry) {
                console.log("success");
                var feUrl = fileEntry.fullPath;
                a4p.isDefined(fileEntry.toURL) && (feUrl = fileEntry.toURL()), a4p.InternalLog.log("srvFileTransfer", "File downloading sucess " + feUrl), 
                a4p.safeApply(self.rootScope, function() {
                    deferred.resolve({
                        data: "",
                        status: feUrl
                    });
                });
            }, onTransferFailureFct = function(fileTransferError) {
                console.log("error");
                var msg = "File download failure for " + filePath + " : " + transferErrorMessage(fileTransferError) + "(source=" + fileTransferError.source + ", target=" + fileTransferError.target + ")";
                a4p.safeApply(self.rootScope, function() {
                    a4p.ErrorLog.log("srvFileTransfer", msg), deferred.reject({
                        data: msg,
                        status: "error"
                    });
                });
            }, onCreateDirSuccessFct = function(fileEntry) {
                var ft = new FileTransfer(), trustAllHosts = !0, feUrl = fileEntry.fullPath;
                a4p.isDefined(fileEntry.toURL) && (feUrl = fileEntry.toURL()), ft.onprogress = function(progressEvent) {
                    if (a4p.InternalLog.log("srvFileTransfer", "Loading (" + url + ") :"), progressEvent.lengthComputable) {
                        var perc = Math.floor(progressEvent.loaded / progressEvent.total * 100);
                        a4p.InternalLog.log("srvFileTransfer", "" + perc + "% of " + progressEvent.total);
                    }
                    progressEvent.loaded == progressEvent.total && (console.log("done !"), onTransferSuccessFct(fileEntry));
                };
                var downloadFile = function() {
                    var srcUri = url;
                    a4p.InternalLog.log("srvFileTransfer", "File downloading from " + srcUri + " to " + feUrl), 
                    ft.download(srcUri, feUrl, function() {
                        a4p.ErrorLog.log("srvFileTransfer", "Download suppose to do not work, use onprogress instead ?");
                    }, onTransferFailureFct, trustAllHosts);
                };
                downloadFile();
            }, onCreateDirFailureFct = function(message) {
                var msg = "File directory creation failure for " + filePath + " : " + message;
                a4p.safeApply(self.rootScope, function() {
                    a4p.ErrorLog.log("srvFileTransfer", msg), deferred.reject({
                        data: msg,
                        status: "error"
                    });
                });
            };
            this.srvFileStorage.getOrNewFile(filePath, onCreateDirSuccessFct, onCreateDirFailureFct);
        } else {
            var fctOnWriteError = function(message) {
                var msg = "File write failure for " + filePath + " : " + message;
                a4p.safeApply(self.rootScope, function() {
                    a4p.ErrorLog.log("srvFileTransfer", msg), deferred.reject({
                        data: msg,
                        status: "error"
                    });
                });
            }, fctOnHttpSuccess = function(response) {
                var msg = "File download success for " + filePath + " : length=" + (null == response.data ? 0 : response.data.byteLength);
                a4p.InternalLog.log("srvFileTransfer", msg);
                var contentType = response.headers("Content-type");
                contentType && (contentType = contentType.split(";")[0]), contentType = contentType || "text/plain";
                var onWriteSuccessFct, blob = new Blob([ null == response.data ? "" : response.data ], {
                    type: contentType,
                    endings: "transparent"
                });
                onWriteSuccessFct = function(fileEntry) {
                    var msg = "File write success for " + filePath + " : URL=" + fileEntry.toNativeURL();
                    a4p.safeApply(self.rootScope, function() {
                        a4p.InternalLog.log("srvFileTransfer", msg), deferred.resolve({
                            data: "",
                            status: fileEntry.toNativeURL()
                        });
                    });
                }, self.srvFileStorage.writeFile(blob, filePath, onWriteSuccessFct, fctOnWriteError);
            }, fctOnHttpError = function(response) {
                var msg = "File download failure for " + filePath + " : response=" + (null == response.data ? "" : response.data) + " (status=" + response.status + ")";
                a4p.safeApply(self.rootScope, function() {
                    a4p.ErrorLog.log("srvFileTransfer", msg), deferred.reject({
                        data: msg,
                        status: "error"
                    });
                });
            }, urlData = {
                method: "GET",
                url: url,
                transformResponse: angular.identity,
                responseType: "arraybuffer"
            };
            null != timeout && (urlData.timeout = timeout), a4p.InternalLog.log("srvFileTransfer", "File downloading from ... " + url + " to " + filePath), 
            a4p.promiseWakeup(this.rootScope, this.http(urlData), fctOnHttpSuccess, fctOnHttpError);
        }
        return promise;
    }, Service;
}(), SrvGuider = function() {
    function Service(srvLocalStorage, srvLocale) {
        this.srvLocalStorage = srvLocalStorage, this.srvLocale = srvLocale, this.initDone = !1, 
        this.guiderScreens = [];
    }
    return Service.prototype.init = function() {
        this.initDone || (this.initDone = !0, a4p.InternalLog.log("guiderService", "initialized"));
    }, Service.prototype.hasToSee = function(page, slide) {
        if (!this.initDone) return !1;
        var nav = page + "-" + slide;
        return "navigation-calendar" == nav ? !this.srvLocalStorage.get("C4P_GuiderSeen_" + nav) : "navigation-events" == nav ? !this.srvLocalStorage.get("C4P_GuiderSeen_" + nav) : "meeting-meeting" == nav ? !this.srvLocalStorage.get("C4P_GuiderSeen_" + nav) : !1;
    }, Service.prototype.screens = function(page, slide) {
        if (!this.initDone) return null;
        var nav = page + "-" + slide, screens = [];
        return "navigation-calendar" == nav ? screens = [ {
            img: "./img/guider/calendar_01.png",
            text: this.srvLocale.translations.htmlTextGuiderCalendar
        } ] : "navigation-events" == nav ? screens = [ {
            img: "./img/guider/event_01.png",
            text: this.srvLocale.translations.htmlTextGuiderEvent
        } ] : "meeting-meeting" == nav && (screens = [ {
            img: "./img/guider/meeting_01.png",
            text: this.srvLocale.translations.htmlTextGuiderMeeting
        } ]), screens;
    }, Service.prototype.hasSeen = function(page, slide) {
        if (this.initDone) {
            var hasSeen = !0, nav = page + "-" + slide;
            this.srvLocalStorage.set("C4P_GuiderSeen_" + nav, hasSeen);
        }
    }, Service;
}(), SrvLink = function() {
    function Service(srvData, srvNav, srvLocale) {
        this.srvData = srvData, this.srvNav = srvNav, this.srvLocale = srvLocale;
    }
    return Service.prototype.hasNamedLinkTo = function(fromType, fromLink, fromObject, toObject) {
        return fromObject.a4p_type != fromType ? !1 : "Event" == fromType && "attended" == fromLink ? !!this.srvData.getAttachment("Attendee", toObject, fromObject) : "Event" == fromType && "attendee" == fromLink ? !!this.srvData.getAttachment("Attendee", toObject, fromObject) : "Event" == fromType && "attachee" == fromLink ? !!this.srvData.getAttachment("Attachee", toObject, fromObject) : "Contact" == fromType && "attendee" == fromLink ? !!this.srvData.getAttachment("Attendee", fromObject, toObject) : "Contact" == fromType && "attended" == fromLink ? !!this.srvData.getAttachment("Attendee", fromObject, toObject) : "Document" == fromType && "attached" == fromLink ? !!this.srvData.getAttachment("Attachee", fromObject, toObject) : !!this.srvData.hasDirectNamedLinkTo(fromType, fromLink, fromObject, toObject);
    }, Service.prototype.linkItemToObjects = function(fromLink, fromObject, toType, toObjects) {
        if (!(toObjects.length <= 0)) if ("Contact" == toType && "attended" == fromLink) for (var i = 0, nb = toObjects.length; nb > i; i++) this.srvData.newAndSaveAttachment("Attendee", toObjects[i], fromObject); else if ("Contact" == toType && "attendee" == fromLink) for (var i = 0, nb = toObjects.length; nb > i; i++) this.srvData.newAndSaveAttachment("Attendee", toObjects[i], fromObject); else if ("Event" == toType && "attendee" == fromLink) for (var i = 0, nb = toObjects.length; nb > i; i++) this.srvData.newAndSaveAttachment("Attendee", fromObject, toObjects[i]); else if ("Event" == toType && "attended" == fromLink) for (var i = 0, nb = toObjects.length; nb > i; i++) this.srvData.newAndSaveAttachment("Attendee", fromObject, toObjects[i]); else if ("Document" == toType && "attachee" == fromLink) for (var i = 0, nb = toObjects.length; nb > i; i++) this.srvData.newAndSaveAttachment("Attachee", toObjects[i], fromObject); else if ("Event" == toType && "attached" == fromLink) for (var i = 0, nb = toObjects.length; nb > i; i++) this.srvData.newAndSaveAttachment("Attachee", fromObject, toObjects[i]); else "Document" == toType && "child" == fromLink ? this.srvData.linkAllDocumentsToItem(toObjects, fromObject) : "Document" == fromObject.a4p_type && "parent" == fromLink ? this.srvData.linkDocumentToAllObjects(fromObject, toObjects) : this.srvData.linkToObjects(fromLink, fromObject, toType, toObjects);
    }, Service.prototype.linkObjectsToItem = function(fromType, fromLink, fromObjects, toObject) {
        if (!(fromObjects.length <= 0)) if ("attended" == fromLink) if ("Contact" == fromType) for (var i = 0, nb = fromObjects.length; nb > i; i++) this.srvData.newAndSaveAttachment("Attendee", fromObjects[i], toObject); else for (var i = 0, nb = fromObjects.length; nb > i; i++) this.srvData.newAndSaveAttachment("Attendee", toObject, fromObjects[i]); else if ("attendee" == fromLink) if ("Contact" == fromType) for (var i = 0, nb = fromObjects.length; nb > i; i++) this.srvData.newAndSaveAttachment("Attendee", fromObjects[i], toObject); else for (var i = 0, nb = fromObjects.length; nb > i; i++) this.srvData.newAndSaveAttachment("Attendee", toObject, fromObjects[i]); else if ("attachee" == fromLink) for (var i = 0, nb = fromObjects.length; nb > i; i++) this.srvData.newAndSaveAttachment("Attachee", toObject, fromObjects[i]); else if ("attached" == fromLink) for (var i = 0, nb = fromObjects.length; nb > i; i++) this.srvData.newAndSaveAttachment("Attachee", fromObjects[i], toObject); else "Document" == toObject.a4p_type && "child" == fromLink ? this.srvData.linkDocumentToAllObjects(toObject, fromObjects) : "Document" == fromType && "parent" == fromLink ? this.srvData.linkAllDocumentsToItem(fromObjects, toObject) : this.srvData.linkToItem(fromType, fromLink, fromObjects, toObject);
    }, Service.prototype.unlinkObjectsFromItem = function(fromType, fromLink, fromObjects, toObject) {
        if ("attended" == fromLink) if ("Contact" == fromType) for (var i = 0, nb = fromObjects.length; nb > i; i++) this.srvData.delAndSaveAttachment("Attendee", fromObjects[i], toObject); else for (var i = 0, nb = fromObjects.length; nb > i; i++) this.srvData.delAndSaveAttachment("Attendee", toObject, fromObjects[i]); else if ("attendee" == fromLink) if ("Contact" == fromType) for (var i = 0, nb = fromObjects.length; nb > i; i++) this.srvData.delAndSaveAttachment("Attendee", fromObjects[i], toObject); else for (var i = 0, nb = fromObjects.length; nb > i; i++) this.srvData.delAndSaveAttachment("Attendee", toObject, fromObjects[i]); else if ("attached" == fromLink) for (var i = 0, nb = fromObjects.length; nb > i; i++) this.srvData.delAndSaveAttachment("Attachee", fromObjects[i], toObject); else if ("attachee" == fromLink) for (var i = 0, nb = fromObjects.length; nb > i; i++) this.srvData.delAndSaveAttachment("Attachee", toObject, fromObjects[i]); else this.srvData.unlinkFromItem(fromType, fromLink, fromObjects, toObject);
    }, Service;
}(), SrvLoad = function() {
    function Service() {
        this.status = "", this.error = "", this.show = !0;
    }
    return Service.prototype.setStatus = function(status) {
        this.status = status;
    }, Service.prototype.setError = function(error) {
        this.error = error;
    }, Service.prototype.setLoaded = function() {
        this.show = !1;
    }, Service;
}(), SrvLocale = function() {
    function Service(httpService, srvLoad, srvLocalStorage) {
        this.http = httpService, this.srvLoad = srvLoad, this.srvLocalStorage = srvLocalStorage, 
        this.localeDir = "", this.initDone = !1, clear(this);
    }
    function clear(self) {
        self.translations = c4p.Locale.en, self.currency = "â¬", self.langs = [ {
            code: "en",
            title: "English"
        }, {
            code: "fr",
            title: "Français"
        } ], self.lang = self.langs[0], self.language = "en";
        var langs = getLangParts(self.lang.code);
        self.lang1 = langs[0], self.lang2 = langs[1], self.lang3 = langs[2], self.numberPatterns = [ {
            decimalSeparator: ".",
            groupSeparator: ",",
            decimalPattern: {
                minInt: 1,
                minFrac: 0,
                maxFrac: 3,
                posPre: "",
                posSuf: "",
                negPre: "-",
                negSuf: "",
                gSize: 3,
                lgSize: 3
            },
            currencyPattern: {
                minInt: 1,
                minFrac: 2,
                maxFrac: 2,
                posPre: "¤",
                posSuf: "",
                negPre: "(¤",
                negSuf: ")",
                gSize: 3,
                lgSize: 3
            }
        }, {
            decimalSeparator: ",",
            groupSeparator: " ",
            decimalPattern: {
                minInt: 1,
                minFrac: 0,
                maxFrac: 3,
                posPre: "",
                posSuf: "",
                negPre: "-",
                negSuf: "",
                gSize: 3,
                lgSize: 3
            },
            currencyPattern: {
                minInt: 1,
                minFrac: 2,
                maxFrac: 2,
                posPre: "",
                posSuf: " ¤",
                negPre: "(",
                negSuf: " ¤)",
                gSize: 3,
                lgSize: 3
            }
        } ], self.numberPattern = self.numberPatterns[0], self.datetimePatterns = [ {
            month: "January,February,March,April,May,June,July,August,September,October,November,December".split(","),
            shortMonth: "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),
            day: "Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),
            shortDay: "Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(","),
            ampms: [ "AM", "PM" ],
            medium: "MMM d, y h:mm:ss a",
            "short": "M/d/yy h:mm a",
            fullDate: "EEEE, MMMM d, y",
            longDate: "MMMM d, y",
            mediumDate: "MMM d, y",
            shortDate: "M/d/yy",
            mediumTime: "h:mm:ss a",
            shortTime: "h:mm a"
        }, {
            month: "Janvier,Février,Mars,Avril,Mai,Juin,Juillet,Aout,Septembre,Octobre,Novembre,Décembre".split(","),
            shortMonth: "Jan,Fev,Mar,Avr,Mai,Jun,Jul,Aou,Sep,Oct,Nov,Dec".split(","),
            day: "Dimanche,Lundi,Mardi,Mercredi,Jeudi,Vendredi,Samedi".split(","),
            shortDay: "Dim,Lun,Mar,Mer,Jeu,Ven,Sam".split(","),
            ampms: [ "AM", "PM" ],
            medium: "d MMM y HH:mm:ss",
            "short": "d/M/yy HH:mm",
            fullDate: "EEEE, d MMMM y",
            longDate: "d MMMM y",
            mediumDate: "d MMM y",
            shortDate: "d/M/yy",
            mediumTime: "HH:mm:ss",
            shortTime: "HH:mm"
        } ], self.datetimePattern = self.datetimePatterns[0];
    }
    function getLangParts(code) {
        var s = code.toLowerCase();
        s = s.replace(/-/g, "_");
        var names = s.split("_"), max = names.length, lang1 = "", lang2 = "", lang3 = "";
        return max > 0 && (lang1 = names[0], lang2 = names[0], lang3 = names[0], max > 1 && (lang2 = lang2 + "_" + names[1], 
        lang3 = lang3 + "_" + names[1], max > 2 && (lang3 = lang3 + "_" + names[2]))), [ lang1, lang2, lang3 ];
    }
    function saveTranslations(self) {
        self.srvLocalStorage.set("Translations", self.translations);
    }
    function saveLanguage(self) {
        self.srvLocalStorage.set("Language", self.language);
    }
    function saveLang(self) {
        self.srvLocalStorage.set("Locale", self.lang), self.srvLocalStorage.set("NumberPattern", self.numberPattern), 
        self.srvLocalStorage.set("DatetimePattern", self.datetimePattern);
    }
    function saveCurrency(self) {
        self.srvLocalStorage.set("Currency", self.currency);
    }
    function formatDecimal(number, pattern, groupSep, decimalSep, fractionSize) {
        if (isNaN(number) || !isFinite(number)) return "";
        var isNegative = 0 > number;
        number = Math.abs(number);
        var numStr = number + "", formatedText = "", parts = [];
        if (-1 !== numStr.indexOf("e")) formatedText = numStr; else {
            var fractionLen = (numStr.split(".")[1] || "").length;
            "undefined" == typeof fractionSize && (fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac));
            var pow = Math.pow(10, fractionSize);
            number = Math.round(number * pow) / pow;
            var fraction = ("" + number).split("."), whole = fraction[0];
            fraction = fraction[1] || "";
            var pos = 0, lgroup = pattern.lgSize, group = pattern.gSize;
            if (whole.length >= lgroup + group) {
                pos = whole.length - lgroup;
                for (var i = 0; pos > i; i++) (pos - i) % group === 0 && 0 !== i && (formatedText += groupSep), 
                formatedText += whole.charAt(i);
            }
            for (i = pos; i < whole.length; i++) (whole.length - i) % lgroup === 0 && 0 !== i && (formatedText += groupSep), 
            formatedText += whole.charAt(i);
            for (;fraction.length < fractionSize; ) fraction += "0";
            fractionSize && (formatedText += decimalSep + fraction.substr(0, fractionSize));
        }
        return parts.push(isNegative ? pattern.negPre : pattern.posPre), parts.push(formatedText), 
        parts.push(isNegative ? pattern.negSuf : pattern.posSuf), parts.join("");
    }
    function dateGetter(name, size, offset, trim) {
        return function(date) {
            var value = date["get" + name]();
            return (offset > 0 || value > -offset) && (value += offset), 0 === value && -12 == offset && (value = 12), 
            a4pPadNumber(value, size, trim);
        };
    }
    function dateStrGetter(name, translateKey) {
        return function(date, datetimePattern) {
            var value = date["get" + name]();
            return datetimePattern[translateKey][value];
        };
    }
    function timeZoneGetter(date) {
        var offset = date.getTimezoneOffset();
        return a4pPadNumber(offset / 60, 2) + a4pPadNumber(Math.abs(offset % 60), 2);
    }
    function ampmGetter(date, datetimePattern) {
        return date.getHours() < 12 ? datetimePattern.ampms[0] : datetimePattern.ampms[1];
    }
    function jsonStringToDate(string) {
        var match;
        if (match = string.match(R_ISO8601_STR)) {
            var date = new Date(match[1], match[2] - 1, match[3], match[4] || 0, match[5] || 0, match[6] || 0, 0), tzHour = 0, tzMin = 0;
            return match[10] && (tzHour = Math.floor(match[10] + match[11]), tzMin = Math.floor(match[10] + match[12])), 
            date.setUTCFullYear(match[1]), (match[9] || match[10]) && date.setUTCHours((match[4] || 0) - tzHour), 
            date;
        }
        return string;
    }
    function formatDate(date, format, datetimePattern) {
        var fn, match, text = "";
        if (format = format || "mediumDate", format = datetimePattern[format] || format, 
        "string" == typeof date && (date = NUMBER_STRING.test(date) ? Math.floor(date) : jsonStringToDate(date)), 
        "number" == typeof date && (date = new Date(date)), "[object Date]" != toString.apply(date)) return date;
        for (;format; ) if (match = DATE_FORMATS_SPLIT.exec(format)) {
            var value = match[1];
            fn = DATE_FORMATS[value], text += fn ? fn(date, datetimePattern) : value.replace(/(^'|'$)/g, "").replace(/''/g, "'"), 
            format = match.pop();
        } else fn = DATE_FORMATS[format], text += fn ? fn(date, datetimePattern) : format.replace(/(^'|'$)/g, "").replace(/''/g, "'"), 
        format = null;
        return text;
    }
    Service.prototype.resetLocale = function() {
        clear(this), saveTranslations(this), saveLang(this), saveCurrency(this);
    }, Service.prototype.init = function() {
        if (!this.initDone) {
            this.translations = this.srvLocalStorage.get("Translations", this.translations), 
            this.language = this.srvLocalStorage.get("Language", this.language), this.lang = this.srvLocalStorage.get("Locale", this.lang), 
            this.numberPattern = this.srvLocalStorage.get("NumberPattern", this.numberPattern), 
            this.datetimePattern = this.srvLocalStorage.get("DatetimePattern", this.datetimePattern), 
            this.currency = this.srvLocalStorage.get("Currency", this.currency);
            var langs = getLangParts(this.lang.code);
            this.lang1 = langs[0], this.lang2 = langs[1], this.lang3 = langs[2], this.initDone = !0, 
            a4p.InternalLog.log("srvLocale", "initialized");
        }
    }, Service.prototype.setLocaleDir = function(localeDir) {
        this.localeDir = localeDir;
    }, Service.prototype.startLoading = function(callback) {
        var msg = this.translations.htmlTextInitializingLocale;
        a4p.InternalLog.log("srvLocale", msg), this.srvLoad.setStatus(msg), this.srvLoad.setError("");
        var self = this, onSuccess1 = function(response) {
            var msg = a4pFormat(self.translations.htmlMsgLoadLocaleReady, self.lang1);
            a4p.InternalLog.log("srvLocale", msg), self.srvLoad.setStatus(msg), self.srvLoad.setError(""), 
            self.setTranslations(response.data), callback();
        }, onFailure1 = function(response) {
            var msg = self.translations.htmlMsgLoadLocalePb;
            a4p.ErrorLog.log("srvLocale", msg), self.srvLoad.setStatus(msg), self.srvLoad.setError(response.data), 
            callback();
        };
        if (self.lang2 != self.lang1) {
            var onSuccess2 = function(response) {
                var msg = a4pFormat(self.translations.htmlMsgLoadLocaleReady, self.lang2);
                a4p.InternalLog.log("srvLocale", msg), self.srvLoad.setStatus(msg), self.srvLoad.setError(""), 
                self.setTranslations(response.data), callback();
            }, onFailure2 = function() {
                self.http.get(self.localeDir + "models/local_" + self.lang1 + ".json").then(onSuccess1, onFailure1);
            };
            if (self.lang3 != self.lang2) {
                var onSuccess3 = function(response) {
                    var msg = a4pFormat(self.translations.htmlMsgLoadLocaleReady, self.lang3);
                    a4p.InternalLog.log("srvLocale", msg), self.srvLoad.setStatus(msg), self.srvLoad.setError(""), 
                    self.setTranslations(response.data), callback();
                }, onFailure3 = function() {
                    self.http.get(self.localeDir + "models/local_" + self.lang2 + ".json").then(onSuccess2, onFailure2);
                };
                this.http.get(self.localeDir + "models/local_" + self.lang3 + ".json").then(onSuccess3, onFailure3);
            } else self.http.get(self.localeDir + "models/local_" + self.lang2 + ".json").then(onSuccess2, onFailure2);
        } else self.http.get(self.localeDir + "models/local_" + self.lang1 + ".json").then(onSuccess1, onFailure1);
    }, Service.prototype.setTranslations = function(translations) {
        this.translations = translations, saveTranslations(this);
    }, Service.prototype.setLanguage = function(language) {
        if (language = language.toLowerCase(), this.language != language) for (var langs = getLangParts(language), i = this.langs.length - 1; i >= 0; i--) if (this.langs[i].code == langs[2] || this.langs[i].code == langs[1] || this.langs[i].code == langs[0]) return this.language = language, 
        saveLanguage(this), void this.setLang(this.langs[i]);
    }, Service.prototype.getLanguage = function() {
        return this.srvLocalStorage.get("Locale", this.lang).code;
    }, Service.prototype.setLang = function(lang) {
        this.lang = lang;
        var langs = getLangParts(this.lang.code);
        this.lang1 = langs[0], this.lang2 = langs[1], this.lang3 = langs[2], this.numberPattern = this.numberPatterns[0], 
        this.datetimePattern = this.datetimePatterns[0];
        for (var i = this.langs.length - 1; i >= 0; i--) if (this.langs[i].code == this.lang3 || this.langs[i].code == this.lang2 || this.langs[i].code == this.lang1) {
            this.numberPattern = this.numberPatterns[i], this.datetimePattern = this.datetimePatterns[i];
            break;
        }
        saveLang(this), this.startLoading(function() {});
    }, Service.prototype.setCurrency = function(currency) {
        this.currency = currency, saveCurrency(this);
    }, Service.prototype.formatCurrency = function(amount, currencySymbol) {
        return "undefined" == typeof currencySymbol && (currencySymbol = this.currency), 
        formatDecimal(amount, this.numberPattern.currencyPattern, this.numberPattern.groupSeparator, this.numberPattern.decimalSeparator, 2).replace(/\u00A4/g, a4p.Utf8.decode(currencySymbol));
    }, Service.prototype.formatNumber = function(number, fractionSize) {
        return formatDecimal(number, this.numberPattern.decimalPattern, this.numberPattern.groupSeparator, this.numberPattern.decimalSeparator, fractionSize);
    }, Service.prototype.formatDate = function(date, format) {
        return formatDate(date, format, this.datetimePattern);
    };
    var DATE_FORMATS = {
        yyyy: dateGetter("FullYear", 4, 0, !1),
        yy: dateGetter("FullYear", 2, 0, !0),
        y: dateGetter("FullYear", 1, 0, !1),
        MMMM: dateStrGetter("Month", "month"),
        MMM: dateStrGetter("Month", "shortMonth"),
        MM: dateGetter("Month", 2, 1, !1),
        M: dateGetter("Month", 1, 1, !1),
        dd: dateGetter("Date", 2, 0, !1),
        d: dateGetter("Date", 1, 0, !1),
        HH: dateGetter("Hours", 2, 0, !1),
        H: dateGetter("Hours", 1, 0, !1),
        hh: dateGetter("Hours", 2, -12, !1),
        h: dateGetter("Hours", 1, -12, !1),
        mm: dateGetter("Minutes", 2, 0, !1),
        m: dateGetter("Minutes", 1, 0, !1),
        ss: dateGetter("Seconds", 2, 0, !1),
        s: dateGetter("Seconds", 1, 0, !1),
        EEEE: dateStrGetter("Day", "day"),
        EEE: dateStrGetter("Day", "shortDay"),
        a: ampmGetter,
        Z: timeZoneGetter
    }, DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/, NUMBER_STRING = /^\d+$/, R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:[T ](\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d{3}))?)?)?((Z)?|([+-])(\d\d):?(\d\d)))?$/;
    return Service.prototype.getMonths = function() {
        var localeMonths = [ {
            idx: 0,
            name: this.translations.htmlTextJanuary,
            shortName: this.translations.htmlTextShortJanuary
        }, {
            idx: 1,
            name: this.translations.htmlTextFebruary,
            shortName: this.translations.htmlTextShortFebruary
        }, {
            idx: 2,
            name: this.translations.htmlTextMarch,
            shortName: this.translations.htmlTextShortMarch
        }, {
            idx: 3,
            name: this.translations.htmlTextApril,
            shortName: this.translations.htmlTextShortApril
        }, {
            idx: 4,
            name: this.translations.htmlTextMay,
            shortName: this.translations.htmlTextShortMay
        }, {
            idx: 5,
            name: this.translations.htmlTextJune,
            shortName: this.translations.htmlTextShortJune
        }, {
            idx: 6,
            name: this.translations.htmlTextJuly,
            shortName: this.translations.htmlTextShortJuly
        }, {
            idx: 7,
            name: this.translations.htmlTextAugust,
            shortName: this.translations.htmlTextShortAugust
        }, {
            idx: 8,
            name: this.translations.htmlTextSeptember,
            shortName: this.translations.htmlTextShortSeptember
        }, {
            idx: 9,
            name: this.translations.htmlTextOctober,
            shortName: this.translations.htmlTextShortOctober
        }, {
            idx: 10,
            name: this.translations.htmlTextNovember,
            shortName: this.translations.htmlTextShortNovember
        }, {
            idx: 11,
            name: this.translations.htmlTextDecember,
            shortName: this.translations.htmlTextShortDecember
        } ];
        return localeMonths;
    }, Service.prototype.getHoursDay = function() {
        for (var hours = [], i = 0; 24 > i; i++) {
            var h = "" + i;
            h.length < 2 && (h = "0" + h);
            var text = h, cssClass = "";
            (9 > i || i >= 12 && 14 > i || i >= 19) && (cssClass = "c4p-color");
            var hour = {
                hour: i,
                text: text,
                cssClass: cssClass
            };
            hours.push(hour);
        }
        return hours;
    }, Service;
}(), SrvLog = function() {
    function Service() {
        this.userLog = new a4p.Log(nbUserMax), this.internalLog = a4p.InternalLog, this.internalLog.setNbMax(nbInternalMax), 
        this.errorLog = a4p.ErrorLog, this.errorLog.setNbMax(nbErrorMax), this.message = "", 
        this.read = !0, this.initDone = !1;
    }
    function logMessage(self, showUser, type, timeout, msg, details) {
        (a4p.isUndefined(msg) || null == msg) && self.errorLog.log("srvLog", "Warning log message undefined : type=" + type + ", timeout=" + timeout + ", msg=" + msg + ", details=" + details, 2), 
        showUser && ("function" == typeof noty && noty({
            text: msg,
            layout: "bottomRight",
            timeout: timeout,
            type: type
        }), self.userLog.log(type + ":" + msg, null, 2)), "error" == type ? self.errorLog.log(msg, details, 2) : self.internalLog.log(msg, details, 2);
    }
    var nbErrorMax = 1e3, nbInternalMax = 1e3, nbUserMax = 100;
    return Service.prototype.init = function() {
        this.initDone || (this.initDone = !0, a4p.InternalLog.log("srvLog", "initialized"));
    }, Service.prototype.getUserLog = function() {
        return this.userLog.getLog();
    }, Service.prototype.getInternalLog = function() {
        return this.internalLog.getLog();
    }, Service.prototype.getErrorLog = function() {
        return this.errorLog.getLog();
    }, Service.prototype.logSuccess = function(showUser, msg, details) {
        logMessage(this, showUser, "success", 5e3, msg, details);
    }, Service.prototype.logInfo = function(showUser, msg, details) {
        logMessage(this, showUser, "information", 7e3, msg, details);
    }, Service.prototype.logWarning = function(showUser, msg, details) {
        logMessage(this, showUser, "alert", 15e3, msg, details);
    }, Service.prototype.logError = function(showUser, msg, details) {
        logMessage(this, showUser, "error", 15e3, msg, details);
    }, Service.prototype.userLogPersistentMessage = function(msg) {
        this.message = msg, this.read = !1, logMessage(this, !0, "alert", !1, msg);
    }, Service.prototype.setInfoRead = function() {
        this.read = !0;
    }, Service;
}(), SrvModel = function() {
    function Service() {
        this.model = c4p.Model, Service.prototype.getObjectTypeColor = function(objectType) {
            return this.model.a4p_types[objectType].colorType;
        };
    }
    return Service;
}(), SrvNav = function() {
    function Service(exceptionHandlerService, srvData, srvLocale, srvConfig) {
        this.exceptionHandler = exceptionHandlerService, this.srvData = srvData, this.srvLocale = srvLocale, 
        this.srvConfig = srvConfig, this.item = null, this.current = null, this.history = [], 
        this.holdItem = null, this.attacheeDocuments = [], this.attendeeContacts = [], this.attendees = [], 
        this.childDocuments = [], this.childNotes = [], this.childReports = [], this.imageRelatedList = [], 
        this.itemRelatedList = {}, this.itemRelatedGroupList = [], this.itemRelatedGroupMap = {}, 
        this.itemRelatedGroup = null, this.callbackHandle = 0, this.callbacksUpdate = [];
        var self = this;
        this.srvData.addListenerOnUpdate(function(callbackId, action, type, id) {
            if ("clear" == action || "init" == action) self.clearHistory(); else if ("add" == action || "set" == action) {
                var object = srvData.getObject(id);
                self.item && (self.item.id.dbid == id && (self.item = object, self.current = {
                    page: self.current.page,
                    slide: self.current.slide,
                    itemName: srvConfig.getItemName(self.item),
                    itemIcon: c4p.Model.getItemIcon(self.item),
                    itemColor: c4p.Model.getItemColor(self.item),
                    itemThumbUrl: self.item.thumb_url,
                    itemRelationCount: 0,
                    type: self.item.a4p_type,
                    id: self.item.id.dbid,
                    pageHistory: self.current.pageHistory
                }), self.updateLinks() && triggerUpdate(self, "update"));
            } else if ("remove" == action) {
                if (self.removeFromHistory("", "", id), null != self.current && self.current.id == id && (self.current = null, 
                self.item = null, self.attacheeDocuments = [], self.attendeeContacts = [], self.attendees = [], 
                self.childDocuments = [], self.childNotes = [], self.childReports = [], self.imageRelatedList = [], 
                self.itemRelatedList = {}, self.itemRelatedGroupList = [], self.itemRelatedGroupMap = {}, 
                self.itemRelatedGroup = null, self.history.length > 0)) {
                    var back = self.history.shift();
                    null != back && (back.id ? self.goto(back.page, back.slide, self.srvData.getObject(back.id)) : self.goto(back.page, back.slide));
                }
                self.updateLinks() && triggerUpdate(self, "update");
            }
        });
    }
    function triggerUpdate(self, action, page, slide, id) {
        for (var callbacks = self.callbacksUpdate.slice(0), idx = 0, max = callbacks.length; max > idx; idx++) try {
            callbacks[idx].callback(callbacks[idx].id, action, page, slide, id);
        } catch (e) {
            self.exceptionHandler(e, "srvNav.callbacksUpdate#" + idx);
        }
    }
    var acceptedLinkNamesMap = {
        manager: !0,
        managed: !0,
        parent: !0,
        child: !0,
        accounter: !0,
        accounted: !0,
        faceter: !0,
        faceted: !0,
        affecter: !0,
        affected: !0,
        mail_to: !0,
        mailed_from: !0,
        join_to: !0,
        joined_from: !0,
        attended: !0,
        attendee: !0,
        attached: !0,
        attachee: !0,
        leader: !0,
        led: !0,
        owner: !1,
        owned: !1,
        creator: !1,
        created: !1,
        modifier: !1,
        modified: !1
    };
    return Service.prototype.backInHistory = function(index) {
        if (a4p.isUndefined(index) && null != this.current && this.current.pageHistory.length > 0) {
            var backPage = this.current.pageHistory[0];
            return this.current.pageHistory.splice(0, 1), this.goto(backPage.page, backPage.slide, this.srvData.getObject(this.current.id)), 
            this.current;
        }
        if (this.history.length > index) {
            this.item = null, this.current = null, this.attacheeDocuments = [], this.attendeeContacts = [], 
            this.attendees = [], this.childDocuments = [], this.childNotes = [], this.childReports = [], 
            this.imageRelatedList = [], this.itemRelatedList = {}, this.itemRelatedGroupList = [], 
            this.itemRelatedGroupMap = {}, this.itemRelatedGroup = null, this.holdStopItem();
            var back = this.history[index];
            return this.history.splice(0, 1 + index), back.id ? this.goto(back.page, back.slide, this.srvData.getObject(back.id)) : this.goto(back.page, back.slide), 
            back;
        }
        return null != this.current ? (this.history = [], this.item = null, this.current = null, 
        this.attacheeDocuments = [], this.attendeeContacts = [], this.attendees = [], this.childDocuments = [], 
        this.childNotes = [], this.childReports = [], this.imageRelatedList = [], this.itemRelatedList = {}, 
        this.itemRelatedGroupList = [], this.itemRelatedGroupMap = {}, this.itemRelatedGroup = null, 
        this.holdStopItem(), triggerUpdate(this, "clear"), null) : null;
    }, Service.prototype.gotoInHistory = function(index) {
        if (a4p.isUndefined(index) && (index = 0), this.history.length > index) {
            this.holdStopItem();
            var back = this.history[index];
            return back.id ? this.goto(back.page, back.slide, this.srvData.getObject(back.id)) : this.goto(back.page, back.slide), 
            back;
        }
        return null;
    }, Service.prototype.lastInHistoryWithType = function(type) {
        if (null != this.current && this.current.type == type) return this.current;
        for (var i = 0; i < this.history.length; i++) {
            var back = this.history[i];
            if (back.type == type) return back;
        }
        return null;
    }, Service.prototype.goto = function(page, slide, item) {
        if (null != this.current) if (item) if (this.current.id != item.id.dbid) {
            var current = {
                page: this.current.page,
                slide: this.current.slide,
                itemName: this.current.itemName,
                itemIcon: this.current.itemIcon,
                itemColor: this.current.itemColor,
                itemRelationCount: this.current.itemRelationCount,
                itemThumbUrl: this.current.thumb_url,
                type: this.current.type,
                id: this.current.id,
                pageHistory: this.current.pageHistory
            };
            this.removeFromHistory(current.page, current.slide, current.id), this.history.unshift(current);
        } else {
            if (this.current.page == page && this.current.slide == slide) return;
            for (var i = this.current.pageHistory.length - 1; i >= 0; i--) {
                var backPage = this.current.pageHistory[i];
                backPage.page == this.current.page && backPage.slide == this.current.slide && this.current.pageHistory.splice(i, 1);
            }
            this.current.pageHistory.unshift({
                page: this.current.page,
                slide: this.current.slide
            });
        } else {
            if (!a4p.isDefined(this.current.id) && this.current.page == page && this.current.slide == slide) return;
            var current = {
                page: this.current.page,
                slide: this.current.slide,
                itemName: this.current.itemName,
                itemIcon: this.current.itemIcon,
                itemColor: this.current.itemColor,
                itemRelationCount: this.current.itemRelationCount,
                itemThumbUrl: this.current.thumb_url,
                type: this.current.type,
                id: this.current.id,
                pageHistory: this.current.pageHistory
            };
            this.removeFromHistory(current.page, current.slide, current.id), this.history.unshift(current);
        }
        if (this.item = item || null, this.item) {
            if (this.current && this.current.id == item.id.dbid) {
                if (this.current.page != page || this.current.slide != slide) {
                    for (var i = this.current.pageHistory.length - 1; i >= 0; i--) {
                        var backPage = this.current.pageHistory[i];
                        backPage.page == page && backPage.slide == slide && this.current.pageHistory.splice(i, 1);
                    }
                    this.current.page = page, this.current.slide = slide;
                }
                this.current.itemName = this.srvConfig.getItemName(this.item), this.current.itemIcon = c4p.Model.getItemIcon(this.item), 
                this.current.itemColor = c4p.Model.getItemColor(this.item), this.current.itemRelationCount = 0, 
                this.current.itemThumbUrl = this.item.thumb_url, this.current.type = this.item.a4p_type;
            } else this.current = {
                page: page,
                slide: slide,
                itemName: this.srvConfig.getItemName(this.item),
                itemIcon: c4p.Model.getItemIcon(this.item),
                itemColor: c4p.Model.getItemColor(this.item),
                itemRelationCount: 0,
                itemThumbUrl: this.item.thumb_url,
                type: this.item.a4p_type,
                id: this.item.id.dbid,
                pageHistory: []
            };
            this.updateLinks();
        } else this.current = {
            page: page,
            slide: slide,
            itemName: "",
            itemIcon: "",
            itemColor: "",
            itemRelationCount: 0,
            itemThumbUrl: "",
            type: "",
            id: "",
            pageHistory: []
        }, this.attacheeDocuments = [], this.attendeeContacts = [], this.attendees = [], 
        this.childDocuments = [], this.childNotes = [], this.childReports = [], this.imageRelatedList = [], 
        this.itemRelatedList = {}, this.itemRelatedGroupList = [], this.itemRelatedGroupMap = {}, 
        this.itemRelatedGroup = null;
        this.holdStopItem(), this.removeFromHistory(this.current.page, this.current.slide, this.current.id), 
        triggerUpdate(this, "goto", page, slide, this.current.id);
    }, Service.prototype.clearHistory = function() {
        (null != this.item || this.history.length > 0) && (this.item = null, this.current = null, 
        this.history = [], this.attacheeDocuments = [], this.attendeeContacts = [], this.attendees = [], 
        this.childDocuments = [], this.childNotes = [], this.childReports = [], this.imageRelatedList = [], 
        this.itemRelatedList = {}, this.itemRelatedGroupList = [], this.itemRelatedGroupMap = {}, 
        this.itemRelatedGroup = null, this.holdStopItem(), triggerUpdate(this, "clear"));
    }, Service.prototype.removeFromHistory = function(page, slide, id) {
        if (a4p.isDefined(id) && "" != id) for (var i = this.history.length - 1; i >= 0; i--) {
            var back = this.history[i];
            back.id == id && this.history.splice(i, 1);
        } else for (var i = this.history.length - 1; i >= 0; i--) {
            var back = this.history[i];
            !a4p.isUndefined(back.id) && "" != back.id || back.page != page || back.slide != slide || this.history.splice(i, 1);
        }
    }, Service.prototype.holdStartItem = function(holdItem) {
        this.holdItem = holdItem, triggerUpdate(this, "holdStart");
    }, Service.prototype.holdStopItem = function() {
        this.holdItem && (this.holdItem = null, triggerUpdate(this, "holdStop"));
    }, Service.prototype.addListenerOnUpdate = function(fct) {
        return this.callbackHandle++, this.callbacksUpdate.push({
            id: this.callbackHandle,
            callback: fct
        }), this.callbackHandle;
    }, Service.prototype.cancelListener = function(callbackHandle) {
        return removeIdFromList(this.callbacksUpdate, callbackHandle) !== !1;
    }, Service.prototype.updateLinks = function() {
        var change = !1;
        if (!this.item) return (this.attacheeDocuments.length || this.attendeeContacts.length || this.attendees.length || this.childDocuments.length || this.childNotes.length || this.childReports.length || this.itemRelatedGroupList.length || null != this.itemRelatedGroup) && (change = !0), 
        this.attacheeDocuments = [], this.attendeeContacts = [], this.attendees = [], this.childDocuments = [], 
        this.childNotes = [], this.childReports = [], this.imageRelatedList = [], this.itemRelatedList = {}, 
        this.itemRelatedGroupList = [], this.itemRelatedGroupMap = {}, this.itemRelatedGroup = null, 
        change;
        for (var attacheeDocuments = this.srvData.getTypedRemoteLinks(this.item, "attachee", "Document"), attendeeContacts = this.srvData.getTypedRemoteLinks(this.item, "attendee", "Contact"), attendees = this.srvData.getTypedDirectLinks(this.item, "attendee", "Attendee"), childDocuments = this.srvData.getTypedDirectLinks(this.item, "child", "Document"), childNotes = this.srvData.getTypedDirectLinks(this.item, "child", "Note"), childReports = this.srvData.getTypedDirectLinks(this.item, "child", "Report"), imageRelatedList = [], itemRelatedList = {}, itemRelatedGroupList = [], itemRelatedGroupMap = {}, itemRelatedGroup = this.itemRelatedGroup, relatedIdx = 0; relatedIdx < c4p.Model.objectTypes.length; relatedIdx++) {
            var relatedType = c4p.Model.objectTypes[relatedIdx];
            itemRelatedList[relatedType] = this.srvData.getRemoteObjects(this.item, relatedType, acceptedLinkNamesMap);
            var oldGroup = this.itemRelatedGroupMap[relatedType], group = {
                type: relatedType,
                colorType: c4p.Model.a4p_types[relatedType].colorType,
                name: this.srvLocale.translations.htmlTitleType[relatedType],
                icon: c4p.Model.getTypeIcon(relatedType),
                size: itemRelatedList[relatedType].length,
                show: !1
            };
            a4p.isDefinedAndNotNull(oldGroup) && (group.show = oldGroup.show), a4p.isUndefinedOrNull(oldGroup) || oldGroup.colorType != group.colorType || oldGroup.name != group.name || oldGroup.icon != group.icon || oldGroup.size != group.size ? (change = !0, 
            itemRelatedGroup && itemRelatedGroup.type == relatedType && (itemRelatedGroup = 0 == group.size ? null : group), 
            group.size && (itemRelatedGroupMap[relatedType] = group, itemRelatedGroupList.push(group))) : oldGroup.size && (itemRelatedGroupMap[relatedType] = oldGroup, 
            itemRelatedGroupList.push(oldGroup));
        }
        for (var imgIdx = 0, nbDoc = itemRelatedList.Document.length; nbDoc > imgIdx; imgIdx++) c4p.Model.isImage(itemRelatedList.Document[imgIdx].item.extension) && imageRelatedList.push(itemRelatedList.Document[imgIdx].item);
        return change || attacheeDocuments.length == this.attacheeDocuments.length || (change = !0), 
        change || attendeeContacts.length == this.attendeeContacts.length || (change = !0), 
        change || attendees.length == this.attendees.length || (change = !0), change || childDocuments.length == this.childDocuments.length || (change = !0), 
        change || childNotes.length == this.childNotes.length || (change = !0), change || childReports.length == this.childReports.length || (change = !0), 
        change || itemRelatedGroupList.length == this.itemRelatedGroupList.length || (change = !0), 
        this.attacheeDocuments = attacheeDocuments, this.attendeeContacts = attendeeContacts, 
        this.attendees = attendees, this.childDocuments = childDocuments, this.childNotes = childNotes, 
        this.childReports = childReports, this.imageRelatedList = imageRelatedList, this.itemRelatedList = itemRelatedList, 
        this.itemRelatedGroupList = itemRelatedGroupList, this.itemRelatedGroupMap = itemRelatedGroupMap, 
        this.itemRelatedGroup = itemRelatedGroup, this.current.itemRelationCount = itemRelatedList.length, 
        change;
    }, Service;
}(), SrvOpenUrl = function() {
    function Service(exceptionHandlerService) {
        this.exceptionHandler = exceptionHandlerService, this.callbacks = [], this.callbackHandle = 0;
    }
    return Service.prototype.addListener = function(fct) {
        return this.callbackHandle++, this.callbacks.push({
            id: this.callbackHandle,
            callback: fct
        }), this.callbackHandle;
    }, Service.prototype.cancelListener = function(callbackHandle) {
        return removeIdFromList(this.callbacks, callbackHandle) !== !1;
    }, Service.prototype.openUrl = function(url) {
        for (var callbacks = this.callbacks.slice(0), idx = 0, max = callbacks.length; max > idx; idx++) try {
            callbacks[idx].callback(callbacks[idx].id, url);
        } catch (e) {
            this.exceptionHandler(e, "SrvOpenUrl.callbacks#" + idx);
        }
    }, Service;
}(), SrvRunning = function() {
    function Service(exceptionHandlerService) {
        this.exceptionHandler = exceptionHandlerService, this.refresh = !1, this.pause = !1, 
        this.online = !0, this.callbacksRefresh = [], this.callbacksPause = [], this.callbacksOnline = [], 
        this.callbackHandle = 0;
    }
    function triggerRefresh(self, yes) {
        for (var callbacks = self.callbacksRefresh.slice(0), idx = 0, max = callbacks.length; max > idx; idx++) try {
            callbacks[idx].callback(callbacks[idx].id, yes);
        } catch (e) {
            self.exceptionHandler(e, "srvRunning.callbacksRefresh#" + idx);
        }
    }
    function triggerPause(self, yes) {
        for (var callbacks = self.callbacksPause.slice(0), idx = 0, max = callbacks.length; max > idx; idx++) try {
            callbacks[idx].callback(callbacks[idx].id, yes);
        } catch (e) {
            self.exceptionHandler(e, "srvRunning.callbacksPause#" + idx);
        }
    }
    function triggerOnline(self, yes) {
        for (var callbacks = self.callbacksOnline.slice(0), idx = 0, max = callbacks.length; max > idx; idx++) try {
            callbacks[idx].callback(callbacks[idx].id, yes);
        } catch (e) {
            self.exceptionHandler(e, "srvRunning.callbacksOnline#" + idx);
        }
    }
    return Service.prototype.setRefresh = function(yes) {
        this.refresh = yes, triggerRefresh(this, yes);
    }, Service.prototype.setPause = function(yes) {
        this.pause = yes, triggerPause(this, yes);
    }, Service.prototype.setOnline = function(yes) {
        this.online = yes, triggerOnline(this, yes);
    }, Service.prototype.addListenerOnRefresh = function(fct) {
        return this.callbackHandle++, this.callbacksRefresh.push({
            id: this.callbackHandle,
            callback: fct
        }), this.callbackHandle;
    }, Service.prototype.addListenerOnPause = function(fct) {
        return this.callbackHandle++, this.callbacksPause.push({
            id: this.callbackHandle,
            callback: fct
        }), this.callbackHandle;
    }, Service.prototype.addListenerOnOnline = function(fct) {
        return this.callbackHandle++, this.callbacksOnline.push({
            id: this.callbackHandle,
            callback: fct
        }), this.callbackHandle;
    }, Service.prototype.cancelListener = function(callbackHandle) {
        return removeIdFromList(this.callbacksRefresh, callbackHandle) === !1 && removeIdFromList(this.callbacksPause, callbackHandle) === !1 ? removeIdFromList(this.callbacksOnline, callbackHandle) !== !1 : !0;
    }, Service;
}(), SrvSecurity = function() {
    function Service(srvLocalStorage) {
        this.srvLocalStorage = srvLocalStorage, this.secured = !1, this.expected = "", this.login = "", 
        this.password = "", this.serverToken = "", this.initDone = !1;
    }
    return Service.prototype.init = function() {
        this.initDone || (this.secured = this.srvLocalStorage.get("AuthSecured", !1), this.expected = this.srvLocalStorage.get("AuthExpected", ""), 
        this.login = this.srvLocalStorage.get("AuthLogin", ""), a4p.InternalLog.log("srvSecurity", "init : login=" + a4pDumpData(this.login, 2)), 
        this.password = this.srvLocalStorage.get("AuthPassword", ""), this.serverToken = this.srvLocalStorage.get("AuthServerToken", ""), 
        this.initDone = !0, a4p.InternalLog.log("srvSecurity", "initialized"));
    }, Service.prototype.resetPINCode = function() {
        this.secured = !1, this.expected = "", this.srvLocalStorage.set("AuthSecured", !1), 
        this.srvLocalStorage.set("AuthExpected", "");
    }, Service.prototype.setSecured = function(secured) {
        this.secured = secured, this.srvLocalStorage.set("AuthSecured", this.secured);
    }, Service.prototype.isSecured = function() {
        return this.secured;
    }, Service.prototype.isVerified = function() {
        return this.expected.length > 0;
    }, Service.prototype.register = function(password) {
        a4p.InternalLog.log("srvSecurity", "authenticate registering new password"), this.expected = password, 
        this.srvLocalStorage.set("AuthExpected", this.expected);
    }, Service.prototype.verify = function(password) {
        return password == this.expected ? (a4p.InternalLog.log("srvSecurity", "authenticate success"), 
        !0) : (a4p.ErrorLog.log("srvSecurity", "authenticate failure"), !1);
    }, Service.prototype.setDemo = function() {
        this.setA4pLogin(""), this.setA4pPassword(""), this.setC4pServerToken("");
    }, Service.prototype.setA4pLogin = function(login) {
        this.login != login && (this.login = login, this.srvLocalStorage.set("AuthLogin", this.login), 
        a4p.InternalLog.log("srvSecurity", "setA4pLogin : login=" + a4pDumpData(this.login, 2))), 
        this.setC4pServerToken("");
    }, Service.prototype.setA4pPassword = function(password) {
        this.password != password && (this.password = password, this.srvLocalStorage.set("AuthPassword", this.password)), 
        this.setC4pServerToken("");
    }, Service.prototype.setC4pServerToken = function(serverToken) {
        this.serverToken != serverToken && (this.serverToken = serverToken, this.srvLocalStorage.set("AuthServerToken", this.serverToken));
    }, Service.prototype.getA4pLogin = function() {
        return this.login;
    }, Service.prototype.getA4pPassword = function() {
        return this.password;
    }, Service.prototype.getHttpRequestToken = function() {
        var time = Math.floor(new Date().getTime() / 1e3), md5 = calcMD5(time.toString() + "|" + this.login + "|" + this.password);
        return time + "|" + md5 + "|" + this.serverToken;
    }, Service;
}(), SrvSynchro = function() {
    function Service(qService, srvDataTransfer, srvFileTransfer, exceptionHandlerService, srvRunning, srvLocalStorage, srvSecurity) {
        this.q = qService, this.dataTransfer = srvDataTransfer, this.fileTransfer = srvFileTransfer, 
        this.exceptionHandler = exceptionHandlerService, this.srvRunning = srvRunning, this.srvLocalStorage = srvLocalStorage, 
        this.srvSecurity = srvSecurity, this.pingUrl = "", this.pinging = !1, this.initDone = !1, 
        this.state = Service.READY, this.serverState = Service.READY, this.pendingRequests = [], 
        this.requestHandle = 0, this.callbacksStart = [], this.callbacksError = [], this.callbacksCancel = [], 
        this.callbacksSuccess = [], this.callbackHandle = 0;
    }
    function triggerStart(self, request) {
        for (var callbacks = self.callbacksStart.slice(0), idx = 0, max = callbacks.length; max > idx; idx++) if (request.channel == callbacks[idx].channel) try {
            callbacks[idx].callback(callbacks[idx].id, request.id, request.ctx, request.nbTry);
        } catch (e) {
            self.exceptionHandler(e, "SrvSynchro.callbacksStart#" + idx);
        }
    }
    function triggerCancel(self, request) {
        for (var callbacks = self.callbacksCancel.slice(0), idx = 0, max = callbacks.length; max > idx; idx++) if (request.channel == callbacks[idx].channel) try {
            callbacks[idx].callback(callbacks[idx].id, request.id, request.ctx, request.nbTry);
        } catch (e) {
            self.exceptionHandler(e, "SrvSynchro.callbacksCancel#" + idx);
        }
    }
    function triggerError(self, request, message) {
        for (var callbacks = self.callbacksError.slice(0), idx = 0, max = callbacks.length; max > idx; idx++) if (request.channel == callbacks[idx].channel) try {
            callbacks[idx].callback(callbacks[idx].id, request.id, request.ctx, request.nbTry, message);
        } catch (e) {
            self.exceptionHandler(e, "SrvSynchro.callbacksError#" + idx);
        }
    }
    function triggerSuccess(self, request, responseCode, responseData, responseHeaders) {
        for (var callbacks = self.callbacksSuccess.slice(0), idx = 0, max = callbacks.length; max > idx; idx++) if (request.channel == callbacks[idx].channel) try {
            callbacks[idx].callback(callbacks[idx].id, request.id, request.ctx, request.nbTry, responseCode, responseData, responseHeaders);
        } catch (e) {
            self.exceptionHandler(e, "SrvSynchro.callbacksSuccess#" + idx);
        }
    }
    function pause(self) {
        self.state != Service.PAUSE && (a4p.InternalLog.log("srvSynchro", "state pause"), 
        self.state = Service.PAUSE);
    }
    function resume(self) {
        self.state == Service.PAUSE && (a4p.InternalLog.log("srvSynchro", "state resume"), 
        self.state = Service.READY, self.serverState == Service.READY ? sendNextRequest(self) : checkServerStatus(self));
    }
    function checkServerStatus(self) {
        if (self.serverState != Service.READY && self.state == Service.READY && !(self.pingUrl.length <= 0 || self.pinging)) {
            self.pinging = !0;
            var fctOnHttpSuccess = function(response) {
                if (a4p.isUndefined(response.data)) return void setTimeout(function() {
                    self.pinging = !1, checkServerStatus(self);
                }, 6e4);
                var responseOk = response.data.responseOK;
                return a4p.isUndefined(responseOk) || !responseOk ? void setTimeout(function() {
                    self.pinging = !1, checkServerStatus(self);
                }, 6e4) : (self.pinging = !1, void self.serverOk());
            }, fctOnHttpError = function() {
                setTimeout(function() {
                    self.pinging = !1, checkServerStatus(self);
                }, 6e4);
            };
            a4p.InternalLog.log("srvSynchro", "pinging server"), self.dataTransfer.recvData(self.pingUrl).then(fctOnHttpSuccess, fctOnHttpError);
        }
    }
    function sendNextRequest(self) {
        if (self.initDone && self.serverState == Service.READY && self.state == Service.READY && !(self.pendingRequests.length <= 0)) {
            self.state = Service.SENDING;
            var request = self.pendingRequests[0];
            request.nbTry++;
            var requestId = request.id, fctOnHttpSuccess = function(response) {
                a4p.InternalLog.log("srvSynchro", "sendNextRequest success : " + response.status + " : " + response.data);
                var request = self.pendingRequests[0];
                self.tryAgain = !1, a4p.isDefined(request) && requestId == request.id ? (triggerSuccess(self, request, response.status, response.data, response.headers), 
                self.state != Service.PAUSE && (self.state = Service.READY, self.serverState != Service.READY && checkServerStatus(self)), 
                self.tryAgain && request.nbTry <= 10 ? setTimeout(function() {
                    sendNextRequest(self);
                }, 1e3 * request.nbTry * request.nbTry) : (self.pendingRequests.length > 0 && self.pendingRequests[0].id == requestId && self.pendingRequests.splice(0, 1), 
                setTimeout(function() {
                    sendNextRequest(self);
                }, 100))) : (self.state != Service.PAUSE && (self.state = Service.READY, self.serverState != Service.READY && checkServerStatus(self)), 
                setTimeout(function() {
                    sendNextRequest(self);
                }, 100));
            }, fctOnHttpError = function(response) {
                a4p.InternalLog.log("srvSynchro", "sendNextRequest error : " + response.status + " : " + response.data);
                var request = self.pendingRequests[0];
                a4p.isDefined(request) && requestId == request.id ? (triggerError(self, request, response.data), 
                self.state != Service.PAUSE && (self.state = Service.READY, self.serverState != Service.READY && checkServerStatus(self)), 
                a4p.InternalLog.log("srvSynchro", "sendNextRequest retry : " + request.id + " # " + request.nbTry), 
                request.nbTry > 10 ? (self.pendingRequests.length > 0 && self.pendingRequests[0].id == requestId && self.pendingRequests.splice(0, 1), 
                setTimeout(function() {
                    sendNextRequest(self);
                }, 100)) : setTimeout(function() {
                    sendNextRequest(self);
                }, 1e3 * request.nbTry * request.nbTry)) : (a4p.InternalLog.log("srvSynchro", "sendNextRequest cancel already done " + request.id + " # " + request.nbTry), 
                self.state != Service.PAUSE && (self.state = Service.READY, self.serverState != Service.READY && checkServerStatus(self)), 
                setTimeout(function() {
                    a4p.InternalLog.log("srvSynchro", "sendNextRequest WHY ?"), sendNextRequest(self);
                }, 100));
            };
            triggerStart(self, request), a4p.InternalLog.log("srvSynchro", "sendNextRequest send " + request.id + " # " + request.nbTry), 
            null != request.filePath ? (a4p.InternalLog.log("srvSynchro", "sendNextRequest send file " + request.url), 
            "post" == request.method.toLowerCase() ? (request.params.c4pToken = self.srvSecurity.getHttpRequestToken(), 
            self.fileTransfer.sendFile(request.filePath, request.options, request.url, request.params, request.headers).then(fctOnHttpSuccess, fctOnHttpError)) : request.url.indexOf("?") >= 0 ? self.fileTransfer.recvFile(request.filePath, request.url + "&c4pToken=" + encodeURIComponent(self.srvSecurity.getHttpRequestToken())).then(fctOnHttpSuccess, fctOnHttpError) : self.fileTransfer.recvFile(request.filePath, request.url + "?c4pToken=" + encodeURIComponent(self.srvSecurity.getHttpRequestToken())).then(fctOnHttpSuccess, fctOnHttpError)) : "post" == request.method.toLowerCase() ? (request.params.c4pToken = self.srvSecurity.getHttpRequestToken(), 
            self.dataTransfer.sendData(request.url, request.params, request.headers).then(fctOnHttpSuccess, fctOnHttpError)) : request.url.indexOf("?") >= 0 ? self.dataTransfer.recvData(request.url + "&c4pToken=" + encodeURIComponent(self.srvSecurity.getHttpRequestToken())).then(fctOnHttpSuccess, fctOnHttpError) : self.dataTransfer.recvData(request.url + "?c4pToken=" + encodeURIComponent(self.srvSecurity.getHttpRequestToken())).then(fctOnHttpSuccess, fctOnHttpError);
        }
    }
    return Service.READY = 1, Service.SENDING = 2, Service.PAUSE = 3, Service.prototype.init = function() {
        if (!this.initDone) {
            var self = this;
            this.onlineHandle = this.srvRunning.addListenerOnOnline(function(callbackId, isOnline) {
                isOnline ? resume(self) : pause(self);
            }), this.srvRunning.online ? (a4p.InternalLog.log("srvSynchro", "start as ready"), 
            this.state = Service.READY) : (a4p.InternalLog.log("srvSynchro", "start in pause"), 
            this.state = Service.PAUSE), this.serverState = Service.READY, this.initDone = !0, 
            a4p.InternalLog.log("srvSynchro", "initialized");
        }
    }, Service.prototype.reset = function() {
        this.initDone && (this.srvRunning.cancelListener(this.onlineHandle), this.initDone = !1, 
        this.state = Service.READY, this.serverState = Service.READY);
    }, Service.prototype.setPingUrl = function(pingUrl) {
        this.pingUrl = pingUrl, checkServerStatus(this);
    }, Service.prototype.addListenerOnStart = function(channel, fct) {
        return this.callbackHandle++, this.callbacksStart.push({
            id: this.callbackHandle,
            channel: channel,
            callback: fct
        }), this.callbackHandle;
    }, Service.prototype.addListenerOnError = function(channel, fct) {
        return this.callbackHandle++, this.callbacksError.push({
            id: this.callbackHandle,
            channel: channel,
            callback: fct
        }), this.callbackHandle;
    }, Service.prototype.addListenerOnCancel = function(channel, fct) {
        return this.callbackHandle++, this.callbacksCancel.push({
            id: this.callbackHandle,
            channel: channel,
            callback: fct
        }), this.callbackHandle;
    }, Service.prototype.addListenerOnSuccess = function(channel, fct) {
        return this.callbackHandle++, this.callbacksSuccess.push({
            id: this.callbackHandle,
            channel: channel,
            callback: fct
        }), this.callbackHandle;
    }, Service.prototype.cancelListener = function(callbackHandle) {
        return removeIdFromList(this.callbacksStart, callbackHandle) === !1 && removeIdFromList(this.callbacksError, callbackHandle) === !1 && removeIdFromList(this.callbacksCancel, callbackHandle) === !1 ? removeIdFromList(this.callbacksSuccess, callbackHandle) !== !1 : !0;
    }, Service.prototype.addRequest = function(channel, ctx, url, method, params, headers) {
        if (this.requestHandle++, "undefined" == typeof ctx || null == ctx) throw new Error("SrvSynchro.send requires a ctx parameter");
        if ("undefined" == typeof url || null == url) throw new Error("SrvSynchro.send requires a url parameter");
        if ("undefined" == typeof method || null == method) throw new Error("SrvSynchro.send requires a method parameter");
        "undefined" == typeof params && (params = null), "undefined" == typeof headers && (headers = null);
        var request = {
            id: this.requestHandle,
            channel: channel,
            ctx: ctx,
            url: url,
            method: method,
            params: params,
            headers: headers,
            nbTry: 0
        };
        return this.pendingRequests.push(request), sendNextRequest(this), this.requestHandle;
    }, Service.prototype.addFileRequest = function(channel, ctx, url, method, params, filePath, headers, options) {
        if (this.requestHandle++, "undefined" == typeof ctx || null == ctx) throw new Error("SrvSynchro.send requires a ctx parameter");
        if ("undefined" == typeof url || null == url) throw new Error("SrvSynchro.send requires a url parameter");
        if ("undefined" == typeof method || null == method) throw new Error("SrvSynchro.send requires a method parameter");
        "undefined" == typeof params && (params = null), "undefined" == typeof headers && (headers = null);
        var request = {
            id: this.requestHandle,
            channel: channel,
            ctx: ctx,
            url: url,
            method: method,
            params: params,
            filePath: filePath,
            headers: headers,
            options: options,
            nbTry: 0
        };
        return this.pendingRequests.push(request), sendNextRequest(this), this.requestHandle;
    }, Service.prototype.cancelRequest = function(requestHandle) {
        for (var idx = this.pendingRequests.length - 1; idx >= 0; idx--) if (this.pendingRequests[idx].id == requestHandle) {
            var request = this.pendingRequests[idx];
            return this.pendingRequests.splice(idx, 1), triggerCancel(this, request), 0 == idx && setTimeout(function() {
                sendNextRequest(this);
            }, 100), !0;
        }
        return !1;
    }, Service.prototype.clearChannel = function(channel) {
        for (var found = !1, firstRemoved = !1, idx = this.pendingRequests.length - 1; idx >= 0; idx--) if (this.pendingRequests[idx].channel == channel) {
            var request = this.pendingRequests[idx];
            this.pendingRequests.splice(idx, 1), triggerCancel(this, request), 0 == idx && (firstRemoved = !0), 
            found = !0;
        }
        return firstRemoved && setTimeout(function() {
            sendNextRequest(this);
        }, 100), found;
    }, Service.prototype.nbPendingRequests = function() {
        return this.pendingRequests.length;
    }, Service.prototype.tryAgainCurrentRequest = function() {
        this.tryAgain = !0;
    }, Service.prototype.serverHs = function() {
        this.serverState != Service.PAUSE && (a4p.InternalLog.log("srvSynchro", "serverState pause"), 
        this.serverState = Service.PAUSE, this.state == Service.READY && checkServerStatus(this));
    }, Service.prototype.serverOk = function() {
        this.serverState == Service.PAUSE && (a4p.InternalLog.log("srvSynchro", "serverState resume"), 
        this.serverState = Service.READY, this.state == Service.READY && sendNextRequest(this));
    }, Service;
}(), SrvTime = function() {
    function setNow(self, now) {
        self.now = now, setSecond(self, now);
    }
    function setSecond(self, now) {
        self.second != now.getSeconds() && (self.second = now.getSeconds(), setMinute(self, now), 
        triggerSecond(self));
    }
    function setMinute(self, now) {
        self.minute != now.getMinutes() && (self.minute = now.getMinutes(), setHour(self, now), 
        triggerMinute(self));
    }
    function setHour(self, now) {
        self.hour != now.getHours() && (self.hour = now.getHours(), setDay(self, now), triggerHour(self));
    }
    function setDay(self, now) {
        self.day != now.getDate() && (self.day = now.getDate(), setMonth(self, now), triggerDay(self));
    }
    function setMonth(self, now) {
        self.month != now.getMonth() + 1 && (self.month = now.getMonth() + 1, setYear(self, now), 
        triggerMonth(self));
    }
    function setYear(self, now) {
        self.year != now.getFullYear() && (self.year = now.getFullYear(), triggerYear(self));
    }
    function Service(exceptionHandlerService) {
        this.exceptionHandler = exceptionHandlerService, this.now = new Date(), this.year = this.now.getFullYear(), 
        this.month = this.now.getMonth() + 1, this.day = this.now.getDate(), this.hour = this.now.getHours(), 
        this.minute = this.now.getMinutes(), this.second = this.now.getSeconds(), this.callbacksYear = [], 
        this.callbacksMonth = [], this.callbacksDay = [], this.callbacksHour = [], this.callbacksMinute = [], 
        this.callbacksSecond = [], this.callbackHandle = 0;
        var self = this;
        !function tick() {
            setNow(self, new Date()), window.setTimeout(tick, 1e3);
        }();
    }
    function triggerYear(self) {
        for (var callbacks = self.callbacksYear.slice(0), idx = 0, max = callbacks.length; max > idx; idx++) try {
            callbacks[idx].callback(callbacks[idx].id, self.now);
        } catch (e) {
            self.exceptionHandler(e, "SrvTime.callbacksYear#" + idx);
        }
    }
    function triggerMonth(self) {
        for (var callbacks = self.callbacksMonth.slice(0), idx = 0, max = callbacks.length; max > idx; idx++) try {
            callbacks[idx].callback(callbacks[idx].id, self.now);
        } catch (e) {
            self.exceptionHandler(e, "SrvTime.callbacksMonth#" + idx);
        }
    }
    function triggerDay(self) {
        for (var callbacks = self.callbacksDay.slice(0), idx = 0, max = callbacks.length; max > idx; idx++) try {
            callbacks[idx].callback(callbacks[idx].id, self.now);
        } catch (e) {
            self.exceptionHandler(e, "SrvTime.callbacksDay#" + idx);
        }
    }
    function triggerHour(self) {
        for (var callbacks = self.callbacksHour.slice(0), idx = 0, max = callbacks.length; max > idx; idx++) try {
            callbacks[idx].callback(callbacks[idx].id, self.now);
        } catch (e) {
            self.exceptionHandler(e, "SrvTime.callbacksHour#" + idx);
        }
    }
    function triggerMinute(self) {
        for (var callbacks = self.callbacksMinute.slice(0), idx = 0, max = callbacks.length; max > idx; idx++) try {
            callbacks[idx].callback(callbacks[idx].id, self.now);
        } catch (e) {
            self.exceptionHandler(e, "SrvTime.callbacksMinute#" + idx);
        }
    }
    function triggerSecond(self) {
        for (var callbacks = self.callbacksSecond.slice(0), idx = 0, max = callbacks.length; max > idx; idx++) try {
            callbacks[idx].callback(callbacks[idx].id, self.now);
        } catch (e) {
            self.exceptionHandler(e, "SrvTime.callbacksSecond#" + idx);
        }
    }
    return Service.prototype.addListenerOnYear = function(fct) {
        return this.callbackHandle++, this.callbacksYear.push({
            id: this.callbackHandle,
            callback: fct
        }), this.callbackHandle;
    }, Service.prototype.addListenerOnMonth = function(fct) {
        return this.callbackHandle++, this.callbacksMonth.push({
            id: this.callbackHandle,
            callback: fct
        }), this.callbackHandle;
    }, Service.prototype.addListenerOnDay = function(fct) {
        return this.callbackHandle++, this.callbacksDay.push({
            id: this.callbackHandle,
            callback: fct
        }), this.callbackHandle;
    }, Service.prototype.addListenerOnHour = function(fct) {
        return this.callbackHandle++, this.callbacksHour.push({
            id: this.callbackHandle,
            callback: fct
        }), this.callbackHandle;
    }, Service.prototype.addListenerOnMinute = function(fct) {
        return this.callbackHandle++, this.callbacksMinute.push({
            id: this.callbackHandle,
            callback: fct
        }), this.callbackHandle;
    }, Service.prototype.addListenerOnSecond = function(fct) {
        return this.callbackHandle++, this.callbacksSecond.push({
            id: this.callbackHandle,
            callback: fct
        }), this.callbackHandle;
    }, Service.prototype.cancelListener = function(callbackHandle) {
        return removeIdFromList(this.callbacksYear, callbackHandle) === !1 && removeIdFromList(this.callbacksMonth, callbackHandle) === !1 && removeIdFromList(this.callbacksDay, callbackHandle) === !1 && removeIdFromList(this.callbacksHour, callbackHandle) === !1 && removeIdFromList(this.callbacksMinute, callbackHandle) === !1 ? removeIdFromList(this.callbacksSecond, callbackHandle) !== !1 : !0;
    }, Service;
}(), appModule = angular.module("c4p", [ "ngAnimate", "ngTouch", "ngSanitize", "ui.bootstrap", "c4pFilters", "c4pServices", "c4pDirectives", "c4pTemplates" ]);

appModule.value("version", "14S17");

var serviceModule = angular.module("c4pServices", [ "ngResource" ]);

appModule.factory("$exceptionHandler", [ "$log", function($log) {
    function formatError(arg) {
        return arg instanceof Error && (arg.stack ? arg = arg.message && -1 === arg.stack.indexOf(arg.message) ? "Error: " + arg.message + "\n" + arg.stack : arg.stack : arg.sourceURL && (arg = arg.message + "\n" + arg.sourceURL + ":" + arg.line)), 
        arg;
    }
    return function(exception, cause) {
        try {
            a4p.ErrorLog.log(formatError(exception), formatError(cause) + ", " + navigator.userAgent + ", " + navigator.vendor + ", " + navigator.platform), 
            $log.error.apply($log, arguments);
        } catch (e) {}
    };
} ]), console.log("cordovaReady creation"), serviceModule.factory("cordovaReady", [ "$window", "$rootScope", function($window, $rootScope) {
    return function(userCallback) {
        var queue = [], impl = function() {
            queue.push(Array.prototype.slice.call(arguments));
        }, readyCallback = function() {
            queue.forEach(function(args) {
                userCallback.apply(this, args);
            }), impl = userCallback;
        };
        return null !== $window.navigator.userAgent.toLowerCase().match(/(iphone|ipod|ipad|android|blackberry|webos|symbian|ios|bada|tizen|windows phone)/) ? $window.document.addEventListener("deviceready", function() {
            a4p.safeApply($rootScope, function() {
                console.log("invokeString" in window ? "onDeviceReady: " + window.invokeString : "onDeviceReady: no invokeString"), 
                readyCallback();
            });
        }, !1) : null !== $window.navigator.userAgent.toLowerCase().match(/(firefox|msie|opera|chrome|safari|windows nt 6.2)/) ? (console.log("cordovaReady No Cordova : cordovaReady() is called immediately"), 
        readyCallback()) : (console.log("cordovaReady Cordova or not : cordovaReady() is called in 10 seconds"), 
        setTimeout(function() {
            a4p.safeApply($rootScope, function() {
                readyCallback();
            });
        }, 1e4)), function() {
            return impl.apply(this, arguments);
        };
    };
} ]);

var srvOpenUrlSingleton = null;

serviceModule.factory("srvOpenUrl", [ "$exceptionHandler", function($exceptionHandler) {
    return srvOpenUrlSingleton = new SrvOpenUrl($exceptionHandler);
} ]), serviceModule.factory("srvTime", [ "$exceptionHandler", function($exceptionHandler) {
    return new SrvTime($exceptionHandler);
} ]), serviceModule.factory("srvModel", function() {
    return new SrvModel();
}), serviceModule.factory("srvLoad", function() {
    return new SrvLoad();
}), serviceModule.factory("srvRunning", [ "$window", "$rootScope", "$exceptionHandler", "cordovaReady", function($window, $rootScope, $exceptionHandler, cordovaReady) {
    var runningSingleton = new SrvRunning($exceptionHandler);
    return a4p.isDefined($window.navigator) && a4p.isDefined($window.navigator.onLine) && runningSingleton.setOnline($window.navigator.onLine), 
    cordovaReady(function() {
        $window.document.addEventListener("pause", function() {
            console.log("srvRunning onPause"), a4p.safeApply($rootScope, function() {
                runningSingleton.setPause(!0);
            });
        }, !1), $window.document.addEventListener("resume", function() {
            console.log("srvRunning onResume"), a4p.safeApply($rootScope, function() {
                runningSingleton.setPause(!1);
            });
        }, !1), $window.document.addEventListener("online", function() {
            a4p.safeApply($rootScope, function() {
                runningSingleton.setOnline(!0);
            });
        }, !1), $window.document.addEventListener("offline", function() {
            a4p.safeApply($rootScope, function() {
                runningSingleton.setOnline(!1);
            });
        }, !1), $window.document.addEventListener("resign", function() {}, !1), $window.document.addEventListener("active", function() {}, !1), 
        $window.document.addEventListener("backbutton", function() {
            $window.navigator.notification.confirm("Are you sure you want to EXIT the program ?", function(button) {
                ("1" == button || 1 == button) && $window.navigator.app.exitApp();
            }, "EXIT :", "OK,Cancel");
        }, !1);
    })(), runningSingleton;
} ]), serviceModule.factory("srvLocalStorage", function() {
    var LocalStorage = a4p.LocalStorageFactory(window.localStorage);
    return new LocalStorage();
}), serviceModule.factory("srvFileStorage", [ "$q", "$rootScope", function($q, $rootScope) {
    return new a4p.FileStorage($q, $rootScope);
} ]), serviceModule.factory("srvAnalytics", [ "srvLocalStorage", function(srvLocalStorage) {
    return new a4p.Analytics(srvLocalStorage, "UA-33541085-3");
} ]), serviceModule.factory("srvLog", [ "srvLocalStorage", function(srvLocalStorage) {
    return new SrvLog(srvLocalStorage);
} ]), serviceModule.factory("srvSecurity", [ "srvLocalStorage", function(srvLocalStorage) {
    return new SrvSecurity(srvLocalStorage);
} ]), serviceModule.factory("srvDataTransfer", [ "$q", "$http", "$rootScope", function($q, $http, $rootScope) {
    return new SrvDataTransfer($q, $http, $rootScope);
} ]), serviceModule.factory("srvFileTransfer", [ "$q", "$http", "srvFileStorage", "$rootScope", function($q, $http, srvFileStorage, $rootScope) {
    return new SrvFileTransfer($q, $http, srvFileStorage, $rootScope);
} ]), serviceModule.factory("srvConfig", [ "srvDataTransfer", "srvLoad", "srvLocalStorage", "srvAnalytics", function(srvDataTransfer, srvLoad, srvLocalStorage, srvAnalytics) {
    return new SrvConfig(srvDataTransfer, srvLoad, srvLocalStorage, srvAnalytics);
} ]), serviceModule.factory("srvLocale", [ "$http", "srvLoad", "srvLocalStorage", function($http, srvLoad, srvLocalStorage) {
    return new SrvLocale($http, srvLoad, srvLocalStorage);
} ]), serviceModule.factory("srvSynchro", [ "$q", "srvDataTransfer", "srvFileTransfer", "$exceptionHandler", "srvRunning", "srvLocalStorage", "srvSecurity", function($q, srvDataTransfer, srvFileTransfer, $exceptionHandler, srvRunning, srvLocalStorage, srvSecurity) {
    return new SrvSynchro($q, srvDataTransfer, srvFileTransfer, $exceptionHandler, srvRunning, srvLocalStorage, srvSecurity);
} ]), serviceModule.factory("srvData", [ "$exceptionHandler", "$q", "srvLocalStorage", "srvConfig", "srvLog", "srvLocale", "srvSecurity", "srvDataTransfer", "srvRunning", "srvSynchro", "srvFileStorage", "$rootScope", function($exceptionHandler, $q, srvLocalStorage, srvConfig, srvLog, srvLocale, srvSecurity, srvDataTransfer, srvRunning, srvSynchro, srvFileStorage, $rootScope) {
    return new SrvData($exceptionHandler, $q, srvLocalStorage, srvConfig, srvLog, srvLocale, srvSecurity, srvDataTransfer, srvRunning, srvSynchro, srvFileStorage, $rootScope);
} ]), serviceModule.factory("srvFacet", [ "srvData", "srvLocale", "srvConfig", function(srvData, srvLocale, srvConfig) {
    var srvFacet = new SrvFacet(srvData, srvLocale, srvConfig);
    return srvFacet.addPossibleOrganizerFacet(c4p.Organizer.objects), srvFacet.addPossibleOrganizerFacet(c4p.Organizer.top20), 
    srvFacet.addPossibleOrganizerFacet(c4p.Organizer.mine), srvFacet.addPossibleOrganizerFacet(c4p.Organizer.favorites), 
    srvFacet.addPossibleOrganizerFacet(c4p.Organizer.biblio), srvFacet.addPossibleOrganizerFacet(c4p.Organizer.month), 
    srvFacet.addPossibleOrganizerFacet(c4p.Organizer.week), srvFacet.addPossibleOrganizerFacet(c4p.Organizer.fileDir), 
    srvFacet;
} ]), serviceModule.factory("srvNav", [ "$exceptionHandler", "srvData", "srvLocale", "srvConfig", function($exceptionHandler, srvData, srvLocale, srvConfig) {
    return new SrvNav($exceptionHandler, srvData, srvLocale, srvConfig);
} ]), serviceModule.factory("srvLink", [ "srvData", "srvNav", "srvLocale", function(srvData, srvNav, srvLocale) {
    return new SrvLink(srvData, srvNav, srvLocale);
} ]), serviceModule.factory("srvGuider", [ "srvLocalStorage", "srvLocale", function(srvLocalStorage, srvLocale) {
    return new SrvGuider(srvLocalStorage, srvLocale);
} ]);

var filterModule = angular.module("c4pFilters", [ "c4pServices" ]);

filterModule.filter("interpolate", [ "version", function(version) {
    return function(text) {
        return String(text).replace(/\%VERSION\%/gm, version);
    };
} ]), filterModule.filter("c4pCurrency", [ "srvLocale", function(srvLocale) {
    return function(amount, currencySymbol) {
        return srvLocale.formatCurrency(amount, currencySymbol);
    };
} ]), filterModule.filter("c4pNumber", [ "srvLocale", function(srvLocale) {
    return function(number, fractionSize) {
        return srvLocale.formatNumber(number, fractionSize);
    };
} ]), filterModule.filter("accountNameFilter", function() {
    return function(itemList, accountQuery) {
        if (accountQuery.length <= 0) return "";
        itemList = itemList || new Array();
        for (var j = 0; j < itemList.length; j++) {
            var item = itemList[j];
            if (item.id.dbid == accountQuery) return item.company_name;
        }
        return "";
    };
}), filterModule.filter("accountDisplayFilter", function() {
    return function(itemList, accountQuery) {
        if (accountQuery.length <= 0) return "display:none";
        itemList = itemList || new Array();
        for (var j = 0; j < itemList.length; j++) {
            var item = itemList[j];
            if (item.id.dbid == accountQuery) return "";
        }
        return "display:none";
    };
}), filterModule.filter("contactNameFilter", function() {
    return function(itemList, contactQuery) {
        if (contactQuery.length <= 0) return "";
        itemList = itemList || new Array();
        for (var j = 0; j < itemList.length; j++) {
            var item = itemList[j];
            if (item.id.dbid == contactQuery) return item.first_name + " " + item.last_name;
        }
        return "";
    };
}), filterModule.filter("contactDisplayFilter", function() {
    return function(itemList, contactQuery) {
        if (contactQuery.length <= 0) return "display:none";
        itemList = itemList || new Array();
        for (var j = 0; j < itemList.length; j++) {
            var item = itemList[j];
            if (item.id.dbid == contactQuery) return "";
        }
        return "display:none";
    };
}), filterModule.filter("eventNameFilter", function() {
    return function(itemList, eventQuery) {
        if (eventQuery.length <= 0) return "";
        itemList = itemList || new Array();
        for (var j = 0; j < itemList.length; j++) {
            var item = itemList[j];
            if (item.id.dbid == eventQuery) return item.name;
        }
        return "";
    };
}), filterModule.filter("eventDisplayFilter", function() {
    return function(itemList, eventQuery) {
        if (eventQuery.length <= 0) return "display:none";
        itemList = itemList || new Array();
        for (var j = 0; j < itemList.length; j++) {
            var item = itemList[j];
            if (item.id.dbid == eventQuery) return "";
        }
        return "display:none";
    };
}), filterModule.filter("opportunityNameFilter", function() {
    return function(itemList, opportunityQuery) {
        if (opportunityQuery.length <= 0) return "";
        itemList = itemList || new Array();
        for (var j = 0; j < itemList.length; j++) {
            var item = itemList[j];
            if (item.id.dbid == opportunityQuery) return item.name;
        }
        return "";
    };
}), filterModule.filter("opportunityDisplayFilter", function() {
    return function(itemList, opportunityQuery) {
        if (opportunityQuery.length <= 0) return "display:none";
        itemList = itemList || new Array();
        for (var j = 0; j < itemList.length; j++) {
            var item = itemList[j];
            if (item.id.dbid == opportunityQuery) return "";
        }
        return "display:none";
    };
}), filterModule.filter("documentNameFilter", function() {
    return function(itemList, documentQuery) {
        if (documentQuery.length <= 0) return "";
        itemList = itemList || new Array();
        for (var j = 0; j < itemList.length; j++) {
            var item = itemList[j];
            if (item.id.dbid == documentQuery) return item.name;
        }
        return "";
    };
}), filterModule.filter("documentDisplayFilter", function() {
    return function(itemList, documentQuery) {
        if (documentQuery.length <= 0) return "display:none";
        itemList = itemList || new Array();
        for (var j = 0; j < itemList.length; j++) {
            var item = itemList[j];
            if (item.id.dbid == documentQuery) return "";
        }
        return "display:none";
    };
}), filterModule.filter("inObjectListFilter", function() {
    return function(itemList, inObjectList, query, caseSensitive) {
        var filteredInObjectList = [];
        itemList = itemList || [];
        for (var itemRejectIdx = 0; itemRejectIdx < itemList.length; itemRejectIdx++) {
            for (var itemReject = itemList[itemRejectIdx], accepted = !0, inIdx = 0; inIdx < inObjectList.length; inIdx++) if (itemReject.id.dbid == inObjectList[inIdx].id.dbid) {
                accepted = !1;
                break;
            }
            accepted && filteredInObjectList.push(itemReject);
        }
        itemList = filteredInObjectList, query = query || "";
        var words = query.split(/\s/);
        if (!caseSensitive) for (var wordIdx = 0; wordIdx < words.length; wordIdx++) words[wordIdx] = words[wordIdx].toLowerCase();
        for (var filteredList = [], itemIdx = 0; itemIdx < itemList.length; itemIdx++) {
            for (var item = itemList[itemIdx], acceptItem = !0, i = 0; i < words.length; i++) {
                var word = words[i], acceptWord = !1;
                for (var k in item) if (item.hasOwnProperty(k)) {
                    var attr = item[k];
                    if ("string" == typeof attr && (caseSensitive || (attr = attr.toLowerCase()), attr.indexOf(word) >= 0)) {
                        acceptWord = !0;
                        break;
                    }
                }
                if (!acceptWord) {
                    acceptItem = !1;
                    break;
                }
            }
            acceptItem && filteredList.push(item);
        }
        return filteredList;
    };
}), filterModule.filter("listFilter", function() {
    return function(itemList, query, caseSensitive, whiteAttribute) {
        query = query || "", itemList = itemList || [];
        for (var words = query.split(/\s/), filteredList = [], j = 0; j < itemList.length; j++) {
            var item = itemList[j], acceptItem = !0;
            if (a4p.isUndefined(whiteAttribute) || !item[whiteAttribute]) for (var i = 0; i < words.length; i++) {
                var word = words[i];
                caseSensitive || (word = word.toLowerCase());
                var acceptWord = !1;
                for (var k in item) if (item.hasOwnProperty(k)) {
                    var attr = item[k];
                    if ("string" == typeof attr && (caseSensitive || (attr = attr.toLowerCase()), attr.indexOf(word) >= 0)) {
                        acceptWord = !0;
                        break;
                    }
                }
                if (!acceptWord) {
                    acceptItem = !1;
                    break;
                }
            }
            acceptItem && filteredList.push(item);
        }
        return filteredList;
    };
}), filterModule.filter("c4pFilterEventDateMoreThan", function() {
    return function(itemList, date) {
        var dateDayRounded = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0), items = [];
        itemList = itemList || new Array();
        for (var j = 0; j < itemList.length; j++) {
            var item = itemList[j];
            item.date >= dateDayRounded && items.push(item);
        }
        return items;
    };
}), filterModule.filter("c4pFilterEventDateContains", function() {
    return function(itemList, date) {
        var items = [];
        itemList = itemList || new Array();
        for (var j = 0; j < itemList.length; j++) {
            var item = itemList[j];
            if (item.date > date || date > item.date) {
                if (item.date < date) for (var i = 0; i < item.eventsAllDay.length; i++) {
                    var evtStart = a4pDateParse(item.eventsAllDay[i].date_start), evtEnd = a4pDateParse(item.eventsAllDay[i].date_end);
                    date >= evtStart && evtEnd > date && items.push(item);
                }
            } else items.push(item);
        }
        return items;
    };
}), filterModule.filter("c4pExludeNameFilter", function() {
    return function(itemList, nameToExludeArray) {
        var items = [];
        itemList = itemList || [];
        for (var j = 0; j < itemList.length; j++) {
            for (var item = itemList[j], present = !1, i = 0; i < nameToExludeArray.length; i++) {
                var name = nameToExludeArray[i].name;
                if (item.name == name) {
                    present = !0;
                    break;
                }
            }
            present || items.push(item);
        }
        return items;
    };
}), filterModule.filter("c4pItemTypeFilter", function() {
    return function(itemList, typeToIncludeInArray) {
        var items = [];
        itemList = itemList || [];
        for (var j = 0; j < itemList.length; j++) {
            var item = itemList[j];
            item && item.item && item.item.a4p_type === typeToIncludeInArray && items.push(item);
        }
        return items;
    };
}), filterModule.filter("c4pLinksWithCreation", function() {
    return function(itemList) {
        var items = [];
        itemList = itemList || [];
        for (var j = 0; j < itemList.length; j++) {
            var item = itemList[j];
            item && item.creation && items.push(item);
        }
        return items;
    };
}), filterModule.filter("c4pLinksWithoutCreation", function() {
    return function(itemList) {
        var items = [];
        itemList = itemList || [];
        for (var j = 0; j < itemList.length; j++) {
            var item = itemList[j];
            item && !item.creation && items.push(item);
        }
        return items;
    };
});